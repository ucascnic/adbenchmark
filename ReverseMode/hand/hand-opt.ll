; ModuleID = 'hand-raw.ll'
source_filename = "hand.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"struct.std::array.159" = type { [400 x i8] }
%"struct.std::array.160" = type { [100 x %"struct.std::array.161"] }
%"struct.std::array.161" = type { [2 x i8] }
%"struct.std::array.163" = type { [79 x %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power"] }
%"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" = type { i64, i32, i32 }
%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl" }
%"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl" = type { %"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl_data" }
%"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl_data" = type { %"class.std::__cxx11::basic_string"*, %"class.std::__cxx11::basic_string"*, %"class.std::__cxx11::basic_string"* }
%"class.std::__cxx11::basic_string" = type { %"struct.std::__cxx11::basic_string<char>::_Alloc_hider", i64, %union.anon }
%"struct.std::__cxx11::basic_string<char>::_Alloc_hider" = type { i8* }
%union.anon = type { i64, [8 x i8] }
%struct.__dirstream = type opaque
%struct.dirent = type { i64, i64, i16, i8, [256 x i8] }
%struct.timeval = type { i64, i64 }
%class.HandModelLightMatrix = type <{ %"class.std::vector", %"class.std::vector.3", %"class.std::vector.8", %"class.std::vector.8", %class.LightMatrix, %class.LightMatrix, %"class.std::vector.13", i8, [7 x i8] }>
%"class.std::vector.3" = type { %"struct.std::_Vector_base.4" }
%"struct.std::_Vector_base.4" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" = type { i32*, i32*, i32* }
%"class.std::vector.8" = type { %"struct.std::_Vector_base.9" }
%"struct.std::_Vector_base.9" = type { %"struct.std::_Vector_base<LightMatrix<double>, std::allocator<LightMatrix<double>>>::_Vector_impl" }
%"struct.std::_Vector_base<LightMatrix<double>, std::allocator<LightMatrix<double>>>::_Vector_impl" = type { %"struct.std::_Vector_base<LightMatrix<double>, std::allocator<LightMatrix<double>>>::_Vector_impl_data" }
%"struct.std::_Vector_base<LightMatrix<double>, std::allocator<LightMatrix<double>>>::_Vector_impl_data" = type { %class.LightMatrix*, %class.LightMatrix*, %class.LightMatrix* }
%class.LightMatrix = type { i8, i32, i32, double* }
%"class.std::vector.13" = type { %"struct.std::_Vector_base.14" }
%"struct.std::_Vector_base.14" = type { %"struct.std::_Vector_base<Triangle, std::allocator<Triangle>>::_Vector_impl" }
%"struct.std::_Vector_base<Triangle, std::allocator<Triangle>>::_Vector_impl" = type { %"struct.std::_Vector_base<Triangle, std::allocator<Triangle>>::_Vector_impl_data" }
%"struct.std::_Vector_base<Triangle, std::allocator<Triangle>>::_Vector_impl_data" = type { %struct.Triangle*, %struct.Triangle*, %struct.Triangle* }
%struct.Triangle = type { [3 x i32] }
%"class.std::basic_ifstream" = type { %"class.std::basic_istream.base", %"class.std::basic_filebuf", %"class.std::basic_ios" }
%"class.std::basic_istream.base" = type { i32 (...)**, i64 }
%"class.std::basic_filebuf" = type { %"class.std::basic_streambuf", %union.pthread_mutex_t, %"class.std::__basic_file", i32, %struct.__mbstate_t, %struct.__mbstate_t, %struct.__mbstate_t, i8*, i64, i8, i8, i8, i8, i8*, i8*, i8, %"class.std::codecvt"*, i8*, i64, i8*, i8* }
%"class.std::basic_streambuf" = type { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, %"class.std::locale" }
%"class.std::locale" = type { %"class.std::locale::_Impl"* }
%"class.std::locale::_Impl" = type { i32, %"class.std::locale::facet"**, i64, %"class.std::locale::facet"**, i8** }
%"class.std::locale::facet" = type <{ i32 (...)**, i32, [4 x i8] }>
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.std::__basic_file" = type <{ %struct._IO_FILE*, i8, [7 x i8] }>
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.__mbstate_t = type { i32, %union.anon.18 }
%union.anon.18 = type { i32 }
%"class.std::codecvt" = type { %"class.std::__codecvt_abstract_base.base", %struct.__locale_struct* }
%"class.std::__codecvt_abstract_base.base" = type { %"class.std::locale::facet.base" }
%"class.std::locale::facet.base" = type <{ i32 (...)**, i32 }>
%struct.__locale_struct = type { [13 x %struct.__locale_data*], i16*, i32*, i32*, [13 x i8*] }
%struct.__locale_data = type opaque
%"class.std::basic_ios" = type { %"class.std::ios_base", %"class.std::basic_ostream"*, i8, i8, %"class.std::basic_streambuf"*, %"class.std::ctype"*, %"class.std::num_put"*, %"class.std::num_get"* }
%"class.std::ios_base" = type { i32 (...)**, i64, i64, i32, i32, i32, %"struct.std::ios_base::_Callback_list"*, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, %"struct.std::ios_base::_Words"*, %"class.std::locale" }
%"struct.std::ios_base::_Callback_list" = type { %"struct.std::ios_base::_Callback_list"*, void (i32, %"class.std::ios_base"*, i32)*, i32, i32 }
%"struct.std::ios_base::_Words" = type { i8*, i64 }
%"class.std::basic_ostream" = type { i32 (...)**, %"class.std::basic_ios" }
%"class.std::ctype" = type <{ %"class.std::locale::facet.base", [4 x i8], %struct.__locale_struct*, i8, [7 x i8], i32*, i32*, i16*, i8, [256 x i8], [256 x i8], i8, [6 x i8] }>
%"class.std::num_put" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::num_get" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::basic_istream" = type { i32 (...)**, i64, %"class.std::basic_ios" }
%class.HandDataLightMatrix = type { %class.HandModelLightMatrix, %"class.std::vector.3", %class.LightMatrix }
%"class.std::vector.19" = type { %"struct.std::_Vector_base.20" }
%"struct.std::_Vector_base.20" = type { %"struct.std::_Vector_base<double, std::allocator<double>>::_Vector_impl" }
%"struct.std::_Vector_base<double, std::allocator<double>>::_Vector_impl" = type { %"struct.std::_Vector_base<double, std::allocator<double>>::_Vector_impl_data" }
%"struct.std::_Vector_base<double, std::allocator<double>>::_Vector_impl_data" = type { double*, double*, double* }
%struct.HandObjectiveData = type { i32, i8**, i32*, %struct.Matrix*, %struct.Matrix*, %struct.Matrix, %struct.Matrix, %struct.Triangle*, i32, i32, i32*, %struct.Matrix }
%struct.Matrix = type { i32, i32, double* }
%struct.HandInput = type { %"class.std::vector.19", %class.HandDataLightMatrix, %"class.std::vector.19" }
%struct.HandOutput = type { %"class.std::vector.19", i32, i32, %"class.std::vector.19" }
%struct.Matrix_diff = type { double* }
%"class.std::basic_ofstream" = type { %"class.std::basic_ostream.base", %"class.std::basic_filebuf", %"class.std::basic_ios" }
%"class.std::basic_ostream.base" = type { i32 (...)** }
%"class.nlohmann::json_v3_11_1::basic_json" = type { i8, %"union.nlohmann::json_v3_11_1::basic_json<>::json_value" }
%"union.nlohmann::json_v3_11_1::basic_json<>::json_value" = type { %"class.std::map"* }
%"class.std::map" = type { %"class.std::_Rb_tree" }
%"class.std::_Rb_tree" = type { %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, nlohmann::json_v3_11_1::basic_json<>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, nlohmann::json_v3_11_1::basic_json<>>>, std::less<>>::_Rb_tree_impl" }
%"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, nlohmann::json_v3_11_1::basic_json<>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, nlohmann::json_v3_11_1::basic_json<>>>, std::less<>>::_Rb_tree_impl" = type { %"struct.std::_Rb_tree_key_compare", %"struct.std::_Rb_tree_header" }
%"struct.std::_Rb_tree_key_compare" = type { %"struct.std::less" }
%"struct.std::less" = type { i8 }
%"struct.std::_Rb_tree_header" = type { %"struct.std::_Rb_tree_node_base", i64 }
%"struct.std::_Rb_tree_node_base" = type { i32, %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"* }
%"class.std::vector.27" = type { %"struct.std::_Vector_base.28" }
%"struct.std::_Vector_base.28" = type { %"struct.std::_Vector_base<nlohmann::json_v3_11_1::basic_json<>, std::allocator<nlohmann::json_v3_11_1::basic_json<>>>::_Vector_impl" }
%"struct.std::_Vector_base<nlohmann::json_v3_11_1::basic_json<>, std::allocator<nlohmann::json_v3_11_1::basic_json<>>>::_Vector_impl" = type { %"struct.std::_Vector_base<nlohmann::json_v3_11_1::basic_json<>, std::allocator<nlohmann::json_v3_11_1::basic_json<>>>::_Vector_impl_data" }
%"struct.std::_Vector_base<nlohmann::json_v3_11_1::basic_json<>, std::allocator<nlohmann::json_v3_11_1::basic_json<>>>::_Vector_impl_data" = type { %"class.nlohmann::json_v3_11_1::basic_json"*, %"class.nlohmann::json_v3_11_1::basic_json"*, %"class.nlohmann::json_v3_11_1::basic_json"* }
%"class.nlohmann::json_v3_11_1::detail::serializer" = type <{ %"class.std::shared_ptr", %"struct.std::array", %struct.lconv*, i8, i8, %"struct.std::array.151", i8, [5 x i8], %"class.std::__cxx11::basic_string", i32, [4 x i8] }>
%"class.std::shared_ptr" = type { %"class.std::__shared_ptr" }
%"class.std::__shared_ptr" = type { %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, %"class.std::__shared_count" }
%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol" = type { i32 (...)** }
%"class.std::__shared_count" = type { %"class.std::_Sp_counted_base"* }
%"class.std::_Sp_counted_base" = type { i32 (...)**, i32, i32 }
%"struct.std::array" = type { [64 x i8] }
%struct.lconv = type { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%"struct.std::array.151" = type { [512 x i8] }
%"class.nlohmann::json_v3_11_1::byte_container_with_subtype" = type <{ %"class.std::vector.32", i64, i8, [7 x i8] }>
%"class.std::vector.32" = type { %"struct.std::_Vector_base.33" }
%"struct.std::_Vector_base.33" = type { %"struct.std::_Vector_base<unsigned char, std::allocator<unsigned char>>::_Vector_impl" }
%"struct.std::_Vector_base<unsigned char, std::allocator<unsigned char>>::_Vector_impl" = type { %"struct.std::_Vector_base<unsigned char, std::allocator<unsigned char>>::_Vector_impl_data" }
%"struct.std::_Vector_base<unsigned char, std::allocator<unsigned char>>::_Vector_impl_data" = type { i8*, i8*, i8* }
%"struct.std::_Rb_tree_node" = type { %"struct.std::_Rb_tree_node_base", %"struct.__gnu_cxx::__aligned_membuf" }
%"struct.__gnu_cxx::__aligned_membuf" = type { [48 x i8] }
%"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, nlohmann::json_v3_11_1::basic_json<>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, nlohmann::json_v3_11_1::basic_json<>>>, std::less<>>::_Alloc_node" = type { %"class.std::_Rb_tree"* }
%"class.std::_Sp_counted_ptr_inplace" = type { %"class.std::_Sp_counted_base", %"class.std::_Sp_counted_ptr_inplace<nlohmann::json_v3_11_1::detail::output_stream_adapter<char>, std::allocator<void>, __gnu_cxx::_S_atomic>::_Impl" }
%"class.std::_Sp_counted_ptr_inplace<nlohmann::json_v3_11_1::detail::output_stream_adapter<char>, std::allocator<void>, __gnu_cxx::_S_atomic>::_Impl" = type { %"struct.__gnu_cxx::__aligned_buffer" }
%"struct.__gnu_cxx::__aligned_buffer" = type { %"union.std::aligned_storage<16, 8>::type" }
%"union.std::aligned_storage<16, 8>::type" = type { [16 x i8] }
%"class.nlohmann::json_v3_11_1::detail::output_stream_adapter" = type { %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol", %"class.std::basic_ostream"* }
%"class.std::type_info" = type { i32 (...)**, i8* }
%"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::boundaries" = type { %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::diyfp", %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::diyfp", %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::diyfp" }
%"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::diyfp" = type <{ i64, i32, [4 x i8] }>

$_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEEixIKcEERSD_PT_ = comdat any

$_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_ = comdat any

$_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE9push_backEOSD_ = comdat any

$_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE9push_backERKSD_ = comdat any

$_ZN8nlohmann12json_v3_11_1lsERSoRKNS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES4_IhSaIhEEEE = comdat any

$_ZN20HandModelLightMatrixD2Ev = comdat any

$_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb = comdat any

$_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE10json_value7destroyENS0_6detail7value_tE = comdat any

$_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE7reserveEm = comdat any

$_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE17_M_realloc_insertIJSD_EEEvN9__gnu_cxx17__normal_iteratorIPSD_SF_EEDpOT_ = comdat any

$_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS5_blmdSaNS9_14adl_serializerESC_IhSaIhEEEEESt10_Select1stISH_ESt4lessIvESaISH_EE8_M_eraseEPSt13_Rb_tree_nodeISH_E = comdat any

$_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_ = comdat any

$_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_ = comdat any

$_ZNSt6vectorI11LightMatrixIdESaIS1_EE17_M_realloc_insertIJiiEEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_ = comdat any

$_ZNSt6vectorI8TriangleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_ = comdat any

$_ZNSt6vectorIiSaIiEE17_M_default_appendEm = comdat any

$_ZNSt6vectorIdSaIdEE17_M_default_appendEm = comdat any

$_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS5_blmdSaNS9_14adl_serializerESC_IhSaIhEEEEESt10_Select1stISH_ESt4lessIvESaISH_EE17_M_emplace_uniqueIJS5_DnEEES6_ISt17_Rb_tree_iteratorISH_EbEDpOT_ = comdat any

$_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS5_blmdSaNS9_14adl_serializerESC_IhSaIhEEEEESt10_Select1stISH_ESt4lessIvESaISH_EE24_M_get_insert_unique_posERS7_ = comdat any

$_ZN8nlohmann12json_v3_11_16detail20external_constructorILNS1_7value_tE3EE9constructINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES8_IhSaIhEEEEEEvRT_RKNSJ_8string_tE = comdat any

$_ZN8nlohmann12json_v3_11_16detail20external_constructorILNS1_7value_tE3EE9constructINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES8_IhSaIhEEEEA16_cLi0EEEvRT_RKT0_ = comdat any

$_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE17_M_realloc_insertIJRKSD_EEEvN9__gnu_cxx17__normal_iteratorIPSD_SF_EEDpOT_ = comdat any

$_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEEC2ERKSD_ = comdat any

$_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE6createIS2_IS9_SD_St4lessIvESaISt4pairIKS9_SD_EEEJRKSL_EEEPT_DpOT0_ = comdat any

$_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS5_blmdSaNS9_14adl_serializerESC_IhSaIhEEEEESt10_Select1stISH_ESt4lessIvESaISH_EE7_M_copyILb0ENSN_11_Alloc_nodeEEEPSt13_Rb_tree_nodeISH_ESS_PSt18_Rb_tree_node_baseRT0_ = comdat any

$_ZN8nlohmann12json_v3_11_16detail20external_constructorILNS1_7value_tE3EE9constructINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES8_IhSaIhEEEEA8_cLi0EEEvRT_RKT0_ = comdat any

$_ZN8nlohmann12json_v3_11_16detail20external_constructorILNS1_7value_tE3EE9constructINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES8_IhSaIhEEEEA12_cLi0EEEvRT_RKT0_ = comdat any

$_ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE4dumpERKSF_bbjj = comdat any

$_ZNSt23_Sp_counted_ptr_inplaceIN8nlohmann12json_v3_11_16detail21output_stream_adapterIcEESaIvELN9__gnu_cxx12_Lock_policyE2EED0Ev = comdat any

$_ZNSt23_Sp_counted_ptr_inplaceIN8nlohmann12json_v3_11_16detail21output_stream_adapterIcEESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv = comdat any

$_ZNSt23_Sp_counted_ptr_inplaceIN8nlohmann12json_v3_11_16detail21output_stream_adapterIcEESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv = comdat any

$_ZNSt23_Sp_counted_ptr_inplaceIN8nlohmann12json_v3_11_16detail21output_stream_adapterIcEESaIvELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info = comdat any

$_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EED2Ev = comdat any

$_ZN8nlohmann12json_v3_11_16detail21output_stream_adapterIcE15write_characterEc = comdat any

$_ZN8nlohmann12json_v3_11_16detail21output_stream_adapterIcE16write_charactersEPKcm = comdat any

$_ZN8nlohmann12json_v3_11_16detail21output_stream_adapterIcED0Ev = comdat any

$_ZN8nlohmann12json_v3_11_16detail23output_adapter_protocolIcED2Ev = comdat any

$_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE24_M_release_last_use_coldEv = comdat any

$_ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE12dump_escapedERKSB_b = comdat any

$_ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE12dump_integerIhLi0EEEvT_ = comdat any

$_ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE12dump_integerImLi0EEEvT_ = comdat any

$_ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE12dump_integerIlLi0EEEvT_ = comdat any

$_ZN8nlohmann12json_v3_11_16detail8to_charsIdEEPcS3_PKcT_ = comdat any

$_ZN8nlohmann12json_v3_11_16detail9dtoa_impl13format_bufferEPciiii = comdat any

$_ZN8nlohmann12json_v3_11_16detail9dtoa_impl18compute_boundariesIdEENS2_10boundariesET_ = comdat any

$_ZN8nlohmann12json_v3_11_16detail9dtoa_impl6grisu2EPcRiS4_NS2_5diyfpES5_S5_ = comdat any

$_ZN8nlohmann12json_v3_11_16detail9dtoa_impl36get_cached_power_for_binary_exponentEi = comdat any

$_ZN8nlohmann12json_v3_11_16detail9dtoa_impl16grisu2_digit_genEPcRiS4_NS2_5diyfpES5_S5_ = comdat any

$_ZN8nlohmann12json_v3_11_16detail9dtoa_impl12grisu2_roundEPcimmmm = comdat any

$_ZTVSt23_Sp_counted_ptr_inplaceIN8nlohmann12json_v3_11_16detail21output_stream_adapterIcEESaIvELN9__gnu_cxx12_Lock_policyE2EE = comdat any

$_ZTSSt23_Sp_counted_ptr_inplaceIN8nlohmann12json_v3_11_16detail21output_stream_adapterIcEESaIvELN9__gnu_cxx12_Lock_policyE2EE = comdat any

$_ZTSSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE = comdat any

$_ZTSSt11_Mutex_baseILN9__gnu_cxx12_Lock_policyE2EE = comdat any

$_ZTISt11_Mutex_baseILN9__gnu_cxx12_Lock_policyE2EE = comdat any

$_ZTISt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE = comdat any

$_ZTISt23_Sp_counted_ptr_inplaceIN8nlohmann12json_v3_11_16detail21output_stream_adapterIcEESaIvELN9__gnu_cxx12_Lock_policyE2EE = comdat any

$_ZTVN8nlohmann12json_v3_11_16detail21output_stream_adapterIcEE = comdat any

$_ZTSN8nlohmann12json_v3_11_16detail21output_stream_adapterIcEE = comdat any

$_ZTSN8nlohmann12json_v3_11_16detail23output_adapter_protocolIcEE = comdat any

$_ZTIN8nlohmann12json_v3_11_16detail23output_adapter_protocolIcEE = comdat any

$_ZTIN8nlohmann12json_v3_11_16detail21output_stream_adapterIcEE = comdat any

$_ZTSSt19_Sp_make_shared_tag = comdat any

$_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag = comdat any

$_ZZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE6decodeERhRjhE5utf8d = comdat any

$_ZZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE12dump_integerIhLi0EEEvT_E12digits_to_99 = comdat any

$_ZZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE12dump_integerImLi0EEEvT_E12digits_to_99 = comdat any

$_ZZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE12dump_integerIlLi0EEEvT_E12digits_to_99 = comdat any

$_ZZN8nlohmann12json_v3_11_16detail9dtoa_impl36get_cached_power_for_binary_exponentEiE13kCachedPowers = comdat any

@.str = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"..\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"%s/%s\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"/\\\00", align 1
@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external hidden global i8
@.str.7 = private unnamed_addr constant [10 x i8] c"bones.txt\00", align 1
@.str.8 = private unnamed_addr constant [13 x i8] c"vertices.txt\00", align 1
@.str.9 = private unnamed_addr constant [14 x i8] c"triangles.txt\00", align 1
@.str.13 = private unnamed_addr constant [32 x i8] c"simple_small/hand1_t26_c100.txt\00", align 1
@.str.14 = private unnamed_addr constant [13 x i8] c"results.json\00", align 1
@.str.15 = private unnamed_addr constant [18 x i8] c"starting path %s\0A\00", align 1
@.str.16 = private unnamed_addr constant [5 x i8] c"name\00", align 1
@.str.17 = private unnamed_addr constant [6 x i8] c"data/\00", align 1
@.str.18 = private unnamed_addr constant [7 x i8] c"model/\00", align 1
@.str.19 = private unnamed_addr constant [23 x i8] c"Enzyme combined %0.6f\0A\00", align 1
@.str.20 = private unnamed_addr constant [16 x i8] c"Enzyme combined\00", align 1
@.str.21 = private unnamed_addr constant [8 x i8] c"runtime\00", align 1
@.str.22 = private unnamed_addr constant [4 x i8] c"%f \00", align 1
@.str.23 = private unnamed_addr constant [7 x i8] c"result\00", align 1
@.str.24 = private unnamed_addr constant [6 x i8] c"tools\00", align 1
@.str.26 = private unnamed_addr constant [8 x i8] c"12.0.1 \00", align 1
@.str.27 = private unnamed_addr constant [13 x i8] c"llvm-version\00", align 1
@.str.28 = private unnamed_addr constant [12 x i8] c"ReverseMode\00", align 1
@.str.29 = private unnamed_addr constant [5 x i8] c"mode\00", align 1
@.str.30 = private unnamed_addr constant [11 x i8] c"batch-size\00", align 1
@enzyme_dup = external dso_local local_unnamed_addr global i32, align 4
@enzyme_const = external dso_local local_unnamed_addr global i32, align 4
@enzyme_dupnoneed = external dso_local local_unnamed_addr global i32, align 4
@.str.31 = private unnamed_addr constant [5 x i8] c"stoi\00", align 1
@.str.32 = private unnamed_addr constant [5 x i8] c"stod\00", align 1
@.str.33 = private unnamed_addr constant [21 x i8] c"basic_string::append\00", align 1
@.str.34 = private unnamed_addr constant [50 x i8] c"basic_string: construction from null is not valid\00", align 1
@.str.35 = private unnamed_addr constant [55 x i8] c"m_type != value_t::object || m_value.object != nullptr\00", align 1
@.str.36 = private unnamed_addr constant [28 x i8] c"./../adbench/../../json.hpp\00", align 1
@__PRETTY_FUNCTION__._ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb = private unnamed_addr constant [359 x i8] c"void nlohmann::basic_json<>::assert_invariant(bool) const [ObjectType = std::map, ArrayType = std::vector, StringType = std::basic_string<char>, BooleanType = bool, NumberIntegerType = long, NumberUnsignedType = unsigned long, NumberFloatType = double, AllocatorType = std::allocator, JSONSerializer = adl_serializer, BinaryType = std::vector<unsigned char>]\00", align 1
@.str.37 = private unnamed_addr constant [53 x i8] c"m_type != value_t::array || m_value.array != nullptr\00", align 1
@.str.38 = private unnamed_addr constant [55 x i8] c"m_type != value_t::string || m_value.string != nullptr\00", align 1
@.str.39 = private unnamed_addr constant [55 x i8] c"m_type != value_t::binary || m_value.binary != nullptr\00", align 1
@.str.40 = private unnamed_addr constant [16 x i8] c"vector::reserve\00", align 1
@.str.41 = private unnamed_addr constant [26 x i8] c"vector::_M_realloc_insert\00", align 1
@.str.42 = private unnamed_addr constant [21 x i8] c"basic_string::substr\00", align 1
@.str.43 = private unnamed_addr constant [55 x i8] c"%s: __pos (which is %zu) > this->size() (which is %zu)\00", align 1
@_ZTTSt14basic_ifstreamIcSt11char_traitsIcEE = external unnamed_addr constant [4 x i8*], align 8
@_ZTVSt13basic_filebufIcSt11char_traitsIcEE = external dso_local unnamed_addr constant { [16 x i8*] }, align 8
@_ZTVSt15basic_streambufIcSt11char_traitsIcEE = external dso_local unnamed_addr constant { [16 x i8*] }, align 8
@.str.45 = private unnamed_addr constant [26 x i8] c"vector::_M_default_append\00", align 1
@.str.46 = private unnamed_addr constant [49 x i8] c"cannot create std::vector larger than max_size()\00", align 1
@_ZTTSt14basic_ofstreamIcSt11char_traitsIcEE = external unnamed_addr constant [4 x i8*], align 8
@_ZTVSt23_Sp_counted_ptr_inplaceIN8nlohmann12json_v3_11_16detail21output_stream_adapterIcEESaIvELN9__gnu_cxx12_Lock_policyE2EE = linkonce_odr dso_local unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* bitcast ({ i8*, i8*, i8* }* @_ZTISt23_Sp_counted_ptr_inplaceIN8nlohmann12json_v3_11_16detail21output_stream_adapterIcEESaIvELN9__gnu_cxx12_Lock_policyE2EE to i8*), i8* bitcast (void (%"class.std::_Sp_counted_base"*)* @_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EED2Ev to i8*), i8* bitcast (void (%"class.std::_Sp_counted_ptr_inplace"*)* @_ZNSt23_Sp_counted_ptr_inplaceIN8nlohmann12json_v3_11_16detail21output_stream_adapterIcEESaIvELN9__gnu_cxx12_Lock_policyE2EED0Ev to i8*), i8* bitcast (void (%"class.std::_Sp_counted_ptr_inplace"*)* @_ZNSt23_Sp_counted_ptr_inplaceIN8nlohmann12json_v3_11_16detail21output_stream_adapterIcEESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv to i8*), i8* bitcast (void (%"class.std::_Sp_counted_ptr_inplace"*)* @_ZNSt23_Sp_counted_ptr_inplaceIN8nlohmann12json_v3_11_16detail21output_stream_adapterIcEESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv to i8*), i8* bitcast (i8* (%"class.std::_Sp_counted_ptr_inplace"*, %"class.std::type_info"*)* @_ZNSt23_Sp_counted_ptr_inplaceIN8nlohmann12json_v3_11_16detail21output_stream_adapterIcEESaIvELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info to i8*)] }, comdat, align 8
@_ZTVN10__cxxabiv120__si_class_type_infoE = external dso_local global i8*
@_ZTSSt23_Sp_counted_ptr_inplaceIN8nlohmann12json_v3_11_16detail21output_stream_adapterIcEESaIvELN9__gnu_cxx12_Lock_policyE2EE = linkonce_odr dso_local constant [122 x i8] c"St23_Sp_counted_ptr_inplaceIN8nlohmann12json_v3_11_16detail21output_stream_adapterIcEESaIvELN9__gnu_cxx12_Lock_policyE2EE\00", comdat, align 1
@_ZTSSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE = linkonce_odr dso_local constant [52 x i8] c"St16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE\00", comdat, align 1
@_ZTVN10__cxxabiv117__class_type_infoE = external dso_local global i8*
@_ZTSSt11_Mutex_baseILN9__gnu_cxx12_Lock_policyE2EE = linkonce_odr dso_local constant [47 x i8] c"St11_Mutex_baseILN9__gnu_cxx12_Lock_policyE2EE\00", comdat, align 1
@_ZTISt11_Mutex_baseILN9__gnu_cxx12_Lock_policyE2EE = linkonce_odr dso_local constant { i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv117__class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @_ZTSSt11_Mutex_baseILN9__gnu_cxx12_Lock_policyE2EE, i32 0, i32 0) }, comdat, align 8
@_ZTISt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE = linkonce_odr dso_local constant { i8*, i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv120__si_class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @_ZTSSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE, i32 0, i32 0), i8* bitcast ({ i8*, i8* }* @_ZTISt11_Mutex_baseILN9__gnu_cxx12_Lock_policyE2EE to i8*) }, comdat, align 8
@_ZTISt23_Sp_counted_ptr_inplaceIN8nlohmann12json_v3_11_16detail21output_stream_adapterIcEESaIvELN9__gnu_cxx12_Lock_policyE2EE = linkonce_odr dso_local constant { i8*, i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv120__si_class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([122 x i8], [122 x i8]* @_ZTSSt23_Sp_counted_ptr_inplaceIN8nlohmann12json_v3_11_16detail21output_stream_adapterIcEESaIvELN9__gnu_cxx12_Lock_policyE2EE, i32 0, i32 0), i8* bitcast ({ i8*, i8*, i8* }* @_ZTISt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE to i8*) }, comdat, align 8
@_ZTVN8nlohmann12json_v3_11_16detail21output_stream_adapterIcEE = linkonce_odr dso_local unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* bitcast ({ i8*, i8*, i8* }* @_ZTIN8nlohmann12json_v3_11_16detail21output_stream_adapterIcEE to i8*), i8* bitcast (void (%"class.nlohmann::json_v3_11_1::detail::output_stream_adapter"*, i8)* @_ZN8nlohmann12json_v3_11_16detail21output_stream_adapterIcE15write_characterEc to i8*), i8* bitcast (void (%"class.nlohmann::json_v3_11_1::detail::output_stream_adapter"*, i8*, i64)* @_ZN8nlohmann12json_v3_11_16detail21output_stream_adapterIcE16write_charactersEPKcm to i8*), i8* bitcast (void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*)* @_ZN8nlohmann12json_v3_11_16detail23output_adapter_protocolIcED2Ev to i8*), i8* bitcast (void (%"class.nlohmann::json_v3_11_1::detail::output_stream_adapter"*)* @_ZN8nlohmann12json_v3_11_16detail21output_stream_adapterIcED0Ev to i8*)] }, comdat, align 8
@_ZTSN8nlohmann12json_v3_11_16detail21output_stream_adapterIcEE = linkonce_odr dso_local constant [59 x i8] c"N8nlohmann12json_v3_11_16detail21output_stream_adapterIcEE\00", comdat, align 1
@_ZTSN8nlohmann12json_v3_11_16detail23output_adapter_protocolIcEE = linkonce_odr dso_local constant [61 x i8] c"N8nlohmann12json_v3_11_16detail23output_adapter_protocolIcEE\00", comdat, align 1
@_ZTIN8nlohmann12json_v3_11_16detail23output_adapter_protocolIcEE = linkonce_odr dso_local constant { i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv117__class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([61 x i8], [61 x i8]* @_ZTSN8nlohmann12json_v3_11_16detail23output_adapter_protocolIcEE, i32 0, i32 0) }, comdat, align 8
@_ZTIN8nlohmann12json_v3_11_16detail21output_stream_adapterIcEE = linkonce_odr dso_local constant { i8*, i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv120__si_class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([59 x i8], [59 x i8]* @_ZTSN8nlohmann12json_v3_11_16detail21output_stream_adapterIcEE, i32 0, i32 0), i8* bitcast ({ i8*, i8* }* @_ZTIN8nlohmann12json_v3_11_16detail23output_adapter_protocolIcEE to i8*) }, comdat, align 8
@_ZTSSt19_Sp_make_shared_tag = linkonce_odr dso_local constant [24 x i8] c"St19_Sp_make_shared_tag\00", comdat, align 1
@_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag = linkonce_odr dso_local constant [16 x i8] zeroinitializer, comdat, align 8
@__libc_single_threaded = external dso_local local_unnamed_addr global i8, align 1
@.str.49 = private unnamed_addr constant [3 x i8] c"{}\00", align 1
@.str.50 = private unnamed_addr constant [3 x i8] c"{\0A\00", align 1
@.str.51 = private unnamed_addr constant [4 x i8] c"\22: \00", align 1
@.str.52 = private unnamed_addr constant [3 x i8] c",\0A\00", align 1
@.str.53 = private unnamed_addr constant [32 x i8] c"i != val.m_value.object->cend()\00", align 1
@__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE4dumpERKSF_bbjj = private unnamed_addr constant [192 x i8] c"void nlohmann::detail::serializer<nlohmann::basic_json<>>::dump(const BasicJsonType &, const bool, const bool, const unsigned int, const unsigned int) [BasicJsonType = nlohmann::basic_json<>]\00", align 1
@.str.54 = private unnamed_addr constant [43 x i8] c"std::next(i) == val.m_value.object->cend()\00", align 1
@.str.55 = private unnamed_addr constant [3 x i8] c"\22:\00", align 1
@.str.56 = private unnamed_addr constant [3 x i8] c"[]\00", align 1
@.str.57 = private unnamed_addr constant [3 x i8] c"[\0A\00", align 1
@.str.58 = private unnamed_addr constant [28 x i8] c"!val.m_value.array->empty()\00", align 1
@.str.59 = private unnamed_addr constant [11 x i8] c"\22bytes\22: [\00", align 1
@.str.60 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.61 = private unnamed_addr constant [4 x i8] c"],\0A\00", align 1
@.str.62 = private unnamed_addr constant [12 x i8] c"\22subtype\22: \00", align 1
@.str.63 = private unnamed_addr constant [5 x i8] c"null\00", align 1
@.str.64 = private unnamed_addr constant [11 x i8] c"{\22bytes\22:[\00", align 1
@.str.65 = private unnamed_addr constant [13 x i8] c"],\22subtype\22:\00", align 1
@.str.66 = private unnamed_addr constant [6 x i8] c"null}\00", align 1
@.str.67 = private unnamed_addr constant [5 x i8] c"true\00", align 1
@.str.68 = private unnamed_addr constant [6 x i8] c"false\00", align 1
@.str.69 = private unnamed_addr constant [12 x i8] c"<discarded>\00", align 1
@.str.70 = private unnamed_addr constant [7 x i8] c"\\u%04x\00", align 1
@.str.71 = private unnamed_addr constant [13 x i8] c"\\u%04x\\u%04x\00", align 1
@__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE12dump_escapedERKSB_b = private unnamed_addr constant [173 x i8] c"void nlohmann::detail::serializer<nlohmann::basic_json<>>::dump_escaped(const nlohmann::detail::serializer::string_t &, const bool) [BasicJsonType = nlohmann::basic_json<>]\00", align 1
@.str.72 = private unnamed_addr constant [7 x i8] c"\\ufffd\00", align 1
@.str.73 = private unnamed_addr constant [4 x i8] c"\EF\BF\BD\00", align 1
@_ZZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE6decodeERhRjhE5utf8d = linkonce_odr dso_local local_unnamed_addr constant %"struct.std::array.159" { [400 x i8] c}, comdat, align 1
@__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE6decodeERhRjh = private unnamed_addr constant [175 x i8] c"static std::uint8_t nlohmann::detail::serializer<nlohmann::basic_json<>>::decode(std::uint8_t &, std::uint32_t &, const std::uint8_t) [BasicJsonType = nlohmann::basic_json<>]\00", align 1
@.str.75 = private unnamed_addr constant [12 x i8] c"index < 400\00", align 1
@_ZZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE12dump_integerIhLi0EEEvT_E12digits_to_99 = linkonce_odr dso_local local_unnamed_addr constant %"struct.std::array.160" { [100 x %"struct.std::array.161"] [%"struct.std::array.161" { [2 x i8] c"00" }, %"struct.std::array.161" { [2 x i8] c"01" }, %"struct.std::array.161" { [2 x i8] c"02" }, %"struct.std::array.161" { [2 x i8] c"03" }, %"struct.std::array.161" { [2 x i8] c"04" }, %"struct.std::array.161" { [2 x i8] c"05" }, %"struct.std::array.161" { [2 x i8] c"06" }, %"struct.std::array.161" { [2 x i8] c"07" }, %"struct.std::array.161" { [2 x i8] c"08" }, %"struct.std::array.161" { [2 x i8] c"09" }, %"struct.std::array.161" { [2 x i8] c"10" }, %"struct.std::array.161" { [2 x i8] c"11" }, %"struct.std::array.161" { [2 x i8] c"12" }, %"struct.std::array.161" { [2 x i8] c"13" }, %"struct.std::array.161" { [2 x i8] c"14" }, %"struct.std::array.161" { [2 x i8] c"15" }, %"struct.std::array.161" { [2 x i8] c"16" }, %"struct.std::array.161" { [2 x i8] c"17" }, %"struct.std::array.161" { [2 x i8] c"18" }, %"struct.std::array.161" { [2 x i8] c"19" }, %"struct.std::array.161" { [2 x i8] c"20" }, %"struct.std::array.161" { [2 x i8] c"21" }, %"struct.std::array.161" { [2 x i8] c"22" }, %"struct.std::array.161" { [2 x i8] c"23" }, %"struct.std::array.161" { [2 x i8] c"24" }, %"struct.std::array.161" { [2 x i8] c"25" }, %"struct.std::array.161" { [2 x i8] c"26" }, %"struct.std::array.161" { [2 x i8] c"27" }, %"struct.std::array.161" { [2 x i8] c"28" }, %"struct.std::array.161" { [2 x i8] c"29" }, %"struct.std::array.161" { [2 x i8] c"30" }, %"struct.std::array.161" { [2 x i8] c"31" }, %"struct.std::array.161" { [2 x i8] c"32" }, %"struct.std::array.161" { [2 x i8] c"33" }, %"struct.std::array.161" { [2 x i8] c"34" }, %"struct.std::array.161" { [2 x i8] c"35" }, %"struct.std::array.161" { [2 x i8] c"36" }, %"struct.std::array.161" { [2 x i8] c"37" }, %"struct.std::array.161" { [2 x i8] c"38" }, %"struct.std::array.161" { [2 x i8] c"39" }, %"struct.std::array.161" { [2 x i8] c"40" }, %"struct.std::array.161" { [2 x i8] c"41" }, %"struct.std::array.161" { [2 x i8] c"42" }, %"struct.std::array.161" { [2 x i8] c"43" }, %"struct.std::array.161" { [2 x i8] c"44" }, %"struct.std::array.161" { [2 x i8] c"45" }, %"struct.std::array.161" { [2 x i8] c"46" }, %"struct.std::array.161" { [2 x i8] c"47" }, %"struct.std::array.161" { [2 x i8] c"48" }, %"struct.std::array.161" { [2 x i8] c"49" }, %"struct.std::array.161" { [2 x i8] c"50" }, %"struct.std::array.161" { [2 x i8] c"51" }, %"struct.std::array.161" { [2 x i8] c"52" }, %"struct.std::array.161" { [2 x i8] c"53" }, %"struct.std::array.161" { [2 x i8] c"54" }, %"struct.std::array.161" { [2 x i8] c"55" }, %"struct.std::array.161" { [2 x i8] c"56" }, %"struct.std::array.161" { [2 x i8] c"57" }, %"struct.std::array.161" { [2 x i8] c"58" }, %"struct.std::array.161" { [2 x i8] c"59" }, %"struct.std::array.161" { [2 x i8] c"60" }, %"struct.std::array.161" { [2 x i8] c"61" }, %"struct.std::array.161" { [2 x i8] c"62" }, %"struct.std::array.161" { [2 x i8] c"63" }, %"struct.std::array.161" { [2 x i8] c"64" }, %"struct.std::array.161" { [2 x i8] c"65" }, %"struct.std::array.161" { [2 x i8] c"66" }, %"struct.std::array.161" { [2 x i8] c"67" }, %"struct.std::array.161" { [2 x i8] c"68" }, %"struct.std::array.161" { [2 x i8] c"69" }, %"struct.std::array.161" { [2 x i8] c"70" }, %"struct.std::array.161" { [2 x i8] c"71" }, %"struct.std::array.161" { [2 x i8] c"72" }, %"struct.std::array.161" { [2 x i8] c"73" }, %"struct.std::array.161" { [2 x i8] c"74" }, %"struct.std::array.161" { [2 x i8] c"75" }, %"struct.std::array.161" { [2 x i8] c"76" }, %"struct.std::array.161" { [2 x i8] c"77" }, %"struct.std::array.161" { [2 x i8] c"78" }, %"struct.std::array.161" { [2 x i8] c"79" }, %"struct.std::array.161" { [2 x i8] c"80" }, %"struct.std::array.161" { [2 x i8] c"81" }, %"struct.std::array.161" { [2 x i8] c"82" }, %"struct.std::array.161" { [2 x i8] c"83" }, %"struct.std::array.161" { [2 x i8] c"84" }, %"struct.std::array.161" { [2 x i8] c"85" }, %"struct.std::array.161" { [2 x i8] c"86" }, %"struct.std::array.161" { [2 x i8] c"87" }, %"struct.std::array.161" { [2 x i8] c"88" }, %"struct.std::array.161" { [2 x i8] c"89" }, %"struct.std::array.161" { [2 x i8] c"90" }, %"struct.std::array.161" { [2 x i8] c"91" }, %"struct.std::array.161" { [2 x i8] c"92" }, %"struct.std::array.161" { [2 x i8] c"93" }, %"struct.std::array.161" { [2 x i8] c"94" }, %"struct.std::array.161" { [2 x i8] c"95" }, %"struct.std::array.161" { [2 x i8] c"96" }, %"struct.std::array.161" { [2 x i8] c"97" }, %"struct.std::array.161" { [2 x i8] c"98" }, %"struct.std::array.161" { [2 x i8] c"99" }] }, comdat, align 1
@.str.76 = private unnamed_addr constant [35 x i8] c"n_chars < number_buffer.size() - 1\00", align 1
@__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE12dump_integerIhLi0EEEvT_ = private unnamed_addr constant [153 x i8] c"void nlohmann::detail::serializer<nlohmann::basic_json<>>::dump_integer(NumberType) [BasicJsonType = nlohmann::basic_json<>, NumberType = unsigned char]\00", align 1
@_ZZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE12dump_integerImLi0EEEvT_E12digits_to_99 = linkonce_odr dso_local local_unnamed_addr constant %"struct.std::array.160" { [100 x %"struct.std::array.161"] [%"struct.std::array.161" { [2 x i8] c"00" }, %"struct.std::array.161" { [2 x i8] c"01" }, %"struct.std::array.161" { [2 x i8] c"02" }, %"struct.std::array.161" { [2 x i8] c"03" }, %"struct.std::array.161" { [2 x i8] c"04" }, %"struct.std::array.161" { [2 x i8] c"05" }, %"struct.std::array.161" { [2 x i8] c"06" }, %"struct.std::array.161" { [2 x i8] c"07" }, %"struct.std::array.161" { [2 x i8] c"08" }, %"struct.std::array.161" { [2 x i8] c"09" }, %"struct.std::array.161" { [2 x i8] c"10" }, %"struct.std::array.161" { [2 x i8] c"11" }, %"struct.std::array.161" { [2 x i8] c"12" }, %"struct.std::array.161" { [2 x i8] c"13" }, %"struct.std::array.161" { [2 x i8] c"14" }, %"struct.std::array.161" { [2 x i8] c"15" }, %"struct.std::array.161" { [2 x i8] c"16" }, %"struct.std::array.161" { [2 x i8] c"17" }, %"struct.std::array.161" { [2 x i8] c"18" }, %"struct.std::array.161" { [2 x i8] c"19" }, %"struct.std::array.161" { [2 x i8] c"20" }, %"struct.std::array.161" { [2 x i8] c"21" }, %"struct.std::array.161" { [2 x i8] c"22" }, %"struct.std::array.161" { [2 x i8] c"23" }, %"struct.std::array.161" { [2 x i8] c"24" }, %"struct.std::array.161" { [2 x i8] c"25" }, %"struct.std::array.161" { [2 x i8] c"26" }, %"struct.std::array.161" { [2 x i8] c"27" }, %"struct.std::array.161" { [2 x i8] c"28" }, %"struct.std::array.161" { [2 x i8] c"29" }, %"struct.std::array.161" { [2 x i8] c"30" }, %"struct.std::array.161" { [2 x i8] c"31" }, %"struct.std::array.161" { [2 x i8] c"32" }, %"struct.std::array.161" { [2 x i8] c"33" }, %"struct.std::array.161" { [2 x i8] c"34" }, %"struct.std::array.161" { [2 x i8] c"35" }, %"struct.std::array.161" { [2 x i8] c"36" }, %"struct.std::array.161" { [2 x i8] c"37" }, %"struct.std::array.161" { [2 x i8] c"38" }, %"struct.std::array.161" { [2 x i8] c"39" }, %"struct.std::array.161" { [2 x i8] c"40" }, %"struct.std::array.161" { [2 x i8] c"41" }, %"struct.std::array.161" { [2 x i8] c"42" }, %"struct.std::array.161" { [2 x i8] c"43" }, %"struct.std::array.161" { [2 x i8] c"44" }, %"struct.std::array.161" { [2 x i8] c"45" }, %"struct.std::array.161" { [2 x i8] c"46" }, %"struct.std::array.161" { [2 x i8] c"47" }, %"struct.std::array.161" { [2 x i8] c"48" }, %"struct.std::array.161" { [2 x i8] c"49" }, %"struct.std::array.161" { [2 x i8] c"50" }, %"struct.std::array.161" { [2 x i8] c"51" }, %"struct.std::array.161" { [2 x i8] c"52" }, %"struct.std::array.161" { [2 x i8] c"53" }, %"struct.std::array.161" { [2 x i8] c"54" }, %"struct.std::array.161" { [2 x i8] c"55" }, %"struct.std::array.161" { [2 x i8] c"56" }, %"struct.std::array.161" { [2 x i8] c"57" }, %"struct.std::array.161" { [2 x i8] c"58" }, %"struct.std::array.161" { [2 x i8] c"59" }, %"struct.std::array.161" { [2 x i8] c"60" }, %"struct.std::array.161" { [2 x i8] c"61" }, %"struct.std::array.161" { [2 x i8] c"62" }, %"struct.std::array.161" { [2 x i8] c"63" }, %"struct.std::array.161" { [2 x i8] c"64" }, %"struct.std::array.161" { [2 x i8] c"65" }, %"struct.std::array.161" { [2 x i8] c"66" }, %"struct.std::array.161" { [2 x i8] c"67" }, %"struct.std::array.161" { [2 x i8] c"68" }, %"struct.std::array.161" { [2 x i8] c"69" }, %"struct.std::array.161" { [2 x i8] c"70" }, %"struct.std::array.161" { [2 x i8] c"71" }, %"struct.std::array.161" { [2 x i8] c"72" }, %"struct.std::array.161" { [2 x i8] c"73" }, %"struct.std::array.161" { [2 x i8] c"74" }, %"struct.std::array.161" { [2 x i8] c"75" }, %"struct.std::array.161" { [2 x i8] c"76" }, %"struct.std::array.161" { [2 x i8] c"77" }, %"struct.std::array.161" { [2 x i8] c"78" }, %"struct.std::array.161" { [2 x i8] c"79" }, %"struct.std::array.161" { [2 x i8] c"80" }, %"struct.std::array.161" { [2 x i8] c"81" }, %"struct.std::array.161" { [2 x i8] c"82" }, %"struct.std::array.161" { [2 x i8] c"83" }, %"struct.std::array.161" { [2 x i8] c"84" }, %"struct.std::array.161" { [2 x i8] c"85" }, %"struct.std::array.161" { [2 x i8] c"86" }, %"struct.std::array.161" { [2 x i8] c"87" }, %"struct.std::array.161" { [2 x i8] c"88" }, %"struct.std::array.161" { [2 x i8] c"89" }, %"struct.std::array.161" { [2 x i8] c"90" }, %"struct.std::array.161" { [2 x i8] c"91" }, %"struct.std::array.161" { [2 x i8] c"92" }, %"struct.std::array.161" { [2 x i8] c"93" }, %"struct.std::array.161" { [2 x i8] c"94" }, %"struct.std::array.161" { [2 x i8] c"95" }, %"struct.std::array.161" { [2 x i8] c"96" }, %"struct.std::array.161" { [2 x i8] c"97" }, %"struct.std::array.161" { [2 x i8] c"98" }, %"struct.std::array.161" { [2 x i8] c"99" }] }, comdat, align 1
@__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE12dump_integerImLi0EEEvT_ = private unnamed_addr constant [153 x i8] c"void nlohmann::detail::serializer<nlohmann::basic_json<>>::dump_integer(NumberType) [BasicJsonType = nlohmann::basic_json<>, NumberType = unsigned long]\00", align 1
@_ZZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE12dump_integerIlLi0EEEvT_E12digits_to_99 = linkonce_odr dso_local local_unnamed_addr constant %"struct.std::array.160" { [100 x %"struct.std::array.161"] [%"struct.std::array.161" { [2 x i8] c"00" }, %"struct.std::array.161" { [2 x i8] c"01" }, %"struct.std::array.161" { [2 x i8] c"02" }, %"struct.std::array.161" { [2 x i8] c"03" }, %"struct.std::array.161" { [2 x i8] c"04" }, %"struct.std::array.161" { [2 x i8] c"05" }, %"struct.std::array.161" { [2 x i8] c"06" }, %"struct.std::array.161" { [2 x i8] c"07" }, %"struct.std::array.161" { [2 x i8] c"08" }, %"struct.std::array.161" { [2 x i8] c"09" }, %"struct.std::array.161" { [2 x i8] c"10" }, %"struct.std::array.161" { [2 x i8] c"11" }, %"struct.std::array.161" { [2 x i8] c"12" }, %"struct.std::array.161" { [2 x i8] c"13" }, %"struct.std::array.161" { [2 x i8] c"14" }, %"struct.std::array.161" { [2 x i8] c"15" }, %"struct.std::array.161" { [2 x i8] c"16" }, %"struct.std::array.161" { [2 x i8] c"17" }, %"struct.std::array.161" { [2 x i8] c"18" }, %"struct.std::array.161" { [2 x i8] c"19" }, %"struct.std::array.161" { [2 x i8] c"20" }, %"struct.std::array.161" { [2 x i8] c"21" }, %"struct.std::array.161" { [2 x i8] c"22" }, %"struct.std::array.161" { [2 x i8] c"23" }, %"struct.std::array.161" { [2 x i8] c"24" }, %"struct.std::array.161" { [2 x i8] c"25" }, %"struct.std::array.161" { [2 x i8] c"26" }, %"struct.std::array.161" { [2 x i8] c"27" }, %"struct.std::array.161" { [2 x i8] c"28" }, %"struct.std::array.161" { [2 x i8] c"29" }, %"struct.std::array.161" { [2 x i8] c"30" }, %"struct.std::array.161" { [2 x i8] c"31" }, %"struct.std::array.161" { [2 x i8] c"32" }, %"struct.std::array.161" { [2 x i8] c"33" }, %"struct.std::array.161" { [2 x i8] c"34" }, %"struct.std::array.161" { [2 x i8] c"35" }, %"struct.std::array.161" { [2 x i8] c"36" }, %"struct.std::array.161" { [2 x i8] c"37" }, %"struct.std::array.161" { [2 x i8] c"38" }, %"struct.std::array.161" { [2 x i8] c"39" }, %"struct.std::array.161" { [2 x i8] c"40" }, %"struct.std::array.161" { [2 x i8] c"41" }, %"struct.std::array.161" { [2 x i8] c"42" }, %"struct.std::array.161" { [2 x i8] c"43" }, %"struct.std::array.161" { [2 x i8] c"44" }, %"struct.std::array.161" { [2 x i8] c"45" }, %"struct.std::array.161" { [2 x i8] c"46" }, %"struct.std::array.161" { [2 x i8] c"47" }, %"struct.std::array.161" { [2 x i8] c"48" }, %"struct.std::array.161" { [2 x i8] c"49" }, %"struct.std::array.161" { [2 x i8] c"50" }, %"struct.std::array.161" { [2 x i8] c"51" }, %"struct.std::array.161" { [2 x i8] c"52" }, %"struct.std::array.161" { [2 x i8] c"53" }, %"struct.std::array.161" { [2 x i8] c"54" }, %"struct.std::array.161" { [2 x i8] c"55" }, %"struct.std::array.161" { [2 x i8] c"56" }, %"struct.std::array.161" { [2 x i8] c"57" }, %"struct.std::array.161" { [2 x i8] c"58" }, %"struct.std::array.161" { [2 x i8] c"59" }, %"struct.std::array.161" { [2 x i8] c"60" }, %"struct.std::array.161" { [2 x i8] c"61" }, %"struct.std::array.161" { [2 x i8] c"62" }, %"struct.std::array.161" { [2 x i8] c"63" }, %"struct.std::array.161" { [2 x i8] c"64" }, %"struct.std::array.161" { [2 x i8] c"65" }, %"struct.std::array.161" { [2 x i8] c"66" }, %"struct.std::array.161" { [2 x i8] c"67" }, %"struct.std::array.161" { [2 x i8] c"68" }, %"struct.std::array.161" { [2 x i8] c"69" }, %"struct.std::array.161" { [2 x i8] c"70" }, %"struct.std::array.161" { [2 x i8] c"71" }, %"struct.std::array.161" { [2 x i8] c"72" }, %"struct.std::array.161" { [2 x i8] c"73" }, %"struct.std::array.161" { [2 x i8] c"74" }, %"struct.std::array.161" { [2 x i8] c"75" }, %"struct.std::array.161" { [2 x i8] c"76" }, %"struct.std::array.161" { [2 x i8] c"77" }, %"struct.std::array.161" { [2 x i8] c"78" }, %"struct.std::array.161" { [2 x i8] c"79" }, %"struct.std::array.161" { [2 x i8] c"80" }, %"struct.std::array.161" { [2 x i8] c"81" }, %"struct.std::array.161" { [2 x i8] c"82" }, %"struct.std::array.161" { [2 x i8] c"83" }, %"struct.std::array.161" { [2 x i8] c"84" }, %"struct.std::array.161" { [2 x i8] c"85" }, %"struct.std::array.161" { [2 x i8] c"86" }, %"struct.std::array.161" { [2 x i8] c"87" }, %"struct.std::array.161" { [2 x i8] c"88" }, %"struct.std::array.161" { [2 x i8] c"89" }, %"struct.std::array.161" { [2 x i8] c"90" }, %"struct.std::array.161" { [2 x i8] c"91" }, %"struct.std::array.161" { [2 x i8] c"92" }, %"struct.std::array.161" { [2 x i8] c"93" }, %"struct.std::array.161" { [2 x i8] c"94" }, %"struct.std::array.161" { [2 x i8] c"95" }, %"struct.std::array.161" { [2 x i8] c"96" }, %"struct.std::array.161" { [2 x i8] c"97" }, %"struct.std::array.161" { [2 x i8] c"98" }, %"struct.std::array.161" { [2 x i8] c"99" }] }, comdat, align 1
@__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE12dump_integerIlLi0EEEvT_ = private unnamed_addr constant [144 x i8] c"void nlohmann::detail::serializer<nlohmann::basic_json<>>::dump_integer(NumberType) [BasicJsonType = nlohmann::basic_json<>, NumberType = long]\00", align 1
@__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail8to_charsIdEEPcS3_PKcT_ = private unnamed_addr constant [87 x i8] c"char *nlohmann::detail::to_chars(char *, const char *, FloatType) [FloatType = double]\00", align 1
@.str.79 = private unnamed_addr constant [61 x i8] c"last - first >= std::numeric_limits<FloatType>::max_digits10\00", align 1
@.str.80 = private unnamed_addr constant [52 x i8] c"len <= std::numeric_limits<FloatType>::max_digits10\00", align 1
@.str.82 = private unnamed_addr constant [82 x i8] c"last - first >= 2 + (-kMinExp - 1) + std::numeric_limits<FloatType>::max_digits10\00", align 1
@.str.83 = private unnamed_addr constant [65 x i8] c"last - first >= std::numeric_limits<FloatType>::max_digits10 + 6\00", align 1
@__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail9dtoa_impl6grisu2IdEEvPcRiS5_T_ = private unnamed_addr constant [95 x i8] c"void nlohmann::detail::dtoa_impl::grisu2(char *, int &, int &, FloatType) [FloatType = double]\00", align 1
@.str.84 = private unnamed_addr constant [10 x i8] c"value > 0\00", align 1
@__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail9dtoa_impl18compute_boundariesIdEENS2_10boundariesET_ = private unnamed_addr constant [120 x i8] c"nlohmann::detail::dtoa_impl::boundaries nlohmann::detail::dtoa_impl::compute_boundaries(FloatType) [FloatType = double]\00", align 1
@.str.85 = private unnamed_addr constant [9 x i8] c"x.f != 0\00", align 1
@__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail9dtoa_impl5diyfp9normalizeES3_ = private unnamed_addr constant [124 x i8] c"static nlohmann::detail::dtoa_impl::diyfp nlohmann::detail::dtoa_impl::diyfp::normalize(nlohmann::detail::dtoa_impl::diyfp)\00", align 1
@.str.86 = private unnamed_addr constant [11 x i8] c"delta >= 0\00", align 1
@__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail9dtoa_impl5diyfp12normalize_toERKS3_i = private unnamed_addr constant [146 x i8] c"static nlohmann::detail::dtoa_impl::diyfp nlohmann::detail::dtoa_impl::diyfp::normalize_to(const nlohmann::detail::dtoa_impl::diyfp &, const int)\00", align 1
@.str.87 = private unnamed_addr constant [33 x i8] c"((x.f << delta) >> delta) == x.f\00", align 1
@.str.88 = private unnamed_addr constant [22 x i8] c"m_plus.e == m_minus.e\00", align 1
@__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail9dtoa_impl6grisu2EPcRiS4_NS2_5diyfpES5_S5_ = private unnamed_addr constant [171 x i8] c"void nlohmann::detail::dtoa_impl::grisu2(char *, int &, int &, nlohmann::detail::dtoa_impl::diyfp, nlohmann::detail::dtoa_impl::diyfp, nlohmann::detail::dtoa_impl::diyfp)\00", align 1
@.str.89 = private unnamed_addr constant [16 x i8] c"m_plus.e == v.e\00", align 1
@_ZZN8nlohmann12json_v3_11_16detail9dtoa_impl36get_cached_power_for_binary_exponentEiE13kCachedPowers = linkonce_odr dso_local local_unnamed_addr constant %"struct.std::array.163" { [79 x %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power"] [%"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -6093090917745768758, i32 -1060, i32 -300 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -38366372719436721, i32 -1034, i32 -292 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -4731433901725329908, i32 -1007, i32 -284 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -8228041688891786180, i32 -980, i32 -276 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -3219690930897053053, i32 -954, i32 -268 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -7101705404292871755, i32 -927, i32 -260 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -1541319077368263733, i32 -901, i32 -252 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -5851220927660403859, i32 -874, i32 -244 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -9062348037703676329, i32 -847, i32 -236 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -4462904269766699465, i32 -821, i32 -228 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -8027971522334779313, i32 -794, i32 -220 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -2921563150702462265, i32 -768, i32 -212 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -6879582898840692748, i32 -741, i32 -204 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -1210330751515841307, i32 -715, i32 -196 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -5604615407819967858, i32 -688, i32 -188 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -8878612607581929669, i32 -661, i32 -180 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -4189117143640191558, i32 -635, i32 -172 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -7823984217374209642, i32 -608, i32 -164 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -2617598379430861436, i32 -582, i32 -156 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -6653111496142234890, i32 -555, i32 -148 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -872862063775190746, i32 -529, i32 -140 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -5353181642124984136, i32 -502, i32 -132 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -8691279853972075893, i32 -475, i32 -124 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -3909969587797413805, i32 -449, i32 -116 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -7616003081050118571, i32 -422, i32 -108 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -2307682335666372931, i32 -396, i32 -100 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -6422206049907525489, i32 -369, i32 -92 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -528786136287117932, i32 -343, i32 -84 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -5096825099203863601, i32 -316, i32 -76 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -8500279345513818773, i32 -289, i32 -68 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -3625356651333078602, i32 -263, i32 -60 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -7403949918844649556, i32 -236, i32 -52 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -1991698500497491194, i32 -210, i32 -44 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -6186779746782440749, i32 -183, i32 -36 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -177973607073265138, i32 -157, i32 -28 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -4835449396872013077, i32 -130, i32 -20 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -8305539271883716404, i32 -103, i32 -12 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -3335171328526686932, i32 -77, i32 -4 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -7187745005283311616, i32 -50, i32 4 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -1669528073709551616, i32 -24, i32 12 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -5946744073709551616, i32 3, i32 20 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -9133518327554766460, i32 30, i32 28 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -4568956265895094861, i32 56, i32 36 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -8106986416796705680, i32 83, i32 44 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -3039304518611664792, i32 109, i32 52 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -6967307053960650171, i32 136, i32 60 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -1341049929119499481, i32 162, i32 68 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -5702008784649933400, i32 189, i32 76 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -8951176327949752869, i32 216, i32 84 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -4297245513042813542, i32 242, i32 92 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -7904546130479028392, i32 269, i32 100 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -2737644984756826646, i32 295, i32 108 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -6742553186979055798, i32 322, i32 116 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -1006140569036166267, i32 348, i32 124 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -5452481866653427593, i32 375, i32 132 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -8765264286586255934, i32 402, i32 140 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -4020214983419339459, i32 428, i32 148 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -7698142301602209613, i32 455, i32 156 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -2430079312244744221, i32 481, i32 164 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -6513398903789220827, i32 508, i32 172 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -664674077828931748, i32 534, i32 180 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -5198069505264599346, i32 561, i32 188 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -8575712306248138270, i32 588, i32 196 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -3737760522056206171, i32 614, i32 204 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -7487697328667536417, i32 641, i32 212 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -2116491865831296966, i32 667, i32 220 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -6279758049420528746, i32 694, i32 228 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -316522074587315140, i32 720, i32 236 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -4938676049251384304, i32 747, i32 244 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -8382449121214030822, i32 774, i32 252 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -3449775934753242068, i32 800, i32 260 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -7273132090830278359, i32 827, i32 268 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -1796764746270372707, i32 853, i32 276 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -6041542782089432023, i32 880, i32 284 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -9204148869281624187, i32 907, i32 292 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -4674203974643163859, i32 933, i32 300 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -8185402070463610993, i32 960, i32 308 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -3156152948152813503, i32 986, i32 316 }, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::cached_power" { i64 -7054365918152680535, i32 1013, i32 324 }] }, comdat, align 8
@.str.90 = private unnamed_addr constant [11 x i8] c"e >= -1500\00", align 1
@__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail9dtoa_impl36get_cached_power_for_binary_exponentEi = private unnamed_addr constant [113 x i8] c"nlohmann::detail::dtoa_impl::cached_power nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent(int)\00", align 1
@.str.91 = private unnamed_addr constant [10 x i8] c"e <= 1500\00", align 1
@.str.92 = private unnamed_addr constant [11 x i8] c"index >= 0\00", align 1
@.str.93 = private unnamed_addr constant [55 x i8] c"static_cast<std::size_t>(index) < kCachedPowers.size()\00", align 1
@.str.94 = private unnamed_addr constant [28 x i8] c"kAlpha <= cached.e + e + 64\00", align 1
@.str.95 = private unnamed_addr constant [28 x i8] c"kGamma >= cached.e + e + 64\00", align 1
@.str.96 = private unnamed_addr constant [19 x i8] c"M_plus.e >= kAlpha\00", align 1
@__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail9dtoa_impl16grisu2_digit_genEPcRiS4_NS2_5diyfpES5_S5_ = private unnamed_addr constant [181 x i8] c"void nlohmann::detail::dtoa_impl::grisu2_digit_gen(char *, int &, int &, nlohmann::detail::dtoa_impl::diyfp, nlohmann::detail::dtoa_impl::diyfp, nlohmann::detail::dtoa_impl::diyfp)\00", align 1
@.str.97 = private unnamed_addr constant [19 x i8] c"M_plus.e <= kGamma\00", align 1
@.str.98 = private unnamed_addr constant [7 x i8] c"p1 > 0\00", align 1
@.str.99 = private unnamed_addr constant [7 x i8] c"d <= 9\00", align 1
@.str.100 = private unnamed_addr constant [11 x i8] c"p2 > delta\00", align 1
@.str.101 = private unnamed_addr constant [55 x i8] c"p2 <= (std::numeric_limits<std::uint64_t>::max)() / 10\00", align 1
@.str.102 = private unnamed_addr constant [11 x i8] c"x.e == y.e\00", align 1
@__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail9dtoa_impl5diyfp3subERKS3_S5_ = private unnamed_addr constant [170 x i8] c"static nlohmann::detail::dtoa_impl::diyfp nlohmann::detail::dtoa_impl::diyfp::sub(const nlohmann::detail::dtoa_impl::diyfp &, const nlohmann::detail::dtoa_impl::diyfp &)\00", align 1
@.str.103 = private unnamed_addr constant [11 x i8] c"x.f >= y.f\00", align 1
@.str.104 = private unnamed_addr constant [9 x i8] c"len >= 1\00", align 1
@__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail9dtoa_impl12grisu2_roundEPcimmmm = private unnamed_addr constant [120 x i8] c"void nlohmann::detail::dtoa_impl::grisu2_round(char *, int, std::uint64_t, std::uint64_t, std::uint64_t, std::uint64_t)\00", align 1
@.str.105 = private unnamed_addr constant [14 x i8] c"dist <= delta\00", align 1
@.str.106 = private unnamed_addr constant [14 x i8] c"rest <= delta\00", align 1
@.str.107 = private unnamed_addr constant [10 x i8] c"ten_k > 0\00", align 1
@.str.108 = private unnamed_addr constant [20 x i8] c"buf[len - 1] != '0'\00", align 1
@.str.109 = private unnamed_addr constant [12 x i8] c"min_exp < 0\00", align 1
@__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail9dtoa_impl13format_bufferEPciiii = private unnamed_addr constant [77 x i8] c"char *nlohmann::detail::dtoa_impl::format_buffer(char *, int, int, int, int)\00", align 1
@.str.110 = private unnamed_addr constant [12 x i8] c"max_exp > 0\00", align 1
@.str.111 = private unnamed_addr constant [6 x i8] c"k > n\00", align 1
@.str.112 = private unnamed_addr constant [10 x i8] c"e > -1000\00", align 1
@__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail9dtoa_impl15append_exponentEPci = private unnamed_addr constant [64 x i8] c"char *nlohmann::detail::dtoa_impl::append_exponent(char *, int)\00", align 1
@.str.113 = private unnamed_addr constant [9 x i8] c"e < 1000\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_hand.cpp, i8* null }]
@str = private unnamed_addr constant [20 x i8] c"manual reverse mode\00", align 1
@str.114 = private unnamed_addr constant [23 x i8] c"manual ad reverse mode\00", align 1
@str.115 = private unnamed_addr constant [14 x i8] c"starting main\00", align 1

; Function Attrs: nounwind uwtable
define dso_local void @_Z8getTestsRSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEPKcS5_(%"class.std::vector"* nonnull align 8 dereferenceable(24) %tests, i8* %name, %"class.std::__cxx11::basic_string"* nocapture readonly %indent) local_unnamed_addr #0 {
entry:
  %__dnew.i.i.i100 = alloca i64, align 8
  %__dnew.i.i = alloca i64, align 8
  %__dnew.i.i.i = alloca i64, align 8
  %path = alloca [1024 x i8], align 16
  %agg.tmp = alloca %"class.std::__cxx11::basic_string", align 8
  %ref.tmp = alloca %"class.std::__cxx11::basic_string", align 8
  %ref.tmp20 = alloca %"class.std::__cxx11::basic_string", align 8
  %ref.tmp24 = alloca %"class.std::__cxx11::basic_string", align 8
  %ref.tmp28 = alloca %"class.std::__cxx11::basic_string", align 8
  %call = tail call noalias %struct.__dirstream* @opendir(i8* %name)
  %tobool.not = icmp eq %struct.__dirstream* %call, null
  br i1 %tobool.not, label %cleanup34, label %while.cond.preheader

while.cond.preheader:                             ; preds = %entry
  %call2126 = call %struct.dirent* @readdir(%struct.__dirstream* nonnull %call) #38
  %cmp.not127 = icmp eq %struct.dirent* %call2126, null
  br i1 %cmp.not127, label %while.end, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %while.cond.preheader
  %0 = bitcast %"class.std::__cxx11::basic_string"* %ref.tmp20 to i8*
  %1 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp20, i64 0, i32 2
  %2 = bitcast %"class.std::__cxx11::basic_string"* %ref.tmp20 to %union.anon**
  %3 = bitcast %union.anon* %1 to i8*
  %4 = bitcast i64* %__dnew.i.i to i8*
  %_M_p.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp20, i64 0, i32 0, i32 0
  %_M_allocated_capacity.i.i.i72 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp20, i64 0, i32 2, i32 0
  %_M_string_length.i.i.i.i74 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp20, i64 0, i32 1
  %5 = bitcast %"class.std::__cxx11::basic_string"* %ref.tmp24 to i8*
  %6 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp24, i64 0, i32 2
  %7 = bitcast %"class.std::__cxx11::basic_string"* %ref.tmp24 to %union.anon**
  %8 = bitcast %union.anon* %6 to i8*
  %9 = bitcast %union.anon* %6 to i32*
  %_M_string_length.i.i.i.i86 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp24, i64 0, i32 1
  %10 = bitcast %"class.std::__cxx11::basic_string"* %ref.tmp28 to i8*
  %11 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp28, i64 0, i32 2
  %12 = bitcast %"class.std::__cxx11::basic_string"* %ref.tmp28 to %union.anon**
  %_M_p.i9.i.i101 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %indent, i64 0, i32 0, i32 0
  %_M_string_length.i.i.i102 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %indent, i64 0, i32 1
  %13 = bitcast i64* %__dnew.i.i.i100 to i8*
  %14 = bitcast %union.anon* %11 to i8*
  %_M_p.i.i.i.i106 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp28, i64 0, i32 0, i32 0
  %_M_allocated_capacity.i.i.i.i107 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp28, i64 0, i32 2, i32 0
  %_M_string_length.i.i.i.i.i113 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp28, i64 0, i32 1
  %_M_finish.i.i = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %tests, i64 0, i32 0, i32 0, i32 0, i32 1
  %_M_end_of_storage.i.i = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %tests, i64 0, i32 0, i32 0, i32 0, i32 2
  %15 = getelementptr inbounds [1024 x i8], [1024 x i8]* %path, i64 0, i64 0
  %16 = bitcast %"class.std::__cxx11::basic_string"* %ref.tmp to i8*
  %17 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp, i64 0, i32 2
  %18 = bitcast %"class.std::__cxx11::basic_string"* %ref.tmp to %union.anon**
  %19 = bitcast i64* %__dnew.i.i.i to i8*
  %20 = bitcast %union.anon* %17 to i8*
  %_M_p.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp, i64 0, i32 0, i32 0
  %_M_allocated_capacity.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp, i64 0, i32 2, i32 0
  %_M_string_length.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp, i64 0, i32 1
  %21 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.tmp, i64 0, i32 2
  %arraydecay.i.i.i = bitcast %union.anon* %21 to i8*
  %22 = bitcast %"class.std::__cxx11::basic_string"* %agg.tmp to %union.anon**
  %_M_p.i23.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.tmp, i64 0, i32 0, i32 0
  %_M_allocated_capacity.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.tmp, i64 0, i32 2, i32 0
  %_M_string_length.i.i.i56 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.tmp, i64 0, i32 1
  %arrayidx.i.i.i87 = getelementptr inbounds i8, i8* %8, i64 4
  br label %while.body

while.body:                                       ; preds = %while.cond.backedge, %while.body.lr.ph
  %call2128 = phi %struct.dirent* [ %call2126, %while.body.lr.ph ], [ %call2, %while.cond.backedge ]
  %d_type = getelementptr inbounds %struct.dirent, %struct.dirent* %call2128, i64 0, i32 3
  %23 = load i8, i8* %d_type, align 2, !tbaa !2
  %cmp3 = icmp eq i8 %23, 4
  br i1 %cmp3, label %if.then4, label %if.else

if.then4:                                         ; preds = %while.body
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %15) #38
  %arraydecay = getelementptr inbounds %struct.dirent, %struct.dirent* %call2128, i64 0, i32 4, i64 0
  %call5 = call i32 @strcmp(i8* nonnull %arraydecay, i8* nonnull dereferenceable(2) getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)) #39
  %cmp6 = icmp eq i32 %call5, 0
  br i1 %cmp6, label %cleanup, label %lor.lhs.false, !llvm.loop !8

lor.lhs.false:                                    ; preds = %if.then4
  %call9 = call i32 @strcmp(i8* nonnull %arraydecay, i8* nonnull dereferenceable(3) getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0)) #39
  %cmp10 = icmp eq i32 %call9, 0
  br i1 %cmp10, label %cleanup, label %if.end12, !llvm.loop !8

if.end12:                                         ; preds = %lor.lhs.false
  %call16 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %15, i64 1024, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i8* %name, i8* nonnull %arraydecay) #38
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %16) #38
  call void @llvm.experimental.noalias.scope.decl(metadata !11)
  store %union.anon* %17, %union.anon** %18, align 8, !tbaa !14, !alias.scope !11
  %24 = load i8*, i8** %_M_p.i9.i.i101, align 8, !tbaa !17, !noalias !11
  %25 = load i64, i64* %_M_string_length.i.i.i102, align 8, !tbaa !19, !noalias !11
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #38, !noalias !11
  store i64 %25, i64* %__dnew.i.i.i, align 8, !tbaa !20, !noalias !11
  %cmp.i.i.i = icmp ugt i64 %25, 15
  br i1 %cmp.i.i.i, label %if.then.i.i.i, label %if.end.i.i.i

if.then.i.i.i:                                    ; preds = %if.end12
  %call2.i.i.i = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %ref.tmp, i64* nonnull align 8 dereferenceable(8) %__dnew.i.i.i, i64 0) #38
  store i8* %call2.i.i.i, i8** %_M_p.i.i.i.i, align 8, !tbaa !17, !alias.scope !11
  %26 = load i64, i64* %__dnew.i.i.i, align 8, !tbaa !20, !noalias !11
  store i64 %26, i64* %_M_allocated_capacity.i.i.i.i, align 8, !tbaa !21, !alias.scope !11
  br label %if.end.i.i.i

if.end.i.i.i:                                     ; preds = %if.then.i.i.i, %if.end12
  %27 = phi i8* [ %call2.i.i.i, %if.then.i.i.i ], [ %20, %if.end12 ]
  switch i64 %25, label %if.end.i.i.i.i.i.i [
    i64 1, label %if.then.i.i7.i.i.i
    i64 0, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i
  ]

if.then.i.i7.i.i.i:                               ; preds = %if.end.i.i.i
  %28 = load i8, i8* %24, align 1, !tbaa !21
  store i8 %28, i8* %27, align 1, !tbaa !21
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i

if.end.i.i.i.i.i.i:                               ; preds = %if.end.i.i.i
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %27, i8* align 1 %24, i64 %25, i1 false) #38
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i: ; preds = %if.end.i.i.i.i.i.i, %if.then.i.i7.i.i.i, %if.end.i.i.i
  %29 = load i64, i64* %__dnew.i.i.i, align 8, !tbaa !20, !noalias !11
  store i64 %29, i64* %_M_string_length.i.i.i.i.i, align 8, !tbaa !19, !alias.scope !11
  %30 = load i8*, i8** %_M_p.i.i.i.i, align 8, !tbaa !17, !alias.scope !11
  %arrayidx.i.i.i.i = getelementptr inbounds i8, i8* %30, i64 %29
  store i8 0, i8* %arrayidx.i.i.i.i, align 1, !tbaa !21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #38, !noalias !11
  %call.i.i.i = call i64 @strlen(i8* nonnull dereferenceable(1) %arraydecay) #38, !noalias !11
  %31 = load i64, i64* %_M_string_length.i.i.i.i.i, align 8, !tbaa !19, !alias.scope !11
  %sub3.i.i.i = sub i64 4611686018427387903, %31
  %cmp.i.i1.i = icmp ult i64 %sub3.i.i.i, %call.i.i.i
  br i1 %cmp.i.i1.i, label %if.then.i.i2.i, label %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_.exit

if.then.i.i2.i:                                   ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i
  call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.33, i64 0, i64 0)) #40
  unreachable

_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_.exit: ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i
  %call2.i.i = call nonnull align 8 dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %ref.tmp, i8* nonnull %arraydecay, i64 %call.i.i.i) #38
  call void @llvm.experimental.noalias.scope.decl(metadata !22)
  %32 = load i64, i64* %_M_string_length.i.i.i.i.i, align 8, !tbaa !19, !noalias !22
  %cmp.i.i.i52 = icmp eq i64 %32, 4611686018427387903
  br i1 %cmp.i.i.i52, label %if.then.i.i.i53, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc.exit.i

if.then.i.i.i53:                                  ; preds = %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_.exit
  call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.33, i64 0, i64 0)) #40
  unreachable

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc.exit.i: ; preds = %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_.exit
  %call2.i.i54 = call nonnull align 8 dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %ref.tmp, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0), i64 1) #38, !noalias !22
  store %union.anon* %21, %union.anon** %22, align 8, !tbaa !14, !alias.scope !22
  %_M_p.i.i26.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %call2.i.i54, i64 0, i32 0, i32 0
  %33 = load i8*, i8** %_M_p.i.i26.i.i, align 8, !tbaa !17
  %34 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %call2.i.i54, i64 0, i32 2
  %arraydecay.i.i.i.i = bitcast %union.anon* %34 to i8*
  %cmp.i27.i.i = icmp eq i8* %33, %arraydecay.i.i.i.i
  br i1 %cmp.i27.i.i, label %if.then.i.i, label %if.else.i.i

if.then.i.i:                                      ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc.exit.i
  %_M_string_length.i25.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %call2.i.i54, i64 0, i32 1
  %35 = load i64, i64* %_M_string_length.i25.i.i, align 8, !tbaa !19
  %add.i.i = add i64 %35, 1
  %cmp.i.i2.i = icmp eq i64 %add.i.i, 0
  br i1 %cmp.i.i2.i, label %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_.exit, label %if.end.i.i.i55

if.end.i.i.i55:                                   ; preds = %if.then.i.i
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %arraydecay.i.i.i, i8* nonnull align 8 %33, i64 %add.i.i, i1 false) #38
  br label %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_.exit

if.else.i.i:                                      ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc.exit.i
  store i8* %33, i8** %_M_p.i23.i.i, align 8, !tbaa !17, !alias.scope !22
  %_M_allocated_capacity.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %call2.i.i54, i64 0, i32 2, i32 0
  %36 = load i64, i64* %_M_allocated_capacity.i.i, align 8, !tbaa !21
  store i64 %36, i64* %_M_allocated_capacity.i.i.i, align 8, !tbaa !21, !alias.scope !22
  br label %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_.exit

_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_.exit: ; preds = %if.else.i.i, %if.end.i.i.i55, %if.then.i.i
  %_M_string_length.i22.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %call2.i.i54, i64 0, i32 1
  %37 = load i64, i64* %_M_string_length.i22.i.i, align 8, !tbaa !19
  store i64 %37, i64* %_M_string_length.i.i.i56, align 8, !tbaa !19, !alias.scope !22
  %38 = bitcast %"class.std::__cxx11::basic_string"* %call2.i.i54 to %union.anon**
  store %union.anon* %34, %union.anon** %38, align 8, !tbaa !17
  store i64 0, i64* %_M_string_length.i22.i.i, align 8, !tbaa !19
  store i8 0, i8* %arraydecay.i.i.i.i, align 8, !tbaa !21
  call void @_Z8getTestsRSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEPKcS5_(%"class.std::vector"* nonnull align 8 dereferenceable(24) %tests, i8* nonnull %15, %"class.std::__cxx11::basic_string"* nonnull %agg.tmp)
  %39 = load i8*, i8** %_M_p.i23.i.i, align 8, !tbaa !17
  %cmp.i.i.i63 = icmp eq i8* %39, %arraydecay.i.i.i
  br i1 %cmp.i.i.i63, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit65, label %if.then.i.i64

if.then.i.i64:                                    ; preds = %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_.exit
  call void @_ZdlPv(i8* %39) #41
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit65

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit65: ; preds = %if.then.i.i64, %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_.exit
  %40 = load i8*, i8** %_M_p.i.i.i.i, align 8, !tbaa !17
  %cmp.i.i.i68 = icmp eq i8* %40, %20
  br i1 %cmp.i.i.i68, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit70, label %if.then.i.i69

if.then.i.i69:                                    ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit65
  call void @_ZdlPv(i8* %40) #41
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit70

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit70: ; preds = %if.then.i.i69, %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit65
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %16) #38
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %15) #38
  br label %while.cond.backedge

cleanup:                                          ; preds = %lor.lhs.false, %if.then4
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %15) #38
  br label %while.cond.backedge

if.else:                                          ; preds = %while.body
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %0) #38
  %arraydecay22 = getelementptr inbounds %struct.dirent, %struct.dirent* %call2128, i64 0, i32 4, i64 0
  store %union.anon* %1, %union.anon** %2, align 8, !tbaa !14
  %call.i.i = call i64 @strlen(i8* nonnull dereferenceable(1) %arraydecay22) #38
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #38
  store i64 %call.i.i, i64* %__dnew.i.i, align 8, !tbaa !20
  %cmp.i.i = icmp ugt i64 %call.i.i, 15
  br i1 %cmp.i.i, label %if.then.i.i73, label %if.end.i.i

if.then.i.i73:                                    ; preds = %if.else
  %call2.i.i71 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %ref.tmp20, i64* nonnull align 8 dereferenceable(8) %__dnew.i.i, i64 0) #38
  store i8* %call2.i.i71, i8** %_M_p.i.i.i, align 8, !tbaa !17
  %41 = load i64, i64* %__dnew.i.i, align 8, !tbaa !20
  store i64 %41, i64* %_M_allocated_capacity.i.i.i72, align 8, !tbaa !21
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i73, %if.else
  %42 = phi i8* [ %call2.i.i71, %if.then.i.i73 ], [ %3, %if.else ]
  switch i64 %call.i.i, label %if.end.i.i.i.i.i [
    i64 1, label %if.then.i.i7.i.i
    i64 0, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit
  ]

if.then.i.i7.i.i:                                 ; preds = %if.end.i.i
  %43 = load i8, i8* %arraydecay22, align 1, !tbaa !21
  store i8 %43, i8* %42, align 1, !tbaa !21
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit

if.end.i.i.i.i.i:                                 ; preds = %if.end.i.i
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %42, i8* nonnull align 1 %arraydecay22, i64 %call.i.i, i1 false) #38
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit: ; preds = %if.end.i.i.i.i.i, %if.then.i.i7.i.i, %if.end.i.i
  %44 = load i64, i64* %__dnew.i.i, align 8, !tbaa !20
  store i64 %44, i64* %_M_string_length.i.i.i.i74, align 8, !tbaa !19
  %45 = load i8*, i8** %_M_p.i.i.i, align 8, !tbaa !17
  %arrayidx.i.i.i = getelementptr inbounds i8, i8* %45, i64 %44
  store i8 0, i8* %arrayidx.i.i.i, align 1, !tbaa !21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #38
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %5) #38
  store %union.anon* %6, %union.anon** %7, align 8, !tbaa !14
  store i32 1954051118, i32* %9, align 8
  store i64 4, i64* %_M_string_length.i.i.i.i86, align 8, !tbaa !19
  store i8 0, i8* %arrayidx.i.i.i87, align 4, !tbaa !21
  %46 = load i64, i64* %_M_string_length.i.i.i.i74, align 8, !tbaa !19
  %cmp.i = icmp ult i64 %46, 4
  br i1 %cmp.i, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit94, label %for.body.i.i.preheader.i.i.i

for.body.i.i.preheader.i.i.i:                     ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit
  %47 = load i8*, i8** %_M_p.i.i.i, align 8, !tbaa !17, !noalias !25
  %add.ptr.i.i.i = getelementptr inbounds i8, i8* %47, i64 %46
  br label %for.body.i.i.i.i.i

for.body.i.i.i.i.i:                               ; preds = %for.body.i.i.i.i.i, %for.body.i.i.preheader.i.i.i
  %agg.tmp2.sroa.0.0.i.i.i.i = phi i8* [ %add.ptr.i.i.i, %for.body.i.i.preheader.i.i.i ], [ %incdec.ptr.i9.i.i.i.i.i, %for.body.i.i.i.i.i ]
  %48 = phi i8* [ %arrayidx.i.i.i87, %for.body.i.i.preheader.i.i.i ], [ %incdec.ptr.i11.i.i.i.i.i, %for.body.i.i.i.i.i ]
  %incdec.ptr.i11.i.i.i.i.i = getelementptr inbounds i8, i8* %48, i64 -1
  %49 = load i8, i8* %incdec.ptr.i11.i.i.i.i.i, align 1, !tbaa !21
  %incdec.ptr.i9.i.i.i.i.i = getelementptr inbounds i8, i8* %agg.tmp2.sroa.0.0.i.i.i.i, i64 -1
  %50 = load i8, i8* %incdec.ptr.i9.i.i.i.i.i, align 1, !tbaa !21
  %cmp.i.i.i.i.i = icmp eq i8 %49, %50
  %cmp.i.i.not.i.i.i.i.i = icmp ne i8* %incdec.ptr.i11.i.i.i.i.i, %8
  %51 = and i1 %cmp.i.i.i.i.i, %cmp.i.i.not.i.i.i.i.i
  br i1 %51, label %for.body.i.i.i.i.i, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit94, !llvm.loop !28

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit94: ; preds = %for.body.i.i.i.i.i, %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit
  %retval.0.i = phi i1 [ false, %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit ], [ %cmp.i.i.i.i.i, %for.body.i.i.i.i.i ]
  %.pre = load i8*, i8** %_M_p.i.i.i, align 8, !tbaa !17
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %5) #38
  %cmp.i.i.i97 = icmp eq i8* %.pre, %3
  br i1 %cmp.i.i.i97, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit99, label %if.then.i.i98

if.then.i.i98:                                    ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit94
  call void @_ZdlPv(i8* %.pre) #41
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit99

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit99: ; preds = %if.then.i.i98, %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit94
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %0) #38
  br i1 %retval.0.i, label %if.then27, label %while.cond.backedge

if.then27:                                        ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit99
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %10) #38
  call void @llvm.experimental.noalias.scope.decl(metadata !29)
  store %union.anon* %11, %union.anon** %12, align 8, !tbaa !14, !alias.scope !29
  %52 = load i8*, i8** %_M_p.i9.i.i101, align 8, !tbaa !17, !noalias !29
  %53 = load i64, i64* %_M_string_length.i.i.i102, align 8, !tbaa !19, !noalias !29
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #38, !noalias !29
  store i64 %53, i64* %__dnew.i.i.i100, align 8, !tbaa !20, !noalias !29
  %cmp.i.i.i103 = icmp ugt i64 %53, 15
  br i1 %cmp.i.i.i103, label %if.then.i.i.i108, label %if.end.i.i.i109

if.then.i.i.i108:                                 ; preds = %if.then27
  %call2.i.i.i105 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %ref.tmp28, i64* nonnull align 8 dereferenceable(8) %__dnew.i.i.i100, i64 0) #38
  store i8* %call2.i.i.i105, i8** %_M_p.i.i.i.i106, align 8, !tbaa !17, !alias.scope !29
  %54 = load i64, i64* %__dnew.i.i.i100, align 8, !tbaa !20, !noalias !29
  store i64 %54, i64* %_M_allocated_capacity.i.i.i.i107, align 8, !tbaa !21, !alias.scope !29
  br label %if.end.i.i.i109

if.end.i.i.i109:                                  ; preds = %if.then.i.i.i108, %if.then27
  %55 = phi i8* [ %call2.i.i.i105, %if.then.i.i.i108 ], [ %14, %if.then27 ]
  switch i64 %53, label %if.end.i.i.i.i.i.i111 [
    i64 1, label %if.then.i.i7.i.i.i110
    i64 0, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i118
  ]

if.then.i.i7.i.i.i110:                            ; preds = %if.end.i.i.i109
  %56 = load i8, i8* %52, align 1, !tbaa !21
  store i8 %56, i8* %55, align 1, !tbaa !21
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i118

if.end.i.i.i.i.i.i111:                            ; preds = %if.end.i.i.i109
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %55, i8* align 1 %52, i64 %53, i1 false) #38
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i118

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i118: ; preds = %if.end.i.i.i.i.i.i111, %if.then.i.i7.i.i.i110, %if.end.i.i.i109
  %57 = load i64, i64* %__dnew.i.i.i100, align 8, !tbaa !20, !noalias !29
  store i64 %57, i64* %_M_string_length.i.i.i.i.i113, align 8, !tbaa !19, !alias.scope !29
  %58 = load i8*, i8** %_M_p.i.i.i.i106, align 8, !tbaa !17, !alias.scope !29
  %arrayidx.i.i.i.i114 = getelementptr inbounds i8, i8* %58, i64 %57
  store i8 0, i8* %arrayidx.i.i.i.i114, align 1, !tbaa !21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #38, !noalias !29
  %call.i.i.i115 = call i64 @strlen(i8* nonnull dereferenceable(1) %arraydecay22) #38, !noalias !29
  %59 = load i64, i64* %_M_string_length.i.i.i.i.i113, align 8, !tbaa !19, !alias.scope !29
  %sub3.i.i.i116 = sub i64 4611686018427387903, %59
  %cmp.i.i1.i117 = icmp ult i64 %sub3.i.i.i116, %call.i.i.i115
  br i1 %cmp.i.i1.i117, label %if.then.i.i2.i119, label %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_.exit122

if.then.i.i2.i119:                                ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i118
  call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.33, i64 0, i64 0)) #40
  unreachable

_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_.exit122: ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i118
  %call2.i.i120 = call nonnull align 8 dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %ref.tmp28, i8* nonnull %arraydecay22, i64 %call.i.i.i115) #38
  %60 = load %"class.std::__cxx11::basic_string"*, %"class.std::__cxx11::basic_string"** %_M_finish.i.i, align 8, !tbaa !32
  %61 = load %"class.std::__cxx11::basic_string"*, %"class.std::__cxx11::basic_string"** %_M_end_of_storage.i.i, align 8, !tbaa !34
  %cmp.not.i.i = icmp eq %"class.std::__cxx11::basic_string"* %60, %61
  br i1 %cmp.not.i.i, label %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_.exit, label %if.then.i.i123

if.then.i.i123:                                   ; preds = %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_.exit122
  %62 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %60, i64 0, i32 2
  %arraydecay.i.i.i.i.i.i = bitcast %union.anon* %62 to i8*
  %63 = bitcast %"class.std::__cxx11::basic_string"* %60 to %union.anon**
  store %union.anon* %62, %union.anon** %63, align 8, !tbaa !14
  %64 = load i8*, i8** %_M_p.i.i.i.i106, align 8, !tbaa !17
  %cmp.i27.i.i.i.i.i = icmp eq i8* %64, %14
  br i1 %cmp.i27.i.i.i.i.i, label %if.then.i.i.i.i.i, label %if.else.i.i.i.i.i

if.then.i.i.i.i.i:                                ; preds = %if.then.i.i123
  %65 = load i64, i64* %_M_string_length.i.i.i.i.i113, align 8, !tbaa !19
  %add.i.i.i.i.i = add i64 %65, 1
  %cmp.i.i.i.i.i.i = icmp eq i64 %add.i.i.i.i.i, 0
  br i1 %cmp.i.i.i.i.i.i, label %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_.exit.thread, label %if.end.i.i.i.i.i.i124

if.end.i.i.i.i.i.i124:                            ; preds = %if.then.i.i.i.i.i
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %arraydecay.i.i.i.i.i.i, i8* nonnull align 8 %14, i64 %add.i.i.i.i.i, i1 false) #38
  br label %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_.exit.thread

if.else.i.i.i.i.i:                                ; preds = %if.then.i.i123
  %_M_p.i23.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %60, i64 0, i32 0, i32 0
  store i8* %64, i8** %_M_p.i23.i.i.i.i.i, align 8, !tbaa !17
  %66 = load i64, i64* %_M_allocated_capacity.i.i.i.i107, align 8, !tbaa !21
  %_M_allocated_capacity.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %60, i64 0, i32 2, i32 0
  store i64 %66, i64* %_M_allocated_capacity.i.i.i.i.i.i, align 8, !tbaa !21
  %.pre129 = load i64, i64* %_M_string_length.i.i.i.i.i113, align 8, !tbaa !19
  br label %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_.exit.thread

_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_.exit.thread: ; preds = %if.else.i.i.i.i.i, %if.end.i.i.i.i.i.i124, %if.then.i.i.i.i.i
  %67 = phi i64 [ %.pre129, %if.else.i.i.i.i.i ], [ %65, %if.end.i.i.i.i.i.i124 ], [ -1, %if.then.i.i.i.i.i ]
  %_M_string_length.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %60, i64 0, i32 1
  store i64 %67, i64* %_M_string_length.i.i.i.i.i.i, align 8, !tbaa !19
  %68 = load %"class.std::__cxx11::basic_string"*, %"class.std::__cxx11::basic_string"** %_M_finish.i.i, align 8, !tbaa !32
  %incdec.ptr.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %68, i64 1
  store %"class.std::__cxx11::basic_string"* %incdec.ptr.i.i, %"class.std::__cxx11::basic_string"** %_M_finish.i.i, align 8, !tbaa !32
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit

_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_.exit: ; preds = %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_.exit122
  call void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_(%"class.std::vector"* nonnull dereferenceable(24) %tests, %"class.std::__cxx11::basic_string"* %60, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %ref.tmp28) #38
  %.pre130 = load i8*, i8** %_M_p.i.i.i.i106, align 8, !tbaa !17
  %cmp.i.i.i59 = icmp eq i8* %.pre130, %14
  br i1 %cmp.i.i.i59, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit, label %if.then.i.i60

if.then.i.i60:                                    ; preds = %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_.exit
  call void @_ZdlPv(i8* %.pre130) #41
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit: ; preds = %if.then.i.i60, %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_.exit, %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_.exit.thread
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %10) #38
  br label %while.cond.backedge

while.cond.backedge:                              ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit, %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit99, %cleanup, %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit70
  %call2 = call %struct.dirent* @readdir(%struct.__dirstream* nonnull %call) #38
  %cmp.not = icmp eq %struct.dirent* %call2, null
  br i1 %cmp.not, label %while.end, label %while.body, !llvm.loop !8

while.end:                                        ; preds = %while.cond.backedge, %while.cond.preheader
  %call33 = call i32 @closedir(%struct.__dirstream* nonnull %call)
  br label %cleanup34

cleanup34:                                        ; preds = %while.end, %entry
  ret void
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind
declare dso_local noalias noundef %struct.__dirstream* @opendir(i8* nocapture noundef readonly) local_unnamed_addr #2

declare dso_local %struct.dirent* @readdir(%struct.__dirstream*) local_unnamed_addr #3

; Function Attrs: argmemonly nofree nounwind readonly willreturn
declare dso_local i32 @strcmp(i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #4

; Function Attrs: nofree nounwind
declare dso_local noundef i32 @snprintf(i8* noalias nocapture noundef writeonly, i64 noundef, i8* nocapture noundef readonly, ...) local_unnamed_addr #2

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind
declare dso_local noundef i32 @closedir(%struct.__dirstream* nocapture noundef) local_unnamed_addr #2

; Function Attrs: nounwind uwtable mustprogress
define dso_local i64 @_Z15find_last_slashRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %filepath) local_unnamed_addr #5 {
entry:
  %call2.i = tail call i64 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12find_last_ofEPKcmm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %filepath, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0), i64 -1, i64 2) #38
  ret i64 %call2.i
}

; Function Attrs: nounwind uwtable
define dso_local void @_Z20filepath_to_basenameRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%"class.std::__cxx11::basic_string"* noalias sret(%"class.std::__cxx11::basic_string") align 8 %agg.result, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %filepath) local_unnamed_addr #0 {
entry:
  %__dnew.i.i.i31 = alloca i64, align 8
  %__dnew.i.i15 = alloca i64, align 8
  %__dnew.i.i.i = alloca i64, align 8
  %__dnew.i.i = alloca i64, align 8
  %filename = alloca %"class.std::__cxx11::basic_string", align 8
  %call2.i.i = tail call i64 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12find_last_ofEPKcmm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %filepath, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0), i64 -1, i64 2) #38
  %0 = bitcast %"class.std::__cxx11::basic_string"* %filename to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %0) #38
  %cmp = icmp eq i64 %call2.i.i, -1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %filename, i64 0, i32 2
  %2 = bitcast %"class.std::__cxx11::basic_string"* %filename to %union.anon**
  store %union.anon* %1, %union.anon** %2, align 8, !tbaa !14
  %_M_p.i9.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %filepath, i64 0, i32 0, i32 0
  %3 = load i8*, i8** %_M_p.i9.i, align 8, !tbaa !17
  %_M_string_length.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %filepath, i64 0, i32 1
  %4 = load i64, i64* %_M_string_length.i.i, align 8, !tbaa !19
  %5 = bitcast i64* %__dnew.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #38
  store i64 %4, i64* %__dnew.i.i, align 8, !tbaa !20
  %cmp.i.i = icmp ugt i64 %4, 15
  br i1 %cmp.i.i, label %if.then.i.i, label %entry.if.end_crit_edge.i.i

entry.if.end_crit_edge.i.i:                       ; preds = %cond.true
  %6 = bitcast %union.anon* %1 to i8*
  br label %if.end.i.i

if.then.i.i:                                      ; preds = %cond.true
  %call2.i.i12 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %filename, i64* nonnull align 8 dereferenceable(8) %__dnew.i.i, i64 0) #38
  %_M_p.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %filename, i64 0, i32 0, i32 0
  store i8* %call2.i.i12, i8** %_M_p.i.i.i, align 8, !tbaa !17
  %7 = load i64, i64* %__dnew.i.i, align 8, !tbaa !20
  %_M_allocated_capacity.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %filename, i64 0, i32 2, i32 0
  store i64 %7, i64* %_M_allocated_capacity.i.i.i, align 8, !tbaa !21
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %entry.if.end_crit_edge.i.i
  %8 = phi i8* [ %6, %entry.if.end_crit_edge.i.i ], [ %call2.i.i12, %if.then.i.i ]
  switch i64 %4, label %if.end.i.i.i.i.i [
    i64 1, label %if.then.i.i7.i.i
    i64 0, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit
  ]

if.then.i.i7.i.i:                                 ; preds = %if.end.i.i
  %9 = load i8, i8* %3, align 1, !tbaa !21
  store i8 %9, i8* %8, align 1, !tbaa !21
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit

if.end.i.i.i.i.i:                                 ; preds = %if.end.i.i
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %8, i8* align 1 %3, i64 %4, i1 false) #38
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit: ; preds = %if.end.i.i.i.i.i, %if.then.i.i7.i.i, %if.end.i.i
  %_M_p.i8.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %filename, i64 0, i32 0, i32 0
  %10 = load i64, i64* %__dnew.i.i, align 8, !tbaa !20
  %_M_string_length.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %filename, i64 0, i32 1
  store i64 %10, i64* %_M_string_length.i.i.i.i, align 8, !tbaa !19
  %11 = load i8*, i8** %_M_p.i8.i.i, align 8, !tbaa !17
  %arrayidx.i.i.i = getelementptr inbounds i8, i8* %11, i64 %10
  store i8 0, i8* %arrayidx.i.i.i, align 1, !tbaa !21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #38
  br label %cond.end

cond.false:                                       ; preds = %entry
  %add = add nuw i64 %call2.i.i, 1
  tail call void @llvm.experimental.noalias.scope.decl(metadata !35)
  %_M_string_length.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %filepath, i64 0, i32 1
  %12 = load i64, i64* %_M_string_length.i.i.i, align 8, !tbaa !19, !noalias !35
  %cmp.i.i13.not = icmp ugt i64 %12, %call2.i.i
  br i1 %cmp.i.i13.not, label %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEmPKc.exit.i.i, label %if.then.i.i14

if.then.i.i14:                                    ; preds = %cond.false
  tail call void (i8*, ...) @_ZSt24__throw_out_of_range_fmtPKcz(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.43, i64 0, i64 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.42, i64 0, i64 0), i64 %add, i64 %12) #40
  unreachable

_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEmPKc.exit.i.i: ; preds = %cond.false
  %13 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %filename, i64 0, i32 2
  %14 = bitcast %"class.std::__cxx11::basic_string"* %filename to %union.anon**
  store %union.anon* %13, %union.anon** %14, align 8, !tbaa !14, !alias.scope !35
  %15 = bitcast %union.anon* %13 to i8*
  %_M_p.i16.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %filepath, i64 0, i32 0, i32 0
  %16 = load i8*, i8** %_M_p.i16.i.i, align 8, !tbaa !17, !noalias !35
  %add.ptr.i.i = getelementptr inbounds i8, i8* %16, i64 %add
  %sub.i.i.i = sub i64 %12, %add
  %17 = bitcast i64* %__dnew.i.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #38, !noalias !35
  store i64 %sub.i.i.i, i64* %__dnew.i.i.i, align 8, !tbaa !20, !noalias !35
  %cmp.i.i.i = icmp ugt i64 %sub.i.i.i, 15
  br i1 %cmp.i.i.i, label %if.then.i.i.i, label %if.end.i.i.i

if.then.i.i.i:                                    ; preds = %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEmPKc.exit.i.i
  %call2.i.i.i = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %filename, i64* nonnull align 8 dereferenceable(8) %__dnew.i.i.i, i64 0) #38
  %_M_p.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %filename, i64 0, i32 0, i32 0
  store i8* %call2.i.i.i, i8** %_M_p.i.i.i.i, align 8, !tbaa !17, !alias.scope !35
  %18 = load i64, i64* %__dnew.i.i.i, align 8, !tbaa !20, !noalias !35
  %_M_allocated_capacity.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %filename, i64 0, i32 2, i32 0
  store i64 %18, i64* %_M_allocated_capacity.i.i.i.i, align 8, !tbaa !21, !alias.scope !35
  br label %if.end.i.i.i

if.end.i.i.i:                                     ; preds = %if.then.i.i.i, %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEmPKc.exit.i.i
  %19 = phi i8* [ %call2.i.i.i, %if.then.i.i.i ], [ %15, %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEmPKc.exit.i.i ]
  switch i64 %sub.i.i.i, label %if.end.i.i.i.i.i.i [
    i64 1, label %if.then.i.i7.i.i.i
    i64 0, label %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm.exit
  ]

if.then.i.i7.i.i.i:                               ; preds = %if.end.i.i.i
  %20 = load i8, i8* %add.ptr.i.i, align 1, !tbaa !21
  store i8 %20, i8* %19, align 1, !tbaa !21
  br label %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm.exit

if.end.i.i.i.i.i.i:                               ; preds = %if.end.i.i.i
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %19, i8* align 1 %add.ptr.i.i, i64 %sub.i.i.i, i1 false) #38
  br label %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm.exit

_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm.exit: ; preds = %if.end.i.i.i.i.i.i, %if.then.i.i7.i.i.i, %if.end.i.i.i
  %_M_p.i8.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %filename, i64 0, i32 0, i32 0
  %21 = load i64, i64* %__dnew.i.i.i, align 8, !tbaa !20, !noalias !35
  %_M_string_length.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %filename, i64 0, i32 1
  store i64 %21, i64* %_M_string_length.i.i.i.i.i, align 8, !tbaa !19, !alias.scope !35
  %22 = load i8*, i8** %_M_p.i8.i.i.i, align 8, !tbaa !17, !alias.scope !35
  %arrayidx.i.i.i.i = getelementptr inbounds i8, i8* %22, i64 %21
  store i8 0, i8* %arrayidx.i.i.i.i, align 1, !tbaa !21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #38, !noalias !35
  br label %cond.end

cond.end:                                         ; preds = %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm.exit, %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit
  %call.i = call i64 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5rfindEcm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %filename, i8 signext 46, i64 -1) #38
  %cmp2 = icmp eq i64 %call.i, -1
  br i1 %cmp2, label %cond.true3, label %cond.false4

cond.true3:                                       ; preds = %cond.end
  %23 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.result, i64 0, i32 2
  %24 = bitcast %"class.std::__cxx11::basic_string"* %agg.result to %union.anon**
  store %union.anon* %23, %union.anon** %24, align 8, !tbaa !14
  %_M_p.i9.i16 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %filename, i64 0, i32 0, i32 0
  %25 = load i8*, i8** %_M_p.i9.i16, align 8, !tbaa !17
  %_M_string_length.i.i17 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %filename, i64 0, i32 1
  %26 = load i64, i64* %_M_string_length.i.i17, align 8, !tbaa !19
  %27 = bitcast i64* %__dnew.i.i15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27) #38
  store i64 %26, i64* %__dnew.i.i15, align 8, !tbaa !20
  %cmp.i.i18 = icmp ugt i64 %26, 15
  br i1 %cmp.i.i18, label %if.then.i.i23, label %entry.if.end_crit_edge.i.i19

entry.if.end_crit_edge.i.i19:                     ; preds = %cond.true3
  %28 = bitcast %union.anon* %23 to i8*
  br label %if.end.i.i24

if.then.i.i23:                                    ; preds = %cond.true3
  %call2.i.i20 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %agg.result, i64* nonnull align 8 dereferenceable(8) %__dnew.i.i15, i64 0) #38
  %_M_p.i.i.i21 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.result, i64 0, i32 0, i32 0
  store i8* %call2.i.i20, i8** %_M_p.i.i.i21, align 8, !tbaa !17
  %29 = load i64, i64* %__dnew.i.i15, align 8, !tbaa !20
  %_M_allocated_capacity.i.i.i22 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.result, i64 0, i32 2, i32 0
  store i64 %29, i64* %_M_allocated_capacity.i.i.i22, align 8, !tbaa !21
  br label %if.end.i.i24

if.end.i.i24:                                     ; preds = %if.then.i.i23, %entry.if.end_crit_edge.i.i19
  %30 = phi i8* [ %28, %entry.if.end_crit_edge.i.i19 ], [ %call2.i.i20, %if.then.i.i23 ]
  switch i64 %26, label %if.end.i.i.i.i.i26 [
    i64 1, label %if.then.i.i7.i.i25
    i64 0, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit30
  ]

if.then.i.i7.i.i25:                               ; preds = %if.end.i.i24
  %31 = load i8, i8* %25, align 1, !tbaa !21
  store i8 %31, i8* %30, align 1, !tbaa !21
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit30

if.end.i.i.i.i.i26:                               ; preds = %if.end.i.i24
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %30, i8* align 1 %25, i64 %26, i1 false) #38
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit30

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit30: ; preds = %if.end.i.i.i.i.i26, %if.then.i.i7.i.i25, %if.end.i.i24
  %_M_p.i8.i.i27 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.result, i64 0, i32 0, i32 0
  %32 = load i64, i64* %__dnew.i.i15, align 8, !tbaa !20
  %_M_string_length.i.i.i.i28 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.result, i64 0, i32 1
  store i64 %32, i64* %_M_string_length.i.i.i.i28, align 8, !tbaa !19
  %33 = load i8*, i8** %_M_p.i8.i.i27, align 8, !tbaa !17
  %arrayidx.i.i.i29 = getelementptr inbounds i8, i8* %33, i64 %32
  store i8 0, i8* %arrayidx.i.i.i29, align 1, !tbaa !21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27) #38
  br label %nrvo.skipdtor

cond.false4:                                      ; preds = %cond.end
  call void @llvm.experimental.noalias.scope.decl(metadata !38)
  %_M_string_length.i.i.i32 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %filename, i64 0, i32 1
  %34 = load i64, i64* %_M_string_length.i.i.i32, align 8, !tbaa !19, !noalias !38
  %35 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.result, i64 0, i32 2
  %36 = bitcast %"class.std::__cxx11::basic_string"* %agg.result to %union.anon**
  store %union.anon* %35, %union.anon** %36, align 8, !tbaa !14, !alias.scope !38
  %37 = bitcast %union.anon* %35 to i8*
  %_M_p.i16.i.i33 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %filename, i64 0, i32 0, i32 0
  %38 = load i8*, i8** %_M_p.i16.i.i33, align 8, !tbaa !17, !noalias !38
  %cmp.i11.i.i = icmp ugt i64 %34, %call.i
  %spec.select.i.i.i = select i1 %cmp.i11.i.i, i64 %call.i, i64 %34
  %39 = bitcast i64* %__dnew.i.i.i31 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %39) #38, !noalias !38
  store i64 %spec.select.i.i.i, i64* %__dnew.i.i.i31, align 8, !tbaa !20, !noalias !38
  %cmp.i.i.i34 = icmp ugt i64 %spec.select.i.i.i, 15
  br i1 %cmp.i.i.i34, label %if.then.i.i.i39, label %if.end.i.i.i40

if.then.i.i.i39:                                  ; preds = %cond.false4
  %call2.i.i.i36 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %agg.result, i64* nonnull align 8 dereferenceable(8) %__dnew.i.i.i31, i64 0) #38
  %_M_p.i.i.i.i37 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.result, i64 0, i32 0, i32 0
  store i8* %call2.i.i.i36, i8** %_M_p.i.i.i.i37, align 8, !tbaa !17, !alias.scope !38
  %40 = load i64, i64* %__dnew.i.i.i31, align 8, !tbaa !20, !noalias !38
  %_M_allocated_capacity.i.i.i.i38 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.result, i64 0, i32 2, i32 0
  store i64 %40, i64* %_M_allocated_capacity.i.i.i.i38, align 8, !tbaa !21, !alias.scope !38
  br label %if.end.i.i.i40

if.end.i.i.i40:                                   ; preds = %if.then.i.i.i39, %cond.false4
  %41 = phi i8* [ %call2.i.i.i36, %if.then.i.i.i39 ], [ %37, %cond.false4 ]
  switch i64 %spec.select.i.i.i, label %if.end.i.i.i.i.i.i42 [
    i64 1, label %if.then.i.i7.i.i.i41
    i64 0, label %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm.exit46
  ]

if.then.i.i7.i.i.i41:                             ; preds = %if.end.i.i.i40
  %42 = load i8, i8* %38, align 1, !tbaa !21
  store i8 %42, i8* %41, align 1, !tbaa !21
  br label %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm.exit46

if.end.i.i.i.i.i.i42:                             ; preds = %if.end.i.i.i40
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %41, i8* align 1 %38, i64 %spec.select.i.i.i, i1 false) #38
  br label %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm.exit46

_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm.exit46: ; preds = %if.end.i.i.i.i.i.i42, %if.then.i.i7.i.i.i41, %if.end.i.i.i40
  %_M_p.i8.i.i.i43 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.result, i64 0, i32 0, i32 0
  %43 = load i64, i64* %__dnew.i.i.i31, align 8, !tbaa !20, !noalias !38
  %_M_string_length.i.i.i.i.i44 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.result, i64 0, i32 1
  store i64 %43, i64* %_M_string_length.i.i.i.i.i44, align 8, !tbaa !19, !alias.scope !38
  %44 = load i8*, i8** %_M_p.i8.i.i.i43, align 8, !tbaa !17, !alias.scope !38
  %arrayidx.i.i.i.i45 = getelementptr inbounds i8, i8* %44, i64 %43
  store i8 0, i8* %arrayidx.i.i.i.i45, align 1, !tbaa !21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %39) #38, !noalias !38
  br label %nrvo.skipdtor

nrvo.skipdtor:                                    ; preds = %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm.exit46, %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit30
  %_M_p.i.i.i.i47 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %filename, i64 0, i32 0, i32 0
  %45 = load i8*, i8** %_M_p.i.i.i.i47, align 8, !tbaa !17
  %46 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %filename, i64 0, i32 2
  %arraydecay.i.i.i.i = bitcast %union.anon* %46 to i8*
  %cmp.i.i.i48 = icmp eq i8* %45, %arraydecay.i.i.i.i
  br i1 %cmp.i.i.i48, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit, label %if.then.i.i49

if.then.i.i49:                                    ; preds = %nrvo.skipdtor
  call void @_ZdlPv(i8* %45) #41
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit: ; preds = %if.then.i.i49, %nrvo.skipdtor
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %0) #38
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local void @_Z19filepath_to_dirnameRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%"class.std::__cxx11::basic_string"* noalias sret(%"class.std::__cxx11::basic_string") align 8 %agg.result, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %filepath) local_unnamed_addr #0 {
entry:
  %__dnew.i.i.i = alloca i64, align 8
  %call2.i.i = tail call i64 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12find_last_ofEPKcmm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %filepath, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0), i64 -1, i64 2) #38
  %cmp = icmp eq i64 %call2.i.i, -1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %0 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.result, i64 0, i32 2
  %1 = bitcast %"class.std::__cxx11::basic_string"* %agg.result to %union.anon**
  store %union.anon* %0, %union.anon** %1, align 8, !tbaa !14
  %2 = bitcast %union.anon* %0 to i16*
  store i16 12078, i16* %2, align 8
  %_M_string_length.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.result, i64 0, i32 1
  store i64 2, i64* %_M_string_length.i.i.i.i, align 8, !tbaa !19
  %.cast = bitcast %union.anon* %0 to i8*
  %arrayidx.i.i.i = getelementptr inbounds i8, i8* %.cast, i64 2
  store i8 0, i8* %arrayidx.i.i.i, align 2, !tbaa !21
  br label %nrvo.skipdtor

cond.false:                                       ; preds = %entry
  %add = add nuw i64 %call2.i.i, 1
  tail call void @llvm.experimental.noalias.scope.decl(metadata !41)
  %_M_string_length.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %filepath, i64 0, i32 1
  %3 = load i64, i64* %_M_string_length.i.i.i, align 8, !tbaa !19, !noalias !41
  %4 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.result, i64 0, i32 2
  %5 = bitcast %"class.std::__cxx11::basic_string"* %agg.result to %union.anon**
  store %union.anon* %4, %union.anon** %5, align 8, !tbaa !14, !alias.scope !41
  %6 = bitcast %union.anon* %4 to i8*
  %_M_p.i16.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %filepath, i64 0, i32 0, i32 0
  %7 = load i8*, i8** %_M_p.i16.i.i, align 8, !tbaa !17, !noalias !41
  %cmp.i11.i.i = icmp ugt i64 %3, %add
  %spec.select.i.i.i = select i1 %cmp.i11.i.i, i64 %add, i64 %3
  %8 = bitcast i64* %__dnew.i.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #38, !noalias !41
  store i64 %spec.select.i.i.i, i64* %__dnew.i.i.i, align 8, !tbaa !20, !noalias !41
  %cmp.i.i.i = icmp ugt i64 %spec.select.i.i.i, 15
  br i1 %cmp.i.i.i, label %if.then.i.i.i, label %if.end.i.i.i

if.then.i.i.i:                                    ; preds = %cond.false
  %call2.i.i.i = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %agg.result, i64* nonnull align 8 dereferenceable(8) %__dnew.i.i.i, i64 0) #38
  %_M_p.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.result, i64 0, i32 0, i32 0
  store i8* %call2.i.i.i, i8** %_M_p.i.i.i.i, align 8, !tbaa !17, !alias.scope !41
  %9 = load i64, i64* %__dnew.i.i.i, align 8, !tbaa !20, !noalias !41
  %_M_allocated_capacity.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.result, i64 0, i32 2, i32 0
  store i64 %9, i64* %_M_allocated_capacity.i.i.i.i, align 8, !tbaa !21, !alias.scope !41
  br label %if.end.i.i.i

if.end.i.i.i:                                     ; preds = %if.then.i.i.i, %cond.false
  %10 = phi i8* [ %call2.i.i.i, %if.then.i.i.i ], [ %6, %cond.false ]
  switch i64 %spec.select.i.i.i, label %if.end.i.i.i.i.i.i [
    i64 1, label %if.then.i.i7.i.i.i
    i64 0, label %cond.end
  ]

if.then.i.i7.i.i.i:                               ; preds = %if.end.i.i.i
  %11 = load i8, i8* %7, align 1, !tbaa !21
  store i8 %11, i8* %10, align 1, !tbaa !21
  br label %cond.end

if.end.i.i.i.i.i.i:                               ; preds = %if.end.i.i.i
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %10, i8* align 1 %7, i64 %spec.select.i.i.i, i1 false) #38
  br label %cond.end

cond.end:                                         ; preds = %if.end.i.i.i.i.i.i, %if.then.i.i7.i.i.i, %if.end.i.i.i
  %_M_p.i8.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.result, i64 0, i32 0, i32 0
  %12 = load i64, i64* %__dnew.i.i.i, align 8, !tbaa !20, !noalias !41
  %_M_string_length.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.result, i64 0, i32 1
  store i64 %12, i64* %_M_string_length.i.i.i.i.i, align 8, !tbaa !19, !alias.scope !41
  %13 = load i8*, i8** %_M_p.i8.i.i.i, align 8, !tbaa !17, !alias.scope !41
  %arrayidx.i.i.i.i = getelementptr inbounds i8, i8* %13, i64 %12
  store i8 0, i8* %arrayidx.i.i.i.i, align 1, !tbaa !21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #38, !noalias !41
  br label %nrvo.skipdtor

nrvo.skipdtor:                                    ; preds = %cond.end, %cond.true
  ret void
}

declare dso_local void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull dereferenceable(1)) unnamed_addr #3

; Function Attrs: nounwind
declare dso_local void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"* nonnull dereferenceable(1)) unnamed_addr #6

; Function Attrs: nofree nounwind
declare dso_local i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #7

; Function Attrs: norecurse nounwind readonly uwtable willreturn mustprogress
define dso_local float @_Z5tdiffP7timevalS0_(%struct.timeval* nocapture readonly %start, %struct.timeval* nocapture readonly %end) local_unnamed_addr #8 {
entry:
  %tv_sec = getelementptr inbounds %struct.timeval, %struct.timeval* %end, i64 0, i32 0
  %0 = load i64, i64* %tv_sec, align 8, !tbaa !44
  %tv_sec1 = getelementptr inbounds %struct.timeval, %struct.timeval* %start, i64 0, i32 0
  %1 = load i64, i64* %tv_sec1, align 8, !tbaa !44
  %sub = sub nsw i64 %0, %1
  %conv = sitofp i64 %sub to double
  %tv_usec = getelementptr inbounds %struct.timeval, %struct.timeval* %end, i64 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !46
  %tv_usec2 = getelementptr inbounds %struct.timeval, %struct.timeval* %start, i64 0, i32 1
  %3 = load i64, i64* %tv_usec2, align 8, !tbaa !46
  %sub3 = sub nsw i64 %2, %3
  %conv4 = sitofp i64 %sub3 to double
  %mul = fmul fast double %conv4, 0x3EB0C6F7A0B5ED8D
  %add = fadd fast double %mul, %conv
  %conv5 = fptrunc double %add to float
  ret float %conv5
}

; Function Attrs: nounwind uwtable
define dso_local void @_Z15read_hand_modelRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP20HandModelLightMatrix(%"class.std::__cxx11::basic_string"* nocapture nonnull readonly align 8 dereferenceable(32) %path, %class.HandModelLightMatrix* %pmodel) local_unnamed_addr #0 {
entry:
  %__endptr.i.i576 = alloca i8*, align 8
  %__endptr.i.i544 = alloca i8*, align 8
  %__endptr.i.i528 = alloca i8*, align 8
  %__endptr.i.i512 = alloca i8*, align 8
  %__endptr.i.i494 = alloca i8*, align 8
  %__dnew.i.i.i467 = alloca i64, align 8
  %__dnew.i.i.i421 = alloca i64, align 8
  %__dnew.i.i.i322 = alloca i64, align 8
  %__endptr.i.i306 = alloca i8*, align 8
  %__endptr.i.i236 = alloca i8*, align 8
  %__endptr.i.i224 = alloca i8*, align 8
  %__endptr.i.i = alloca i8*, align 8
  %__dnew.i.i.i.i.i = alloca i64, align 8
  %__dnew.i.i.i = alloca i64, align 8
  %bones_in = alloca %"class.std::basic_ifstream", align 8
  %ref.tmp = alloca %"class.std::__cxx11::basic_string", align 8
  %s = alloca %"class.std::__cxx11::basic_string", align 8
  %tmp = alloca [16 x double], align 16
  %tmp702 = bitcast [16 x double]* %tmp to i8*
  %ref.tmp8 = alloca i32, align 4
  %ref.tmp9 = alloca i32, align 4
  %ref.tmp29 = alloca i32, align 4
  %ref.tmp30 = alloca i32, align 4
  %vert_in = alloca %"class.std::basic_ifstream", align 8
  %ref.tmp38 = alloca %"class.std::__cxx11::basic_string", align 8
  %ref.tmp56 = alloca %"class.std::basic_ifstream", align 8
  %ref.tmp57 = alloca %"class.std::__cxx11::basic_string", align 8
  %triangles_in = alloca %"class.std::basic_ifstream", align 8
  %ref.tmp106 = alloca %"class.std::__cxx11::basic_string", align 8
  %ss = alloca [3 x %"class.std::__cxx11::basic_string"], align 16
  %curr = alloca %struct.Triangle, align 4
  %0 = bitcast %"class.std::basic_ifstream"* %bones_in to i8*
  call void @llvm.lifetime.start.p0i8(i64 520, i8* nonnull %0) #38
  %1 = bitcast %"class.std::__cxx11::basic_string"* %ref.tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1) #38
  tail call void @llvm.experimental.noalias.scope.decl(metadata !47)
  %2 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp, i64 0, i32 2
  %3 = bitcast %"class.std::__cxx11::basic_string"* %ref.tmp to %union.anon**
  store %union.anon* %2, %union.anon** %3, align 8, !tbaa !14, !alias.scope !47
  %_M_p.i9.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %path, i64 0, i32 0, i32 0
  %4 = load i8*, i8** %_M_p.i9.i.i, align 8, !tbaa !17, !noalias !47
  %_M_string_length.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %path, i64 0, i32 1
  %5 = load i64, i64* %_M_string_length.i.i.i, align 8, !tbaa !19, !noalias !47
  %6 = bitcast i64* %__dnew.i.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #38, !noalias !47
  store i64 %5, i64* %__dnew.i.i.i, align 8, !tbaa !20, !noalias !47
  %cmp.i.i.i = icmp ugt i64 %5, 15
  br i1 %cmp.i.i.i, label %if.then.i.i.i, label %entry.if.end_crit_edge.i.i.i

entry.if.end_crit_edge.i.i.i:                     ; preds = %entry
  %7 = bitcast %union.anon* %2 to i8*
  br label %if.end.i.i.i

if.then.i.i.i:                                    ; preds = %entry
  %call2.i.i.i = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %ref.tmp, i64* nonnull align 8 dereferenceable(8) %__dnew.i.i.i, i64 0) #38
  %_M_p.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp, i64 0, i32 0, i32 0
  store i8* %call2.i.i.i, i8** %_M_p.i.i.i.i, align 8, !tbaa !17, !alias.scope !47
  %8 = load i64, i64* %__dnew.i.i.i, align 8, !tbaa !20, !noalias !47
  %_M_allocated_capacity.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp, i64 0, i32 2, i32 0
  store i64 %8, i64* %_M_allocated_capacity.i.i.i.i, align 8, !tbaa !21, !alias.scope !47
  br label %if.end.i.i.i

if.end.i.i.i:                                     ; preds = %if.then.i.i.i, %entry.if.end_crit_edge.i.i.i
  %9 = phi i8* [ %7, %entry.if.end_crit_edge.i.i.i ], [ %call2.i.i.i, %if.then.i.i.i ]
  switch i64 %5, label %if.end.i.i.i.i.i.i [
    i64 1, label %if.then.i.i7.i.i.i
    i64 0, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i
  ]

if.then.i.i7.i.i.i:                               ; preds = %if.end.i.i.i
  %10 = load i8, i8* %4, align 1, !tbaa !21
  store i8 %10, i8* %9, align 1, !tbaa !21
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i

if.end.i.i.i.i.i.i:                               ; preds = %if.end.i.i.i
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %9, i8* align 1 %4, i64 %5, i1 false) #38
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i: ; preds = %if.end.i.i.i.i.i.i, %if.then.i.i7.i.i.i, %if.end.i.i.i
  %_M_p.i8.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp, i64 0, i32 0, i32 0
  %11 = load i64, i64* %__dnew.i.i.i, align 8, !tbaa !20, !noalias !47
  %_M_string_length.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp, i64 0, i32 1
  store i64 %11, i64* %_M_string_length.i.i.i.i.i, align 8, !tbaa !19, !alias.scope !47
  %12 = load i8*, i8** %_M_p.i8.i.i.i, align 8, !tbaa !17, !alias.scope !47
  %arrayidx.i.i.i.i = getelementptr inbounds i8, i8* %12, i64 %11
  store i8 0, i8* %arrayidx.i.i.i.i, align 1, !tbaa !21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #38, !noalias !47
  %13 = load i64, i64* %_M_string_length.i.i.i.i.i, align 8, !tbaa !19, !alias.scope !47
  %sub3.i.i.i = sub i64 4611686018427387903, %13
  %cmp.i.i1.i = icmp ult i64 %sub3.i.i.i, 9
  br i1 %cmp.i.i1.i, label %if.then.i.i2.i, label %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_.exit

if.then.i.i2.i:                                   ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i
  call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.33, i64 0, i64 0)) #40
  unreachable

_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_.exit: ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i
  %call2.i.i = call nonnull align 8 dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %ref.tmp, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7, i64 0, i64 0), i64 9) #38
  call void @_ZNSt14basic_ifstreamIcSt11char_traitsIcEEC1ERKNSt7__cxx1112basic_stringIcS1_SaIcEEESt13_Ios_Openmode(%"class.std::basic_ifstream"* nonnull dereferenceable(256) %bones_in, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %ref.tmp, i32 8)
  %14 = load i8*, i8** %_M_p.i8.i.i.i, align 8, !tbaa !17
  %arraydecay.i.i.i.i = bitcast %union.anon* %2 to i8*
  %cmp.i.i.i191 = icmp eq i8* %14, %arraydecay.i.i.i.i
  br i1 %cmp.i.i.i191, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit, label %if.then.i.i

if.then.i.i:                                      ; preds = %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_.exit
  call void @_ZdlPv(i8* %14) #41
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit: ; preds = %if.then.i.i, %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_.exit
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1) #38
  %15 = bitcast %"class.std::__cxx11::basic_string"* %s to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %15) #38
  %16 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %s, i64 0, i32 2
  %17 = bitcast %"class.std::__cxx11::basic_string"* %s to %union.anon**
  store %union.anon* %16, %union.anon** %17, align 8, !tbaa !14
  %_M_string_length.i.i.i192 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %s, i64 0, i32 1
  store i64 0, i64* %_M_string_length.i.i.i192, align 8, !tbaa !19
  %.cast.i = bitcast %union.anon* %16 to i8*
  store i8 0, i8* %.cast.i, align 8, !tbaa !21
  %18 = bitcast %"class.std::basic_ifstream"* %bones_in to i8**
  %vtable689 = load i8*, i8** %18, align 8, !tbaa !50
  %vbase.offset.ptr690 = getelementptr i8, i8* %vtable689, i64 -24
  %19 = bitcast i8* %vbase.offset.ptr690 to i64*
  %vbase.offset691 = load i64, i64* %19, align 8
  %add.ptr = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %bones_in, i64 0, i32 1, i32 0, i32 2
  %20 = bitcast i8** %add.ptr to i8*
  %_M_streambuf_state.i.i692 = getelementptr inbounds i8, i8* %20, i64 %vbase.offset691
  %21 = bitcast i8* %_M_streambuf_state.i.i692 to i32*
  %22 = load i32, i32* %21, align 8, !tbaa !52
  %cmp.i693 = icmp eq i32 %22, 0
  br i1 %cmp.i693, label %while.body.lr.ph, label %while.end

while.body.lr.ph:                                 ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit
  %23 = bitcast %"class.std::basic_ifstream"* %bones_in to %"class.std::basic_istream"*
  %_M_finish.i = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %_M_end_of_storage.i = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %_M_p.i9.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %s, i64 0, i32 0, i32 0
  %24 = bitcast i64* %__dnew.i.i.i.i.i to i8*
  %bone_names = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 0
  %25 = bitcast i8** %__endptr.i.i to i8*
  %_M_finish.i.i = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %_M_end_of_storage.i.i = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %_M_start.i27.i.i = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %26 = bitcast i8** %__endptr.i.i224 to i8*
  %27 = bitcast i32* %ref.tmp8 to i8*
  %28 = bitcast i32* %ref.tmp9 to i8*
  %_M_finish.i210 = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1
  %_M_end_of_storage.i211 = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 2, i32 0, i32 0, i32 0, i32 2
  %base_relatives = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 2
  %29 = bitcast i8** %__endptr.i.i306 to i8*
  %30 = bitcast i8** %__endptr.i.i236 to i8*
  %arrayidx28 = getelementptr inbounds [16 x double], [16 x double]* %tmp, i64 0, i64 15
  %31 = bitcast i32* %ref.tmp29 to i8*
  %32 = bitcast i32* %ref.tmp30 to i8*
  %_M_finish.i249 = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 3, i32 0, i32 0, i32 0, i32 1
  %_M_end_of_storage.i250 = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 3, i32 0, i32 0, i32 0, i32 2
  %inverse_base_absolutes = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 3
  br label %while.body

while.body:                                       ; preds = %while.cond.backedge, %while.body.lr.ph
  %call1 = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EES4_(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) %23, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %s, i8 signext 58) #38
  %33 = load i64, i64* %_M_string_length.i.i.i192, align 8, !tbaa !19
  %cmp.i193 = icmp eq i64 %33, 0
  br i1 %cmp.i193, label %while.cond.backedge, label %if.end

if.end:                                           ; preds = %while.body
  %34 = load %"class.std::__cxx11::basic_string"*, %"class.std::__cxx11::basic_string"** %_M_finish.i, align 8, !tbaa !32
  %35 = load %"class.std::__cxx11::basic_string"*, %"class.std::__cxx11::basic_string"** %_M_end_of_storage.i, align 8, !tbaa !34
  %cmp.not.i = icmp eq %"class.std::__cxx11::basic_string"* %34, %35
  br i1 %cmp.not.i, label %if.else.i, label %if.then.i

if.then.i:                                        ; preds = %if.end
  %36 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %34, i64 0, i32 2
  %37 = bitcast %"class.std::__cxx11::basic_string"* %34 to %union.anon**
  store %union.anon* %36, %union.anon** %37, align 8, !tbaa !14
  %38 = load i8*, i8** %_M_p.i9.i.i.i.i, align 8, !tbaa !17
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #38
  store i64 %33, i64* %__dnew.i.i.i.i.i, align 8, !tbaa !20
  %cmp.i.i.i.i.i = icmp ugt i64 %33, 15
  br i1 %cmp.i.i.i.i.i, label %if.end.i.i.i.i.i.thread, label %if.end.i.i.i.i.i

if.end.i.i.i.i.i.thread:                          ; preds = %if.then.i
  %call2.i.i.i.i.i = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %34, i64* nonnull align 8 dereferenceable(8) %__dnew.i.i.i.i.i, i64 0) #38
  %_M_p.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %34, i64 0, i32 0, i32 0
  store i8* %call2.i.i.i.i.i, i8** %_M_p.i.i.i.i.i.i, align 8, !tbaa !17
  %39 = load i64, i64* %__dnew.i.i.i.i.i, align 8, !tbaa !20
  %_M_allocated_capacity.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %34, i64 0, i32 2, i32 0
  store i64 %39, i64* %_M_allocated_capacity.i.i.i.i.i.i, align 8, !tbaa !21
  br label %if.end.i.i.i.i.i.i.i.i

if.end.i.i.i.i.i:                                 ; preds = %if.then.i
  %40 = bitcast %union.anon* %36 to i8*
  %cond = icmp eq i64 %33, 1
  br i1 %cond, label %if.then.i.i7.i.i.i.i.i, label %if.end.i.i.i.i.i.i.i.i

if.then.i.i7.i.i.i.i.i:                           ; preds = %if.end.i.i.i.i.i
  %41 = load i8, i8* %38, align 1, !tbaa !21
  store i8 %41, i8* %40, align 1, !tbaa !21
  br label %_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_.exit.i

if.end.i.i.i.i.i.i.i.i:                           ; preds = %if.end.i.i.i.i.i, %if.end.i.i.i.i.i.thread
  %42 = phi i8* [ %call2.i.i.i.i.i, %if.end.i.i.i.i.i.thread ], [ %40, %if.end.i.i.i.i.i ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %42, i8* align 1 %38, i64 %33, i1 false) #38
  br label %_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_.exit.i

_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_.exit.i: ; preds = %if.end.i.i.i.i.i.i.i.i, %if.then.i.i7.i.i.i.i.i
  %_M_p.i8.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %34, i64 0, i32 0, i32 0
  %43 = load i64, i64* %__dnew.i.i.i.i.i, align 8, !tbaa !20
  %_M_string_length.i.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %34, i64 0, i32 1
  store i64 %43, i64* %_M_string_length.i.i.i.i.i.i.i, align 8, !tbaa !19
  %44 = load i8*, i8** %_M_p.i8.i.i.i.i.i, align 8, !tbaa !17
  %arrayidx.i.i.i.i.i.i = getelementptr inbounds i8, i8* %44, i64 %43
  store i8 0, i8* %arrayidx.i.i.i.i.i.i, align 1, !tbaa !21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #38
  %45 = load %"class.std::__cxx11::basic_string"*, %"class.std::__cxx11::basic_string"** %_M_finish.i, align 8, !tbaa !32
  %incdec.ptr.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %45, i64 1
  store %"class.std::__cxx11::basic_string"* %incdec.ptr.i, %"class.std::__cxx11::basic_string"** %_M_finish.i, align 8, !tbaa !32
  br label %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.exit

if.else.i:                                        ; preds = %if.end
  call void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_(%"class.std::vector"* nonnull dereferenceable(24) %bone_names, %"class.std::__cxx11::basic_string"* %34, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %s) #38
  br label %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.exit

_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.exit: ; preds = %if.else.i, %_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_.exit.i
  %call3 = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EES4_(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) %23, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %s, i8 signext 58) #38
  %46 = load i8*, i8** %_M_p.i9.i.i.i.i, align 8, !tbaa !17
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %25) #38
  %call.i.i.i195 = tail call i32* @__errno_location() #42
  %47 = load i32, i32* %call.i.i.i195, align 4, !tbaa !59
  store i32 0, i32* %call.i.i.i195, align 4, !tbaa !59
  %call.i.i = call i64 @strtol(i8* %46, i8** nonnull %__endptr.i.i, i32 10) #38
  %48 = load i8*, i8** %__endptr.i.i, align 8, !tbaa !60
  %cmp.i.i = icmp eq i8* %48, %46
  br i1 %cmp.i.i, label %if.then.i.i196, label %if.else.i.i

if.then.i.i196:                                   ; preds = %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.exit
  call void @_ZSt24__throw_invalid_argumentPKc(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.31, i64 0, i64 0)) #40
  unreachable

if.else.i.i:                                      ; preds = %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.exit
  %49 = load i32, i32* %call.i.i.i195, align 4, !tbaa !59
  %cmp2.i.i = icmp eq i32 %49, 34
  %__val.off.i.i.i = add i64 %call.i.i, 2147483648
  %50 = icmp ugt i64 %__val.off.i.i.i, 4294967295
  %or.cond.i.i = or i1 %50, %cmp2.i.i
  br i1 %or.cond.i.i, label %if.then4.i.i, label %if.else5.i.i

if.then4.i.i:                                     ; preds = %if.else.i.i
  call void @_ZSt20__throw_out_of_rangePKc(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.31, i64 0, i64 0)) #40
  unreachable

if.else5.i.i:                                     ; preds = %if.else.i.i
  %cmp.i.i.i197 = icmp eq i32 %49, 0
  br i1 %cmp.i.i.i197, label %if.then.i.i.i198, label %_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPmi.exit

if.then.i.i.i198:                                 ; preds = %if.else5.i.i
  store i32 %47, i32* %call.i.i.i195, align 4, !tbaa !59
  br label %_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPmi.exit

_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPmi.exit: ; preds = %if.then.i.i.i198, %if.else5.i.i
  %conv.i.i = trunc i64 %call.i.i to i32
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %25) #38
  %51 = load i32*, i32** %_M_finish.i.i, align 8, !tbaa !61
  %52 = load i32*, i32** %_M_end_of_storage.i.i, align 8, !tbaa !63
  %cmp.not.i.i = icmp eq i32* %51, %52
  br i1 %cmp.not.i.i, label %if.else.i.i200, label %if.then.i.i199

if.then.i.i199:                                   ; preds = %_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPmi.exit
  store i32 %conv.i.i, i32* %51, align 4, !tbaa !59
  %incdec.ptr.i.i = getelementptr inbounds i32, i32* %51, i64 1
  br label %_ZNSt6vectorIiSaIiEE9push_backEOi.exit

if.else.i.i200:                                   ; preds = %_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPmi.exit
  %53 = load i32*, i32** %_M_start.i27.i.i, align 8, !tbaa !64
  %sub.ptr.lhs.cast.i28.i.i = ptrtoint i32* %51 to i64
  %sub.ptr.rhs.cast.i29.i.i = ptrtoint i32* %53 to i64
  %sub.ptr.sub.i30.i.i = sub i64 %sub.ptr.lhs.cast.i28.i.i, %sub.ptr.rhs.cast.i29.i.i
  %sub.ptr.div.i31.i.i = ashr exact i64 %sub.ptr.sub.i30.i.i, 2
  %cmp.i.i201 = icmp eq i64 %sub.ptr.sub.i30.i.i, 9223372036854775804
  br i1 %cmp.i.i201, label %if.then.i.i202, label %_ZNKSt6vectorIiSaIiEE12_M_check_lenEmPKc.exit.i

if.then.i.i202:                                   ; preds = %if.else.i.i200
  call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.41, i64 0, i64 0)) #40
  unreachable

_ZNKSt6vectorIiSaIiEE12_M_check_lenEmPKc.exit.i:  ; preds = %if.else.i.i200
  %cmp.i.i.i203 = icmp eq i64 %sub.ptr.sub.i30.i.i, 0
  %.sroa.speculated.i.i = select i1 %cmp.i.i.i203, i64 1, i64 %sub.ptr.div.i31.i.i
  %add.i.i = add nsw i64 %.sroa.speculated.i.i, %sub.ptr.div.i31.i.i
  %cmp7.i.i = icmp ult i64 %add.i.i, %sub.ptr.div.i31.i.i
  %cmp9.i.i = icmp ugt i64 %add.i.i, 2305843009213693951
  %or.cond.i.i204 = or i1 %cmp7.i.i, %cmp9.i.i
  %cond.i.i = select i1 %or.cond.i.i204, i64 2305843009213693951, i64 %add.i.i
  %cmp.not.i.i205 = icmp eq i64 %cond.i.i, 0
  br i1 %cmp.not.i.i205, label %_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEm.exit.i, label %_ZNSt16allocator_traitsISaIiEE8allocateERS0_m.exit.i.i

_ZNSt16allocator_traitsISaIiEE8allocateERS0_m.exit.i.i: ; preds = %_ZNKSt6vectorIiSaIiEE12_M_check_lenEmPKc.exit.i
  %mul.i.i.i.i = shl nuw nsw i64 %cond.i.i, 2
  %call5.i.i.i.i = call noalias nonnull i8* @_Znwm(i64 %mul.i.i.i.i) #43
  %54 = bitcast i8* %call5.i.i.i.i to i32*
  br label %_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEm.exit.i

_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEm.exit.i: ; preds = %_ZNSt16allocator_traitsISaIiEE8allocateERS0_m.exit.i.i, %_ZNKSt6vectorIiSaIiEE12_M_check_lenEmPKc.exit.i
  %cond.i48.i = phi i32* [ %54, %_ZNSt16allocator_traitsISaIiEE8allocateERS0_m.exit.i.i ], [ null, %_ZNKSt6vectorIiSaIiEE12_M_check_lenEmPKc.exit.i ]
  %add.ptr.i = getelementptr inbounds i32, i32* %cond.i48.i, i64 %sub.ptr.div.i31.i.i
  store i32 %conv.i.i, i32* %add.ptr.i, align 4, !tbaa !59
  %cmp.i.i.i.i42.i = icmp sgt i64 %sub.ptr.sub.i30.i.i, 0
  br i1 %cmp.i.i.i.i42.i, label %if.then.i.i.i.i43.i, label %_ZNSt6vectorIiSaIiEE11_S_relocateEPiS2_S2_RS0_.exit.i

if.then.i.i.i.i43.i:                              ; preds = %_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEm.exit.i
  %55 = bitcast i32* %cond.i48.i to i8*
  %56 = bitcast i32* %53 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %55, i8* align 4 %56, i64 %sub.ptr.sub.i30.i.i, i1 false) #38
  br label %_ZNSt6vectorIiSaIiEE11_S_relocateEPiS2_S2_RS0_.exit.i

_ZNSt6vectorIiSaIiEE11_S_relocateEPiS2_S2_RS0_.exit.i: ; preds = %if.then.i.i.i.i43.i, %_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEm.exit.i
  %incdec.ptr.i206 = getelementptr inbounds i32, i32* %add.ptr.i, i64 1
  %tobool.not.i.i = icmp eq i32* %53, null
  br i1 %tobool.not.i.i, label %_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_.exit, label %if.then.i38.i

if.then.i38.i:                                    ; preds = %_ZNSt6vectorIiSaIiEE11_S_relocateEPiS2_S2_RS0_.exit.i
  %57 = bitcast i32* %53 to i8*
  call void @_ZdlPv(i8* %57) #41
  br label %_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_.exit

_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_.exit: ; preds = %if.then.i38.i, %_ZNSt6vectorIiSaIiEE11_S_relocateEPiS2_S2_RS0_.exit.i
  store i32* %cond.i48.i, i32** %_M_start.i27.i.i, align 8, !tbaa !64
  store i32* %incdec.ptr.i206, i32** %_M_finish.i.i, align 8, !tbaa !61
  %add.ptr20.i = getelementptr inbounds i32, i32* %cond.i48.i, i64 %cond.i.i
  br label %_ZNSt6vectorIiSaIiEE9push_backEOi.exit

_ZNSt6vectorIiSaIiEE9push_backEOi.exit:           ; preds = %_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_.exit, %if.then.i.i199
  %_M_finish.i.i.sink = phi i32** [ %_M_finish.i.i, %if.then.i.i199 ], [ %_M_end_of_storage.i.i, %_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_.exit ]
  %incdec.ptr.i.i.sink = phi i32* [ %incdec.ptr.i.i, %if.then.i.i199 ], [ %add.ptr20.i, %_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_.exit ]
  store i32* %incdec.ptr.i.i.sink, i32** %_M_finish.i.i.sink, align 8, !tbaa !60
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %tmp702) #38
  br label %for.body

for.cond.cleanup:                                 ; preds = %_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm.exit
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %27) #38
  store i32 4, i32* %ref.tmp8, align 4, !tbaa !59
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %28) #38
  store i32 4, i32* %ref.tmp9, align 4, !tbaa !59
  %58 = load %class.LightMatrix*, %class.LightMatrix** %_M_finish.i210, align 8, !tbaa !65
  %59 = load %class.LightMatrix*, %class.LightMatrix** %_M_end_of_storage.i211, align 8, !tbaa !67
  %cmp.not.i212 = icmp eq %class.LightMatrix* %58, %59
  br i1 %cmp.not.i212, label %if.else.i216, label %if.then.i215

if.then.i215:                                     ; preds = %for.cond.cleanup
  %is_data_owner_.i.i.i.i = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %58, i64 0, i32 0
  store i8 1, i8* %is_data_owner_.i.i.i.i, align 8, !tbaa !68
  %nrows_.i.i.i.i = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %58, i64 0, i32 1
  store i32 4, i32* %nrows_.i.i.i.i, align 4, !tbaa !71
  %ncols_.i.i.i.i = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %58, i64 0, i32 2
  store i32 4, i32* %ncols_.i.i.i.i, align 8, !tbaa !72
  %call.i.i.i.i = call noalias nonnull dereferenceable(128) i8* @_Znam(i64 128) #43
  %data_.i.i.i.i = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %58, i64 0, i32 3
  %60 = bitcast double** %data_.i.i.i.i to i8**
  store i8* %call.i.i.i.i, i8** %60, align 8, !tbaa !73
  %incdec.ptr.i214 = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %58, i64 1
  store %class.LightMatrix* %incdec.ptr.i214, %class.LightMatrix** %_M_finish.i210, align 8, !tbaa !65
  br label %_ZNSt6vectorI11LightMatrixIdESaIS1_EE12emplace_backIJiiEEEvDpOT_.exit

if.else.i216:                                     ; preds = %for.cond.cleanup
  call void @_ZNSt6vectorI11LightMatrixIdESaIS1_EE17_M_realloc_insertIJiiEEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_(%"class.std::vector.8"* nonnull dereferenceable(24) %base_relatives, %class.LightMatrix* %58, i32* nonnull align 4 dereferenceable(4) %ref.tmp8, i32* nonnull align 4 dereferenceable(4) %ref.tmp9) #38
  %.pre = load %class.LightMatrix*, %class.LightMatrix** %_M_finish.i210, align 8, !tbaa !60
  br label %_ZNSt6vectorI11LightMatrixIdESaIS1_EE12emplace_backIJiiEEEvDpOT_.exit

_ZNSt6vectorI11LightMatrixIdESaIS1_EE12emplace_backIJiiEEEvDpOT_.exit: ; preds = %if.else.i216, %if.then.i215
  %61 = phi %class.LightMatrix* [ %incdec.ptr.i214, %if.then.i215 ], [ %.pre, %if.else.i216 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %28) #38
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %27) #38
  %ncols_.i.i = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %61, i64 -1, i32 2
  %62 = load i32, i32* %ncols_.i.i, align 8, !tbaa !72
  %nrows_.i.i = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %61, i64 -1, i32 1
  %63 = load i32, i32* %nrows_.i.i, align 4, !tbaa !71
  %mul.i8.i = mul i32 %63, %62
  %cmp9.i = icmp sgt i32 %mul.i8.i, 0
  br i1 %cmp9.i, label %for.body.lr.ph.i, label %_ZN11LightMatrixIdE3setEPKd.exit

for.body.lr.ph.i:                                 ; preds = %_ZNSt6vectorI11LightMatrixIdESaIS1_EE12emplace_backIJiiEEEvDpOT_.exit
  %data_.i = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %61, i64 -1, i32 3
  %64 = bitcast double** %data_.i to i8**
  %65 = load i8*, i8** %64, align 8, !tbaa !73
  %wide.trip.count.i = zext i32 %mul.i8.i to i64
  %66 = shl nuw nsw i64 %wide.trip.count.i, 3
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %65, i8* nonnull align 16 %tmp702, i64 %66, i1 false)
  br label %_ZN11LightMatrixIdE3setEPKd.exit

_ZN11LightMatrixIdE3setEPKd.exit:                 ; preds = %for.body.lr.ph.i, %_ZNSt6vectorI11LightMatrixIdESaIS1_EE12emplace_backIJiiEEEvDpOT_.exit
  %cmp46.i = icmp sgt i32 %62, 0
  br i1 %cmp46.i, label %for.body.lr.ph.i220, label %for.body18.preheader

for.body18.preheader:                             ; preds = %for.cond.loopexit.i, %_ZN11LightMatrixIdE3setEPKd.exit
  br label %for.body18

for.body.lr.ph.i220:                              ; preds = %_ZN11LightMatrixIdE3setEPKd.exit
  %data_.i.i = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %61, i64 -1, i32 3
  %67 = sext i32 %63 to i64
  %68 = zext i32 %62 to i64
  %wide.trip.count = zext i32 %63 to i64
  br label %for.body.i222

for.cond.loopexit.i:                              ; preds = %for.body5.i, %for.body.i222
  %exitcond.not.i221 = icmp eq i64 %indvars.iv.next712, %68
  %indvars.iv.next704 = add nuw nsw i64 %indvars.iv703, 1
  br i1 %exitcond.not.i221, label %for.body18.preheader, label %for.body.i222, !llvm.loop !74

for.body.i222:                                    ; preds = %for.cond.loopexit.i, %for.body.lr.ph.i220
  %indvars.iv711 = phi i64 [ %indvars.iv.next712, %for.cond.loopexit.i ], [ 0, %for.body.lr.ph.i220 ]
  %indvars.iv703 = phi i64 [ %indvars.iv.next704, %for.cond.loopexit.i ], [ 1, %for.body.lr.ph.i220 ]
  %indvars.iv.next712 = add nuw nsw i64 %indvars.iv711, 1
  %cmp344.i = icmp slt i64 %indvars.iv.next712, %67
  br i1 %cmp344.i, label %for.body5.lr.ph.i, label %for.cond.loopexit.i

for.body5.lr.ph.i:                                ; preds = %for.body.i222
  %69 = load double*, double** %data_.i.i, align 8, !tbaa !73
  %70 = mul nsw i64 %indvars.iv711, %67
  br label %for.body5.i

for.body5.i:                                      ; preds = %for.body5.i, %for.body5.lr.ph.i
  %indvars.iv705 = phi i64 [ %indvars.iv.next706, %for.body5.i ], [ %indvars.iv703, %for.body5.lr.ph.i ]
  %71 = add nsw i64 %indvars.iv705, %70
  %arrayidx.i.i = getelementptr inbounds double, double* %69, i64 %71
  %72 = load double, double* %arrayidx.i.i, align 8, !tbaa !75
  %73 = mul nsw i64 %indvars.iv705, %67
  %74 = add nsw i64 %73, %indvars.iv711
  %arrayidx.i43.i = getelementptr inbounds double, double* %69, i64 %74
  %75 = load double, double* %arrayidx.i43.i, align 8, !tbaa !75
  store double %75, double* %arrayidx.i.i, align 8, !tbaa !75
  store double %72, double* %arrayidx.i43.i, align 8, !tbaa !75
  %indvars.iv.next706 = add nuw nsw i64 %indvars.iv705, 1
  %exitcond710.not = icmp eq i64 %indvars.iv.next706, %wide.trip.count
  br i1 %exitcond710.not, label %for.cond.loopexit.i, label %for.body5.i, !llvm.loop !77

for.body:                                         ; preds = %_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm.exit, %_ZNSt6vectorIiSaIiEE9push_backEOi.exit
  %indvars.iv699 = phi i64 [ 0, %_ZNSt6vectorIiSaIiEE9push_backEOi.exit ], [ %indvars.iv.next700, %_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm.exit ]
  %call6 = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EES4_(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) %23, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %s, i8 signext 58) #38
  %76 = load i8*, i8** %_M_p.i9.i.i.i.i, align 8, !tbaa !17
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %26) #38
  %77 = load i32, i32* %call.i.i.i195, align 4, !tbaa !59
  store i32 0, i32* %call.i.i.i195, align 4, !tbaa !59
  %call.i.i227 = call fast double @strtod(i8* %76, i8** nonnull %__endptr.i.i224) #38
  %78 = load i8*, i8** %__endptr.i.i224, align 8, !tbaa !60
  %cmp.i.i228 = icmp eq i8* %78, %76
  br i1 %cmp.i.i228, label %if.then.i.i229, label %if.else.i.i231

if.then.i.i229:                                   ; preds = %for.body
  call void @_ZSt24__throw_invalid_argumentPKc(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.32, i64 0, i64 0)) #40
  unreachable

if.else.i.i231:                                   ; preds = %for.body
  %79 = load i32, i32* %call.i.i.i195, align 4, !tbaa !59
  switch i32 %79, label %_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm.exit [
    i32 34, label %if.then4.i.i232
    i32 0, label %if.then.i.i.i235
  ]

if.then4.i.i232:                                  ; preds = %if.else.i.i231
  call void @_ZSt20__throw_out_of_rangePKc(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.32, i64 0, i64 0)) #40
  unreachable

if.then.i.i.i235:                                 ; preds = %if.else.i.i231
  store i32 %77, i32* %call.i.i.i195, align 4, !tbaa !59
  br label %_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm.exit

_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm.exit: ; preds = %if.then.i.i.i235, %if.else.i.i231
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26) #38
  %arrayidx = getelementptr inbounds [16 x double], [16 x double]* %tmp, i64 0, i64 %indvars.iv699
  store double %call.i.i227, double* %arrayidx, align 8, !tbaa !75
  %indvars.iv.next700 = add nuw nsw i64 %indvars.iv699, 1
  %exitcond701.not = icmp eq i64 %indvars.iv.next700, 16
  br i1 %exitcond701.not, label %for.cond.cleanup, label %for.body, !llvm.loop !78

for.cond.cleanup17:                               ; preds = %_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm.exit318
  %call26 = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EES4_(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) %23, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %s, i8 signext 10) #38
  %80 = load i8*, i8** %_M_p.i9.i.i.i.i, align 8, !tbaa !17
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %30) #38
  %81 = load i32, i32* %call.i.i.i195, align 4, !tbaa !59
  store i32 0, i32* %call.i.i.i195, align 4, !tbaa !59
  %call.i.i239 = call fast double @strtod(i8* %80, i8** nonnull %__endptr.i.i236) #38
  %82 = load i8*, i8** %__endptr.i.i236, align 8, !tbaa !60
  %cmp.i.i240 = icmp eq i8* %82, %80
  br i1 %cmp.i.i240, label %if.then.i.i241, label %if.else.i.i243

if.then.i.i241:                                   ; preds = %for.cond.cleanup17
  call void @_ZSt24__throw_invalid_argumentPKc(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.32, i64 0, i64 0)) #40
  unreachable

if.else.i.i243:                                   ; preds = %for.cond.cleanup17
  %83 = load i32, i32* %call.i.i.i195, align 4, !tbaa !59
  switch i32 %83, label %_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm.exit248 [
    i32 34, label %if.then4.i.i244
    i32 0, label %if.then.i.i.i247
  ]

if.then4.i.i244:                                  ; preds = %if.else.i.i243
  call void @_ZSt20__throw_out_of_rangePKc(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.32, i64 0, i64 0)) #40
  unreachable

if.then.i.i.i247:                                 ; preds = %if.else.i.i243
  store i32 %81, i32* %call.i.i.i195, align 4, !tbaa !59
  br label %_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm.exit248

_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm.exit248: ; preds = %if.then.i.i.i247, %if.else.i.i243
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %30) #38
  store double %call.i.i239, double* %arrayidx28, align 8, !tbaa !75
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %31) #38
  store i32 4, i32* %ref.tmp29, align 4, !tbaa !59
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %32) #38
  store i32 4, i32* %ref.tmp30, align 4, !tbaa !59
  %84 = load %class.LightMatrix*, %class.LightMatrix** %_M_finish.i249, align 8, !tbaa !65
  %85 = load %class.LightMatrix*, %class.LightMatrix** %_M_end_of_storage.i250, align 8, !tbaa !67
  %cmp.not.i251 = icmp eq %class.LightMatrix* %84, %85
  br i1 %cmp.not.i251, label %if.else.i261, label %if.then.i260

if.then.i260:                                     ; preds = %_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm.exit248
  %is_data_owner_.i.i.i.i252 = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %84, i64 0, i32 0
  store i8 1, i8* %is_data_owner_.i.i.i.i252, align 8, !tbaa !68
  %nrows_.i.i.i.i253 = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %84, i64 0, i32 1
  store i32 4, i32* %nrows_.i.i.i.i253, align 4, !tbaa !71
  %ncols_.i.i.i.i254 = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %84, i64 0, i32 2
  store i32 4, i32* %ncols_.i.i.i.i254, align 8, !tbaa !72
  %call.i.i.i.i257 = call noalias nonnull dereferenceable(128) i8* @_Znam(i64 128) #43
  %data_.i.i.i.i258 = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %84, i64 0, i32 3
  %86 = bitcast double** %data_.i.i.i.i258 to i8**
  store i8* %call.i.i.i.i257, i8** %86, align 8, !tbaa !73
  %incdec.ptr.i259 = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %84, i64 1
  store %class.LightMatrix* %incdec.ptr.i259, %class.LightMatrix** %_M_finish.i249, align 8, !tbaa !65
  br label %_ZNSt6vectorI11LightMatrixIdESaIS1_EE12emplace_backIJiiEEEvDpOT_.exit262

if.else.i261:                                     ; preds = %_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm.exit248
  call void @_ZNSt6vectorI11LightMatrixIdESaIS1_EE17_M_realloc_insertIJiiEEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_(%"class.std::vector.8"* nonnull dereferenceable(24) %inverse_base_absolutes, %class.LightMatrix* %84, i32* nonnull align 4 dereferenceable(4) %ref.tmp29, i32* nonnull align 4 dereferenceable(4) %ref.tmp30) #38
  %.pre729 = load %class.LightMatrix*, %class.LightMatrix** %_M_finish.i249, align 8, !tbaa !60
  br label %_ZNSt6vectorI11LightMatrixIdESaIS1_EE12emplace_backIJiiEEEvDpOT_.exit262

_ZNSt6vectorI11LightMatrixIdESaIS1_EE12emplace_backIJiiEEEvDpOT_.exit262: ; preds = %if.else.i261, %if.then.i260
  %87 = phi %class.LightMatrix* [ %incdec.ptr.i259, %if.then.i260 ], [ %.pre729, %if.else.i261 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %32) #38
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %31) #38
  %ncols_.i.i265 = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %87, i64 -1, i32 2
  %88 = load i32, i32* %ncols_.i.i265, align 8, !tbaa !72
  %nrows_.i.i266 = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %87, i64 -1, i32 1
  %89 = load i32, i32* %nrows_.i.i266, align 4, !tbaa !71
  %mul.i8.i267 = mul i32 %89, %88
  %cmp9.i268 = icmp sgt i32 %mul.i8.i267, 0
  br i1 %cmp9.i268, label %for.body.lr.ph.i271, label %_ZN11LightMatrixIdE3setEPKd.exit278

for.body.lr.ph.i271:                              ; preds = %_ZNSt6vectorI11LightMatrixIdESaIS1_EE12emplace_backIJiiEEEvDpOT_.exit262
  %data_.i269 = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %87, i64 -1, i32 3
  %90 = bitcast double** %data_.i269 to i8**
  %91 = load i8*, i8** %90, align 8, !tbaa !73
  %wide.trip.count.i270 = zext i32 %mul.i8.i267 to i64
  %92 = shl nuw nsw i64 %wide.trip.count.i270, 3
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %91, i8* nonnull align 16 %tmp702, i64 %92, i1 false)
  br label %_ZN11LightMatrixIdE3setEPKd.exit278

_ZN11LightMatrixIdE3setEPKd.exit278:              ; preds = %for.body.lr.ph.i271, %_ZNSt6vectorI11LightMatrixIdESaIS1_EE12emplace_backIJiiEEEvDpOT_.exit262
  %cmp46.i282 = icmp sgt i32 %88, 0
  br i1 %cmp46.i282, label %for.body.lr.ph.i285, label %_ZN11LightMatrixIdE18transpose_in_placeEv.exit305

for.body.lr.ph.i285:                              ; preds = %_ZN11LightMatrixIdE3setEPKd.exit278
  %data_.i.i284 = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %87, i64 -1, i32 3
  %93 = sext i32 %89 to i64
  %94 = zext i32 %88 to i64
  %wide.trip.count724 = zext i32 %89 to i64
  br label %for.body.i291

for.cond.loopexit.i287:                           ; preds = %for.body5.i304, %for.body.i291
  %exitcond.not.i286 = icmp eq i64 %indvars.iv.next727, %94
  %indvars.iv.next718 = add nuw nsw i64 %indvars.iv717, 1
  br i1 %exitcond.not.i286, label %_ZN11LightMatrixIdE18transpose_in_placeEv.exit305, label %for.body.i291, !llvm.loop !74

for.body.i291:                                    ; preds = %for.cond.loopexit.i287, %for.body.lr.ph.i285
  %indvars.iv726 = phi i64 [ %indvars.iv.next727, %for.cond.loopexit.i287 ], [ 0, %for.body.lr.ph.i285 ]
  %indvars.iv717 = phi i64 [ %indvars.iv.next718, %for.cond.loopexit.i287 ], [ 1, %for.body.lr.ph.i285 ]
  %indvars.iv.next727 = add nuw nsw i64 %indvars.iv726, 1
  %cmp344.i290 = icmp slt i64 %indvars.iv.next727, %93
  br i1 %cmp344.i290, label %for.body5.lr.ph.i293, label %for.cond.loopexit.i287

for.body5.lr.ph.i293:                             ; preds = %for.body.i291
  %95 = load double*, double** %data_.i.i284, align 8, !tbaa !73
  %96 = mul nsw i64 %indvars.iv726, %93
  br label %for.body5.i304

for.body5.i304:                                   ; preds = %for.body5.i304, %for.body5.lr.ph.i293
  %indvars.iv719 = phi i64 [ %indvars.iv.next720, %for.body5.i304 ], [ %indvars.iv717, %for.body5.lr.ph.i293 ]
  %97 = add nsw i64 %indvars.iv719, %96
  %arrayidx.i.i297 = getelementptr inbounds double, double* %95, i64 %97
  %98 = load double, double* %arrayidx.i.i297, align 8, !tbaa !75
  %99 = mul nsw i64 %indvars.iv719, %93
  %100 = add nsw i64 %99, %indvars.iv726
  %arrayidx.i43.i301 = getelementptr inbounds double, double* %95, i64 %100
  %101 = load double, double* %arrayidx.i43.i301, align 8, !tbaa !75
  store double %101, double* %arrayidx.i.i297, align 8, !tbaa !75
  store double %98, double* %arrayidx.i43.i301, align 8, !tbaa !75
  %indvars.iv.next720 = add nuw nsw i64 %indvars.iv719, 1
  %exitcond725.not = icmp eq i64 %indvars.iv.next720, %wide.trip.count724
  br i1 %exitcond725.not, label %for.cond.loopexit.i287, label %for.body5.i304, !llvm.loop !77

_ZN11LightMatrixIdE18transpose_in_placeEv.exit305: ; preds = %for.cond.loopexit.i287, %_ZN11LightMatrixIdE3setEPKd.exit278
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %tmp702) #38
  br label %while.cond.backedge

while.cond.backedge:                              ; preds = %_ZN11LightMatrixIdE18transpose_in_placeEv.exit305, %while.body
  %vtable = load i8*, i8** %18, align 8, !tbaa !50
  %vbase.offset.ptr = getelementptr i8, i8* %vtable, i64 -24
  %102 = bitcast i8* %vbase.offset.ptr to i64*
  %vbase.offset = load i64, i64* %102, align 8
  %_M_streambuf_state.i.i = getelementptr inbounds i8, i8* %20, i64 %vbase.offset
  %103 = bitcast i8* %_M_streambuf_state.i.i to i32*
  %104 = load i32, i32* %103, align 8, !tbaa !52
  %cmp.i = icmp eq i32 %104, 0
  br i1 %cmp.i, label %while.body, label %while.end, !llvm.loop !79

for.body18:                                       ; preds = %_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm.exit318, %for.body18.preheader
  %indvars.iv714 = phi i64 [ %indvars.iv.next715, %_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm.exit318 ], [ 0, %for.body18.preheader ]
  %call19 = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EES4_(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) %23, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %s, i8 signext 58) #38
  %105 = load i8*, i8** %_M_p.i9.i.i.i.i, align 8, !tbaa !17
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %29) #38
  %106 = load i32, i32* %call.i.i.i195, align 4, !tbaa !59
  store i32 0, i32* %call.i.i.i195, align 4, !tbaa !59
  %call.i.i309 = call fast double @strtod(i8* %105, i8** nonnull %__endptr.i.i306) #38
  %107 = load i8*, i8** %__endptr.i.i306, align 8, !tbaa !60
  %cmp.i.i310 = icmp eq i8* %107, %105
  br i1 %cmp.i.i310, label %if.then.i.i311, label %if.else.i.i313

if.then.i.i311:                                   ; preds = %for.body18
  call void @_ZSt24__throw_invalid_argumentPKc(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.32, i64 0, i64 0)) #40
  unreachable

if.else.i.i313:                                   ; preds = %for.body18
  %108 = load i32, i32* %call.i.i.i195, align 4, !tbaa !59
  switch i32 %108, label %_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm.exit318 [
    i32 34, label %if.then4.i.i314
    i32 0, label %if.then.i.i.i317
  ]

if.then4.i.i314:                                  ; preds = %if.else.i.i313
  call void @_ZSt20__throw_out_of_rangePKc(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.32, i64 0, i64 0)) #40
  unreachable

if.then.i.i.i317:                                 ; preds = %if.else.i.i313
  store i32 %106, i32* %call.i.i.i195, align 4, !tbaa !59
  br label %_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm.exit318

_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm.exit318: ; preds = %if.then.i.i.i317, %if.else.i.i313
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %29) #38
  %arrayidx22 = getelementptr inbounds [16 x double], [16 x double]* %tmp, i64 0, i64 %indvars.iv714
  store double %call.i.i309, double* %arrayidx22, align 8, !tbaa !75
  %indvars.iv.next715 = add nuw nsw i64 %indvars.iv714, 1
  %exitcond716.not = icmp eq i64 %indvars.iv.next715, 15
  br i1 %exitcond716.not, label %for.cond.cleanup17, label %for.body18, !llvm.loop !80

while.end:                                        ; preds = %while.cond.backedge, %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit
  %_M_filebuf.i = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %bones_in, i64 0, i32 1
  %call.i = call %"class.std::basic_filebuf"* @_ZNSt13basic_filebufIcSt11char_traitsIcEE5closeEv(%"class.std::basic_filebuf"* nonnull dereferenceable(240) %_M_filebuf.i) #38
  %tobool.not.i = icmp eq %"class.std::basic_filebuf"* %call.i, null
  br i1 %tobool.not.i, label %if.then.i320, label %_ZNSt14basic_ifstreamIcSt11char_traitsIcEE5closeEv.exit

if.then.i320:                                     ; preds = %while.end
  %vtable.i = load i8*, i8** %18, align 8, !tbaa !50
  %vbase.offset.ptr.i = getelementptr i8, i8* %vtable.i, i64 -24
  %109 = bitcast i8* %vbase.offset.ptr.i to i64*
  %vbase.offset.i = load i64, i64* %109, align 8
  %add.ptr.i319 = getelementptr inbounds i8, i8* %0, i64 %vbase.offset.i
  %110 = bitcast i8* %add.ptr.i319 to %"class.std::basic_ios"*
  %_M_streambuf_state.i.i.i = getelementptr inbounds i8, i8* %add.ptr.i319, i64 32
  %111 = bitcast i8* %_M_streambuf_state.i.i.i to i32*
  %112 = load i32, i32* %111, align 8, !tbaa !52
  %or.i.i.i = or i32 %112, 4
  call void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* nonnull dereferenceable(264) %110, i32 %or.i.i.i) #38
  br label %_ZNSt14basic_ifstreamIcSt11char_traitsIcEE5closeEv.exit

_ZNSt14basic_ifstreamIcSt11char_traitsIcEE5closeEv.exit: ; preds = %if.then.i320, %while.end
  %_M_finish.i321 = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %113 = load %"class.std::__cxx11::basic_string"*, %"class.std::__cxx11::basic_string"** %_M_finish.i321, align 8, !tbaa !32
  %_M_start.i = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %114 = load %"class.std::__cxx11::basic_string"*, %"class.std::__cxx11::basic_string"** %_M_start.i, align 8, !tbaa !81
  %sub.ptr.lhs.cast.i = ptrtoint %"class.std::__cxx11::basic_string"* %113 to i64
  %sub.ptr.rhs.cast.i = ptrtoint %"class.std::__cxx11::basic_string"* %114 to i64
  %sub.ptr.sub.i = sub i64 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i
  %115 = lshr exact i64 %sub.ptr.sub.i, 5
  %conv = trunc i64 %115 to i32
  %116 = bitcast %"class.std::basic_ifstream"* %vert_in to i8*
  call void @llvm.lifetime.start.p0i8(i64 520, i8* nonnull %116) #38
  %117 = bitcast %"class.std::__cxx11::basic_string"* %ref.tmp38 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %117) #38
  call void @llvm.experimental.noalias.scope.decl(metadata !82)
  %118 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp38, i64 0, i32 2
  %119 = bitcast %"class.std::__cxx11::basic_string"* %ref.tmp38 to %union.anon**
  store %union.anon* %118, %union.anon** %119, align 8, !tbaa !14, !alias.scope !82
  %120 = load i8*, i8** %_M_p.i9.i.i, align 8, !tbaa !17, !noalias !82
  %121 = load i64, i64* %_M_string_length.i.i.i, align 8, !tbaa !19, !noalias !82
  %122 = bitcast i64* %__dnew.i.i.i322 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %122) #38, !noalias !82
  store i64 %121, i64* %__dnew.i.i.i322, align 8, !tbaa !20, !noalias !82
  %cmp.i.i.i325 = icmp ugt i64 %121, 15
  br i1 %cmp.i.i.i325, label %if.then.i.i.i330, label %entry.if.end_crit_edge.i.i.i326

entry.if.end_crit_edge.i.i.i326:                  ; preds = %_ZNSt14basic_ifstreamIcSt11char_traitsIcEE5closeEv.exit
  %123 = bitcast %union.anon* %118 to i8*
  br label %if.end.i.i.i331

if.then.i.i.i330:                                 ; preds = %_ZNSt14basic_ifstreamIcSt11char_traitsIcEE5closeEv.exit
  %call2.i.i.i327 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %ref.tmp38, i64* nonnull align 8 dereferenceable(8) %__dnew.i.i.i322, i64 0) #38
  %_M_p.i.i.i.i328 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp38, i64 0, i32 0, i32 0
  store i8* %call2.i.i.i327, i8** %_M_p.i.i.i.i328, align 8, !tbaa !17, !alias.scope !82
  %124 = load i64, i64* %__dnew.i.i.i322, align 8, !tbaa !20, !noalias !82
  %_M_allocated_capacity.i.i.i.i329 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp38, i64 0, i32 2, i32 0
  store i64 %124, i64* %_M_allocated_capacity.i.i.i.i329, align 8, !tbaa !21, !alias.scope !82
  br label %if.end.i.i.i331

if.end.i.i.i331:                                  ; preds = %if.then.i.i.i330, %entry.if.end_crit_edge.i.i.i326
  %125 = phi i8* [ %123, %entry.if.end_crit_edge.i.i.i326 ], [ %call2.i.i.i327, %if.then.i.i.i330 ]
  switch i64 %121, label %if.end.i.i.i.i.i.i333 [
    i64 1, label %if.then.i.i7.i.i.i332
    i64 0, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i340
  ]

if.then.i.i7.i.i.i332:                            ; preds = %if.end.i.i.i331
  %126 = load i8, i8* %120, align 1, !tbaa !21
  store i8 %126, i8* %125, align 1, !tbaa !21
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i340

if.end.i.i.i.i.i.i333:                            ; preds = %if.end.i.i.i331
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %125, i8* align 1 %120, i64 %121, i1 false) #38
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i340

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i340: ; preds = %if.end.i.i.i.i.i.i333, %if.then.i.i7.i.i.i332, %if.end.i.i.i331
  %_M_p.i8.i.i.i334 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp38, i64 0, i32 0, i32 0
  %127 = load i64, i64* %__dnew.i.i.i322, align 8, !tbaa !20, !noalias !82
  %_M_string_length.i.i.i.i.i335 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp38, i64 0, i32 1
  store i64 %127, i64* %_M_string_length.i.i.i.i.i335, align 8, !tbaa !19, !alias.scope !82
  %128 = load i8*, i8** %_M_p.i8.i.i.i334, align 8, !tbaa !17, !alias.scope !82
  %arrayidx.i.i.i.i336 = getelementptr inbounds i8, i8* %128, i64 %127
  store i8 0, i8* %arrayidx.i.i.i.i336, align 1, !tbaa !21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %122) #38, !noalias !82
  %129 = load i64, i64* %_M_string_length.i.i.i.i.i335, align 8, !tbaa !19, !alias.scope !82
  %sub3.i.i.i338 = sub i64 4611686018427387903, %129
  %cmp.i.i1.i339 = icmp ult i64 %sub3.i.i.i338, 12
  br i1 %cmp.i.i1.i339, label %if.then.i.i2.i341, label %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_.exit343

if.then.i.i2.i341:                                ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i340
  call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.33, i64 0, i64 0)) #40
  unreachable

_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_.exit343: ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i340
  %call2.i.i342 = call nonnull align 8 dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %ref.tmp38, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.8, i64 0, i64 0), i64 12) #38
  call void @_ZNSt14basic_ifstreamIcSt11char_traitsIcEEC1ERKNSt7__cxx1112basic_stringIcS1_SaIcEEESt13_Ios_Openmode(%"class.std::basic_ifstream"* nonnull dereferenceable(256) %vert_in, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %ref.tmp38, i32 8)
  %130 = load i8*, i8** %_M_p.i8.i.i.i334, align 8, !tbaa !17
  %arraydecay.i.i.i.i345 = bitcast %union.anon* %118 to i8*
  %cmp.i.i.i346 = icmp eq i8* %130, %arraydecay.i.i.i.i345
  br i1 %cmp.i.i.i346, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit348, label %if.then.i.i347

if.then.i.i347:                                   ; preds = %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_.exit343
  call void @_ZdlPv(i8* %130) #41
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit348

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit348: ; preds = %if.then.i.i347, %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_.exit343
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %117) #38
  %131 = bitcast %"class.std::basic_ifstream"* %vert_in to i8**
  %vtable40679 = load i8*, i8** %131, align 8, !tbaa !50
  %vbase.offset.ptr41680 = getelementptr i8, i8* %vtable40679, i64 -24
  %132 = bitcast i8* %vbase.offset.ptr41680 to i64*
  %vbase.offset42681 = load i64, i64* %132, align 8
  %add.ptr43 = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %vert_in, i64 0, i32 1, i32 0, i32 2
  %133 = bitcast i8** %add.ptr43 to i8*
  %_M_streambuf_state.i.i349682 = getelementptr inbounds i8, i8* %133, i64 %vbase.offset42681
  %134 = bitcast i8* %_M_streambuf_state.i.i349682 to i32*
  %135 = load i32, i32* %134, align 8, !tbaa !52
  %cmp.i350683 = icmp eq i32 %135, 0
  br i1 %cmp.i350683, label %while.body45.lr.ph, label %while.end51

while.body45.lr.ph:                               ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit348
  %136 = bitcast %"class.std::basic_ifstream"* %vert_in to %"class.std::basic_istream"*
  %add.ptr.i354 = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %vert_in, i64 0, i32 1, i32 19
  %137 = bitcast i8** %add.ptr.i354 to i8*
  br label %while.body45

while.body45:                                     ; preds = %_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EE.exit, %while.body45.lr.ph
  %vbase.offset.i353 = phi i64 [ %vbase.offset42681, %while.body45.lr.ph ], [ %vbase.offset42, %_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EE.exit ]
  %n_vertices.0684 = phi i32 [ 0, %while.body45.lr.ph ], [ %spec.select, %_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EE.exit ]
  %_M_ctype.i.i = getelementptr inbounds i8, i8* %137, i64 %vbase.offset.i353
  %138 = bitcast i8* %_M_ctype.i.i to %"class.std::ctype"**
  %139 = load %"class.std::ctype"*, %"class.std::ctype"** %138, align 8, !tbaa !85
  %tobool.not.i.i.i = icmp eq %"class.std::ctype"* %139, null
  br i1 %tobool.not.i.i.i, label %if.then.i.i.i355, label %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i

if.then.i.i.i355:                                 ; preds = %while.body45
  call void @_ZSt16__throw_bad_castv() #40
  unreachable

_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i: ; preds = %while.body45
  %_M_widen_ok.i.i.i = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %139, i64 0, i32 8
  %140 = load i8, i8* %_M_widen_ok.i.i.i, align 8, !tbaa !87
  %tobool.not.i3.i.i = icmp eq i8 %140, 0
  br i1 %tobool.not.i3.i.i, label %if.end.i.i.i357, label %if.then.i4.i.i

if.then.i4.i.i:                                   ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i
  %arrayidx.i.i.i = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %139, i64 0, i32 9, i64 10
  %141 = load i8, i8* %arrayidx.i.i.i, align 1, !tbaa !21
  br label %_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EE.exit

if.end.i.i.i357:                                  ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i
  call void @_ZNKSt5ctypeIcE13_M_widen_initEv(%"class.std::ctype"* nonnull dereferenceable(570) %139) #38
  %142 = bitcast %"class.std::ctype"* %139 to i8 (%"class.std::ctype"*, i8)***
  %vtable.i.i.i = load i8 (%"class.std::ctype"*, i8)**, i8 (%"class.std::ctype"*, i8)*** %142, align 8, !tbaa !50
  %vfn.i.i.i = getelementptr inbounds i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vtable.i.i.i, i64 6
  %143 = load i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vfn.i.i.i, align 8
  %call.i.i.i356 = call signext i8 %143(%"class.std::ctype"* nonnull dereferenceable(570) %139, i8 signext 10) #38
  br label %_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EE.exit

_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EE.exit: ; preds = %if.end.i.i.i357, %if.then.i4.i.i
  %retval.0.i.i.i = phi i8 [ %141, %if.then.i4.i.i ], [ %call.i.i.i356, %if.end.i.i.i357 ]
  %call1.i = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EES4_(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) %136, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %s, i8 signext %retval.0.i.i.i) #38
  %144 = load i64, i64* %_M_string_length.i.i.i192, align 8, !tbaa !19
  %cmp.i359 = icmp ne i64 %144, 0
  %inc49 = zext i1 %cmp.i359 to i32
  %spec.select = add nuw nsw i32 %n_vertices.0684, %inc49
  %vtable40 = load i8*, i8** %131, align 8, !tbaa !50
  %vbase.offset.ptr41 = getelementptr i8, i8* %vtable40, i64 -24
  %145 = bitcast i8* %vbase.offset.ptr41 to i64*
  %vbase.offset42 = load i64, i64* %145, align 8
  %_M_streambuf_state.i.i349 = getelementptr inbounds i8, i8* %133, i64 %vbase.offset42
  %146 = bitcast i8* %_M_streambuf_state.i.i349 to i32*
  %147 = load i32, i32* %146, align 8, !tbaa !52
  %cmp.i350 = icmp eq i32 %147, 0
  br i1 %cmp.i350, label %while.body45, label %while.end51, !llvm.loop !89

while.end51:                                      ; preds = %_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EE.exit, %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit348
  %n_vertices.0.lcssa = phi i32 [ 0, %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit348 ], [ %spec.select, %_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EE.exit ]
  %_M_filebuf.i360 = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %vert_in, i64 0, i32 1
  %call.i361 = call %"class.std::basic_filebuf"* @_ZNSt13basic_filebufIcSt11char_traitsIcEE5closeEv(%"class.std::basic_filebuf"* nonnull dereferenceable(240) %_M_filebuf.i360) #38
  %tobool.not.i362 = icmp eq %"class.std::basic_filebuf"* %call.i361, null
  br i1 %tobool.not.i362, label %if.then.i369, label %_ZNSt14basic_ifstreamIcSt11char_traitsIcEE5closeEv.exit370

if.then.i369:                                     ; preds = %while.end51
  %vtable.i363 = load i8*, i8** %131, align 8, !tbaa !50
  %vbase.offset.ptr.i364 = getelementptr i8, i8* %vtable.i363, i64 -24
  %148 = bitcast i8* %vbase.offset.ptr.i364 to i64*
  %vbase.offset.i365 = load i64, i64* %148, align 8
  %add.ptr.i366 = getelementptr inbounds i8, i8* %116, i64 %vbase.offset.i365
  %149 = bitcast i8* %add.ptr.i366 to %"class.std::basic_ios"*
  %_M_streambuf_state.i.i.i367 = getelementptr inbounds i8, i8* %add.ptr.i366, i64 32
  %150 = bitcast i8* %_M_streambuf_state.i.i.i367 to i32*
  %151 = load i32, i32* %150, align 8, !tbaa !52
  %or.i.i.i368 = or i32 %151, 4
  call void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* nonnull dereferenceable(264) %149, i32 %or.i.i.i368) #38
  br label %_ZNSt14basic_ifstreamIcSt11char_traitsIcEE5closeEv.exit370

_ZNSt14basic_ifstreamIcSt11char_traitsIcEE5closeEv.exit370: ; preds = %if.then.i369, %while.end51
  %nrows_.i371 = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 4, i32 1
  %152 = load i32, i32* %nrows_.i371, align 4, !tbaa !71
  %ncols_.i372 = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 4, i32 2
  %153 = load i32, i32* %ncols_.i372, align 8, !tbaa !72
  %mul.i = mul nsw i32 %153, %152
  %mul2.i = shl nsw i32 %n_vertices.0.lcssa, 2
  %cmp.not.i373 = icmp eq i32 %mul.i, %mul2.i
  br i1 %cmp.not.i373, label %_ZN11LightMatrixIdE6resizeEii.exit, label %if.then.i375

if.then.i375:                                     ; preds = %_ZNSt14basic_ifstreamIcSt11char_traitsIcEE5closeEv.exit370
  %is_data_owner_.i = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 4, i32 0
  %154 = load i8, i8* %is_data_owner_.i, align 8, !tbaa !68, !range !90
  %tobool.not.i374 = icmp eq i8 %154, 0
  br i1 %tobool.not.i374, label %if.end.i, label %if.then3.i

if.then3.i:                                       ; preds = %if.then.i375
  %data_.i376 = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 4, i32 3
  %155 = load double*, double** %data_.i376, align 8, !tbaa !73
  %isnull.i = icmp eq double* %155, null
  br i1 %isnull.i, label %if.end.i, label %delete.notnull.i

delete.notnull.i:                                 ; preds = %if.then3.i
  %156 = bitcast double* %155 to i8*
  call void @_ZdaPv(i8* %156) #41
  br label %if.end.i

if.end.i:                                         ; preds = %delete.notnull.i, %if.then3.i, %if.then.i375
  %cmp5.i.not = icmp eq i32 %n_vertices.0.lcssa, 0
  br i1 %cmp5.i.not, label %_ZN11LightMatrixIdE6resizeEii.exit.thread, label %_ZN11LightMatrixIdE6resizeEii.exit.thread739

_ZN11LightMatrixIdE6resizeEii.exit.thread739:     ; preds = %if.end.i
  %conv20.i = zext i32 %mul2.i to i64
  %157 = shl nuw nsw i64 %conv20.i, 3
  %call.i377 = call noalias nonnull i8* @_Znam(i64 %157) #43
  %data_8.i = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 4, i32 3
  %158 = bitcast double** %data_8.i to i8**
  store i8* %call.i377, i8** %158, align 8, !tbaa !73
  store i32 %n_vertices.0.lcssa, i32* %ncols_.i372, align 8, !tbaa !72
  store i32 4, i32* %nrows_.i371, align 4, !tbaa !71
  br label %for.body.lr.ph.i384

_ZN11LightMatrixIdE6resizeEii.exit.thread:        ; preds = %if.end.i
  %data_9.i = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 4, i32 3
  store double* null, double** %data_9.i, align 8, !tbaa !73
  store i32 %n_vertices.0.lcssa, i32* %ncols_.i372, align 8, !tbaa !72
  store i32 4, i32* %nrows_.i371, align 4, !tbaa !71
  br label %_ZN11LightMatrixIdE7set_rowEiRKd.exit

_ZN11LightMatrixIdE6resizeEii.exit:               ; preds = %_ZNSt14basic_ifstreamIcSt11char_traitsIcEE5closeEv.exit370
  store i32 %n_vertices.0.lcssa, i32* %ncols_.i372, align 8, !tbaa !72
  store i32 4, i32* %nrows_.i371, align 4, !tbaa !71
  %cmp5.i380.not = icmp eq i32 %n_vertices.0.lcssa, 0
  br i1 %cmp5.i380.not, label %_ZN11LightMatrixIdE7set_rowEiRKd.exit, label %for.body.lr.ph.i384

for.body.lr.ph.i384:                              ; preds = %_ZN11LightMatrixIdE6resizeEii.exit, %_ZN11LightMatrixIdE6resizeEii.exit.thread739
  %data_.i.i381 = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 4, i32 3
  %159 = load double*, double** %data_.i.i381, align 8, !tbaa !73
  %wide.trip.count.i383 = zext i32 %n_vertices.0.lcssa to i64
  br label %for.body.i389

for.body.i389:                                    ; preds = %for.body.i389, %for.body.lr.ph.i384
  %indvars.iv.i385 = phi i64 [ 0, %for.body.lr.ph.i384 ], [ %indvars.iv.next.i387, %for.body.i389 ]
  %160 = shl nsw i64 %indvars.iv.i385, 2
  %161 = or i64 %160, 3
  %arrayidx.i.i386 = getelementptr inbounds double, double* %159, i64 %161
  store double 1.000000e+00, double* %arrayidx.i.i386, align 8, !tbaa !75
  %indvars.iv.next.i387 = add nuw nsw i64 %indvars.iv.i385, 1
  %exitcond.not.i388 = icmp eq i64 %indvars.iv.next.i387, %wide.trip.count.i383
  br i1 %exitcond.not.i388, label %_ZN11LightMatrixIdE7set_rowEiRKd.exit, label %for.body.i389, !llvm.loop !91

_ZN11LightMatrixIdE7set_rowEiRKd.exit:            ; preds = %for.body.i389, %_ZN11LightMatrixIdE6resizeEii.exit, %_ZN11LightMatrixIdE6resizeEii.exit.thread
  %cmp5.i380.not738 = phi i1 [ true, %_ZN11LightMatrixIdE6resizeEii.exit.thread ], [ true, %_ZN11LightMatrixIdE6resizeEii.exit ], [ false, %for.body.i389 ]
  %nrows_.i390 = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 5, i32 1
  %162 = load i32, i32* %nrows_.i390, align 4, !tbaa !71
  %ncols_.i391 = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 5, i32 2
  %163 = load i32, i32* %ncols_.i391, align 8, !tbaa !72
  %mul.i392 = mul nsw i32 %163, %162
  %mul2.i393 = mul i32 %n_vertices.0.lcssa, %conv
  %cmp.not.i394 = icmp eq i32 %mul.i392, %mul2.i393
  br i1 %cmp.not.i394, label %_ZN11LightMatrixIdE6resizeEii.exit410, label %if.then.i397

if.then.i397:                                     ; preds = %_ZN11LightMatrixIdE7set_rowEiRKd.exit
  %is_data_owner_.i395 = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 5, i32 0
  %164 = load i8, i8* %is_data_owner_.i395, align 8, !tbaa !68, !range !90
  %tobool.not.i396 = icmp eq i8 %164, 0
  br i1 %tobool.not.i396, label %if.end.i403, label %if.then3.i400

if.then3.i400:                                    ; preds = %if.then.i397
  %data_.i398 = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 5, i32 3
  %165 = load double*, double** %data_.i398, align 8, !tbaa !73
  %isnull.i399 = icmp eq double* %165, null
  br i1 %isnull.i399, label %if.end.i403, label %delete.notnull.i401

delete.notnull.i401:                              ; preds = %if.then3.i400
  %166 = bitcast double* %165 to i8*
  call void @_ZdaPv(i8* %166) #41
  br label %if.end.i403

if.end.i403:                                      ; preds = %delete.notnull.i401, %if.then3.i400, %if.then.i397
  %cmp5.i402 = icmp sgt i32 %mul2.i393, 0
  br i1 %cmp5.i402, label %_ZN11LightMatrixIdE6resizeEii.exit410.thread, label %_ZN11LightMatrixIdE6resizeEii.exit410.thread649

_ZN11LightMatrixIdE6resizeEii.exit410.thread:     ; preds = %if.end.i403
  %conv20.i404 = zext i32 %mul2.i393 to i64
  %167 = shl nuw nsw i64 %conv20.i404, 3
  %call.i405 = call noalias nonnull i8* @_Znam(i64 %167) #43
  %data_8.i406 = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 5, i32 3
  %168 = bitcast double** %data_8.i406 to i8**
  store i8* %call.i405, i8** %168, align 8, !tbaa !73
  store i32 %n_vertices.0.lcssa, i32* %ncols_.i391, align 8, !tbaa !72
  store i32 %conv, i32* %nrows_.i390, align 4, !tbaa !71
  br label %for.body.lr.ph.i415

_ZN11LightMatrixIdE6resizeEii.exit410.thread649:  ; preds = %if.end.i403
  %data_9.i408 = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 5, i32 3
  store double* null, double** %data_9.i408, align 8, !tbaa !73
  store i32 %n_vertices.0.lcssa, i32* %ncols_.i391, align 8, !tbaa !72
  store i32 %conv, i32* %nrows_.i390, align 4, !tbaa !71
  br label %_ZN11LightMatrixIdE4fillERKd.exit

_ZN11LightMatrixIdE6resizeEii.exit410:            ; preds = %_ZN11LightMatrixIdE7set_rowEiRKd.exit
  store i32 %n_vertices.0.lcssa, i32* %ncols_.i391, align 8, !tbaa !72
  store i32 %conv, i32* %nrows_.i390, align 4, !tbaa !71
  %cmp6.i = icmp sgt i32 %mul.i392, 0
  br i1 %cmp6.i, label %_ZN11LightMatrixIdE6resizeEii.exit410.for.body.lr.ph.i415_crit_edge, label %_ZN11LightMatrixIdE4fillERKd.exit

_ZN11LightMatrixIdE6resizeEii.exit410.for.body.lr.ph.i415_crit_edge: ; preds = %_ZN11LightMatrixIdE6resizeEii.exit410
  %data_.i413.phi.trans.insert = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 5, i32 3
  %169 = bitcast double** %data_.i413.phi.trans.insert to i8**
  %.pre732735 = load i8*, i8** %169, align 8, !tbaa !73
  %.pre733 = zext i32 %mul2.i393 to i64
  %.pre734 = shl nuw nsw i64 %.pre733, 3
  br label %for.body.lr.ph.i415

for.body.lr.ph.i415:                              ; preds = %_ZN11LightMatrixIdE6resizeEii.exit410.for.body.lr.ph.i415_crit_edge, %_ZN11LightMatrixIdE6resizeEii.exit410.thread
  %.pre-phi = phi i64 [ %.pre734, %_ZN11LightMatrixIdE6resizeEii.exit410.for.body.lr.ph.i415_crit_edge ], [ %167, %_ZN11LightMatrixIdE6resizeEii.exit410.thread ]
  %170 = phi i8* [ %.pre732735, %_ZN11LightMatrixIdE6resizeEii.exit410.for.body.lr.ph.i415_crit_edge ], [ %call.i405, %_ZN11LightMatrixIdE6resizeEii.exit410.thread ]
  call void @llvm.memset.p0i8.i64(i8* align 8 %170, i8 0, i64 %.pre-phi, i1 false)
  br label %_ZN11LightMatrixIdE4fillERKd.exit

_ZN11LightMatrixIdE4fillERKd.exit:                ; preds = %for.body.lr.ph.i415, %_ZN11LightMatrixIdE6resizeEii.exit410, %_ZN11LightMatrixIdE6resizeEii.exit410.thread649
  %171 = bitcast %"class.std::basic_ifstream"* %ref.tmp56 to i8*
  call void @llvm.lifetime.start.p0i8(i64 520, i8* nonnull %171) #38
  %172 = bitcast %"class.std::__cxx11::basic_string"* %ref.tmp57 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %172) #38
  call void @llvm.experimental.noalias.scope.decl(metadata !92)
  %173 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp57, i64 0, i32 2
  %174 = bitcast %"class.std::__cxx11::basic_string"* %ref.tmp57 to %union.anon**
  store %union.anon* %173, %union.anon** %174, align 8, !tbaa !14, !alias.scope !92
  %175 = load i8*, i8** %_M_p.i9.i.i, align 8, !tbaa !17, !noalias !92
  %176 = load i64, i64* %_M_string_length.i.i.i, align 8, !tbaa !19, !noalias !92
  %177 = bitcast i64* %__dnew.i.i.i421 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %177) #38, !noalias !92
  store i64 %176, i64* %__dnew.i.i.i421, align 8, !tbaa !20, !noalias !92
  %cmp.i.i.i424 = icmp ugt i64 %176, 15
  br i1 %cmp.i.i.i424, label %if.then.i.i.i429, label %entry.if.end_crit_edge.i.i.i425

entry.if.end_crit_edge.i.i.i425:                  ; preds = %_ZN11LightMatrixIdE4fillERKd.exit
  %178 = bitcast %union.anon* %173 to i8*
  br label %if.end.i.i.i430

if.then.i.i.i429:                                 ; preds = %_ZN11LightMatrixIdE4fillERKd.exit
  %call2.i.i.i426 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %ref.tmp57, i64* nonnull align 8 dereferenceable(8) %__dnew.i.i.i421, i64 0) #38
  %_M_p.i.i.i.i427 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp57, i64 0, i32 0, i32 0
  store i8* %call2.i.i.i426, i8** %_M_p.i.i.i.i427, align 8, !tbaa !17, !alias.scope !92
  %179 = load i64, i64* %__dnew.i.i.i421, align 8, !tbaa !20, !noalias !92
  %_M_allocated_capacity.i.i.i.i428 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp57, i64 0, i32 2, i32 0
  store i64 %179, i64* %_M_allocated_capacity.i.i.i.i428, align 8, !tbaa !21, !alias.scope !92
  br label %if.end.i.i.i430

if.end.i.i.i430:                                  ; preds = %if.then.i.i.i429, %entry.if.end_crit_edge.i.i.i425
  %180 = phi i8* [ %178, %entry.if.end_crit_edge.i.i.i425 ], [ %call2.i.i.i426, %if.then.i.i.i429 ]
  switch i64 %176, label %if.end.i.i.i.i.i.i432 [
    i64 1, label %if.then.i.i7.i.i.i431
    i64 0, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i439
  ]

if.then.i.i7.i.i.i431:                            ; preds = %if.end.i.i.i430
  %181 = load i8, i8* %175, align 1, !tbaa !21
  store i8 %181, i8* %180, align 1, !tbaa !21
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i439

if.end.i.i.i.i.i.i432:                            ; preds = %if.end.i.i.i430
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %180, i8* align 1 %175, i64 %176, i1 false) #38
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i439

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i439: ; preds = %if.end.i.i.i.i.i.i432, %if.then.i.i7.i.i.i431, %if.end.i.i.i430
  %_M_p.i8.i.i.i433 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp57, i64 0, i32 0, i32 0
  %182 = load i64, i64* %__dnew.i.i.i421, align 8, !tbaa !20, !noalias !92
  %_M_string_length.i.i.i.i.i434 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp57, i64 0, i32 1
  store i64 %182, i64* %_M_string_length.i.i.i.i.i434, align 8, !tbaa !19, !alias.scope !92
  %183 = load i8*, i8** %_M_p.i8.i.i.i433, align 8, !tbaa !17, !alias.scope !92
  %arrayidx.i.i.i.i435 = getelementptr inbounds i8, i8* %183, i64 %182
  store i8 0, i8* %arrayidx.i.i.i.i435, align 1, !tbaa !21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %177) #38, !noalias !92
  %184 = load i64, i64* %_M_string_length.i.i.i.i.i434, align 8, !tbaa !19, !alias.scope !92
  %sub3.i.i.i437 = sub i64 4611686018427387903, %184
  %cmp.i.i1.i438 = icmp ult i64 %sub3.i.i.i437, 12
  br i1 %cmp.i.i1.i438, label %if.then.i.i2.i440, label %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_.exit442

if.then.i.i2.i440:                                ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i439
  call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.33, i64 0, i64 0)) #40
  unreachable

_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_.exit442: ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i439
  %call2.i.i441 = call nonnull align 8 dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %ref.tmp57, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.8, i64 0, i64 0), i64 12) #38
  call void @_ZNSt14basic_ifstreamIcSt11char_traitsIcEEC1ERKNSt7__cxx1112basic_stringIcS1_SaIcEEESt13_Ios_Openmode(%"class.std::basic_ifstream"* nonnull dereferenceable(256) %ref.tmp56, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %ref.tmp57, i32 8)
  %vtable.i.i.i443 = load i8*, i8** %131, align 8, !tbaa !50
  %vbase.offset.ptr.i.i.i = getelementptr i8, i8* %vtable.i.i.i443, i64 -24
  %185 = bitcast i8* %vbase.offset.ptr.i.i.i to i64*
  %vbase.offset.i.i.i = load i64, i64* %185, align 8
  %add.ptr.i.i.i = getelementptr inbounds i8, i8* %116, i64 %vbase.offset.i.i.i
  %186 = bitcast i8* %add.ptr.i.i.i to %"class.std::basic_ios"*
  %187 = bitcast %"class.std::basic_ifstream"* %ref.tmp56 to i8**
  %vtable2.i.i.i = load i8*, i8** %187, align 8, !tbaa !50
  %vbase.offset.ptr3.i.i.i = getelementptr i8, i8* %vtable2.i.i.i, i64 -24
  %188 = bitcast i8* %vbase.offset.ptr3.i.i.i to i64*
  %vbase.offset4.i.i.i = load i64, i64* %188, align 8
  %add.ptr5.i.i.i = getelementptr inbounds i8, i8* %171, i64 %vbase.offset4.i.i.i
  %189 = bitcast i8* %add.ptr5.i.i.i to %"class.std::basic_ios"*
  %190 = bitcast i8* %add.ptr.i.i.i to %"class.std::ios_base"*
  %191 = bitcast i8* %add.ptr5.i.i.i to %"class.std::ios_base"*
  call void @_ZNSt8ios_base7_M_swapERS_(%"class.std::ios_base"* nonnull dereferenceable(216) %190, %"class.std::ios_base"* nonnull align 8 dereferenceable(216) %191) #38
  %_M_ios_locale.i.i.i.i = getelementptr inbounds i8, i8* %add.ptr.i.i.i, i64 208
  %192 = bitcast i8* %_M_ios_locale.i.i.i.i to %"class.std::locale"*
  call void @_ZNSt9basic_iosIcSt11char_traitsIcEE15_M_cache_localeERKSt6locale(%"class.std::basic_ios"* nonnull dereferenceable(264) %186, %"class.std::locale"* nonnull align 8 dereferenceable(8) %192) #38
  %_M_ios_locale2.i.i.i.i = getelementptr inbounds i8, i8* %add.ptr5.i.i.i, i64 208
  %193 = bitcast i8* %_M_ios_locale2.i.i.i.i to %"class.std::locale"*
  call void @_ZNSt9basic_iosIcSt11char_traitsIcEE15_M_cache_localeERKSt6locale(%"class.std::basic_ios"* nonnull dereferenceable(264) %189, %"class.std::locale"* nonnull align 8 dereferenceable(8) %193) #38
  %_M_tie.i.i.i.i = getelementptr inbounds i8, i8* %add.ptr.i.i.i, i64 216
  %194 = bitcast i8* %_M_tie.i.i.i.i to %"class.std::basic_ostream"**
  %_M_tie3.i.i.i.i = getelementptr inbounds i8, i8* %add.ptr5.i.i.i, i64 216
  %195 = bitcast i8* %_M_tie3.i.i.i.i to %"class.std::basic_ostream"**
  %196 = load %"class.std::basic_ostream"*, %"class.std::basic_ostream"** %194, align 8, !tbaa !60
  %197 = load %"class.std::basic_ostream"*, %"class.std::basic_ostream"** %195, align 8, !tbaa !60
  store %"class.std::basic_ostream"* %197, %"class.std::basic_ostream"** %194, align 8, !tbaa !60
  store %"class.std::basic_ostream"* %196, %"class.std::basic_ostream"** %195, align 8, !tbaa !60
  %198 = getelementptr inbounds i8, i8* %add.ptr.i.i.i, i64 224
  %199 = getelementptr inbounds i8, i8* %add.ptr5.i.i.i, i64 224
  %200 = load i8, i8* %198, align 1, !tbaa !21
  %201 = load i8, i8* %199, align 8, !tbaa !21
  store i8 %201, i8* %198, align 1, !tbaa !21
  store i8 %200, i8* %199, align 8, !tbaa !21
  %202 = getelementptr inbounds i8, i8* %add.ptr.i.i.i, i64 225
  %203 = getelementptr inbounds i8, i8* %add.ptr5.i.i.i, i64 225
  %204 = load i8, i8* %202, align 1, !tbaa !95, !range !90
  %205 = load i8, i8* %203, align 1, !tbaa !95, !range !90
  store i8 %205, i8* %202, align 1, !tbaa !95
  store i8 %204, i8* %203, align 1, !tbaa !95
  %206 = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %vert_in, i64 0, i32 0, i32 1
  %207 = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %ref.tmp56, i64 0, i32 0, i32 1
  %208 = load i64, i64* %206, align 8, !tbaa !20
  %209 = load i64, i64* %207, align 8, !tbaa !20
  store i64 %209, i64* %206, align 8, !tbaa !20
  store i64 %208, i64* %207, align 8, !tbaa !20
  %_M_filebuf.i444 = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %ref.tmp56, i64 0, i32 1
  %call5.i = call nonnull align 8 dereferenceable(240) %"class.std::basic_filebuf"* @_ZNSt13basic_filebufIcSt11char_traitsIcEEaSEOS2_(%"class.std::basic_filebuf"* nonnull dereferenceable(240) %_M_filebuf.i360, %"class.std::basic_filebuf"* nonnull align 8 dereferenceable(240) %_M_filebuf.i444) #38
  %210 = load i32 (...)**, i32 (...)*** bitcast ([4 x i8*]* @_ZTTSt14basic_ifstreamIcSt11char_traitsIcEE to i32 (...)***), align 8
  %211 = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %ref.tmp56, i64 0, i32 0, i32 0
  store i32 (...)** %210, i32 (...)*** %211, align 8, !tbaa !50
  %212 = load i32 (...)**, i32 (...)*** bitcast (i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTSt14basic_ifstreamIcSt11char_traitsIcEE, i64 0, i64 3) to i32 (...)***), align 8
  %vbase.offset.ptr3.i.i = getelementptr i32 (...)*, i32 (...)** %210, i64 -3
  %213 = bitcast i32 (...)** %vbase.offset.ptr3.i.i to i64*
  %vbase.offset.i.i = load i64, i64* %213, align 8
  %add.ptr.i.i445 = getelementptr inbounds i8, i8* %171, i64 %vbase.offset.i.i
  %214 = bitcast i8* %add.ptr.i.i445 to i32 (...)***
  store i32 (...)** %212, i32 (...)*** %214, align 8, !tbaa !50
  %215 = getelementptr inbounds %"class.std::basic_filebuf", %"class.std::basic_filebuf"* %_M_filebuf.i444, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVSt13basic_filebufIcSt11char_traitsIcEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %215, align 8, !tbaa !50
  %call.i.i.i446 = call %"class.std::basic_filebuf"* @_ZNSt13basic_filebufIcSt11char_traitsIcEE5closeEv(%"class.std::basic_filebuf"* nonnull dereferenceable(240) %_M_filebuf.i444) #38
  %_M_file.i.i.i = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %ref.tmp56, i64 0, i32 1, i32 2
  call void @_ZNSt12__basic_fileIcED1Ev(%"class.std::__basic_file"* nonnull dereferenceable(9) %_M_file.i.i.i) #38
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVSt15basic_streambufIcSt11char_traitsIcEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %215, align 8, !tbaa !50
  %_M_buf_locale.i.i.i.i = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %ref.tmp56, i64 0, i32 1, i32 0, i32 7
  call void @_ZNSt6localeD1Ev(%"class.std::locale"* nonnull dereferenceable(8) %_M_buf_locale.i.i.i.i) #38
  %216 = load i32 (...)**, i32 (...)*** bitcast (i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTSt14basic_ifstreamIcSt11char_traitsIcEE, i64 0, i64 1) to i32 (...)***), align 8
  store i32 (...)** %216, i32 (...)*** %211, align 8, !tbaa !50
  %217 = load i32 (...)**, i32 (...)*** bitcast (i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTSt14basic_ifstreamIcSt11char_traitsIcEE, i64 0, i64 2) to i32 (...)***), align 8
  %vbase.offset.ptr3.i.i.i447 = getelementptr i32 (...)*, i32 (...)** %216, i64 -3
  %218 = bitcast i32 (...)** %vbase.offset.ptr3.i.i.i447 to i64*
  %vbase.offset.i.i.i448 = load i64, i64* %218, align 8
  %add.ptr.i.i.i449 = getelementptr inbounds i8, i8* %171, i64 %vbase.offset.i.i.i448
  %219 = bitcast i8* %add.ptr.i.i.i449 to i32 (...)***
  store i32 (...)** %217, i32 (...)*** %219, align 8, !tbaa !50
  store i64 0, i64* %207, align 8, !tbaa !96
  %220 = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %ref.tmp56, i64 0, i32 2, i32 0
  call void @_ZNSt8ios_baseD2Ev(%"class.std::ios_base"* nonnull dereferenceable(216) %220) #38
  %221 = load i8*, i8** %_M_p.i8.i.i.i433, align 8, !tbaa !17
  %arraydecay.i.i.i.i451 = bitcast %union.anon* %173 to i8*
  %cmp.i.i.i452 = icmp eq i8* %221, %arraydecay.i.i.i.i451
  br i1 %cmp.i.i.i452, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit454, label %if.then.i.i453

if.then.i.i453:                                   ; preds = %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_.exit442
  call void @_ZdlPv(i8* %221) #41
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit454

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit454: ; preds = %if.then.i.i453, %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_.exit442
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %172) #38
  call void @llvm.lifetime.end.p0i8(i64 520, i8* nonnull %171) #38
  br i1 %cmp5.i380.not738, label %for.cond.cleanup61, label %for.cond63.preheader.lr.ph

for.cond63.preheader.lr.ph:                       ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit454
  %222 = bitcast %"class.std::basic_ifstream"* %vert_in to %"class.std::basic_istream"*
  %_M_p.i.i.i495 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %s, i64 0, i32 0, i32 0
  %223 = bitcast i8** %__endptr.i.i494 to i8*
  %data_.i507 = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 4, i32 3
  %224 = bitcast i8** %__endptr.i.i512 to i8*
  %225 = bitcast i8** %__endptr.i.i528 to i8*
  %226 = bitcast i8** %__endptr.i.i544 to i8*
  %data_.i557 = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 5, i32 3
  br label %for.cond63.preheader

for.cond63.preheader:                             ; preds = %for.cond.cleanup88, %for.cond63.preheader.lr.ph
  %i_vert.0677 = phi i32 [ 0, %for.cond63.preheader.lr.ph ], [ %inc104, %for.cond.cleanup88 ]
  br label %for.body66

for.cond.cleanup61:                               ; preds = %for.cond.cleanup88, %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit454
  %call.i456 = call %"class.std::basic_filebuf"* @_ZNSt13basic_filebufIcSt11char_traitsIcEE5closeEv(%"class.std::basic_filebuf"* nonnull dereferenceable(240) %_M_filebuf.i360) #38
  %tobool.not.i457 = icmp eq %"class.std::basic_filebuf"* %call.i456, null
  br i1 %tobool.not.i457, label %if.then.i464, label %_ZNSt14basic_ifstreamIcSt11char_traitsIcEE5closeEv.exit466

if.then.i464:                                     ; preds = %for.cond.cleanup61
  %vtable.i458 = load i8*, i8** %131, align 8, !tbaa !50
  %vbase.offset.ptr.i459 = getelementptr i8, i8* %vtable.i458, i64 -24
  %227 = bitcast i8* %vbase.offset.ptr.i459 to i64*
  %vbase.offset.i460 = load i64, i64* %227, align 8
  %add.ptr.i461 = getelementptr inbounds i8, i8* %116, i64 %vbase.offset.i460
  %228 = bitcast i8* %add.ptr.i461 to %"class.std::basic_ios"*
  %_M_streambuf_state.i.i.i462 = getelementptr inbounds i8, i8* %add.ptr.i461, i64 32
  %229 = bitcast i8* %_M_streambuf_state.i.i.i462 to i32*
  %230 = load i32, i32* %229, align 8, !tbaa !52
  %or.i.i.i463 = or i32 %230, 4
  call void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* nonnull dereferenceable(264) %228, i32 %or.i.i.i463) #38
  br label %_ZNSt14basic_ifstreamIcSt11char_traitsIcEE5closeEv.exit466

_ZNSt14basic_ifstreamIcSt11char_traitsIcEE5closeEv.exit466: ; preds = %if.then.i464, %for.cond.cleanup61
  %231 = bitcast %"class.std::basic_ifstream"* %triangles_in to i8*
  call void @llvm.lifetime.start.p0i8(i64 520, i8* nonnull %231) #38
  %232 = bitcast %"class.std::__cxx11::basic_string"* %ref.tmp106 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %232) #38
  call void @llvm.experimental.noalias.scope.decl(metadata !98)
  %233 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp106, i64 0, i32 2
  %234 = bitcast %"class.std::__cxx11::basic_string"* %ref.tmp106 to %union.anon**
  store %union.anon* %233, %union.anon** %234, align 8, !tbaa !14, !alias.scope !98
  %235 = load i8*, i8** %_M_p.i9.i.i, align 8, !tbaa !17, !noalias !98
  %236 = load i64, i64* %_M_string_length.i.i.i, align 8, !tbaa !19, !noalias !98
  %237 = bitcast i64* %__dnew.i.i.i467 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %237) #38, !noalias !98
  store i64 %236, i64* %__dnew.i.i.i467, align 8, !tbaa !20, !noalias !98
  %cmp.i.i.i470 = icmp ugt i64 %236, 15
  br i1 %cmp.i.i.i470, label %if.then.i.i.i475, label %entry.if.end_crit_edge.i.i.i471

entry.if.end_crit_edge.i.i.i471:                  ; preds = %_ZNSt14basic_ifstreamIcSt11char_traitsIcEE5closeEv.exit466
  %238 = bitcast %union.anon* %233 to i8*
  br label %if.end.i.i.i476

if.then.i.i.i475:                                 ; preds = %_ZNSt14basic_ifstreamIcSt11char_traitsIcEE5closeEv.exit466
  %call2.i.i.i472 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %ref.tmp106, i64* nonnull align 8 dereferenceable(8) %__dnew.i.i.i467, i64 0) #38
  %_M_p.i.i.i.i473 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp106, i64 0, i32 0, i32 0
  store i8* %call2.i.i.i472, i8** %_M_p.i.i.i.i473, align 8, !tbaa !17, !alias.scope !98
  %239 = load i64, i64* %__dnew.i.i.i467, align 8, !tbaa !20, !noalias !98
  %_M_allocated_capacity.i.i.i.i474 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp106, i64 0, i32 2, i32 0
  store i64 %239, i64* %_M_allocated_capacity.i.i.i.i474, align 8, !tbaa !21, !alias.scope !98
  br label %if.end.i.i.i476

if.end.i.i.i476:                                  ; preds = %if.then.i.i.i475, %entry.if.end_crit_edge.i.i.i471
  %240 = phi i8* [ %238, %entry.if.end_crit_edge.i.i.i471 ], [ %call2.i.i.i472, %if.then.i.i.i475 ]
  switch i64 %236, label %if.end.i.i.i.i.i.i478 [
    i64 1, label %if.then.i.i7.i.i.i477
    i64 0, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i485
  ]

if.then.i.i7.i.i.i477:                            ; preds = %if.end.i.i.i476
  %241 = load i8, i8* %235, align 1, !tbaa !21
  store i8 %241, i8* %240, align 1, !tbaa !21
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i485

if.end.i.i.i.i.i.i478:                            ; preds = %if.end.i.i.i476
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %240, i8* align 1 %235, i64 %236, i1 false) #38
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i485

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i485: ; preds = %if.end.i.i.i.i.i.i478, %if.then.i.i7.i.i.i477, %if.end.i.i.i476
  %_M_p.i8.i.i.i479 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp106, i64 0, i32 0, i32 0
  %242 = load i64, i64* %__dnew.i.i.i467, align 8, !tbaa !20, !noalias !98
  %_M_string_length.i.i.i.i.i480 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp106, i64 0, i32 1
  store i64 %242, i64* %_M_string_length.i.i.i.i.i480, align 8, !tbaa !19, !alias.scope !98
  %243 = load i8*, i8** %_M_p.i8.i.i.i479, align 8, !tbaa !17, !alias.scope !98
  %arrayidx.i.i.i.i481 = getelementptr inbounds i8, i8* %243, i64 %242
  store i8 0, i8* %arrayidx.i.i.i.i481, align 1, !tbaa !21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %237) #38, !noalias !98
  %244 = load i64, i64* %_M_string_length.i.i.i.i.i480, align 8, !tbaa !19, !alias.scope !98
  %sub3.i.i.i483 = sub i64 4611686018427387903, %244
  %cmp.i.i1.i484 = icmp ult i64 %sub3.i.i.i483, 13
  br i1 %cmp.i.i1.i484, label %if.then.i.i2.i486, label %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_.exit488

if.then.i.i2.i486:                                ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i485
  call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.33, i64 0, i64 0)) #40
  unreachable

_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_.exit488: ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i485
  %call2.i.i487 = call nonnull align 8 dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %ref.tmp106, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.9, i64 0, i64 0), i64 13) #38
  call void @_ZNSt14basic_ifstreamIcSt11char_traitsIcEEC1ERKNSt7__cxx1112basic_stringIcS1_SaIcEEESt13_Ios_Openmode(%"class.std::basic_ifstream"* nonnull dereferenceable(256) %triangles_in, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %ref.tmp106, i32 8)
  %245 = load i8*, i8** %_M_p.i8.i.i.i479, align 8, !tbaa !17
  %arraydecay.i.i.i.i490 = bitcast %union.anon* %233 to i8*
  %cmp.i.i.i491 = icmp eq i8* %245, %arraydecay.i.i.i.i490
  br i1 %cmp.i.i.i491, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit493, label %if.then.i.i492

if.then.i.i492:                                   ; preds = %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_.exit488
  call void @_ZdlPv(i8* %245) #41
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit493

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit493: ; preds = %if.then.i.i492, %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_.exit488
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %232) #38
  %246 = bitcast [3 x %"class.std::__cxx11::basic_string"]* %ss to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %246) #38
  %array.begin = getelementptr inbounds [3 x %"class.std::__cxx11::basic_string"], [3 x %"class.std::__cxx11::basic_string"]* %ss, i64 0, i64 0
  %arrayctor.end = getelementptr inbounds [3 x %"class.std::__cxx11::basic_string"], [3 x %"class.std::__cxx11::basic_string"]* %ss, i64 0, i64 3
  br label %arrayctor.loop

for.body66:                                       ; preds = %_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm.exit506, %for.cond63.preheader
  %j.0672 = phi i32 [ 0, %for.cond63.preheader ], [ %inc72, %_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm.exit506 ]
  %call67 = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EES4_(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) %222, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %s, i8 signext 58) #38
  %247 = load i8*, i8** %_M_p.i.i.i495, align 8, !tbaa !17
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %223) #38
  %call.i.i.i496 = tail call i32* @__errno_location() #42
  %248 = load i32, i32* %call.i.i.i496, align 4, !tbaa !59
  store i32 0, i32* %call.i.i.i496, align 4, !tbaa !59
  %call.i.i497 = call fast double @strtod(i8* %247, i8** nonnull %__endptr.i.i494) #38
  %249 = load i8*, i8** %__endptr.i.i494, align 8, !tbaa !60
  %cmp.i.i498 = icmp eq i8* %249, %247
  br i1 %cmp.i.i498, label %if.then.i.i499, label %if.else.i.i501

if.then.i.i499:                                   ; preds = %for.body66
  call void @_ZSt24__throw_invalid_argumentPKc(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.32, i64 0, i64 0)) #40
  unreachable

if.else.i.i501:                                   ; preds = %for.body66
  %250 = load i32, i32* %call.i.i.i496, align 4, !tbaa !59
  switch i32 %250, label %_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm.exit506 [
    i32 34, label %if.then4.i.i502
    i32 0, label %if.then.i.i.i505
  ]

if.then4.i.i502:                                  ; preds = %if.else.i.i501
  call void @_ZSt20__throw_out_of_rangePKc(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.32, i64 0, i64 0)) #40
  unreachable

if.then.i.i.i505:                                 ; preds = %if.else.i.i501
  store i32 %248, i32* %call.i.i.i496, align 4, !tbaa !59
  br label %_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm.exit506

_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm.exit506: ; preds = %if.then.i.i.i505, %if.else.i.i501
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %223) #38
  %251 = load double*, double** %data_.i507, align 8, !tbaa !73
  %252 = load i32, i32* %nrows_.i371, align 4, !tbaa !71
  %mul.i509 = mul nsw i32 %252, %i_vert.0677
  %add.i510 = add nsw i32 %mul.i509, %j.0672
  %idxprom.i = sext i32 %add.i510 to i64
  %arrayidx.i511 = getelementptr inbounds double, double* %251, i64 %idxprom.i
  store double %call.i.i497, double* %arrayidx.i511, align 8, !tbaa !75
  %inc72 = add nuw nsw i32 %j.0672, 1
  %exitcond695.not = icmp eq i32 %inc72, 3
  br i1 %exitcond695.not, label %for.body78.preheader, label %for.body66, !llvm.loop !101

for.body78.preheader:                             ; preds = %_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm.exit506
  %call.i.i.i496.lcssa4 = phi i32* [ %call.i.i.i496, %_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm.exit506 ]
  br label %for.body78

for.cond.cleanup77:                               ; preds = %for.body78
  %call83 = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EES4_(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) %222, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %s, i8 signext 58) #38
  %253 = load i8*, i8** %_M_p.i.i.i495, align 8, !tbaa !17
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %224) #38
  %254 = load i32, i32* %call.i.i.i496.lcssa4, align 4, !tbaa !59
  store i32 0, i32* %call.i.i.i496.lcssa4, align 4, !tbaa !59
  %call.i.i515 = call i64 @strtol(i8* %253, i8** nonnull %__endptr.i.i512, i32 10) #38
  %255 = load i8*, i8** %__endptr.i.i512, align 8, !tbaa !60
  %cmp.i.i516 = icmp eq i8* %255, %253
  br i1 %cmp.i.i516, label %if.then.i.i517, label %if.else.i.i521

if.then.i.i517:                                   ; preds = %for.cond.cleanup77
  call void @_ZSt24__throw_invalid_argumentPKc(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.31, i64 0, i64 0)) #40
  unreachable

if.else.i.i521:                                   ; preds = %for.cond.cleanup77
  %256 = load i32, i32* %call.i.i.i496.lcssa4, align 4, !tbaa !59
  %cmp2.i.i518 = icmp eq i32 %256, 34
  %__val.off.i.i.i519 = add i64 %call.i.i515, 2147483648
  %257 = icmp ugt i64 %__val.off.i.i.i519, 4294967295
  %or.cond.i.i520 = or i1 %257, %cmp2.i.i518
  br i1 %or.cond.i.i520, label %if.then4.i.i522, label %if.else5.i.i523

if.then4.i.i522:                                  ; preds = %if.else.i.i521
  call void @_ZSt20__throw_out_of_rangePKc(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.31, i64 0, i64 0)) #40
  unreachable

if.else5.i.i523:                                  ; preds = %if.else.i.i521
  %cmp.i.i.i524 = icmp eq i32 %256, 0
  br i1 %cmp.i.i.i524, label %if.then.i.i.i525, label %_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPmi.exit527

if.then.i.i.i525:                                 ; preds = %if.else5.i.i523
  store i32 %254, i32* %call.i.i.i496.lcssa4, align 4, !tbaa !59
  br label %_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPmi.exit527

_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPmi.exit527: ; preds = %if.then.i.i.i525, %if.else5.i.i523
  %conv.i.i526 = trunc i64 %call.i.i515 to i32
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %224) #38
  %cmp87674 = icmp sgt i32 %conv.i.i526, 0
  br i1 %cmp87674, label %for.body89.lr.ph, label %for.cond.cleanup88

for.body89.lr.ph:                                 ; preds = %_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPmi.exit527
  %sub = add nsw i32 %conv.i.i526, -1
  br label %for.body89

for.body78:                                       ; preds = %for.body78, %for.body78.preheader
  %j74.0673 = phi i32 [ %inc81, %for.body78 ], [ 0, %for.body78.preheader ]
  %call79 = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EES4_(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) %222, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %s, i8 signext 58) #38
  %inc81 = add nuw nsw i32 %j74.0673, 1
  %exitcond696.not = icmp eq i32 %inc81, 5
  br i1 %exitcond696.not, label %for.cond.cleanup77, label %for.body78, !llvm.loop !102

for.cond.cleanup88:                               ; preds = %_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm.exit556, %_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPmi.exit527
  %inc104 = add nuw i32 %i_vert.0677, 1
  %exitcond698.not = icmp eq i32 %inc104, %n_vertices.0.lcssa
  br i1 %exitcond698.not, label %for.cond.cleanup61, label %for.cond63.preheader, !llvm.loop !103

for.body89:                                       ; preds = %_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm.exit556, %for.body89.lr.ph
  %j85.0675 = phi i32 [ 0, %for.body89.lr.ph ], [ %inc101, %_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm.exit556 ]
  %call90 = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EES4_(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) %222, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %s, i8 signext 58) #38
  %258 = load i8*, i8** %_M_p.i.i.i495, align 8, !tbaa !17
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %225) #38
  %259 = load i32, i32* %call.i.i.i496.lcssa4, align 4, !tbaa !59
  store i32 0, i32* %call.i.i.i496.lcssa4, align 4, !tbaa !59
  %call.i.i531 = call i64 @strtol(i8* %258, i8** nonnull %__endptr.i.i528, i32 10) #38
  %260 = load i8*, i8** %__endptr.i.i528, align 8, !tbaa !60
  %cmp.i.i532 = icmp eq i8* %260, %258
  br i1 %cmp.i.i532, label %if.then.i.i533, label %if.else.i.i537

if.then.i.i533:                                   ; preds = %for.body89
  call void @_ZSt24__throw_invalid_argumentPKc(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.31, i64 0, i64 0)) #40
  unreachable

if.else.i.i537:                                   ; preds = %for.body89
  %261 = load i32, i32* %call.i.i.i496.lcssa4, align 4, !tbaa !59
  %cmp2.i.i534 = icmp eq i32 %261, 34
  %__val.off.i.i.i535 = add i64 %call.i.i531, 2147483648
  %262 = icmp ugt i64 %__val.off.i.i.i535, 4294967295
  %or.cond.i.i536 = or i1 %262, %cmp2.i.i534
  br i1 %or.cond.i.i536, label %if.then4.i.i538, label %if.else5.i.i539

if.then4.i.i538:                                  ; preds = %if.else.i.i537
  call void @_ZSt20__throw_out_of_rangePKc(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.31, i64 0, i64 0)) #40
  unreachable

if.else5.i.i539:                                  ; preds = %if.else.i.i537
  %cmp.i.i.i540 = icmp eq i32 %261, 0
  br i1 %cmp.i.i.i540, label %if.then.i.i.i541, label %_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPmi.exit543

if.then.i.i.i541:                                 ; preds = %if.else5.i.i539
  store i32 %259, i32* %call.i.i.i496.lcssa4, align 4, !tbaa !59
  br label %_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPmi.exit543

_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPmi.exit543: ; preds = %if.then.i.i.i541, %if.else5.i.i539
  %conv.i.i542 = trunc i64 %call.i.i531 to i32
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %225) #38
  %cmp92 = icmp eq i32 %j85.0675, %sub
  %.sink = select i1 %cmp92, i8 10, i8 58
  %call95 = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EES4_(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) %222, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %s, i8 signext %.sink) #38
  %263 = load i8*, i8** %_M_p.i.i.i495, align 8, !tbaa !17
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %226) #38
  %264 = load i32, i32* %call.i.i.i496.lcssa4, align 4, !tbaa !59
  store i32 0, i32* %call.i.i.i496.lcssa4, align 4, !tbaa !59
  %call.i.i547 = call fast double @strtod(i8* %263, i8** nonnull %__endptr.i.i544) #38
  %265 = load i8*, i8** %__endptr.i.i544, align 8, !tbaa !60
  %cmp.i.i548 = icmp eq i8* %265, %263
  br i1 %cmp.i.i548, label %if.then.i.i549, label %if.else.i.i551

if.then.i.i549:                                   ; preds = %_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPmi.exit543
  call void @_ZSt24__throw_invalid_argumentPKc(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.32, i64 0, i64 0)) #40
  unreachable

if.else.i.i551:                                   ; preds = %_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPmi.exit543
  %266 = load i32, i32* %call.i.i.i496.lcssa4, align 4, !tbaa !59
  switch i32 %266, label %_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm.exit556 [
    i32 34, label %if.then4.i.i552
    i32 0, label %if.then.i.i.i555
  ]

if.then4.i.i552:                                  ; preds = %if.else.i.i551
  call void @_ZSt20__throw_out_of_rangePKc(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.32, i64 0, i64 0)) #40
  unreachable

if.then.i.i.i555:                                 ; preds = %if.else.i.i551
  store i32 %264, i32* %call.i.i.i496.lcssa4, align 4, !tbaa !59
  br label %_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm.exit556

_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm.exit556: ; preds = %if.then.i.i.i555, %if.else.i.i551
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %226) #38
  %267 = load double*, double** %data_.i557, align 8, !tbaa !73
  %268 = load i32, i32* %nrows_.i390, align 4, !tbaa !71
  %mul.i559 = mul nsw i32 %268, %i_vert.0677
  %add.i560 = add nsw i32 %mul.i559, %conv.i.i542
  %idxprom.i561 = sext i32 %add.i560 to i64
  %arrayidx.i562 = getelementptr inbounds double, double* %267, i64 %idxprom.i561
  store double %call.i.i547, double* %arrayidx.i562, align 8, !tbaa !75
  %inc101 = add nuw nsw i32 %j85.0675, 1
  %exitcond697.not = icmp eq i32 %inc101, %conv.i.i526
  br i1 %exitcond697.not, label %for.cond.cleanup88, label %for.body89, !llvm.loop !104

arrayctor.loop:                                   ; preds = %arrayctor.loop, %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit493
  %arrayctor.cur = phi %"class.std::__cxx11::basic_string"* [ %array.begin, %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit493 ], [ %arrayctor.next, %arrayctor.loop ]
  %269 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %arrayctor.cur, i64 0, i32 2
  %270 = bitcast %"class.std::__cxx11::basic_string"* %arrayctor.cur to %union.anon**
  store %union.anon* %269, %union.anon** %270, align 8, !tbaa !14
  %_M_string_length.i.i.i563 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %arrayctor.cur, i64 0, i32 1
  store i64 0, i64* %_M_string_length.i.i.i563, align 8, !tbaa !19
  %.cast.i564 = bitcast %union.anon* %269 to i8*
  store i8 0, i8* %.cast.i564, align 1, !tbaa !21
  %arrayctor.next = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %arrayctor.cur, i64 1
  %arrayctor.done = icmp eq %"class.std::__cxx11::basic_string"* %arrayctor.next, %arrayctor.end
  br i1 %arrayctor.done, label %while.cond107.preheader, label %arrayctor.loop

while.cond107.preheader:                          ; preds = %arrayctor.loop
  %271 = bitcast %"class.std::basic_ifstream"* %triangles_in to i8**
  %vtable108667 = load i8*, i8** %271, align 8, !tbaa !50
  %vbase.offset.ptr109668 = getelementptr i8, i8* %vtable108667, i64 -24
  %272 = bitcast i8* %vbase.offset.ptr109668 to i64*
  %vbase.offset110669 = load i64, i64* %272, align 8
  %add.ptr111 = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %triangles_in, i64 0, i32 1, i32 0, i32 2
  %273 = bitcast i8** %add.ptr111 to i8*
  %_M_streambuf_state.i.i565670 = getelementptr inbounds i8, i8* %273, i64 %vbase.offset110669
  %274 = bitcast i8* %_M_streambuf_state.i.i565670 to i32*
  %275 = load i32, i32* %274, align 8, !tbaa !52
  %cmp.i566671 = icmp eq i32 %275, 0
  br i1 %cmp.i566671, label %while.body113.lr.ph, label %while.end137

while.body113.lr.ph:                              ; preds = %while.cond107.preheader
  %276 = bitcast %"class.std::basic_ifstream"* %triangles_in to %"class.std::basic_istream"*
  %_M_string_length.i.i567 = getelementptr inbounds [3 x %"class.std::__cxx11::basic_string"], [3 x %"class.std::__cxx11::basic_string"]* %ss, i64 0, i64 0, i32 1
  %arrayidx120 = getelementptr inbounds [3 x %"class.std::__cxx11::basic_string"], [3 x %"class.std::__cxx11::basic_string"]* %ss, i64 0, i64 1
  %arrayidx122 = getelementptr inbounds [3 x %"class.std::__cxx11::basic_string"], [3 x %"class.std::__cxx11::basic_string"]* %ss, i64 0, i64 2
  %277 = bitcast %struct.Triangle* %curr to i8*
  %278 = bitcast i8** %__endptr.i.i576 to i8*
  %_M_finish.i569 = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 6, i32 0, i32 0, i32 0, i32 1
  %_M_end_of_storage.i570 = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 6, i32 0, i32 0, i32 0, i32 2
  %triangles = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 6
  br label %while.body113

while.body113:                                    ; preds = %while.cond107.backedge, %while.body113.lr.ph
  %call115 = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EES4_(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) %276, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %array.begin, i8 signext 58) #38
  %279 = load i64, i64* %_M_string_length.i.i567, align 8, !tbaa !19
  %cmp.i568 = icmp eq i64 %279, 0
  br i1 %cmp.i568, label %while.cond107.backedge, label %if.end119

if.end119:                                        ; preds = %while.body113
  %call121 = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EES4_(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) %276, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %arrayidx120, i8 signext 58) #38
  %call123 = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EES4_(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) %276, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %arrayidx122, i8 signext 10) #38
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %277) #38
  %call.i.i.i578 = tail call i32* @__errno_location() #42
  br label %for.body128

for.cond.cleanup127:                              ; preds = %_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPmi.exit591
  %280 = load %struct.Triangle*, %struct.Triangle** %_M_finish.i569, align 8, !tbaa !105
  %281 = load %struct.Triangle*, %struct.Triangle** %_M_end_of_storage.i570, align 8, !tbaa !107
  %cmp.not.i571 = icmp eq %struct.Triangle* %280, %281
  br i1 %cmp.not.i571, label %if.else.i574, label %if.then.i573

if.then.i573:                                     ; preds = %for.cond.cleanup127
  %282 = bitcast %struct.Triangle* %280 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(12) %282, i8* nonnull align 4 dereferenceable(12) %277, i64 12, i1 false) #38, !tbaa.struct !108
  %283 = load %struct.Triangle*, %struct.Triangle** %_M_finish.i569, align 8, !tbaa !105
  %incdec.ptr.i572 = getelementptr inbounds %struct.Triangle, %struct.Triangle* %283, i64 1
  store %struct.Triangle* %incdec.ptr.i572, %struct.Triangle** %_M_finish.i569, align 8, !tbaa !105
  br label %_ZNSt6vectorI8TriangleSaIS0_EE9push_backERKS0_.exit

if.else.i574:                                     ; preds = %for.cond.cleanup127
  call void @_ZNSt6vectorI8TriangleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_(%"class.std::vector.13"* nonnull dereferenceable(24) %triangles, %struct.Triangle* %280, %struct.Triangle* nonnull align 4 dereferenceable(12) %curr) #38
  br label %_ZNSt6vectorI8TriangleSaIS0_EE9push_backERKS0_.exit

_ZNSt6vectorI8TriangleSaIS0_EE9push_backERKS0_.exit: ; preds = %if.else.i574, %if.then.i573
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %277) #38
  br label %while.cond107.backedge

while.cond107.backedge:                           ; preds = %_ZNSt6vectorI8TriangleSaIS0_EE9push_backERKS0_.exit, %while.body113
  %vtable108 = load i8*, i8** %271, align 8, !tbaa !50
  %vbase.offset.ptr109 = getelementptr i8, i8* %vtable108, i64 -24
  %284 = bitcast i8* %vbase.offset.ptr109 to i64*
  %vbase.offset110 = load i64, i64* %284, align 8
  %_M_streambuf_state.i.i565 = getelementptr inbounds i8, i8* %273, i64 %vbase.offset110
  %285 = bitcast i8* %_M_streambuf_state.i.i565 to i32*
  %286 = load i32, i32* %285, align 8, !tbaa !52
  %cmp.i566 = icmp eq i32 %286, 0
  br i1 %cmp.i566, label %while.body113, label %while.end137, !llvm.loop !109

for.body128:                                      ; preds = %_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPmi.exit591, %if.end119
  %indvars.iv = phi i64 [ 0, %if.end119 ], [ %indvars.iv.next, %_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPmi.exit591 ]
  %_M_p.i.i.i577 = getelementptr inbounds [3 x %"class.std::__cxx11::basic_string"], [3 x %"class.std::__cxx11::basic_string"]* %ss, i64 0, i64 %indvars.iv, i32 0, i32 0
  %287 = load i8*, i8** %_M_p.i.i.i577, align 16, !tbaa !17
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %278) #38
  %288 = load i32, i32* %call.i.i.i578, align 4, !tbaa !59
  store i32 0, i32* %call.i.i.i578, align 4, !tbaa !59
  %call.i.i579 = call i64 @strtol(i8* %287, i8** nonnull %__endptr.i.i576, i32 10) #38
  %289 = load i8*, i8** %__endptr.i.i576, align 8, !tbaa !60
  %cmp.i.i580 = icmp eq i8* %289, %287
  br i1 %cmp.i.i580, label %if.then.i.i581, label %if.else.i.i585

if.then.i.i581:                                   ; preds = %for.body128
  call void @_ZSt24__throw_invalid_argumentPKc(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.31, i64 0, i64 0)) #40
  unreachable

if.else.i.i585:                                   ; preds = %for.body128
  %290 = load i32, i32* %call.i.i.i578, align 4, !tbaa !59
  %cmp2.i.i582 = icmp eq i32 %290, 34
  %__val.off.i.i.i583 = add i64 %call.i.i579, 2147483648
  %291 = icmp ugt i64 %__val.off.i.i.i583, 4294967295
  %or.cond.i.i584 = or i1 %291, %cmp2.i.i582
  br i1 %or.cond.i.i584, label %if.then4.i.i586, label %if.else5.i.i587

if.then4.i.i586:                                  ; preds = %if.else.i.i585
  call void @_ZSt20__throw_out_of_rangePKc(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.31, i64 0, i64 0)) #40
  unreachable

if.else5.i.i587:                                  ; preds = %if.else.i.i585
  %cmp.i.i.i588 = icmp eq i32 %290, 0
  br i1 %cmp.i.i.i588, label %if.then.i.i.i589, label %_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPmi.exit591

if.then.i.i.i589:                                 ; preds = %if.else5.i.i587
  store i32 %288, i32* %call.i.i.i578, align 4, !tbaa !59
  br label %_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPmi.exit591

_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPmi.exit591: ; preds = %if.then.i.i.i589, %if.else5.i.i587
  %conv.i.i590 = trunc i64 %call.i.i579 to i32
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %278) #38
  %arrayidx133 = getelementptr inbounds %struct.Triangle, %struct.Triangle* %curr, i64 0, i32 0, i64 %indvars.iv
  store i32 %conv.i.i590, i32* %arrayidx133, align 4, !tbaa !59
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond.not, label %for.cond.cleanup127, label %for.body128, !llvm.loop !110

while.end137:                                     ; preds = %while.cond107.backedge, %while.cond107.preheader
  %_M_filebuf.i592 = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %triangles_in, i64 0, i32 1
  %call.i593 = call %"class.std::basic_filebuf"* @_ZNSt13basic_filebufIcSt11char_traitsIcEE5closeEv(%"class.std::basic_filebuf"* nonnull dereferenceable(240) %_M_filebuf.i592) #38
  %tobool.not.i594 = icmp eq %"class.std::basic_filebuf"* %call.i593, null
  br i1 %tobool.not.i594, label %if.then.i601, label %_ZNSt14basic_ifstreamIcSt11char_traitsIcEE5closeEv.exit603

if.then.i601:                                     ; preds = %while.end137
  %vtable.i595 = load i8*, i8** %271, align 8, !tbaa !50
  %vbase.offset.ptr.i596 = getelementptr i8, i8* %vtable.i595, i64 -24
  %292 = bitcast i8* %vbase.offset.ptr.i596 to i64*
  %vbase.offset.i597 = load i64, i64* %292, align 8
  %add.ptr.i598 = getelementptr inbounds i8, i8* %231, i64 %vbase.offset.i597
  %293 = bitcast i8* %add.ptr.i598 to %"class.std::basic_ios"*
  %_M_streambuf_state.i.i.i599 = getelementptr inbounds i8, i8* %add.ptr.i598, i64 32
  %294 = bitcast i8* %_M_streambuf_state.i.i.i599 to i32*
  %295 = load i32, i32* %294, align 8, !tbaa !52
  %or.i.i.i600 = or i32 %295, 4
  call void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* nonnull dereferenceable(264) %293, i32 %or.i.i.i600) #38
  br label %_ZNSt14basic_ifstreamIcSt11char_traitsIcEE5closeEv.exit603

_ZNSt14basic_ifstreamIcSt11char_traitsIcEE5closeEv.exit603: ; preds = %if.then.i601, %while.end137
  %is_mirrored = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 7
  store i8 0, i8* %is_mirrored, align 8, !tbaa !111
  br label %arraydestroy.body

arraydestroy.body:                                ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit608, %_ZNSt14basic_ifstreamIcSt11char_traitsIcEE5closeEv.exit603
  %arraydestroy.elementPast = phi %"class.std::__cxx11::basic_string"* [ %arrayctor.end, %_ZNSt14basic_ifstreamIcSt11char_traitsIcEE5closeEv.exit603 ], [ %arraydestroy.element, %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit608 ]
  %arraydestroy.element = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %arraydestroy.elementPast, i64 -1
  %_M_p.i.i.i.i604 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %arraydestroy.element, i64 0, i32 0, i32 0
  %296 = load i8*, i8** %_M_p.i.i.i.i604, align 8, !tbaa !17
  %297 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %arraydestroy.elementPast, i64 -1, i32 2
  %arraydecay.i.i.i.i605 = bitcast %union.anon* %297 to i8*
  %cmp.i.i.i606 = icmp eq i8* %296, %arraydecay.i.i.i.i605
  br i1 %cmp.i.i.i606, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit608, label %if.then.i.i607

if.then.i.i607:                                   ; preds = %arraydestroy.body
  call void @_ZdlPv(i8* %296) #41
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit608

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit608: ; preds = %if.then.i.i607, %arraydestroy.body
  %arraydestroy.done = icmp eq %"class.std::__cxx11::basic_string"* %arraydestroy.element, %array.begin
  br i1 %arraydestroy.done, label %arraydestroy.done139, label %arraydestroy.body

arraydestroy.done139:                             ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit608
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %246) #38
  %298 = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %triangles_in, i64 0, i32 0, i32 0
  store i32 (...)** %210, i32 (...)*** %298, align 8, !tbaa !50
  %vbase.offset.i.i610 = load i64, i64* %213, align 8
  %add.ptr.i.i611 = getelementptr inbounds i8, i8* %231, i64 %vbase.offset.i.i610
  %299 = bitcast i8* %add.ptr.i.i611 to i32 (...)***
  store i32 (...)** %212, i32 (...)*** %299, align 8, !tbaa !50
  %300 = getelementptr inbounds %"class.std::basic_filebuf", %"class.std::basic_filebuf"* %_M_filebuf.i592, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVSt13basic_filebufIcSt11char_traitsIcEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %300, align 8, !tbaa !50
  %call.i.i.i613 = call %"class.std::basic_filebuf"* @_ZNSt13basic_filebufIcSt11char_traitsIcEE5closeEv(%"class.std::basic_filebuf"* nonnull dereferenceable(240) %_M_filebuf.i592) #38
  %_M_file.i.i.i614 = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %triangles_in, i64 0, i32 1, i32 2
  call void @_ZNSt12__basic_fileIcED1Ev(%"class.std::__basic_file"* nonnull dereferenceable(9) %_M_file.i.i.i614) #38
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVSt15basic_streambufIcSt11char_traitsIcEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %300, align 8, !tbaa !50
  %_M_buf_locale.i.i.i.i615 = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %triangles_in, i64 0, i32 1, i32 0, i32 7
  call void @_ZNSt6localeD1Ev(%"class.std::locale"* nonnull dereferenceable(8) %_M_buf_locale.i.i.i.i615) #38
  store i32 (...)** %216, i32 (...)*** %298, align 8, !tbaa !50
  %vbase.offset.i.i.i617 = load i64, i64* %218, align 8
  %add.ptr.i.i.i618 = getelementptr inbounds i8, i8* %231, i64 %vbase.offset.i.i.i617
  %301 = bitcast i8* %add.ptr.i.i.i618 to i32 (...)***
  store i32 (...)** %217, i32 (...)*** %301, align 8, !tbaa !50
  %302 = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %triangles_in, i64 0, i32 0, i32 1
  store i64 0, i64* %302, align 8, !tbaa !96
  %303 = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %triangles_in, i64 0, i32 2, i32 0
  call void @_ZNSt8ios_baseD2Ev(%"class.std::ios_base"* nonnull dereferenceable(216) %303) #38
  call void @llvm.lifetime.end.p0i8(i64 520, i8* nonnull %231) #38
  %304 = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %vert_in, i64 0, i32 0, i32 0
  store i32 (...)** %210, i32 (...)*** %304, align 8, !tbaa !50
  %vbase.offset.i.i620 = load i64, i64* %213, align 8
  %add.ptr.i.i621 = getelementptr inbounds i8, i8* %116, i64 %vbase.offset.i.i620
  %305 = bitcast i8* %add.ptr.i.i621 to i32 (...)***
  store i32 (...)** %212, i32 (...)*** %305, align 8, !tbaa !50
  %306 = getelementptr inbounds %"class.std::basic_filebuf", %"class.std::basic_filebuf"* %_M_filebuf.i360, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVSt13basic_filebufIcSt11char_traitsIcEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %306, align 8, !tbaa !50
  %call.i.i.i623 = call %"class.std::basic_filebuf"* @_ZNSt13basic_filebufIcSt11char_traitsIcEE5closeEv(%"class.std::basic_filebuf"* nonnull dereferenceable(240) %_M_filebuf.i360) #38
  %_M_file.i.i.i624 = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %vert_in, i64 0, i32 1, i32 2
  call void @_ZNSt12__basic_fileIcED1Ev(%"class.std::__basic_file"* nonnull dereferenceable(9) %_M_file.i.i.i624) #38
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVSt15basic_streambufIcSt11char_traitsIcEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %306, align 8, !tbaa !50
  %_M_buf_locale.i.i.i.i625 = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %vert_in, i64 0, i32 1, i32 0, i32 7
  call void @_ZNSt6localeD1Ev(%"class.std::locale"* nonnull dereferenceable(8) %_M_buf_locale.i.i.i.i625) #38
  store i32 (...)** %216, i32 (...)*** %304, align 8, !tbaa !50
  %vbase.offset.i.i.i627 = load i64, i64* %218, align 8
  %add.ptr.i.i.i628 = getelementptr inbounds i8, i8* %116, i64 %vbase.offset.i.i.i627
  %307 = bitcast i8* %add.ptr.i.i.i628 to i32 (...)***
  store i32 (...)** %217, i32 (...)*** %307, align 8, !tbaa !50
  store i64 0, i64* %206, align 8, !tbaa !96
  %308 = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %vert_in, i64 0, i32 2, i32 0
  call void @_ZNSt8ios_baseD2Ev(%"class.std::ios_base"* nonnull dereferenceable(216) %308) #38
  call void @llvm.lifetime.end.p0i8(i64 520, i8* nonnull %116) #38
  %_M_p.i.i.i.i629 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %s, i64 0, i32 0, i32 0
  %309 = load i8*, i8** %_M_p.i.i.i.i629, align 8, !tbaa !17
  %cmp.i.i.i631 = icmp eq i8* %309, %.cast.i
  br i1 %cmp.i.i.i631, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit633, label %if.then.i.i632

if.then.i.i632:                                   ; preds = %arraydestroy.done139
  call void @_ZdlPv(i8* %309) #41
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit633

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit633: ; preds = %if.then.i.i632, %arraydestroy.done139
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %15) #38
  %310 = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %bones_in, i64 0, i32 0, i32 0
  store i32 (...)** %210, i32 (...)*** %310, align 8, !tbaa !50
  %vbase.offset.i.i635 = load i64, i64* %213, align 8
  %add.ptr.i.i636 = getelementptr inbounds i8, i8* %0, i64 %vbase.offset.i.i635
  %311 = bitcast i8* %add.ptr.i.i636 to i32 (...)***
  store i32 (...)** %212, i32 (...)*** %311, align 8, !tbaa !50
  %312 = getelementptr inbounds %"class.std::basic_filebuf", %"class.std::basic_filebuf"* %_M_filebuf.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVSt13basic_filebufIcSt11char_traitsIcEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %312, align 8, !tbaa !50
  %call.i.i.i638 = call %"class.std::basic_filebuf"* @_ZNSt13basic_filebufIcSt11char_traitsIcEE5closeEv(%"class.std::basic_filebuf"* nonnull dereferenceable(240) %_M_filebuf.i) #38
  %_M_file.i.i.i639 = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %bones_in, i64 0, i32 1, i32 2
  call void @_ZNSt12__basic_fileIcED1Ev(%"class.std::__basic_file"* nonnull dereferenceable(9) %_M_file.i.i.i639) #38
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVSt15basic_streambufIcSt11char_traitsIcEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %312, align 8, !tbaa !50
  %_M_buf_locale.i.i.i.i640 = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %bones_in, i64 0, i32 1, i32 0, i32 7
  call void @_ZNSt6localeD1Ev(%"class.std::locale"* nonnull dereferenceable(8) %_M_buf_locale.i.i.i.i640) #38
  store i32 (...)** %216, i32 (...)*** %310, align 8, !tbaa !50
  %vbase.offset.i.i.i642 = load i64, i64* %218, align 8
  %add.ptr.i.i.i643 = getelementptr inbounds i8, i8* %0, i64 %vbase.offset.i.i.i642
  %313 = bitcast i8* %add.ptr.i.i.i643 to i32 (...)***
  store i32 (...)** %217, i32 (...)*** %313, align 8, !tbaa !50
  %314 = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %bones_in, i64 0, i32 0, i32 1
  store i64 0, i64* %314, align 8, !tbaa !96
  %315 = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %bones_in, i64 0, i32 2, i32 0
  call void @_ZNSt8ios_baseD2Ev(%"class.std::ios_base"* nonnull dereferenceable(216) %315) #38
  call void @llvm.lifetime.end.p0i8(i64 520, i8* nonnull %0) #38
  ret void
}

; Function Attrs: nounwind uwtable
declare dso_local void @_ZNSt14basic_ifstreamIcSt11char_traitsIcEEC1ERKNSt7__cxx1112basic_stringIcS1_SaIcEEESt13_Ios_Openmode(%"class.std::basic_ifstream"* nonnull dereferenceable(256), %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32), i32) unnamed_addr #0 align 2

declare dso_local nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EES4_(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16), %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32), i8 signext) local_unnamed_addr #3

; Function Attrs: nounwind uwtable
define dso_local void @_Z18read_hand_instanceRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_PSt6vectorIdSaIdEEP19HandDataLightMatrixSA_(%"class.std::__cxx11::basic_string"* nocapture nonnull readonly align 8 dereferenceable(32) %model_dir, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %fn_in, %"class.std::vector.19"* %theta, %class.HandDataLightMatrix* %data, %"class.std::vector.19"* %us) local_unnamed_addr #0 {
entry:
  %in = alloca %"class.std::basic_ifstream", align 8
  %n_pts = alloca i32, align 4
  %n_theta = alloca i32, align 4
  %model = getelementptr inbounds %class.HandDataLightMatrix, %class.HandDataLightMatrix* %data, i64 0, i32 0
  tail call void @_Z15read_hand_modelRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP20HandModelLightMatrix(%"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %model_dir, %class.HandModelLightMatrix* %model)
  %0 = bitcast %"class.std::basic_ifstream"* %in to i8*
  call void @llvm.lifetime.start.p0i8(i64 520, i8* nonnull %0) #38
  call void @_ZNSt14basic_ifstreamIcSt11char_traitsIcEEC1ERKNSt7__cxx1112basic_stringIcS1_SaIcEEESt13_Ios_Openmode(%"class.std::basic_ifstream"* nonnull dereferenceable(256) %in, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %fn_in, i32 8)
  %1 = bitcast i32* %n_pts to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #38
  %2 = bitcast i32* %n_theta to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2) #38
  %3 = bitcast %"class.std::basic_ifstream"* %in to %"class.std::basic_istream"*
  %call = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull dereferenceable(16) %3, i32* nonnull align 4 dereferenceable(4) %n_pts) #38
  %call1 = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull dereferenceable(16) %call, i32* nonnull align 4 dereferenceable(4) %n_theta) #38
  %correspondences = getelementptr inbounds %class.HandDataLightMatrix, %class.HandDataLightMatrix* %data, i64 0, i32 1
  %4 = load i32, i32* %n_pts, align 4, !tbaa !59
  %conv = sext i32 %4 to i64
  %_M_finish.i.i = getelementptr inbounds %class.HandDataLightMatrix, %class.HandDataLightMatrix* %data, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %5 = load i32*, i32** %_M_finish.i.i, align 8, !tbaa !61
  %_M_start.i.i = getelementptr inbounds %"class.std::vector.3", %"class.std::vector.3"* %correspondences, i64 0, i32 0, i32 0, i32 0, i32 0
  %6 = load i32*, i32** %_M_start.i.i, align 8, !tbaa !64
  %sub.ptr.lhs.cast.i.i = ptrtoint i32* %5 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i32* %6 to i64
  %sub.ptr.sub.i.i = sub i64 %sub.ptr.lhs.cast.i.i, %sub.ptr.rhs.cast.i.i
  %sub.ptr.div.i.i = ashr exact i64 %sub.ptr.sub.i.i, 2
  %cmp.i = icmp ult i64 %sub.ptr.div.i.i, %conv
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %sub.i = sub nsw i64 %conv, %sub.ptr.div.i.i
  call void @_ZNSt6vectorIiSaIiEE17_M_default_appendEm(%"class.std::vector.3"* nonnull dereferenceable(24) %correspondences, i64 %sub.i) #38
  %.pre = load i32, i32* %n_pts, align 4, !tbaa !59
  br label %_ZNSt6vectorIiSaIiEE6resizeEm.exit

if.else.i:                                        ; preds = %entry
  %cmp4.i = icmp ule i64 %sub.ptr.div.i.i, %conv
  %add.ptr.i = getelementptr inbounds i32, i32* %6, i64 %conv
  %tobool.not.i.i = icmp eq i32* %5, %add.ptr.i
  %or.cond.i = or i1 %tobool.not.i.i, %cmp4.i
  br i1 %or.cond.i, label %_ZNSt6vectorIiSaIiEE6resizeEm.exit, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.else.i
  store i32* %add.ptr.i, i32** %_M_finish.i.i, align 8, !tbaa !61
  br label %_ZNSt6vectorIiSaIiEE6resizeEm.exit

_ZNSt6vectorIiSaIiEE6resizeEm.exit:               ; preds = %if.then.i.i, %if.else.i, %if.then.i
  %7 = phi i32 [ %.pre, %if.then.i ], [ %4, %if.else.i ], [ %4, %if.then.i.i ]
  %nrows_.i = getelementptr inbounds %class.HandDataLightMatrix, %class.HandDataLightMatrix* %data, i64 0, i32 2, i32 1
  %8 = load i32, i32* %nrows_.i, align 4, !tbaa !71
  %ncols_.i = getelementptr inbounds %class.HandDataLightMatrix, %class.HandDataLightMatrix* %data, i64 0, i32 2, i32 2
  %9 = load i32, i32* %ncols_.i, align 8, !tbaa !72
  %mul.i = mul nsw i32 %9, %8
  %mul2.i = mul nsw i32 %7, 3
  %cmp.not.i = icmp eq i32 %mul.i, %mul2.i
  br i1 %cmp.not.i, label %_ZN11LightMatrixIdE6resizeEii.exit, label %if.then.i62

if.then.i62:                                      ; preds = %_ZNSt6vectorIiSaIiEE6resizeEm.exit
  %is_data_owner_.i = getelementptr inbounds %class.HandDataLightMatrix, %class.HandDataLightMatrix* %data, i64 0, i32 2, i32 0
  %10 = load i8, i8* %is_data_owner_.i, align 8, !tbaa !68, !range !90
  %tobool.not.i = icmp eq i8 %10, 0
  br i1 %tobool.not.i, label %if.end.i, label %if.then3.i

if.then3.i:                                       ; preds = %if.then.i62
  %data_.i = getelementptr inbounds %class.HandDataLightMatrix, %class.HandDataLightMatrix* %data, i64 0, i32 2, i32 3
  %11 = load double*, double** %data_.i, align 8, !tbaa !73
  %isnull.i = icmp eq double* %11, null
  br i1 %isnull.i, label %if.end.i, label %delete.notnull.i

delete.notnull.i:                                 ; preds = %if.then3.i
  %12 = bitcast double* %11 to i8*
  call void @_ZdaPv(i8* %12) #41
  br label %if.end.i

if.end.i:                                         ; preds = %delete.notnull.i, %if.then3.i, %if.then.i62
  %cmp5.i = icmp sgt i32 %7, 0
  br i1 %cmp5.i, label %if.then6.i, label %if.else.i63

if.then6.i:                                       ; preds = %if.end.i
  %conv20.i = zext i32 %mul2.i to i64
  %13 = shl nuw nsw i64 %conv20.i, 3
  %call.i = call noalias nonnull i8* @_Znam(i64 %13) #43
  %data_8.i = getelementptr inbounds %class.HandDataLightMatrix, %class.HandDataLightMatrix* %data, i64 0, i32 2, i32 3
  %14 = bitcast double** %data_8.i to i8**
  store i8* %call.i, i8** %14, align 8, !tbaa !73
  br label %_ZN11LightMatrixIdE6resizeEii.exit

if.else.i63:                                      ; preds = %if.end.i
  %data_9.i = getelementptr inbounds %class.HandDataLightMatrix, %class.HandDataLightMatrix* %data, i64 0, i32 2, i32 3
  store double* null, double** %data_9.i, align 8, !tbaa !73
  br label %_ZN11LightMatrixIdE6resizeEii.exit

_ZN11LightMatrixIdE6resizeEii.exit:               ; preds = %if.else.i63, %if.then6.i, %_ZNSt6vectorIiSaIiEE6resizeEm.exit
  store i32 %7, i32* %ncols_.i, align 8, !tbaa !72
  store i32 3, i32* %nrows_.i, align 4, !tbaa !71
  %15 = load i32, i32* %n_pts, align 4, !tbaa !59
  %cmp117 = icmp sgt i32 %15, 0
  br i1 %cmp117, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %_ZN11LightMatrixIdE6resizeEii.exit
  %data_.i65 = getelementptr inbounds %class.HandDataLightMatrix, %class.HandDataLightMatrix* %data, i64 0, i32 2, i32 3
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.cond.cleanup8, %_ZN11LightMatrixIdE6resizeEii.exit
  %.lcssa = phi i32 [ %15, %_ZN11LightMatrixIdE6resizeEii.exit ], [ %18, %for.cond.cleanup8 ]
  %cmp16.not = icmp eq %"class.std::vector.19"* %us, null
  br i1 %cmp16.not, label %if.end, label %if.then

for.body:                                         ; preds = %for.cond.cleanup8, %for.body.lr.ph
  %indvars.iv122 = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next123, %for.cond.cleanup8 ]
  %16 = load i32*, i32** %_M_start.i.i, align 8, !tbaa !64
  %add.ptr.i64 = getelementptr inbounds i32, i32* %16, i64 %indvars.iv122
  %call5 = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull dereferenceable(16) %3, i32* nonnull align 4 dereferenceable(4) %add.ptr.i64) #38
  %17 = trunc i64 %indvars.iv122 to i32
  br label %for.body9

for.cond.cleanup8:                                ; preds = %for.body9
  %indvars.iv.next123 = add nuw nsw i64 %indvars.iv122, 1
  %18 = load i32, i32* %n_pts, align 4, !tbaa !59
  %19 = sext i32 %18 to i64
  %cmp = icmp slt i64 %indvars.iv.next123, %19
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !llvm.loop !117

for.body9:                                        ; preds = %for.body9, %for.body
  %j.0116 = phi i32 [ 0, %for.body ], [ %inc, %for.body9 ]
  %20 = load double*, double** %data_.i65, align 8, !tbaa !73
  %21 = load i32, i32* %nrows_.i, align 4, !tbaa !71
  %mul.i67 = mul nsw i32 %21, %17
  %add.i = add nsw i32 %mul.i67, %j.0116
  %idxprom.i = sext i32 %add.i to i64
  %arrayidx.i = getelementptr inbounds double, double* %20, i64 %idxprom.i
  %call.i69 = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSi10_M_extractIdEERSiRT_(%"class.std::basic_istream"* nonnull dereferenceable(16) %3, double* nonnull align 8 dereferenceable(8) %arrayidx.i) #38
  %inc = add nuw nsw i32 %j.0116, 1
  %exitcond.not = icmp eq i32 %inc, 3
  br i1 %exitcond.not, label %for.cond.cleanup8, label %for.body9, !llvm.loop !118

if.then:                                          ; preds = %for.cond.cleanup
  %mul = shl nsw i32 %.lcssa, 1
  %conv17 = sext i32 %mul to i64
  %_M_finish.i.i70 = getelementptr inbounds %"class.std::vector.19", %"class.std::vector.19"* %us, i64 0, i32 0, i32 0, i32 0, i32 1
  %22 = load double*, double** %_M_finish.i.i70, align 8, !tbaa !119
  %_M_start.i.i71 = getelementptr inbounds %"class.std::vector.19", %"class.std::vector.19"* %us, i64 0, i32 0, i32 0, i32 0, i32 0
  %23 = load double*, double** %_M_start.i.i71, align 8, !tbaa !121
  %sub.ptr.lhs.cast.i.i72 = ptrtoint double* %22 to i64
  %sub.ptr.rhs.cast.i.i73 = ptrtoint double* %23 to i64
  %sub.ptr.sub.i.i74 = sub i64 %sub.ptr.lhs.cast.i.i72, %sub.ptr.rhs.cast.i.i73
  %sub.ptr.div.i.i75 = ashr exact i64 %sub.ptr.sub.i.i74, 3
  %cmp.i76 = icmp ult i64 %sub.ptr.div.i.i75, %conv17
  br i1 %cmp.i76, label %if.then.i78, label %if.else.i83

if.then.i78:                                      ; preds = %if.then
  %sub.i77 = sub nsw i64 %conv17, %sub.ptr.div.i.i75
  call void @_ZNSt6vectorIdSaIdEE17_M_default_appendEm(%"class.std::vector.19"* nonnull dereferenceable(24) %us, i64 %sub.i77) #38
  %.pre124 = load i32, i32* %n_pts, align 4, !tbaa !59
  br label %_ZNSt6vectorIdSaIdEE6resizeEm.exit

if.else.i83:                                      ; preds = %if.then
  %cmp4.i79 = icmp ule i64 %sub.ptr.div.i.i75, %conv17
  %add.ptr.i80 = getelementptr inbounds double, double* %23, i64 %conv17
  %tobool.not.i.i81 = icmp eq double* %22, %add.ptr.i80
  %or.cond.i82 = or i1 %tobool.not.i.i81, %cmp4.i79
  br i1 %or.cond.i82, label %_ZNSt6vectorIdSaIdEE6resizeEm.exit, label %if.then.i.i84

if.then.i.i84:                                    ; preds = %if.else.i83
  store double* %add.ptr.i80, double** %_M_finish.i.i70, align 8, !tbaa !119
  br label %_ZNSt6vectorIdSaIdEE6resizeEm.exit

_ZNSt6vectorIdSaIdEE6resizeEm.exit:               ; preds = %if.then.i.i84, %if.else.i83, %if.then.i78
  %24 = phi i32 [ %.pre124, %if.then.i78 ], [ %.lcssa, %if.else.i83 ], [ %.lcssa, %if.then.i.i84 ]
  %cmp21114 = icmp sgt i32 %24, 0
  br i1 %cmp21114, label %for.body23, label %if.end

for.body23:                                       ; preds = %for.body23, %_ZNSt6vectorIdSaIdEE6resizeEm.exit
  %indvars.iv120 = phi i64 [ %indvars.iv.next121, %for.body23 ], [ 0, %_ZNSt6vectorIdSaIdEE6resizeEm.exit ]
  %25 = load double*, double** %_M_start.i.i71, align 8, !tbaa !121
  %add.ptr.i86 = getelementptr inbounds double, double* %25, i64 %indvars.iv120
  %call.i89 = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSi10_M_extractIdEERSiRT_(%"class.std::basic_istream"* nonnull dereferenceable(16) %3, double* nonnull align 8 dereferenceable(8) %add.ptr.i86) #38
  %indvars.iv.next121 = add nuw nsw i64 %indvars.iv120, 1
  %26 = load i32, i32* %n_pts, align 4, !tbaa !59
  %mul20 = shl nsw i32 %26, 1
  %27 = sext i32 %mul20 to i64
  %cmp21 = icmp slt i64 %indvars.iv.next121, %27
  br i1 %cmp21, label %for.body23, label %if.end, !llvm.loop !122

if.end:                                           ; preds = %for.body23, %_ZNSt6vectorIdSaIdEE6resizeEm.exit, %for.cond.cleanup
  %28 = load i32, i32* %n_theta, align 4, !tbaa !59
  %conv30 = sext i32 %28 to i64
  %_M_finish.i.i90 = getelementptr inbounds %"class.std::vector.19", %"class.std::vector.19"* %theta, i64 0, i32 0, i32 0, i32 0, i32 1
  %29 = load double*, double** %_M_finish.i.i90, align 8, !tbaa !119
  %_M_start.i.i91 = getelementptr inbounds %"class.std::vector.19", %"class.std::vector.19"* %theta, i64 0, i32 0, i32 0, i32 0, i32 0
  %30 = load double*, double** %_M_start.i.i91, align 8, !tbaa !121
  %sub.ptr.lhs.cast.i.i92 = ptrtoint double* %29 to i64
  %sub.ptr.rhs.cast.i.i93 = ptrtoint double* %30 to i64
  %sub.ptr.sub.i.i94 = sub i64 %sub.ptr.lhs.cast.i.i92, %sub.ptr.rhs.cast.i.i93
  %sub.ptr.div.i.i95 = ashr exact i64 %sub.ptr.sub.i.i94, 3
  %cmp.i96 = icmp ult i64 %sub.ptr.div.i.i95, %conv30
  br i1 %cmp.i96, label %if.then.i98, label %if.else.i103

if.then.i98:                                      ; preds = %if.end
  %sub.i97 = sub nsw i64 %conv30, %sub.ptr.div.i.i95
  call void @_ZNSt6vectorIdSaIdEE17_M_default_appendEm(%"class.std::vector.19"* nonnull dereferenceable(24) %theta, i64 %sub.i97) #38
  %.pre125 = load i32, i32* %n_theta, align 4, !tbaa !59
  br label %_ZNSt6vectorIdSaIdEE6resizeEm.exit105

if.else.i103:                                     ; preds = %if.end
  %cmp4.i99 = icmp ule i64 %sub.ptr.div.i.i95, %conv30
  %add.ptr.i100 = getelementptr inbounds double, double* %30, i64 %conv30
  %tobool.not.i.i101 = icmp eq double* %29, %add.ptr.i100
  %or.cond.i102 = or i1 %tobool.not.i.i101, %cmp4.i99
  br i1 %or.cond.i102, label %_ZNSt6vectorIdSaIdEE6resizeEm.exit105, label %if.then.i.i104

if.then.i.i104:                                   ; preds = %if.else.i103
  store double* %add.ptr.i100, double** %_M_finish.i.i90, align 8, !tbaa !119
  br label %_ZNSt6vectorIdSaIdEE6resizeEm.exit105

_ZNSt6vectorIdSaIdEE6resizeEm.exit105:            ; preds = %if.then.i.i104, %if.else.i103, %if.then.i98
  %31 = phi i32 [ %.pre125, %if.then.i98 ], [ %28, %if.else.i103 ], [ %28, %if.then.i.i104 ]
  %cmp33111 = icmp sgt i32 %31, 0
  br i1 %cmp33111, label %for.body35, label %for.cond.cleanup34

for.cond.cleanup34:                               ; preds = %for.body35, %_ZNSt6vectorIdSaIdEE6resizeEm.exit105
  %_M_filebuf.i = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %in, i64 0, i32 1
  %call.i106 = call %"class.std::basic_filebuf"* @_ZNSt13basic_filebufIcSt11char_traitsIcEE5closeEv(%"class.std::basic_filebuf"* nonnull dereferenceable(240) %_M_filebuf.i) #38
  %tobool.not.i107 = icmp eq %"class.std::basic_filebuf"* %call.i106, null
  br i1 %tobool.not.i107, label %if.then.i109, label %_ZNSt14basic_ifstreamIcSt11char_traitsIcEE5closeEv.exit

if.then.i109:                                     ; preds = %for.cond.cleanup34
  %32 = bitcast %"class.std::basic_ifstream"* %in to i8**
  %vtable.i = load i8*, i8** %32, align 8, !tbaa !50
  %vbase.offset.ptr.i = getelementptr i8, i8* %vtable.i, i64 -24
  %33 = bitcast i8* %vbase.offset.ptr.i to i64*
  %vbase.offset.i = load i64, i64* %33, align 8
  %add.ptr.i108 = getelementptr inbounds i8, i8* %0, i64 %vbase.offset.i
  %34 = bitcast i8* %add.ptr.i108 to %"class.std::basic_ios"*
  %_M_streambuf_state.i.i.i = getelementptr inbounds i8, i8* %add.ptr.i108, i64 32
  %35 = bitcast i8* %_M_streambuf_state.i.i.i to i32*
  %36 = load i32, i32* %35, align 8, !tbaa !52
  %or.i.i.i = or i32 %36, 4
  call void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* nonnull dereferenceable(264) %34, i32 %or.i.i.i) #38
  br label %_ZNSt14basic_ifstreamIcSt11char_traitsIcEE5closeEv.exit

_ZNSt14basic_ifstreamIcSt11char_traitsIcEE5closeEv.exit: ; preds = %if.then.i109, %for.cond.cleanup34
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2) #38
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #38
  %37 = load i32 (...)**, i32 (...)*** bitcast ([4 x i8*]* @_ZTTSt14basic_ifstreamIcSt11char_traitsIcEE to i32 (...)***), align 8
  %38 = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %in, i64 0, i32 0, i32 0
  store i32 (...)** %37, i32 (...)*** %38, align 8, !tbaa !50
  %39 = load i32 (...)**, i32 (...)*** bitcast (i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTSt14basic_ifstreamIcSt11char_traitsIcEE, i64 0, i64 3) to i32 (...)***), align 8
  %vbase.offset.ptr3.i.i = getelementptr i32 (...)*, i32 (...)** %37, i64 -3
  %40 = bitcast i32 (...)** %vbase.offset.ptr3.i.i to i64*
  %vbase.offset.i.i = load i64, i64* %40, align 8
  %add.ptr.i.i = getelementptr inbounds i8, i8* %0, i64 %vbase.offset.i.i
  %41 = bitcast i8* %add.ptr.i.i to i32 (...)***
  store i32 (...)** %39, i32 (...)*** %41, align 8, !tbaa !50
  %42 = getelementptr inbounds %"class.std::basic_filebuf", %"class.std::basic_filebuf"* %_M_filebuf.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVSt13basic_filebufIcSt11char_traitsIcEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %42, align 8, !tbaa !50
  %call.i.i.i = call %"class.std::basic_filebuf"* @_ZNSt13basic_filebufIcSt11char_traitsIcEE5closeEv(%"class.std::basic_filebuf"* nonnull dereferenceable(240) %_M_filebuf.i) #38
  %_M_file.i.i.i = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %in, i64 0, i32 1, i32 2
  call void @_ZNSt12__basic_fileIcED1Ev(%"class.std::__basic_file"* nonnull dereferenceable(9) %_M_file.i.i.i) #38
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVSt15basic_streambufIcSt11char_traitsIcEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %42, align 8, !tbaa !50
  %_M_buf_locale.i.i.i.i = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %in, i64 0, i32 1, i32 0, i32 7
  call void @_ZNSt6localeD1Ev(%"class.std::locale"* nonnull dereferenceable(8) %_M_buf_locale.i.i.i.i) #38
  %43 = load i32 (...)**, i32 (...)*** bitcast (i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTSt14basic_ifstreamIcSt11char_traitsIcEE, i64 0, i64 1) to i32 (...)***), align 8
  store i32 (...)** %43, i32 (...)*** %38, align 8, !tbaa !50
  %44 = load i32 (...)**, i32 (...)*** bitcast (i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTSt14basic_ifstreamIcSt11char_traitsIcEE, i64 0, i64 2) to i32 (...)***), align 8
  %vbase.offset.ptr3.i.i.i = getelementptr i32 (...)*, i32 (...)** %43, i64 -3
  %45 = bitcast i32 (...)** %vbase.offset.ptr3.i.i.i to i64*
  %vbase.offset.i.i.i = load i64, i64* %45, align 8
  %add.ptr.i.i.i = getelementptr inbounds i8, i8* %0, i64 %vbase.offset.i.i.i
  %46 = bitcast i8* %add.ptr.i.i.i to i32 (...)***
  store i32 (...)** %44, i32 (...)*** %46, align 8, !tbaa !50
  %47 = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %in, i64 0, i32 0, i32 1
  store i64 0, i64* %47, align 8, !tbaa !96
  %48 = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %in, i64 0, i32 2, i32 0
  call void @_ZNSt8ios_baseD2Ev(%"class.std::ios_base"* nonnull dereferenceable(216) %48) #38
  call void @llvm.lifetime.end.p0i8(i64 520, i8* nonnull %0) #38
  ret void

for.body35:                                       ; preds = %for.body35, %_ZNSt6vectorIdSaIdEE6resizeEm.exit105
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body35 ], [ 0, %_ZNSt6vectorIdSaIdEE6resizeEm.exit105 ]
  %49 = load double*, double** %_M_start.i.i91, align 8, !tbaa !121
  %add.ptr.i88 = getelementptr inbounds double, double* %49, i64 %indvars.iv
  %call.i68 = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSi10_M_extractIdEERSiRT_(%"class.std::basic_istream"* nonnull dereferenceable(16) %3, double* nonnull align 8 dereferenceable(8) %add.ptr.i88) #38
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %50 = load i32, i32* %n_theta, align 4, !tbaa !59
  %51 = sext i32 %50 to i64
  %cmp33 = icmp slt i64 %indvars.iv.next, %51
  br i1 %cmp33, label %for.body35, label %for.cond.cleanup34, !llvm.loop !123
}

declare dso_local nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull dereferenceable(16), i32* nonnull align 4 dereferenceable(4)) local_unnamed_addr #3

; Function Attrs: nounwind uwtable
define dso_local void @_Z25calculate_jacobian_simpleIXadL_Z15dhand_objectiveEEEvP17HandObjectiveDataR9HandInputR10HandOutputRSt6vectorIdSaIdEES9_S9_(%struct.HandObjectiveData* %objective_input, %struct.HandInput* nocapture nonnull readonly align 8 dereferenceable(272) %input, %struct.HandOutput* nocapture nonnull readonly align 8 dereferenceable(56) %result, %"class.std::vector.19"* nocapture nonnull readnone align 8 dereferenceable(24) %theta_d, %"class.std::vector.19"* nocapture nonnull readnone align 8 dereferenceable(24) %us_d, %"class.std::vector.19"* nocapture nonnull readnone align 8 dereferenceable(24) %us_jacobian_column) local_unnamed_addr #0 {
entry:
  %puts = tail call i32 @puts(i8* nonnull dereferenceable(1) getelementptr inbounds ([20 x i8], [20 x i8]* @str, i64 0, i64 0))
  %_M_finish.i = getelementptr inbounds %struct.HandOutput, %struct.HandOutput* %result, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %0 = load double*, double** %_M_finish.i, align 8, !tbaa !119
  %_M_start.i = getelementptr inbounds %struct.HandOutput, %struct.HandOutput* %result, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %1 = load double*, double** %_M_start.i, align 8, !tbaa !121
  %sub.ptr.lhs.cast.i = ptrtoint double* %0 to i64
  %sub.ptr.rhs.cast.i = ptrtoint double* %1 to i64
  %sub.ptr.sub.i = sub i64 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i
  %sub.ptr.div.i = ashr exact i64 %sub.ptr.sub.i, 3
  %cmp.i.i = icmp ugt i64 %sub.ptr.div.i, 1152921504606846975
  br i1 %cmp.i.i, label %if.then.i.i, label %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i

if.then.i.i:                                      ; preds = %entry
  tail call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.46, i64 0, i64 0)) #40
  unreachable

_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i: ; preds = %entry
  %cmp.not.i.i.i.i = icmp eq i64 %sub.ptr.sub.i, 0
  br i1 %cmp.not.i.i.i.i, label %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit, label %if.then.i.i.i.i.i

if.then.i.i.i.i.i:                                ; preds = %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i
  %call5.i.i.i.i.i.i = tail call noalias nonnull i8* @_Znwm(i64 %sub.ptr.sub.i) #43
  %2 = bitcast i8* %call5.i.i.i.i.i.i to double*
  store double 0.000000e+00, double* %2, align 8, !tbaa !75
  %incdec.ptr.i.i.i.i.i = getelementptr inbounds i8, i8* %call5.i.i.i.i.i.i, i64 8
  %3 = bitcast i8* %incdec.ptr.i.i.i.i.i to double*
  %cmp.i.i.i.i.i.i.i = icmp eq i64 %sub.ptr.sub.i, 8
  br i1 %cmp.i.i.i.i.i.i.i, label %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit, label %if.end.i.i.i.i.i.i.i

if.end.i.i.i.i.i.i.i:                             ; preds = %if.then.i.i.i.i.i
  %add.ptr.i.i.i = getelementptr inbounds double, double* %2, i64 %sub.ptr.div.i
  %4 = add nsw i64 %sub.ptr.sub.i, -8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %incdec.ptr.i.i.i.i.i, i8 0, i64 %4, i1 false) #38
  br label %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit

_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit:               ; preds = %if.end.i.i.i.i.i.i.i, %if.then.i.i.i.i.i, %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i
  %cond.i.i.i.i45 = phi double* [ %2, %if.then.i.i.i.i.i ], [ %2, %if.end.i.i.i.i.i.i.i ], [ null, %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i ]
  %__first.addr.0.i.i.i.i.i = phi double* [ %3, %if.then.i.i.i.i.i ], [ %add.ptr.i.i.i, %if.end.i.i.i.i.i.i.i ], [ null, %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i ]
  %sub.ptr.lhs.cast.i29 = ptrtoint double* %__first.addr.0.i.i.i.i.i to i64
  %sub.ptr.rhs.cast.i30 = ptrtoint double* %cond.i.i.i.i45 to i64
  %sub.ptr.sub.i31 = sub i64 %sub.ptr.lhs.cast.i29, %sub.ptr.rhs.cast.i30
  %cmp46.not = icmp eq i64 %sub.ptr.sub.i31, 0
  br i1 %cmp46.not, label %for.cond.cleanup, label %for.body.preheader

for.body.preheader:                               ; preds = %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit
  %5 = icmp sgt i64 %sub.ptr.sub.i31, -1
  %smax = select i1 %5, i64 %sub.ptr.sub.i31, i64 -1
  %6 = icmp slt i64 %smax, 1
  %smin = select i1 %6, i64 %smax, i64 1
  %7 = sub i64 %sub.ptr.rhs.cast.i30, %sub.ptr.lhs.cast.i29
  %8 = icmp sgt i64 %7, %sub.ptr.sub.i31
  %smax49 = select i1 %8, i64 %7, i64 %sub.ptr.sub.i31
  %9 = lshr i64 %smax49, 3
  %10 = mul nsw i64 %smin, %9
  %11 = icmp ugt i64 %10, 1
  %umax = select i1 %11, i64 %10, i64 1
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit
  %_M_start.i36 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load double*, double** %_M_start.i36, align 8, !tbaa !121
  %_M_start.i35 = getelementptr inbounds %struct.HandOutput, %struct.HandOutput* %result, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0
  %13 = load double*, double** %_M_start.i35, align 8, !tbaa !121
  %bone_count = getelementptr inbounds %struct.HandObjectiveData, %struct.HandObjectiveData* %objective_input, i64 0, i32 0
  %14 = load i32, i32* %bone_count, align 8, !tbaa !124
  %bone_names = getelementptr inbounds %struct.HandObjectiveData, %struct.HandObjectiveData* %objective_input, i64 0, i32 1
  %15 = load i8**, i8*** %bone_names, align 8, !tbaa !127
  %parents = getelementptr inbounds %struct.HandObjectiveData, %struct.HandObjectiveData* %objective_input, i64 0, i32 2
  %16 = load i32*, i32** %parents, align 8, !tbaa !128
  %base_relatives = getelementptr inbounds %struct.HandObjectiveData, %struct.HandObjectiveData* %objective_input, i64 0, i32 3
  %17 = load %struct.Matrix*, %struct.Matrix** %base_relatives, align 8, !tbaa !129
  %inverse_base_absolutes = getelementptr inbounds %struct.HandObjectiveData, %struct.HandObjectiveData* %objective_input, i64 0, i32 4
  %18 = load %struct.Matrix*, %struct.Matrix** %inverse_base_absolutes, align 8, !tbaa !130
  %base_positions = getelementptr inbounds %struct.HandObjectiveData, %struct.HandObjectiveData* %objective_input, i64 0, i32 5
  %weights = getelementptr inbounds %struct.HandObjectiveData, %struct.HandObjectiveData* %objective_input, i64 0, i32 6
  %triangles = getelementptr inbounds %struct.HandObjectiveData, %struct.HandObjectiveData* %objective_input, i64 0, i32 7
  %19 = load %struct.Triangle*, %struct.Triangle** %triangles, align 8, !tbaa !131
  %is_mirrored = getelementptr inbounds %struct.HandObjectiveData, %struct.HandObjectiveData* %objective_input, i64 0, i32 8
  %20 = load i32, i32* %is_mirrored, align 8, !tbaa !132
  %corresp_count = getelementptr inbounds %struct.HandObjectiveData, %struct.HandObjectiveData* %objective_input, i64 0, i32 9
  %21 = load i32, i32* %corresp_count, align 4, !tbaa !133
  %correspondences = getelementptr inbounds %struct.HandObjectiveData, %struct.HandObjectiveData* %objective_input, i64 0, i32 10
  %22 = load i32*, i32** %correspondences, align 8, !tbaa !134
  %points = getelementptr inbounds %struct.HandObjectiveData, %struct.HandObjectiveData* %objective_input, i64 0, i32 11
  call void @diffehand_objective(double* %12, double* %13, i32 %14, i8** %15, i32* %16, %struct.Matrix* %17, %struct.Matrix* %18, %struct.Matrix* nonnull %base_positions, %struct.Matrix* nonnull %weights, %struct.Triangle* %19, i32 %20, i32 %21, i32* %22, %struct.Matrix* nonnull %points, double* %1, double* %cond.i.i.i.i45)
  %tobool.not.i.i.i = icmp eq double* %cond.i.i.i.i45, null
  br i1 %tobool.not.i.i.i, label %_ZNSt6vectorIdSaIdEED2Ev.exit, label %if.then.i.i.i

if.then.i.i.i:                                    ; preds = %for.cond.cleanup
  %23 = bitcast double* %cond.i.i.i.i45 to i8*
  tail call void @_ZdlPv(i8* %23) #41
  br label %_ZNSt6vectorIdSaIdEED2Ev.exit

_ZNSt6vectorIdSaIdEED2Ev.exit:                    ; preds = %if.then.i.i.i, %for.cond.cleanup
  ret void

for.body:                                         ; preds = %for.body, %for.body.preheader
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.body ]
  %add.ptr.i = getelementptr inbounds double, double* %cond.i.i.i.i45, i64 %indvars.iv
  store double 1.000000e+00, double* %add.ptr.i, align 8, !tbaa !75
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %umax
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body, !llvm.loop !135
}

; Function Attrs: nofree nounwind
declare dso_local noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #2

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @dhand_objective(double* %theta, double* %dtheta, i32 %bone_count, i8** %bone_names, i32* %parents, %struct.Matrix* %base_relatives, %struct.Matrix* %inverse_base_absolutes, %struct.Matrix* %base_positions, %struct.Matrix* %weights, %struct.Triangle* %triangles, i32 %is_mirrored, i32 %corresp_count, i32* %correspondences, %struct.Matrix* %points, double* %err, double* %derr) local_unnamed_addr #5 {
entry:
  call void @diffehand_objective(double* %theta, double* %dtheta, i32 %bone_count, i8** %bone_names, i32* %parents, %struct.Matrix* %base_relatives, %struct.Matrix* %inverse_base_absolutes, %struct.Matrix* %base_positions, %struct.Matrix* %weights, %struct.Triangle* %triangles, i32 %is_mirrored, i32 %corresp_count, i32* %correspondences, %struct.Matrix* %points, double* %err, double* %derr)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local void @_Z25calculate_jacobian_simpleIXadL_Z16hand_objective_dEEEvP17HandObjectiveDataR9HandInputR10HandOutputRSt6vectorIdSaIdEES9_S9_(%struct.HandObjectiveData* nocapture readonly %objective_input, %struct.HandInput* nocapture nonnull readonly align 8 dereferenceable(272) %input, %struct.HandOutput* nocapture nonnull readonly align 8 dereferenceable(56) %result, %"class.std::vector.19"* nocapture nonnull readnone align 8 dereferenceable(24) %theta_d, %"class.std::vector.19"* nocapture nonnull readnone align 8 dereferenceable(24) %us_d, %"class.std::vector.19"* nocapture nonnull readnone align 8 dereferenceable(24) %us_jacobian_column) local_unnamed_addr #0 {
entry:
  %puts = tail call i32 @puts(i8* nonnull dereferenceable(1) getelementptr inbounds ([23 x i8], [23 x i8]* @str.114, i64 0, i64 0))
  %_M_finish.i = getelementptr inbounds %struct.HandOutput, %struct.HandOutput* %result, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %0 = load double*, double** %_M_finish.i, align 8, !tbaa !119
  %_M_start.i = getelementptr inbounds %struct.HandOutput, %struct.HandOutput* %result, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %1 = load double*, double** %_M_start.i, align 8, !tbaa !121
  %sub.ptr.lhs.cast.i = ptrtoint double* %0 to i64
  %sub.ptr.rhs.cast.i = ptrtoint double* %1 to i64
  %sub.ptr.sub.i = sub i64 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i
  %sub.ptr.div.i = ashr exact i64 %sub.ptr.sub.i, 3
  %cmp.i.i = icmp ugt i64 %sub.ptr.div.i, 1152921504606846975
  br i1 %cmp.i.i, label %if.then.i.i, label %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i

if.then.i.i:                                      ; preds = %entry
  tail call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.46, i64 0, i64 0)) #40
  unreachable

_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i: ; preds = %entry
  %cmp.not.i.i.i.i = icmp eq i64 %sub.ptr.sub.i, 0
  br i1 %cmp.not.i.i.i.i, label %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit, label %if.then.i.i.i.i.i

if.then.i.i.i.i.i:                                ; preds = %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i
  %call5.i.i.i.i.i.i = tail call noalias nonnull i8* @_Znwm(i64 %sub.ptr.sub.i) #43
  %2 = bitcast i8* %call5.i.i.i.i.i.i to double*
  store double 0.000000e+00, double* %2, align 8, !tbaa !75
  %incdec.ptr.i.i.i.i.i = getelementptr inbounds i8, i8* %call5.i.i.i.i.i.i, i64 8
  %3 = bitcast i8* %incdec.ptr.i.i.i.i.i to double*
  %cmp.i.i.i.i.i.i.i = icmp eq i64 %sub.ptr.sub.i, 8
  br i1 %cmp.i.i.i.i.i.i.i, label %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit, label %if.end.i.i.i.i.i.i.i

if.end.i.i.i.i.i.i.i:                             ; preds = %if.then.i.i.i.i.i
  %add.ptr.i.i.i = getelementptr inbounds double, double* %2, i64 %sub.ptr.div.i
  %4 = add nsw i64 %sub.ptr.sub.i, -8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %incdec.ptr.i.i.i.i.i, i8 0, i64 %4, i1 false) #38
  br label %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit

_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit:               ; preds = %if.end.i.i.i.i.i.i.i, %if.then.i.i.i.i.i, %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i
  %cond.i.i.i.i45 = phi double* [ %2, %if.then.i.i.i.i.i ], [ %2, %if.end.i.i.i.i.i.i.i ], [ null, %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i ]
  %__first.addr.0.i.i.i.i.i = phi double* [ %3, %if.then.i.i.i.i.i ], [ %add.ptr.i.i.i, %if.end.i.i.i.i.i.i.i ], [ null, %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i ]
  %sub.ptr.lhs.cast.i29 = ptrtoint double* %__first.addr.0.i.i.i.i.i to i64
  %sub.ptr.rhs.cast.i30 = ptrtoint double* %cond.i.i.i.i45 to i64
  %sub.ptr.sub.i31 = sub i64 %sub.ptr.lhs.cast.i29, %sub.ptr.rhs.cast.i30
  %cmp46.not = icmp eq i64 %sub.ptr.sub.i31, 0
  br i1 %cmp46.not, label %for.cond.cleanup, label %for.body.preheader

for.body.preheader:                               ; preds = %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit
  %5 = icmp sgt i64 %sub.ptr.sub.i31, -1
  %smax = select i1 %5, i64 %sub.ptr.sub.i31, i64 -1
  %6 = icmp slt i64 %smax, 1
  %smin = select i1 %6, i64 %smax, i64 1
  %7 = sub i64 %sub.ptr.rhs.cast.i30, %sub.ptr.lhs.cast.i29
  %8 = icmp sgt i64 %7, %sub.ptr.sub.i31
  %smax49 = select i1 %8, i64 %7, i64 %sub.ptr.sub.i31
  %9 = lshr i64 %smax49, 3
  %10 = mul nsw i64 %smin, %9
  %11 = icmp ugt i64 %10, 1
  %umax = select i1 %11, i64 %10, i64 1
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit
  %_M_start.i36 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load double*, double** %_M_start.i36, align 8, !tbaa !121
  %_M_start.i35 = getelementptr inbounds %struct.HandOutput, %struct.HandOutput* %result, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0
  %13 = load double*, double** %_M_start.i35, align 8, !tbaa !121
  %bone_count = getelementptr inbounds %struct.HandObjectiveData, %struct.HandObjectiveData* %objective_input, i64 0, i32 0
  %14 = load i32, i32* %bone_count, align 8, !tbaa !124
  %bone_names = getelementptr inbounds %struct.HandObjectiveData, %struct.HandObjectiveData* %objective_input, i64 0, i32 1
  %15 = load i8**, i8*** %bone_names, align 8, !tbaa !127
  %parents = getelementptr inbounds %struct.HandObjectiveData, %struct.HandObjectiveData* %objective_input, i64 0, i32 2
  %16 = load i32*, i32** %parents, align 8, !tbaa !128
  %base_relatives = getelementptr inbounds %struct.HandObjectiveData, %struct.HandObjectiveData* %objective_input, i64 0, i32 3
  %17 = load %struct.Matrix*, %struct.Matrix** %base_relatives, align 8, !tbaa !129
  %inverse_base_absolutes = getelementptr inbounds %struct.HandObjectiveData, %struct.HandObjectiveData* %objective_input, i64 0, i32 4
  %18 = load %struct.Matrix*, %struct.Matrix** %inverse_base_absolutes, align 8, !tbaa !130
  %base_positions = getelementptr inbounds %struct.HandObjectiveData, %struct.HandObjectiveData* %objective_input, i64 0, i32 5
  %weights = getelementptr inbounds %struct.HandObjectiveData, %struct.HandObjectiveData* %objective_input, i64 0, i32 6
  %is_mirrored = getelementptr inbounds %struct.HandObjectiveData, %struct.HandObjectiveData* %objective_input, i64 0, i32 8
  %19 = load i32, i32* %is_mirrored, align 8, !tbaa !132
  %corresp_count = getelementptr inbounds %struct.HandObjectiveData, %struct.HandObjectiveData* %objective_input, i64 0, i32 9
  %20 = load i32, i32* %corresp_count, align 4, !tbaa !133
  %correspondences = getelementptr inbounds %struct.HandObjectiveData, %struct.HandObjectiveData* %objective_input, i64 0, i32 10
  %21 = load i32*, i32** %correspondences, align 8, !tbaa !134
  tail call void @hand_objective_b(double* %12, double* %13, i32 %14, i8** %15, i32* %16, %struct.Matrix* %17, %struct.Matrix* %18, %struct.Matrix* nonnull %base_positions, %struct.Matrix* nonnull %weights, %struct.Triangle* undef, i32 %19, i32 %20, i32* %21, %struct.Matrix* undef, double* undef, double* %cond.i.i.i.i45)
  %tobool.not.i.i.i = icmp eq double* %cond.i.i.i.i45, null
  br i1 %tobool.not.i.i.i, label %_ZNSt6vectorIdSaIdEED2Ev.exit, label %if.then.i.i.i

if.then.i.i.i:                                    ; preds = %for.cond.cleanup
  %22 = bitcast double* %cond.i.i.i.i45 to i8*
  tail call void @_ZdlPv(i8* %22) #41
  br label %_ZNSt6vectorIdSaIdEED2Ev.exit

_ZNSt6vectorIdSaIdEED2Ev.exit:                    ; preds = %if.then.i.i.i, %for.cond.cleanup
  ret void

for.body:                                         ; preds = %for.body, %for.body.preheader
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.body ]
  %add.ptr.i = getelementptr inbounds double, double* %cond.i.i.i.i45, i64 %indvars.iv
  store double 1.000000e+00, double* %add.ptr.i, align 8, !tbaa !75
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %umax
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body, !llvm.loop !136
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @hand_objective_b(double* nocapture readonly %theta, double* nocapture %thetab, i32 %bone_count, i8** nocapture readnone %bone_names, i32* nocapture readonly %parents, %struct.Matrix* nocapture readonly %base_relatives, %struct.Matrix* nocapture readonly %inverse_base_absolutes, %struct.Matrix* nocapture readonly %base_positions, %struct.Matrix* nocapture readonly %weights, %struct.Triangle* nocapture readnone %triangles, i32 %is_mirrored, i32 %corresp_count, i32* nocapture readnone %correspondences, %struct.Matrix* nocapture readnone %points, double* nocapture readnone %err, double* nocapture readnone %errb) local_unnamed_addr #5 {
if.end:
  %branch = alloca i32, align 4
  %0 = bitcast i32* %branch to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #38
  %call.i = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #38
  %1 = bitcast i8* %call.i to %struct.Matrix*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %call.i, i8 0, i64 16, i1 false) #38
  %nrows = bitcast i8* %call.i to i32*
  tail call void @pushInteger4(i32 0) #38
  %ncols = getelementptr inbounds i8, i8* %call.i, i64 4
  %2 = bitcast i8* %ncols to i32*
  tail call void @pushInteger4(i32 0) #38
  %data = getelementptr inbounds i8, i8* %call.i, i64 8
  %3 = bitcast i8* %data to double**
  %4 = bitcast i8* %data to i8**
  tail call void @pushPointer8(i8* null) #38
  tail call void @to_pose_params_c(i32 %bone_count, double* %theta, i8** undef, %struct.Matrix* %1)
  %call.i131 = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #38
  %5 = bitcast i8* %call.i131 to %struct.Matrix*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %call.i131, i8 0, i64 16, i1 false) #38
  tail call void @pushInteger4(i32 0) #38
  tail call void @pushInteger4(i32 0) #38
  %data4 = getelementptr inbounds i8, i8* %call.i131, i64 8
  %6 = bitcast i8* %data4 to double**
  tail call void @pushControl1b(i32 0) #38
  %.phi.trans.insert = bitcast i8* %data4 to i8**
  %.pre = load i8*, i8** %.phi.trans.insert, align 8, !tbaa !137
  tail call void @pushPointer8(i8* %.pre) #38
  %7 = load i32, i32* %nrows, align 8, !tbaa !138
  tail call void @pushInteger4(i32 %7) #38
  %8 = load i32, i32* %2, align 4, !tbaa !139
  tail call void @pushInteger4(i32 %8) #38
  %9 = load double*, double** %3, align 8, !tbaa !137
  %tobool10.not = icmp eq double* %9, null
  br i1 %tobool10.not, label %for.cond, label %if.then11

if.then11:                                        ; preds = %if.end
  %10 = load double, double* %9, align 8, !tbaa !75
  tail call void @pushReal8(double %10) #38
  br label %for.cond

for.cond:                                         ; preds = %if.then11, %if.end
  %.sink = phi i32 [ 1, %if.then11 ], [ 0, %if.end ]
  tail call void @pushControl1b(i32 %.sink) #38
  %11 = load i8*, i8** %4, align 8, !tbaa !137
  tail call void @pushPointer8(i8* %11) #38
  tail call void @get_skinned_vertex_positions_c(i32 %bone_count, %struct.Matrix* %base_relatives, i32* %parents, %struct.Matrix* %inverse_base_absolutes, %struct.Matrix* %base_positions, %struct.Matrix* %weights, i32 %is_mirrored, %struct.Matrix* nonnull %1, %struct.Matrix* nonnull %5, i32 1)
  %cmp = icmp sgt i32 %corresp_count, 0
  br i1 %cmp, label %for.body18, label %for.end42

for.body18:                                       ; preds = %for.cond
  tail call void @llvm.trap()
  unreachable

for.end42:                                        ; preds = %for.cond
  tail call void @popPointer8(i8** nonnull %4) #38
  call void @popControl1b(i32* nonnull %branch) #38
  %12 = load i32, i32* %branch, align 4, !tbaa !59
  %cmp44 = icmp eq i32 %12, 1
  br i1 %cmp44, label %if.then45, label %if.end47

if.then45:                                        ; preds = %for.end42
  %13 = load double*, double** %3, align 8, !tbaa !137
  call void @popReal8(double* %13) #38
  br label %if.end47

if.end47:                                         ; preds = %if.then45, %for.end42
  call void @popInteger4(i32* nonnull %2) #38
  call void @popInteger4(i32* nonnull %nrows) #38
  call void @popPointer8(i8** nonnull %.phi.trans.insert) #38
  call void @popControl1b(i32* nonnull %branch) #38
  %14 = load i32, i32* %branch, align 4, !tbaa !59
  %cmp51 = icmp eq i32 %14, 1
  br i1 %cmp51, label %if.then52, label %if.end54

if.then52:                                        ; preds = %if.end47
  %15 = load double*, double** %6, align 8, !tbaa !137
  call void @popReal8(double* %15) #38
  br label %if.end54

if.end54:                                         ; preds = %if.then52, %if.end47
  %ncols3 = getelementptr inbounds i8, i8* %call.i131, i64 4
  %16 = bitcast i8* %ncols3 to i32*
  %nrows2 = bitcast i8* %call.i131 to i32*
  call void @popInteger4(i32* nonnull %16) #38
  call void @popInteger4(i32* nonnull %nrows2) #38
  call void @get_skinned_vertex_positions_b(i32 %bone_count, %struct.Matrix* %base_relatives, i32* %parents, %struct.Matrix* %inverse_base_absolutes, %struct.Matrix_diff* undef, %struct.Matrix* %base_positions, %struct.Matrix_diff* undef, %struct.Matrix* %weights, i32 %is_mirrored, %struct.Matrix* nonnull %1, %struct.Matrix_diff* undef, %struct.Matrix* nonnull %5, %struct.Matrix_diff* undef, i32 1)
  call void @popPointer8(i8** nonnull %4) #38
  call void @popInteger4(i32* nonnull %2) #38
  call void @popInteger4(i32* nonnull %nrows) #38
  call void @to_pose_params_b(i32 %bone_count, double* %theta, double* %thetab, i8** undef, %struct.Matrix* nonnull %1, %struct.Matrix_diff* undef)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #38
  ret void
}

; Function Attrs: norecurse nounwind readonly uwtable willreturn mustprogress
define dso_local { i64, double* } @_Z17convert_to_matrixRK11LightMatrixIdE(%class.LightMatrix* nocapture nonnull readonly align 8 dereferenceable(24) %mat) local_unnamed_addr #8 {
entry:
  %nrows_ = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %mat, i64 0, i32 1
  %0 = load i32, i32* %nrows_, align 4, !tbaa !71
  %ncols_ = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %mat, i64 0, i32 2
  %1 = load i32, i32* %ncols_, align 8, !tbaa !72
  %data_ = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %mat, i64 0, i32 3
  %2 = load double*, double** %data_, align 8, !tbaa !73
  %retval.sroa.2.0.insert.ext = zext i32 %1 to i64
  %retval.sroa.2.0.insert.shift = shl nuw i64 %retval.sroa.2.0.insert.ext, 32
  %retval.sroa.0.0.insert.ext = zext i32 %0 to i64
  %retval.sroa.0.0.insert.insert = or i64 %retval.sroa.2.0.insert.shift, %retval.sroa.0.0.insert.ext
  %.fca.0.insert = insertvalue { i64, double* } undef, i64 %retval.sroa.0.0.insert.insert, 0
  %.fca.1.insert = insertvalue { i64, double* } %.fca.0.insert, double* %2, 1
  ret { i64, double* } %.fca.1.insert
}

; Function Attrs: nofree nounwind uwtable mustprogress
define dso_local noalias nonnull %struct.HandObjectiveData* @_Z30convert_to_hand_objective_dataRK9HandInput(%struct.HandInput* nocapture nonnull readonly align 8 dereferenceable(272) %input) local_unnamed_addr #9 {
entry:
  %call = tail call noalias nonnull dereferenceable(112) i8* @_Znwm(i64 112) #43
  %_M_start.i = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0
  %0 = load i32*, i32** %_M_start.i, align 8, !tbaa !64
  %correspondences2 = getelementptr inbounds i8, i8* %call, i64 88
  %1 = bitcast i8* %correspondences2 to i32**
  store i32* %0, i32** %1, align 8, !tbaa !134
  %_M_finish.i159 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 1, i32 0, i32 0, i32 0, i32 1
  %2 = load i32*, i32** %_M_finish.i159, align 8, !tbaa !61
  %sub.ptr.lhs.cast.i161 = ptrtoint i32* %2 to i64
  %sub.ptr.rhs.cast.i162 = ptrtoint i32* %0 to i64
  %sub.ptr.sub.i163 = sub i64 %sub.ptr.lhs.cast.i161, %sub.ptr.rhs.cast.i162
  %3 = lshr exact i64 %sub.ptr.sub.i163, 2
  %conv = trunc i64 %3 to i32
  %corresp_count = getelementptr inbounds i8, i8* %call, i64 84
  %4 = bitcast i8* %corresp_count to i32*
  store i32 %conv, i32* %4, align 4, !tbaa !133
  %nrows_.i150 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 2, i32 1
  %5 = load i32, i32* %nrows_.i150, align 4, !tbaa !71
  %ncols_.i151 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 2, i32 2
  %6 = load i32, i32* %ncols_.i151, align 8, !tbaa !72
  %data_.i152 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 2, i32 3
  %7 = load double*, double** %data_.i152, align 8, !tbaa !73
  %retval.sroa.2.0.insert.ext.i153 = zext i32 %6 to i64
  %retval.sroa.2.0.insert.shift.i154 = shl nuw i64 %retval.sroa.2.0.insert.ext.i153, 32
  %retval.sroa.0.0.insert.ext.i155 = zext i32 %5 to i64
  %retval.sroa.0.0.insert.insert.i156 = or i64 %retval.sroa.2.0.insert.shift.i154, %retval.sroa.0.0.insert.ext.i155
  %ref.tmp.sroa.0.0..sroa_idx = getelementptr inbounds i8, i8* %call, i64 96
  %ref.tmp.sroa.0.0..sroa_cast88 = bitcast i8* %ref.tmp.sroa.0.0..sroa_idx to i64*
  store i64 %retval.sroa.0.0.insert.insert.i156, i64* %ref.tmp.sroa.0.0..sroa_cast88, align 8, !tbaa.struct !140
  %ref.tmp.sroa.4.0..sroa_idx90 = getelementptr inbounds i8, i8* %call, i64 104
  %8 = bitcast i8* %ref.tmp.sroa.4.0..sroa_idx90 to double**
  store double* %7, double** %8, align 8, !tbaa.struct !141
  %_M_finish.i = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %9 = load %"class.std::__cxx11::basic_string"*, %"class.std::__cxx11::basic_string"** %_M_finish.i, align 8, !tbaa !32
  %_M_start.i149 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load %"class.std::__cxx11::basic_string"*, %"class.std::__cxx11::basic_string"** %_M_start.i149, align 8, !tbaa !81
  %sub.ptr.lhs.cast.i = ptrtoint %"class.std::__cxx11::basic_string"* %9 to i64
  %sub.ptr.rhs.cast.i = ptrtoint %"class.std::__cxx11::basic_string"* %10 to i64
  %sub.ptr.sub.i = sub i64 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i
  %11 = lshr exact i64 %sub.ptr.sub.i, 5
  %conv11 = trunc i64 %11 to i32
  %bone_count = bitcast i8* %call to i32*
  store i32 %conv11, i32* %bone_count, align 8, !tbaa !124
  %_M_start.i148 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %12 = load i32*, i32** %_M_start.i148, align 8, !tbaa !64
  %parents13 = getelementptr inbounds i8, i8* %call, i64 16
  %13 = bitcast i8* %parents13 to i32**
  store i32* %12, i32** %13, align 8, !tbaa !128
  %nrows_.i139 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 0, i32 4, i32 1
  %14 = load i32, i32* %nrows_.i139, align 4, !tbaa !71
  %ncols_.i140 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 0, i32 4, i32 2
  %15 = load i32, i32* %ncols_.i140, align 8, !tbaa !72
  %data_.i141 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 0, i32 4, i32 3
  %16 = load double*, double** %data_.i141, align 8, !tbaa !73
  %retval.sroa.2.0.insert.ext.i142 = zext i32 %15 to i64
  %retval.sroa.2.0.insert.shift.i143 = shl nuw i64 %retval.sroa.2.0.insert.ext.i142, 32
  %retval.sroa.0.0.insert.ext.i144 = zext i32 %14 to i64
  %retval.sroa.0.0.insert.insert.i145 = or i64 %retval.sroa.2.0.insert.shift.i143, %retval.sroa.0.0.insert.ext.i144
  %ref.tmp14.sroa.0.0..sroa_idx = getelementptr inbounds i8, i8* %call, i64 40
  %ref.tmp14.sroa.0.0..sroa_cast75 = bitcast i8* %ref.tmp14.sroa.0.0..sroa_idx to i64*
  store i64 %retval.sroa.0.0.insert.insert.i145, i64* %ref.tmp14.sroa.0.0..sroa_cast75, align 8, !tbaa.struct !140
  %ref.tmp14.sroa.4.0..sroa_idx77 = getelementptr inbounds i8, i8* %call, i64 48
  %17 = bitcast i8* %ref.tmp14.sroa.4.0..sroa_idx77 to double**
  store double* %16, double** %17, align 8, !tbaa.struct !141
  %nrows_.i130 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 0, i32 5, i32 1
  %18 = load i32, i32* %nrows_.i130, align 4, !tbaa !71
  %ncols_.i131 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 0, i32 5, i32 2
  %19 = load i32, i32* %ncols_.i131, align 8, !tbaa !72
  %data_.i132 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 0, i32 5, i32 3
  %20 = load double*, double** %data_.i132, align 8, !tbaa !73
  %retval.sroa.2.0.insert.ext.i133 = zext i32 %19 to i64
  %retval.sroa.2.0.insert.shift.i134 = shl nuw i64 %retval.sroa.2.0.insert.ext.i133, 32
  %retval.sroa.0.0.insert.ext.i135 = zext i32 %18 to i64
  %retval.sroa.0.0.insert.insert.i136 = or i64 %retval.sroa.2.0.insert.shift.i134, %retval.sroa.0.0.insert.ext.i135
  %ref.tmp17.sroa.0.0..sroa_idx = getelementptr inbounds i8, i8* %call, i64 56
  %ref.tmp17.sroa.0.0..sroa_cast71 = bitcast i8* %ref.tmp17.sroa.0.0..sroa_idx to i64*
  store i64 %retval.sroa.0.0.insert.insert.i136, i64* %ref.tmp17.sroa.0.0..sroa_cast71, align 8, !tbaa.struct !140
  %ref.tmp17.sroa.4.0..sroa_idx73 = getelementptr inbounds i8, i8* %call, i64 64
  %21 = bitcast i8* %ref.tmp17.sroa.4.0..sroa_idx73 to double**
  store double* %20, double** %21, align 8, !tbaa.struct !141
  %_M_start.i129 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 0, i32 6, i32 0, i32 0, i32 0, i32 0
  %22 = load %struct.Triangle*, %struct.Triangle** %_M_start.i129, align 8, !tbaa !142
  %triangles21 = getelementptr inbounds i8, i8* %call, i64 72
  %23 = bitcast i8* %triangles21 to %struct.Triangle**
  store %struct.Triangle* %22, %struct.Triangle** %23, align 8, !tbaa !131
  %is_mirrored = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 0, i32 7
  %24 = load i8, i8* %is_mirrored, align 8, !tbaa !111, !range !90
  %25 = zext i8 %24 to i32
  %is_mirrored22 = getelementptr inbounds i8, i8* %call, i64 80
  %26 = bitcast i8* %is_mirrored22 to i32*
  store i32 %25, i32* %26, align 8, !tbaa !132
  %sext = shl i64 %sub.ptr.sub.i, 27
  %conv24 = ashr i64 %sext, 32
  %27 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %conv24, i64 8)
  %28 = extractvalue { i64, i1 } %27, 1
  %29 = extractvalue { i64, i1 } %27, 0
  %30 = select i1 %28, i64 -1, i64 %29
  %call25 = tail call noalias nonnull i8* @_Znam(i64 %30) #43
  %bone_names26 = getelementptr inbounds i8, i8* %call, i64 8
  %31 = bitcast i8* %bone_names26 to i8**
  store i8* %call25, i8** %31, align 8, !tbaa !127
  %32 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %conv24, i64 16)
  %33 = extractvalue { i64, i1 } %32, 1
  %34 = extractvalue { i64, i1 } %32, 0
  %35 = select i1 %33, i64 -1, i64 %34
  %call29 = tail call noalias nonnull i8* @_Znam(i64 %35) #43
  %base_relatives = getelementptr inbounds i8, i8* %call, i64 24
  %36 = bitcast i8* %base_relatives to i8**
  store i8* %call29, i8** %36, align 8, !tbaa !129
  %call32 = tail call noalias nonnull i8* @_Znam(i64 %35) #43
  %inverse_base_absolutes = getelementptr inbounds i8, i8* %call, i64 32
  %37 = bitcast i8* %inverse_base_absolutes to i8**
  store i8* %call32, i8** %37, align 8, !tbaa !130
  %cmp165 = icmp sgt i32 %conv11, 0
  %38 = bitcast i8* %call25 to i8**
  %39 = bitcast i8* %call29 to %struct.Matrix*
  %40 = bitcast i8* %call32 to %struct.Matrix*
  br i1 %cmp165, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %entry
  %_M_start.i125 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %_M_start.i115 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 0, i32 3, i32 0, i32 0, i32 0, i32 0
  %wide.trip.count = and i64 %11, 4294967295
  %.pre = load %class.LightMatrix*, %class.LightMatrix** %_M_start.i125, align 8, !tbaa !143
  %.pre167 = load %class.LightMatrix*, %class.LightMatrix** %_M_start.i115, align 8, !tbaa !143
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %41 = bitcast i8* %call to %struct.HandObjectiveData*
  ret %struct.HandObjectiveData* %41

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %_M_p.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %10, i64 %indvars.iv, i32 0, i32 0
  %42 = load i8*, i8** %_M_p.i.i, align 8, !tbaa !17
  %arrayidx = getelementptr inbounds i8*, i8** %38, i64 %indvars.iv
  store i8* %42, i8** %arrayidx, align 8, !tbaa !60
  %nrows_.i116 = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %.pre, i64 %indvars.iv, i32 1
  %43 = load i32, i32* %nrows_.i116, align 4, !tbaa !71
  %ncols_.i117 = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %.pre, i64 %indvars.iv, i32 2
  %44 = load i32, i32* %ncols_.i117, align 8, !tbaa !72
  %data_.i118 = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %.pre, i64 %indvars.iv, i32 3
  %45 = load double*, double** %data_.i118, align 8, !tbaa !73
  %retval.sroa.2.0.insert.ext.i119 = zext i32 %44 to i64
  %retval.sroa.2.0.insert.shift.i120 = shl nuw i64 %retval.sroa.2.0.insert.ext.i119, 32
  %retval.sroa.0.0.insert.ext.i121 = zext i32 %43 to i64
  %retval.sroa.0.0.insert.insert.i122 = or i64 %retval.sroa.2.0.insert.shift.i120, %retval.sroa.0.0.insert.ext.i121
  %arrayidx46 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %39, i64 %indvars.iv
  %ref.tmp39.sroa.0.0..sroa_cast59 = bitcast %struct.Matrix* %arrayidx46 to i64*
  store i64 %retval.sroa.0.0.insert.insert.i122, i64* %ref.tmp39.sroa.0.0..sroa_cast59, align 8, !tbaa.struct !140
  %ref.tmp39.sroa.4.0..sroa_idx61 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %39, i64 %indvars.iv, i32 2
  store double* %45, double** %ref.tmp39.sroa.4.0..sroa_idx61, align 8, !tbaa.struct !141
  %nrows_.i = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %.pre167, i64 %indvars.iv, i32 1
  %46 = load i32, i32* %nrows_.i, align 4, !tbaa !71
  %ncols_.i = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %.pre167, i64 %indvars.iv, i32 2
  %47 = load i32, i32* %ncols_.i, align 8, !tbaa !72
  %data_.i = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %.pre167, i64 %indvars.iv, i32 3
  %48 = load double*, double** %data_.i, align 8, !tbaa !73
  %retval.sroa.2.0.insert.ext.i = zext i32 %47 to i64
  %retval.sroa.2.0.insert.shift.i = shl nuw i64 %retval.sroa.2.0.insert.ext.i, 32
  %retval.sroa.0.0.insert.ext.i = zext i32 %46 to i64
  %retval.sroa.0.0.insert.insert.i = or i64 %retval.sroa.2.0.insert.shift.i, %retval.sroa.0.0.insert.ext.i
  %arrayidx54 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %40, i64 %indvars.iv
  %ref.tmp47.sroa.0.0..sroa_cast55 = bitcast %struct.Matrix* %arrayidx54 to i64*
  store i64 %retval.sroa.0.0.insert.insert.i, i64* %ref.tmp47.sroa.0.0..sroa_cast55, align 8, !tbaa.struct !140
  %ref.tmp47.sroa.4.0..sroa_idx57 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %40, i64 %indvars.iv, i32 2
  store double* %48, double** %ref.tmp47.sroa.4.0..sroa_idx57, align 8, !tbaa.struct !141
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body, !llvm.loop !144
}

; Function Attrs: nobuiltin nofree allocsize(0)
declare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #10

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #11

; Function Attrs: nobuiltin nofree allocsize(0)
declare dso_local nonnull i8* @_Znam(i64) local_unnamed_addr #10

; Function Attrs: norecurse nounwind uwtable
define dso_local i32 @main(i32 %argc, i8** nocapture readnone %argv) local_unnamed_addr #12 {
entry:
  %__dnew.i.i.i.i = alloca i64, align 8
  %__dnew.i.i109 = alloca i64, align 8
  %__dnew.i.i.i.i.i.i.i.i = alloca i64, align 8
  %__dnew.i.i = alloca i64, align 8
  %ref.tmp = alloca [1 x %"class.std::__cxx11::basic_string"], align 8
  %jsonfile = alloca %"class.std::basic_ofstream", align 8
  %test_results = alloca %"class.nlohmann::json_v3_11_1::basic_json", align 8
  %path = alloca %"class.std::__cxx11::basic_string", align 8
  %test_suite = alloca %"class.nlohmann::json_v3_11_1::basic_json", align 8
  %agg.tmp11 = alloca %"class.nlohmann::json_v3_11_1::basic_json", align 8
  %input = alloca %struct.HandInput, align 8
  %model_dir = alloca %"class.std::__cxx11::basic_string", align 8
  %ref.tmp14 = alloca %"class.std::__cxx11::basic_string", align 8
  %ref.tmp15 = alloca %"class.std::__cxx11::basic_string", align 8
  %ref.tmp16 = alloca %"class.std::__cxx11::basic_string", align 8
  %result = alloca %struct.HandOutput, align 8
  %start = alloca %struct.timeval, align 8
  %end = alloca %struct.timeval, align 8
  %enzyme = alloca %"class.nlohmann::json_v3_11_1::basic_json", align 8
  %agg.tmp40 = alloca %"class.nlohmann::json_v3_11_1::basic_json", align 8
  %agg.tmp43 = alloca %"class.nlohmann::json_v3_11_1::basic_json", align 8
  %ref.tmp56 = alloca %"class.nlohmann::json_v3_11_1::basic_json", align 8
  %agg.tmp62 = alloca %"class.nlohmann::json_v3_11_1::basic_json", align 8
  %agg.tmp65 = alloca %"class.nlohmann::json_v3_11_1::basic_json", align 8
  %agg.tmp68 = alloca %"class.nlohmann::json_v3_11_1::basic_json", align 8
  %puts = tail call i32 @puts(i8* nonnull dereferenceable(1) getelementptr inbounds ([14 x i8], [14 x i8]* @str.115, i64 0, i64 0))
  %0 = bitcast [1 x %"class.std::__cxx11::basic_string"]* %ref.tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %0) #38
  %arrayinit.begin = getelementptr inbounds [1 x %"class.std::__cxx11::basic_string"], [1 x %"class.std::__cxx11::basic_string"]* %ref.tmp, i64 0, i64 0
  %1 = getelementptr inbounds [1 x %"class.std::__cxx11::basic_string"], [1 x %"class.std::__cxx11::basic_string"]* %ref.tmp, i64 0, i64 0, i32 2
  %2 = bitcast [1 x %"class.std::__cxx11::basic_string"]* %ref.tmp to %union.anon**
  store %union.anon* %1, %union.anon** %2, align 8, !tbaa !14
  %3 = bitcast i64* %__dnew.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %3) #38
  store i64 31, i64* %__dnew.i.i, align 8, !tbaa !20
  %call2.i.i = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %arrayinit.begin, i64* nonnull align 8 dereferenceable(8) %__dnew.i.i, i64 0) #38
  %_M_p.i.i.i = getelementptr inbounds [1 x %"class.std::__cxx11::basic_string"], [1 x %"class.std::__cxx11::basic_string"]* %ref.tmp, i64 0, i64 0, i32 0, i32 0
  store i8* %call2.i.i, i8** %_M_p.i.i.i, align 8, !tbaa !17
  %4 = load i64, i64* %__dnew.i.i, align 8, !tbaa !20
  %_M_allocated_capacity.i.i.i = getelementptr inbounds [1 x %"class.std::__cxx11::basic_string"], [1 x %"class.std::__cxx11::basic_string"]* %ref.tmp, i64 0, i64 0, i32 2, i32 0
  store i64 %4, i64* %_M_allocated_capacity.i.i.i, align 8, !tbaa !21
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 dereferenceable(31) %call2.i.i, i8* nonnull align 1 dereferenceable(31) getelementptr inbounds ([32 x i8], [32 x i8]* @.str.13, i64 0, i64 0), i64 31, i1 false) #38
  %_M_string_length.i.i.i.i = getelementptr inbounds [1 x %"class.std::__cxx11::basic_string"], [1 x %"class.std::__cxx11::basic_string"]* %ref.tmp, i64 0, i64 0, i32 1
  store i64 %4, i64* %_M_string_length.i.i.i.i, align 8, !tbaa !19
  %5 = load i8*, i8** %_M_p.i.i.i, align 8, !tbaa !17
  %arrayidx.i.i.i = getelementptr inbounds i8, i8* %5, i64 %4
  store i8 0, i8* %arrayidx.i.i.i, align 1, !tbaa !21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %3) #38
  %call5.i.i.i.i = call noalias nonnull dereferenceable(32) i8* @_Znwm(i64 32) #43
  %6 = bitcast i8* %call5.i.i.i.i to %"class.std::__cxx11::basic_string"*
  %7 = bitcast i64* %__dnew.i.i.i.i.i.i.i.i to i8*
  %8 = getelementptr inbounds i8, i8* %call5.i.i.i.i, i64 16
  %9 = bitcast i8* %call5.i.i.i.i to i8**
  store i8* %8, i8** %9, align 8, !tbaa !14
  %10 = load i8*, i8** %_M_p.i.i.i, align 8, !tbaa !17
  %11 = load i64, i64* %_M_string_length.i.i.i.i, align 8, !tbaa !19
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #38
  store i64 %11, i64* %__dnew.i.i.i.i.i.i.i.i, align 8, !tbaa !20
  %cmp.i.i.i.i.i.i.i.i = icmp ugt i64 %11, 15
  br i1 %cmp.i.i.i.i.i.i.i.i, label %if.then.i.i.i.i.i.i.i.i, label %if.end.i.i.i.i.i.i.i.i

if.then.i.i.i.i.i.i.i.i:                          ; preds = %entry
  %call2.i.i.i.i.i.i.i.i = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %6, i64* nonnull align 8 dereferenceable(8) %__dnew.i.i.i.i.i.i.i.i, i64 0) #38
  store i8* %call2.i.i.i.i.i.i.i.i, i8** %9, align 8, !tbaa !17
  %12 = load i64, i64* %__dnew.i.i.i.i.i.i.i.i, align 8, !tbaa !20
  %13 = bitcast i8* %8 to i64*
  store i64 %12, i64* %13, align 8, !tbaa !21
  br label %if.end.i.i.i.i.i.i.i.i

if.end.i.i.i.i.i.i.i.i:                           ; preds = %if.then.i.i.i.i.i.i.i.i, %entry
  %14 = phi i8* [ %call2.i.i.i.i.i.i.i.i, %if.then.i.i.i.i.i.i.i.i ], [ %8, %entry ]
  switch i64 %11, label %if.end.i.i.i.i.i.i.i.i.i.i.i [
    i64 1, label %if.then.i.i7.i.i.i.i.i.i.i.i
    i64 0, label %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_range_initializeIPKS5_EEvT_SB_St20forward_iterator_tag.exit
  ]

if.then.i.i7.i.i.i.i.i.i.i.i:                     ; preds = %if.end.i.i.i.i.i.i.i.i
  %15 = load i8, i8* %10, align 1, !tbaa !21
  store i8 %15, i8* %14, align 1, !tbaa !21
  br label %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_range_initializeIPKS5_EEvT_SB_St20forward_iterator_tag.exit

if.end.i.i.i.i.i.i.i.i.i.i.i:                     ; preds = %if.end.i.i.i.i.i.i.i.i
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %14, i8* align 1 %10, i64 %11, i1 false) #38
  br label %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_range_initializeIPKS5_EEvT_SB_St20forward_iterator_tag.exit

_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_range_initializeIPKS5_EEvT_SB_St20forward_iterator_tag.exit: ; preds = %if.end.i.i.i.i.i.i.i.i.i.i.i, %if.then.i.i7.i.i.i.i.i.i.i.i, %if.end.i.i.i.i.i.i.i.i
  %16 = load i64, i64* %__dnew.i.i.i.i.i.i.i.i, align 8, !tbaa !20
  %_M_string_length.i.i.i.i.i.i.i.i.i.i = getelementptr inbounds i8, i8* %call5.i.i.i.i, i64 8
  %17 = bitcast i8* %_M_string_length.i.i.i.i.i.i.i.i.i.i to i64*
  store i64 %16, i64* %17, align 8, !tbaa !19
  %18 = load i8*, i8** %9, align 8, !tbaa !17
  %arrayidx.i.i.i.i.i.i.i.i.i = getelementptr inbounds i8, i8* %18, i64 %16
  store i8 0, i8* %arrayidx.i.i.i.i.i.i.i.i.i, align 1, !tbaa !21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #38
  %19 = load i8*, i8** %_M_p.i.i.i, align 8, !tbaa !17
  %arraydecay.i.i.i.i = bitcast %union.anon* %1 to i8*
  %cmp.i.i.i = icmp eq i8* %19, %arraydecay.i.i.i.i
  br i1 %cmp.i.i.i, label %for.body.lr.ph, label %if.then.i.i94

if.then.i.i94:                                    ; preds = %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_range_initializeIPKS5_EEvT_SB_St20forward_iterator_tag.exit
  call void @_ZdlPv(i8* %19) #41
  br label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.then.i.i94, %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_range_initializeIPKS5_EEvT_SB_St20forward_iterator_tag.exit
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %0) #38
  %20 = bitcast %"class.std::basic_ofstream"* %jsonfile to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %20) #38
  call void @_ZNSt14basic_ofstreamIcSt11char_traitsIcEEC1EPKcSt13_Ios_Openmode(%"class.std::basic_ofstream"* nonnull dereferenceable(248) %jsonfile, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.14, i64 0, i64 0), i32 32)
  %21 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %test_results, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %21) #38
  store i8 0, i8* %21, align 8, !tbaa !145
  %object13.i.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %test_results, i64 0, i32 1, i32 0
  store %"class.std::map"* null, %"class.std::map"** %object13.i.i, align 8, !tbaa !21
  call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %test_results, i1 zeroext true) #38
  call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %test_results, i1 zeroext true) #38
  %22 = bitcast %"class.std::__cxx11::basic_string"* %path to i8*
  %23 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %path, i64 0, i32 2
  %24 = bitcast %"class.std::__cxx11::basic_string"* %path to %union.anon**
  %25 = bitcast i64* %__dnew.i.i109 to i8*
  %26 = bitcast %union.anon* %23 to i8*
  %_M_p.i.i.i112 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %path, i64 0, i32 0, i32 0
  %_M_allocated_capacity.i.i.i113 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %path, i64 0, i32 2, i32 0
  %_M_string_length.i.i.i.i119 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %path, i64 0, i32 1
  %27 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %test_suite, i64 0, i32 0
  %object13.i.i122 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %test_suite, i64 0, i32 1, i32 0
  %m_type.i123 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %agg.tmp11, i64 0, i32 0
  %m_value.i124 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %agg.tmp11, i64 0, i32 1
  %28 = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value.i124 to i64*
  %29 = bitcast %struct.HandInput* %input to i8*
  %is_data_owner_.i2.i.i.i = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 0, i32 4, i32 0
  %nrows_.i3.i.i.i = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 0, i32 4, i32 1
  %ncols_.i4.i.i.i = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 0, i32 4, i32 2
  %data_.i5.i.i.i = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 0, i32 4, i32 3
  %is_data_owner_.i.i.i.i = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 0, i32 5, i32 0
  %nrows_.i.i.i.i = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 0, i32 5, i32 1
  %ncols_.i.i.i.i = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 0, i32 5, i32 2
  %data_.i.i.i.i = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 0, i32 5, i32 3
  %30 = bitcast double** %data_.i.i.i.i to i8*
  %correspondences.i.i = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 1
  %31 = bitcast %"class.std::vector.3"* %correspondences.i.i to i8*
  %is_data_owner_.i.i.i = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 2, i32 0
  %nrows_.i.i.i = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 2, i32 1
  %ncols_.i.i.i = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 2, i32 2
  %data_.i.i.i = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 2, i32 3
  %32 = bitcast double** %data_.i.i.i to i8*
  %33 = bitcast %"class.std::__cxx11::basic_string"* %model_dir to i8*
  %34 = bitcast %"class.std::__cxx11::basic_string"* %ref.tmp14 to i8*
  %35 = bitcast %"class.std::__cxx11::basic_string"* %ref.tmp15 to i8*
  %_M_string_length.i.i.i.i130 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp15, i64 0, i32 1
  %36 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp14, i64 0, i32 2
  %37 = bitcast %"class.std::__cxx11::basic_string"* %ref.tmp14 to %union.anon**
  %38 = bitcast %union.anon* %36 to i8*
  %_M_p.i16.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp15, i64 0, i32 0, i32 0
  %39 = bitcast i64* %__dnew.i.i.i.i to i8*
  %_M_p.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp14, i64 0, i32 0, i32 0
  %_M_allocated_capacity.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp14, i64 0, i32 2, i32 0
  %_M_string_length.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp14, i64 0, i32 1
  %40 = bitcast %union.anon* %36 to i16*
  %arrayidx.i.i.i.i = getelementptr inbounds i8, i8* %38, i64 2
  %41 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %model_dir, i64 0, i32 2
  %arraydecay.i.i.i = bitcast %union.anon* %41 to i8*
  %42 = bitcast %"class.std::__cxx11::basic_string"* %model_dir to %union.anon**
  %_M_p.i23.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %model_dir, i64 0, i32 0, i32 0
  %_M_allocated_capacity.i.i.i138 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %model_dir, i64 0, i32 2, i32 0
  %_M_string_length.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %model_dir, i64 0, i32 1
  %43 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp15, i64 0, i32 2
  %arraydecay.i.i.i.i145 = bitcast %union.anon* %43 to i8*
  %44 = bitcast %"class.std::__cxx11::basic_string"* %ref.tmp16 to i8*
  %theta = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 0
  %data = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1
  %_M_p.i.i.i.i149 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp16, i64 0, i32 0, i32 0
  %45 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp16, i64 0, i32 2
  %arraydecay.i.i.i.i150 = bitcast %union.anon* %45 to i8*
  %_M_finish.i154 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 1, i32 0, i32 0, i32 0, i32 1
  %_M_start.i155 = getelementptr inbounds %"class.std::vector.3", %"class.std::vector.3"* %correspondences.i.i, i64 0, i32 0, i32 0, i32 0, i32 0
  %_M_finish.i156 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %_M_start.i157 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = bitcast %struct.HandOutput* %result to i8*
  %47 = bitcast %struct.HandOutput* %result to i8**
  %_M_end_of_storage.i.i.i = getelementptr inbounds %struct.HandOutput, %struct.HandOutput* %result, i64 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %_M_start.i.i.i379 = getelementptr inbounds %struct.HandOutput, %struct.HandOutput* %result, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %_M_finish.i.i.i = getelementptr inbounds %struct.HandOutput, %struct.HandOutput* %result, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %jacobian_ncols = getelementptr inbounds %struct.HandOutput, %struct.HandOutput* %result, i64 0, i32 1
  %jacobian_nrows = getelementptr inbounds %struct.HandOutput, %struct.HandOutput* %result, i64 0, i32 2
  %jacobian = getelementptr inbounds %struct.HandOutput, %struct.HandOutput* %result, i64 0, i32 3
  %48 = bitcast %"class.std::vector.19"* %jacobian to i8**
  %_M_end_of_storage.i.i.i177 = getelementptr inbounds %struct.HandOutput, %struct.HandOutput* %result, i64 0, i32 3, i32 0, i32 0, i32 0, i32 2
  %_M_start.i.i.i175383 = getelementptr inbounds %"class.std::vector.19", %"class.std::vector.19"* %jacobian, i64 0, i32 0, i32 0, i32 0, i32 0
  %_M_finish.i.i.i185 = getelementptr inbounds %struct.HandOutput, %struct.HandOutput* %result, i64 0, i32 3, i32 0, i32 0, i32 0, i32 1
  %_M_finish.i212 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1
  %_M_start.i213 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %49 = bitcast %struct.timeval* %start to i8*
  %50 = bitcast %struct.timeval* %end to i8*
  %tv_sec.i = getelementptr inbounds %struct.timeval, %struct.timeval* %end, i64 0, i32 0
  %tv_sec1.i = getelementptr inbounds %struct.timeval, %struct.timeval* %start, i64 0, i32 0
  %tv_usec.i = getelementptr inbounds %struct.timeval, %struct.timeval* %end, i64 0, i32 1
  %tv_usec2.i = getelementptr inbounds %struct.timeval, %struct.timeval* %start, i64 0, i32 1
  %51 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %enzyme, i64 0, i32 0
  %object13.i.i267 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %enzyme, i64 0, i32 1, i32 0
  %m_type.i268 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %agg.tmp40, i64 0, i32 0
  %m_value.i269 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %agg.tmp40, i64 0, i32 1
  %52 = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value.i269 to i64*
  %m_type.i287 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %agg.tmp43, i64 0, i32 0
  %m_value.i288 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %agg.tmp43, i64 0, i32 1
  %53 = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value.i288 to i64*
  %54 = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value.i288 to double*
  %55 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %ref.tmp56, i64 0, i32 0
  %m_value.i98 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %ref.tmp56, i64 0, i32 1
  %56 = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value.i98 to double*
  %m_value.i295 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %enzyme, i64 0, i32 1
  %_M_start.i.i.i.i = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0
  %model.i.i = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 0
  %m_type.i325 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %agg.tmp62, i64 0, i32 0
  %m_value.i326 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %agg.tmp62, i64 0, i32 1
  %57 = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value.i326 to i64*
  %m_type.i333 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %agg.tmp65, i64 0, i32 0
  %m_value.i334 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %agg.tmp65, i64 0, i32 1
  %58 = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value.i334 to i64*
  %m_type.i341 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %agg.tmp68, i64 0, i32 0
  %m_value.i342 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %agg.tmp68, i64 0, i32 1
  %59 = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value.i342 to i64*
  %m_value.i350 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %test_suite, i64 0, i32 1
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %22) #38
  store %union.anon* %23, %union.anon** %24, align 8, !tbaa !14
  %_M_p.i9.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %6, i64 0, i32 0, i32 0
  %60 = load i8*, i8** %_M_p.i9.i, align 8, !tbaa !17
  %_M_string_length.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %6, i64 0, i32 1
  %61 = load i64, i64* %_M_string_length.i.i, align 8, !tbaa !19
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %25) #38
  store i64 %61, i64* %__dnew.i.i109, align 8, !tbaa !20
  %cmp.i.i110 = icmp ugt i64 %61, 15
  br i1 %cmp.i.i110, label %if.then.i.i114, label %if.end.i.i115

if.then.i.i.i.i.i.i.i:                            ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit265
  call void @_ZdlPv(i8* %176) #41
  br label %_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_.exit.i.i.i.i

_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_.exit.i.i.i.i: ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit265, %if.then.i.i.i.i.i.i.i
  %incdec.ptr.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %6, i64 1
  call void @_ZdlPv(i8* nonnull %call5.i.i.i.i) #41
  ret i32 0

if.then.i.i114:                                   ; preds = %for.body.lr.ph
  %call2.i.i111 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %path, i64* nonnull align 8 dereferenceable(8) %__dnew.i.i109, i64 0) #38
  store i8* %call2.i.i111, i8** %_M_p.i.i.i112, align 8, !tbaa !17
  %62 = load i64, i64* %__dnew.i.i109, align 8, !tbaa !20
  store i64 %62, i64* %_M_allocated_capacity.i.i.i113, align 8, !tbaa !21
  br label %if.end.i.i115

if.end.i.i115:                                    ; preds = %if.then.i.i114, %for.body.lr.ph
  %63 = phi i8* [ %call2.i.i111, %if.then.i.i114 ], [ %26, %for.body.lr.ph ]
  switch i64 %61, label %if.end.i.i.i.i.i117 [
    i64 1, label %if.then.i.i7.i.i116
    i64 0, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit
  ]

if.then.i.i7.i.i116:                              ; preds = %if.end.i.i115
  %64 = load i8, i8* %60, align 1, !tbaa !21
  store i8 %64, i8* %63, align 1, !tbaa !21
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit

if.end.i.i.i.i.i117:                              ; preds = %if.end.i.i115
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %63, i8* align 1 %60, i64 %61, i1 false) #38
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit: ; preds = %if.end.i.i.i.i.i117, %if.then.i.i7.i.i116, %if.end.i.i115
  %65 = load i64, i64* %__dnew.i.i109, align 8, !tbaa !20
  store i64 %65, i64* %_M_string_length.i.i.i.i119, align 8, !tbaa !19
  %66 = load i8*, i8** %_M_p.i.i.i112, align 8, !tbaa !17
  %arrayidx.i.i.i120 = getelementptr inbounds i8, i8* %66, i64 %65
  store i8 0, i8* %arrayidx.i.i.i120, align 1, !tbaa !21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %25) #38
  %67 = load i8*, i8** %_M_p.i.i.i112, align 8, !tbaa !17
  %call10 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([18 x i8], [18 x i8]* @.str.15, i64 0, i64 0), i8* %67)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %27) #38
  store i8 0, i8* %27, align 8, !tbaa !145
  store %"class.std::map"* null, %"class.std::map"** %object13.i.i122, align 8, !tbaa !21
  call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %test_suite, i1 zeroext true) #38
  call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %test_suite, i1 zeroext true) #38
  store i8 0, i8* %m_type.i123, align 8, !tbaa !145
  store i64 0, i64* %28, align 8
  call void @_ZN8nlohmann12json_v3_11_16detail20external_constructorILNS1_7value_tE3EE9constructINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES8_IhSaIhEEEEEEvRT_RKNSJ_8string_tE(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull align 8 dereferenceable(16) %agg.tmp11, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %path) #38
  call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %agg.tmp11, i1 zeroext true) #38
  %call12 = call nonnull align 8 dereferenceable(16) %"class.nlohmann::json_v3_11_1::basic_json"* @_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEEixIKcEERSD_PT_(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %test_suite, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.16, i64 0, i64 0))
  call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %agg.tmp11, i1 zeroext true) #38
  %m_type.i125 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %call12, i64 0, i32 0
  %68 = load i8, i8* %m_type.i125, align 8, !tbaa !148
  %69 = load i8, i8* %m_type.i123, align 8, !tbaa !148
  store i8 %69, i8* %m_type.i125, align 8, !tbaa !148
  store i8 %68, i8* %m_type.i123, align 8, !tbaa !148
  %m_value.i126 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %call12, i64 0, i32 1
  %70 = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value.i126 to i64*
  %71 = load i64, i64* %70, align 8
  %72 = load i64, i64* %28, align 8
  store i64 %72, i64* %70, align 8
  store i64 %71, i64* %28, align 8
  call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %call12, i1 zeroext true) #38
  call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %agg.tmp11, i1 zeroext false) #38
  %73 = load i8, i8* %m_type.i123, align 8, !tbaa !145
  call void @_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE10json_value7destroyENS0_6detail7value_tE(%"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* nonnull dereferenceable(8) %m_value.i124, i8 zeroext %73) #38
  call void @llvm.lifetime.start.p0i8(i64 272, i8* nonnull %29) #38
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(120) %29, i8 0, i64 120, i1 false) #38
  store i8 1, i8* %is_data_owner_.i2.i.i.i, align 8, !tbaa !68
  store i32 0, i32* %nrows_.i3.i.i.i, align 4, !tbaa !71
  store i32 0, i32* %ncols_.i4.i.i.i, align 8, !tbaa !72
  store double* null, double** %data_.i5.i.i.i, align 8, !tbaa !73
  store i8 1, i8* %is_data_owner_.i.i.i.i, align 8, !tbaa !68
  store i32 0, i32* %nrows_.i.i.i.i, align 4, !tbaa !71
  store i32 0, i32* %ncols_.i.i.i.i, align 8, !tbaa !72
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(32) %30, i8 0, i64 32, i1 false) #38
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %31, i8 0, i64 24, i1 false) #38
  store i8 1, i8* %is_data_owner_.i.i.i, align 8, !tbaa !68
  store i32 0, i32* %nrows_.i.i.i, align 4, !tbaa !71
  store i32 0, i32* %ncols_.i.i.i, align 8, !tbaa !72
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(32) %32, i8 0, i64 32, i1 false) #38
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %33) #38
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %34) #38
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %35) #38
  call void @_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_(%"class.std::__cxx11::basic_string"* nonnull sret(%"class.std::__cxx11::basic_string") align 8 %ref.tmp15, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.17, i64 0, i64 0), %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %path)
  call void @llvm.experimental.noalias.scope.decl(metadata !149)
  %call2.i.i.i = call i64 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12find_last_ofEPKcmm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %ref.tmp15, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0), i64 -1, i64 2) #38, !noalias !149
  %cmp.i129 = icmp eq i64 %call2.i.i.i, -1
  br i1 %cmp.i129, label %cond.true.i, label %cond.false.i

cond.true.i:                                      ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit
  store %union.anon* %36, %union.anon** %37, align 8, !tbaa !14, !alias.scope !149
  store i16 12078, i16* %40, align 8, !alias.scope !149
  store i64 2, i64* %_M_string_length.i.i.i.i.i.i, align 8, !tbaa !19, !alias.scope !149
  store i8 0, i8* %arrayidx.i.i.i.i, align 2, !tbaa !21, !alias.scope !149
  br label %_Z19filepath_to_dirnameRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.exit

cond.false.i:                                     ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit
  %add.i = add nuw i64 %call2.i.i.i, 1
  call void @llvm.experimental.noalias.scope.decl(metadata !152) #38
  %74 = load i64, i64* %_M_string_length.i.i.i.i130, align 8, !tbaa !19, !noalias !155
  store %union.anon* %36, %union.anon** %37, align 8, !tbaa !14, !alias.scope !155
  %75 = load i8*, i8** %_M_p.i16.i.i.i, align 8, !tbaa !17, !noalias !155
  %cmp.i11.i.i.i = icmp ugt i64 %74, %add.i
  %spec.select.i.i.i.i = select i1 %cmp.i11.i.i.i, i64 %add.i, i64 %74
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %39) #38, !noalias !155
  store i64 %spec.select.i.i.i.i, i64* %__dnew.i.i.i.i, align 8, !tbaa !20, !noalias !155
  %cmp.i.i.i.i = icmp ugt i64 %spec.select.i.i.i.i, 15
  br i1 %cmp.i.i.i.i, label %if.then.i.i.i.i, label %if.end.i.i.i.i

if.then.i.i.i.i:                                  ; preds = %cond.false.i
  %call2.i.i.i.i = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %ref.tmp14, i64* nonnull align 8 dereferenceable(8) %__dnew.i.i.i.i, i64 0) #38
  store i8* %call2.i.i.i.i, i8** %_M_p.i.i.i.i.i, align 8, !tbaa !17, !alias.scope !155
  %76 = load i64, i64* %__dnew.i.i.i.i, align 8, !tbaa !20, !noalias !155
  store i64 %76, i64* %_M_allocated_capacity.i.i.i.i.i, align 8, !tbaa !21, !alias.scope !155
  br label %if.end.i.i.i.i

if.end.i.i.i.i:                                   ; preds = %if.then.i.i.i.i, %cond.false.i
  %77 = phi i8* [ %call2.i.i.i.i, %if.then.i.i.i.i ], [ %38, %cond.false.i ]
  switch i64 %spec.select.i.i.i.i, label %if.end.i.i.i.i.i.i.i [
    i64 1, label %if.then.i.i7.i.i.i.i
    i64 0, label %cond.end.i
  ]

if.then.i.i7.i.i.i.i:                             ; preds = %if.end.i.i.i.i
  %78 = load i8, i8* %75, align 1, !tbaa !21
  store i8 %78, i8* %77, align 1, !tbaa !21
  br label %cond.end.i

if.end.i.i.i.i.i.i.i:                             ; preds = %if.end.i.i.i.i
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %77, i8* align 1 %75, i64 %spec.select.i.i.i.i, i1 false) #38
  br label %cond.end.i

cond.end.i:                                       ; preds = %if.end.i.i.i.i.i.i.i, %if.then.i.i7.i.i.i.i, %if.end.i.i.i.i
  %79 = load i64, i64* %__dnew.i.i.i.i, align 8, !tbaa !20, !noalias !155
  store i64 %79, i64* %_M_string_length.i.i.i.i.i.i, align 8, !tbaa !19, !alias.scope !155
  %80 = load i8*, i8** %_M_p.i.i.i.i.i, align 8, !tbaa !17, !alias.scope !155
  %arrayidx.i.i.i.i.i = getelementptr inbounds i8, i8* %80, i64 %79
  store i8 0, i8* %arrayidx.i.i.i.i.i, align 1, !tbaa !21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %39) #38, !noalias !155
  %.pre = load i64, i64* %_M_string_length.i.i.i.i.i.i, align 8, !tbaa !19, !noalias !156
  br label %_Z19filepath_to_dirnameRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.exit

_Z19filepath_to_dirnameRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.exit: ; preds = %cond.end.i, %cond.true.i
  %81 = phi i64 [ 2, %cond.true.i ], [ %.pre, %cond.end.i ]
  call void @llvm.experimental.noalias.scope.decl(metadata !156)
  %sub3.i.i.i = sub i64 4611686018427387903, %81
  %cmp.i.i.i133 = icmp ult i64 %sub3.i.i.i, 6
  br i1 %cmp.i.i.i133, label %if.then.i.i.i134, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc.exit.i

if.then.i.i.i134:                                 ; preds = %_Z19filepath_to_dirnameRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.exit
  call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.33, i64 0, i64 0)) #40
  unreachable

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc.exit.i: ; preds = %_Z19filepath_to_dirnameRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.exit
  %call2.i.i135 = call nonnull align 8 dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %ref.tmp14, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.18, i64 0, i64 0), i64 6) #38, !noalias !156
  store %union.anon* %41, %union.anon** %42, align 8, !tbaa !14, !alias.scope !156
  %_M_p.i.i26.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %call2.i.i135, i64 0, i32 0, i32 0
  %82 = load i8*, i8** %_M_p.i.i26.i.i, align 8, !tbaa !17
  %83 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %call2.i.i135, i64 0, i32 2
  %arraydecay.i.i.i.i136 = bitcast %union.anon* %83 to i8*
  %cmp.i27.i.i = icmp eq i8* %82, %arraydecay.i.i.i.i136
  br i1 %cmp.i27.i.i, label %if.then.i.i137, label %if.else.i.i

if.then.i.i137:                                   ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc.exit.i
  %_M_string_length.i25.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %call2.i.i135, i64 0, i32 1
  %84 = load i64, i64* %_M_string_length.i25.i.i, align 8, !tbaa !19
  %add.i.i = add i64 %84, 1
  %cmp.i.i2.i = icmp eq i64 %add.i.i, 0
  br i1 %cmp.i.i2.i, label %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_.exit, label %if.end.i.i.i

if.end.i.i.i:                                     ; preds = %if.then.i.i137
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %arraydecay.i.i.i, i8* nonnull align 8 %82, i64 %add.i.i, i1 false) #38
  br label %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_.exit

if.else.i.i:                                      ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc.exit.i
  store i8* %82, i8** %_M_p.i23.i.i, align 8, !tbaa !17, !alias.scope !156
  %_M_allocated_capacity.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %call2.i.i135, i64 0, i32 2, i32 0
  %85 = load i64, i64* %_M_allocated_capacity.i.i, align 8, !tbaa !21
  store i64 %85, i64* %_M_allocated_capacity.i.i.i138, align 8, !tbaa !21, !alias.scope !156
  br label %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_.exit

_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_.exit: ; preds = %if.else.i.i, %if.end.i.i.i, %if.then.i.i137
  %_M_string_length.i22.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %call2.i.i135, i64 0, i32 1
  %86 = load i64, i64* %_M_string_length.i22.i.i, align 8, !tbaa !19
  store i64 %86, i64* %_M_string_length.i.i.i, align 8, !tbaa !19, !alias.scope !156
  %87 = bitcast %"class.std::__cxx11::basic_string"* %call2.i.i135 to %union.anon**
  store %union.anon* %83, %union.anon** %87, align 8, !tbaa !17
  store i64 0, i64* %_M_string_length.i22.i.i, align 8, !tbaa !19
  store i8 0, i8* %arraydecay.i.i.i.i136, align 8, !tbaa !21
  %88 = load i8*, i8** %_M_p.i.i.i.i.i, align 8, !tbaa !17
  %cmp.i.i.i141 = icmp eq i8* %88, %38
  br i1 %cmp.i.i.i141, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit143, label %if.then.i.i142

if.then.i.i142:                                   ; preds = %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_.exit
  call void @_ZdlPv(i8* %88) #41
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit143

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit143: ; preds = %if.then.i.i142, %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_.exit
  %89 = load i8*, i8** %_M_p.i16.i.i.i, align 8, !tbaa !17
  %cmp.i.i.i146 = icmp eq i8* %89, %arraydecay.i.i.i.i145
  br i1 %cmp.i.i.i146, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit148, label %if.then.i.i147

if.then.i.i147:                                   ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit143
  call void @_ZdlPv(i8* %89) #41
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit148

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit148: ; preds = %if.then.i.i147, %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit143
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %35) #38
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %34) #38
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %44) #38
  call void @_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_(%"class.std::__cxx11::basic_string"* nonnull sret(%"class.std::__cxx11::basic_string") align 8 %ref.tmp16, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.17, i64 0, i64 0), %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %path)
  call void @_Z18read_hand_instanceRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_PSt6vectorIdSaIdEEP19HandDataLightMatrixSA_(%"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %model_dir, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %ref.tmp16, %"class.std::vector.19"* nonnull %theta, %class.HandDataLightMatrix* nonnull %data, %"class.std::vector.19"* null)
  %90 = load i8*, i8** %_M_p.i.i.i.i149, align 8, !tbaa !17
  %cmp.i.i.i151 = icmp eq i8* %90, %arraydecay.i.i.i.i150
  br i1 %cmp.i.i.i151, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit153, label %if.then.i.i152

if.then.i.i152:                                   ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit148
  call void @_ZdlPv(i8* %90) #41
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit153

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit153: ; preds = %if.then.i.i152, %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit148
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %44) #38
  %call17 = call %struct.HandObjectiveData* @_Z30convert_to_hand_objective_dataRK9HandInput(%struct.HandInput* nonnull align 8 dereferenceable(272) %input)
  %91 = load i32*, i32** %_M_finish.i154, align 8, !tbaa !61
  %92 = load i32*, i32** %_M_start.i155, align 8, !tbaa !64
  %sub.ptr.lhs.cast.i = ptrtoint i32* %91 to i64
  %sub.ptr.rhs.cast.i = ptrtoint i32* %92 to i64
  %sub.ptr.sub.i = sub i64 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i
  %93 = lshr exact i64 %sub.ptr.sub.i, 2
  %94 = trunc i64 %93 to i32
  %conv = mul i32 %94, 3
  %95 = load double*, double** %_M_finish.i156, align 8, !tbaa !119
  %96 = load double*, double** %_M_start.i157, align 8, !tbaa !121
  %sub.ptr.lhs.cast.i158 = ptrtoint double* %95 to i64
  %sub.ptr.rhs.cast.i159 = ptrtoint double* %96 to i64
  %sub.ptr.sub.i160 = sub i64 %sub.ptr.lhs.cast.i158, %sub.ptr.rhs.cast.i159
  %sub.ptr.div.i161 = ashr exact i64 %sub.ptr.sub.i160, 3
  %conv22 = trunc i64 %sub.ptr.div.i161 to i32
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %46) #38
  %conv23 = sext i32 %conv to i64
  %cmp.i.i162 = icmp slt i32 %conv, 0
  br i1 %cmp.i.i162, label %if.then.i.i163, label %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i

if.then.i.i163:                                   ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit153
  call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.46, i64 0, i64 0)) #40
  unreachable

_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i: ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit153
  %cmp.not.i.i.i.i164 = icmp eq i32 %conv, 0
  br i1 %cmp.not.i.i.i.i164, label %_ZNSt12_Vector_baseIdSaIdEEC2EmRKS0_.exit.i.thread, label %if.then.i.i.i.i.i

_ZNSt12_Vector_baseIdSaIdEEC2EmRKS0_.exit.i.thread: ; preds = %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i
  store double* null, double** %_M_start.i.i.i379, align 8, !tbaa !121
  %add.ptr.i.i.i380 = getelementptr inbounds double, double* null, i64 %conv23
  store double* %add.ptr.i.i.i380, double** %_M_end_of_storage.i.i.i, align 8, !tbaa !159
  br label %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit

if.then.i.i.i.i.i:                                ; preds = %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i
  %mul.i.i.i.i.i.i = shl nuw nsw i64 %conv23, 3
  %call5.i.i.i.i.i.i = call noalias nonnull i8* @_Znwm(i64 %mul.i.i.i.i.i.i) #43
  %97 = bitcast i8* %call5.i.i.i.i.i.i to double*
  store i8* %call5.i.i.i.i.i.i, i8** %47, align 8, !tbaa !121
  %add.ptr.i.i.i = getelementptr inbounds double, double* %97, i64 %conv23
  store double* %add.ptr.i.i.i, double** %_M_end_of_storage.i.i.i, align 8, !tbaa !159
  store double 0.000000e+00, double* %97, align 8, !tbaa !75
  %incdec.ptr.i.i.i.i.i165 = getelementptr inbounds i8, i8* %call5.i.i.i.i.i.i, i64 8
  %98 = bitcast i8* %incdec.ptr.i.i.i.i.i165 to double*
  %cmp.i.i.i.i.i.i.i = icmp eq i32 %conv, 1
  br i1 %cmp.i.i.i.i.i.i.i, label %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit, label %if.end.i.i.i.i.i.i.i166

if.end.i.i.i.i.i.i.i166:                          ; preds = %if.then.i.i.i.i.i
  %99 = add nsw i64 %mul.i.i.i.i.i.i, -8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %incdec.ptr.i.i.i.i.i165, i8 0, i64 %99, i1 false) #38
  br label %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit

_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit:               ; preds = %if.end.i.i.i.i.i.i.i166, %if.then.i.i.i.i.i, %_ZNSt12_Vector_baseIdSaIdEEC2EmRKS0_.exit.i.thread
  %100 = phi double* [ %97, %if.then.i.i.i.i.i ], [ %97, %if.end.i.i.i.i.i.i.i166 ], [ null, %_ZNSt12_Vector_baseIdSaIdEEC2EmRKS0_.exit.i.thread ]
  %__first.addr.0.i.i.i.i.i = phi double* [ %98, %if.then.i.i.i.i.i ], [ %add.ptr.i.i.i, %if.end.i.i.i.i.i.i.i166 ], [ null, %_ZNSt12_Vector_baseIdSaIdEEC2EmRKS0_.exit.i.thread ]
  store double* %__first.addr.0.i.i.i.i.i, double** %_M_finish.i.i.i, align 8, !tbaa !119
  store i32 %conv22, i32* %jacobian_ncols, align 8, !tbaa !160
  store i32 %conv, i32* %jacobian_nrows, align 4, !tbaa !163
  %mul25 = mul nsw i32 %conv, %conv22
  %conv26 = sext i32 %mul25 to i64
  %cmp.i.i167 = icmp slt i32 %mul25, 0
  br i1 %cmp.i.i167, label %if.then.i.i168, label %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i170

if.then.i.i168:                                   ; preds = %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit
  call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.46, i64 0, i64 0)) #40
  unreachable

_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i170: ; preds = %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit
  %cmp.not.i.i.i.i169 = icmp eq i32 %mul25, 0
  br i1 %cmp.not.i.i.i.i169, label %_ZNSt12_Vector_baseIdSaIdEEC2EmRKS0_.exit.i178.thread, label %if.then.i.i.i.i.i181

_ZNSt12_Vector_baseIdSaIdEEC2EmRKS0_.exit.i178.thread: ; preds = %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i170
  store double* null, double** %_M_start.i.i.i175383, align 8, !tbaa !121
  %add.ptr.i.i.i176384 = getelementptr inbounds double, double* null, i64 %conv26
  store double* %add.ptr.i.i.i176384, double** %_M_end_of_storage.i.i.i177, align 8, !tbaa !159
  br label %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit186

if.then.i.i.i.i.i181:                             ; preds = %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i170
  %mul.i.i.i.i.i.i171 = shl nuw nsw i64 %conv26, 3
  %call5.i.i.i.i.i.i172 = call noalias nonnull i8* @_Znwm(i64 %mul.i.i.i.i.i.i171) #43
  %101 = bitcast i8* %call5.i.i.i.i.i.i172 to double*
  store i8* %call5.i.i.i.i.i.i172, i8** %48, align 8, !tbaa !121
  %add.ptr.i.i.i176 = getelementptr inbounds double, double* %101, i64 %conv26
  store double* %add.ptr.i.i.i176, double** %_M_end_of_storage.i.i.i177, align 8, !tbaa !159
  store double 0.000000e+00, double* %101, align 8, !tbaa !75
  %incdec.ptr.i.i.i.i.i179 = getelementptr inbounds i8, i8* %call5.i.i.i.i.i.i172, i64 8
  %102 = bitcast i8* %incdec.ptr.i.i.i.i.i179 to double*
  %cmp.i.i.i.i.i.i.i180 = icmp eq i32 %mul25, 1
  br i1 %cmp.i.i.i.i.i.i.i180, label %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit186, label %if.end.i.i.i.i.i.i.i183

if.end.i.i.i.i.i.i.i183:                          ; preds = %if.then.i.i.i.i.i181
  %103 = add nsw i64 %mul.i.i.i.i.i.i171, -8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %incdec.ptr.i.i.i.i.i179, i8 0, i64 %103, i1 false) #38
  br label %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit186

_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit186:            ; preds = %if.end.i.i.i.i.i.i.i183, %if.then.i.i.i.i.i181, %_ZNSt12_Vector_baseIdSaIdEEC2EmRKS0_.exit.i178.thread
  %cond.i.i.i.i174386 = phi double* [ %101, %if.then.i.i.i.i.i181 ], [ %101, %if.end.i.i.i.i.i.i.i183 ], [ null, %_ZNSt12_Vector_baseIdSaIdEEC2EmRKS0_.exit.i178.thread ]
  %__first.addr.0.i.i.i.i.i184 = phi double* [ %102, %if.then.i.i.i.i.i181 ], [ %add.ptr.i.i.i176, %if.end.i.i.i.i.i.i.i183 ], [ null, %_ZNSt12_Vector_baseIdSaIdEEC2EmRKS0_.exit.i178.thread ]
  store double* %__first.addr.0.i.i.i.i.i184, double** %_M_finish.i.i.i185, align 8, !tbaa !119
  %cmp.i.i193 = icmp ugt i64 %sub.ptr.div.i161, 1152921504606846975
  br i1 %cmp.i.i193, label %if.then.i.i194, label %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i196

if.then.i.i194:                                   ; preds = %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit186
  call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.46, i64 0, i64 0)) #40
  unreachable

_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i196: ; preds = %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit186
  %cmp.not.i.i.i.i195 = icmp eq i64 %sub.ptr.sub.i160, 0
  br i1 %cmp.not.i.i.i.i195, label %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit211, label %if.then.i.i.i.i.i206

if.then.i.i.i.i.i206:                             ; preds = %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i196
  %call5.i.i.i.i.i.i197 = call noalias nonnull i8* @_Znwm(i64 %sub.ptr.sub.i160) #43
  %104 = bitcast i8* %call5.i.i.i.i.i.i197 to double*
  store double 0.000000e+00, double* %104, align 8, !tbaa !75
  %cmp.i.i.i.i.i.i.i205 = icmp eq i64 %sub.ptr.sub.i160, 8
  br i1 %cmp.i.i.i.i.i.i.i205, label %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit211, label %if.end.i.i.i.i.i.i.i208

if.end.i.i.i.i.i.i.i208:                          ; preds = %if.then.i.i.i.i.i206
  %incdec.ptr.i.i.i.i.i204 = getelementptr inbounds i8, i8* %call5.i.i.i.i.i.i197, i64 8
  %105 = add nsw i64 %sub.ptr.sub.i160, -8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %incdec.ptr.i.i.i.i.i204, i8 0, i64 %105, i1 false) #38
  br label %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit211

_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit211:            ; preds = %if.end.i.i.i.i.i.i.i208, %if.then.i.i.i.i.i206, %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i196
  %cond.i.i.i.i199389 = phi double* [ %104, %if.then.i.i.i.i.i206 ], [ %104, %if.end.i.i.i.i.i.i.i208 ], [ null, %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i196 ]
  %106 = load double*, double** %_M_finish.i212, align 8, !tbaa !119
  %107 = load double*, double** %_M_start.i213, align 8, !tbaa !121
  %sub.ptr.lhs.cast.i214 = ptrtoint double* %106 to i64
  %sub.ptr.rhs.cast.i215 = ptrtoint double* %107 to i64
  %sub.ptr.sub.i216 = sub i64 %sub.ptr.lhs.cast.i214, %sub.ptr.rhs.cast.i215
  %sub.ptr.div.i217 = ashr exact i64 %sub.ptr.sub.i216, 3
  %cmp.i.i218 = icmp ugt i64 %sub.ptr.div.i217, 1152921504606846975
  br i1 %cmp.i.i218, label %if.then.i.i219, label %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i221

if.then.i.i219:                                   ; preds = %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit211
  call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.46, i64 0, i64 0)) #40
  unreachable

_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i221: ; preds = %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit211
  %cmp.not.i.i.i.i220 = icmp eq i64 %sub.ptr.sub.i216, 0
  br i1 %cmp.not.i.i.i.i220, label %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i240, label %if.then.i.i.i.i.i231

if.then.i.i.i.i.i231:                             ; preds = %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i221
  %call5.i.i.i.i.i.i222 = call noalias nonnull i8* @_Znwm(i64 %sub.ptr.sub.i216) #43
  %108 = bitcast i8* %call5.i.i.i.i.i.i222 to double*
  store double 0.000000e+00, double* %108, align 8, !tbaa !75
  %cmp.i.i.i.i.i.i.i230 = icmp eq i64 %sub.ptr.sub.i216, 8
  br i1 %cmp.i.i.i.i.i.i.i230, label %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i240, label %if.end.i.i.i.i.i.i.i233

if.end.i.i.i.i.i.i.i233:                          ; preds = %if.then.i.i.i.i.i231
  %incdec.ptr.i.i.i.i.i229 = getelementptr inbounds i8, i8* %call5.i.i.i.i.i.i222, i64 8
  %109 = add nsw i64 %sub.ptr.sub.i216, -8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %incdec.ptr.i.i.i.i.i229, i8 0, i64 %109, i1 false) #38
  br label %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i240

_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i240: ; preds = %if.end.i.i.i.i.i.i.i233, %if.then.i.i.i.i.i231, %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i221
  %cond.i.i.i.i224392 = phi double* [ %108, %if.then.i.i.i.i.i231 ], [ %108, %if.end.i.i.i.i.i.i.i233 ], [ null, %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i221 ]
  br i1 %cmp.not.i.i.i.i164, label %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit256, label %if.then.i.i.i.i.i251

if.then.i.i.i.i.i251:                             ; preds = %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i240
  %mul.i.i.i.i.i.i241 = shl nuw nsw i64 %conv23, 3
  %call5.i.i.i.i.i.i242 = call noalias nonnull i8* @_Znwm(i64 %mul.i.i.i.i.i.i241) #43
  %110 = bitcast i8* %call5.i.i.i.i.i.i242 to double*
  store double 0.000000e+00, double* %110, align 8, !tbaa !75
  %cmp.i.i.i.i.i.i.i250 = icmp eq i32 %conv, 1
  br i1 %cmp.i.i.i.i.i.i.i250, label %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit256, label %if.end.i.i.i.i.i.i.i253

if.end.i.i.i.i.i.i.i253:                          ; preds = %if.then.i.i.i.i.i251
  %incdec.ptr.i.i.i.i.i249 = getelementptr inbounds i8, i8* %call5.i.i.i.i.i.i242, i64 8
  %111 = add nsw i64 %mul.i.i.i.i.i.i241, -8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %incdec.ptr.i.i.i.i.i249, i8 0, i64 %111, i1 false) #38
  br label %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit256

_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit256:            ; preds = %if.end.i.i.i.i.i.i.i253, %if.then.i.i.i.i.i251, %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i240
  %cond.i.i.i.i244395 = phi double* [ %110, %if.then.i.i.i.i.i251 ], [ %110, %if.end.i.i.i.i.i.i.i253 ], [ null, %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i240 ]
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %49) #38
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %50) #38
  %call35 = call i32 @gettimeofday(%struct.timeval* nonnull %start, i8* null) #38
  call void @_Z25calculate_jacobian_simpleIXadL_Z15dhand_objectiveEEEvP17HandObjectiveDataR9HandInputR10HandOutputRSt6vectorIdSaIdEES9_S9_(%struct.HandObjectiveData* nonnull %call17, %struct.HandInput* nonnull align 8 dereferenceable(272) %input, %struct.HandOutput* nonnull align 8 dereferenceable(56) %result, %"class.std::vector.19"* nonnull align 8 dereferenceable(24) undef, %"class.std::vector.19"* nonnull align 8 dereferenceable(24) undef, %"class.std::vector.19"* nonnull align 8 dereferenceable(24) undef) #38
  %call36 = call i32 @gettimeofday(%struct.timeval* nonnull %end, i8* null) #38
  %112 = load i64, i64* %tv_sec.i, align 8, !tbaa !44
  %113 = load i64, i64* %tv_sec1.i, align 8, !tbaa !44
  %sub.i = sub nsw i64 %112, %113
  %conv.i = sitofp i64 %sub.i to double
  %114 = load i64, i64* %tv_usec.i, align 8, !tbaa !46
  %115 = load i64, i64* %tv_usec2.i, align 8, !tbaa !46
  %sub3.i = sub nsw i64 %114, %115
  %conv4.i = sitofp i64 %sub3.i to double
  %mul.i = fmul fast double %conv4.i, 0x3EB0C6F7A0B5ED8D
  %add.i257 = fadd fast double %mul.i, %conv.i
  %conv5.i = fptrunc double %add.i257 to float
  %conv38 = fpext float %conv5.i to double
  %call39 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([23 x i8], [23 x i8]* @.str.19, i64 0, i64 0), double %conv38)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %51) #38
  store i8 0, i8* %51, align 8, !tbaa !145
  store %"class.std::map"* null, %"class.std::map"** %object13.i.i267, align 8, !tbaa !21
  call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %enzyme, i1 zeroext true) #38
  call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %enzyme, i1 zeroext true) #38
  store i8 0, i8* %m_type.i268, align 8, !tbaa !145
  store i64 0, i64* %52, align 8
  call void @_ZN8nlohmann12json_v3_11_16detail20external_constructorILNS1_7value_tE3EE9constructINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES8_IhSaIhEEEEA16_cLi0EEEvRT_RKT0_(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull align 8 dereferenceable(16) %agg.tmp40, [16 x i8]* nonnull align 1 dereferenceable(16) @.str.20) #38
  call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %agg.tmp40, i1 zeroext true) #38
  %call41 = call nonnull align 8 dereferenceable(16) %"class.nlohmann::json_v3_11_1::basic_json"* @_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEEixIKcEERSD_PT_(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %enzyme, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.16, i64 0, i64 0))
  call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %agg.tmp40, i1 zeroext true) #38
  %m_type.i270 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %call41, i64 0, i32 0
  %116 = load i8, i8* %m_type.i270, align 8, !tbaa !148
  %117 = load i8, i8* %m_type.i268, align 8, !tbaa !148
  store i8 %117, i8* %m_type.i270, align 8, !tbaa !148
  store i8 %116, i8* %m_type.i268, align 8, !tbaa !148
  %m_value.i272 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %call41, i64 0, i32 1
  %118 = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value.i272 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = load i64, i64* %52, align 8
  store i64 %120, i64* %118, align 8
  store i64 %119, i64* %52, align 8
  call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %call41, i1 zeroext true) #38
  call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %agg.tmp40, i1 zeroext false) #38
  %121 = load i8, i8* %m_type.i268, align 8, !tbaa !145
  call void @_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE10json_value7destroyENS0_6detail7value_tE(%"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* nonnull dereferenceable(8) %m_value.i269, i8 zeroext %121) #38
  store i8 7, i8* %m_type.i287, align 8, !tbaa !145
  store double %conv38, double* %54, align 8
  call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %agg.tmp43, i1 zeroext true) #38
  call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %agg.tmp43, i1 zeroext true) #38
  %call46 = call nonnull align 8 dereferenceable(16) %"class.nlohmann::json_v3_11_1::basic_json"* @_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEEixIKcEERSD_PT_(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %enzyme, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21, i64 0, i64 0))
  call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %agg.tmp43, i1 zeroext true) #38
  %m_type.i289 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %call46, i64 0, i32 0
  %122 = load i8, i8* %m_type.i289, align 8, !tbaa !148
  %123 = load i8, i8* %m_type.i287, align 8, !tbaa !148
  store i8 %123, i8* %m_type.i289, align 8, !tbaa !148
  store i8 %122, i8* %m_type.i287, align 8, !tbaa !148
  %m_value.i291 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %call46, i64 0, i32 1
  %124 = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value.i291 to i64*
  %125 = load i64, i64* %124, align 8
  %126 = load i64, i64* %53, align 8
  store i64 %126, i64* %124, align 8
  store i64 %125, i64* %53, align 8
  call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %call46, i1 zeroext true) #38
  call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %agg.tmp43, i1 zeroext false) #38
  %127 = load i8, i8* %m_type.i287, align 8, !tbaa !145
  call void @_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE10json_value7destroyENS0_6detail7value_tE(%"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* nonnull dereferenceable(8) %m_value.i288, i8 zeroext %127) #38
  br label %for.body50

for.cond.cleanup49:                               ; preds = %for.body50
  %call60 = call nonnull align 8 dereferenceable(16) %"class.nlohmann::json_v3_11_1::basic_json"* @_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEEixIKcEERSD_PT_(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %test_suite, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.24, i64 0, i64 0))
  call void @_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE9push_backERKSD_(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %call60, %"class.nlohmann::json_v3_11_1::basic_json"* nonnull align 8 dereferenceable(16) %enzyme)
  %putchar = call i32 @putchar(i32 10)
  call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %enzyme, i1 zeroext false) #38
  %128 = load i8, i8* %51, align 8, !tbaa !145
  call void @_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE10json_value7destroyENS0_6detail7value_tE(%"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* nonnull dereferenceable(8) %m_value.i295, i8 zeroext %128) #38
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %51) #38
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %50) #38
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %49) #38
  %tobool.not.i.i.i297 = icmp eq double* %cond.i.i.i.i244395, null
  br i1 %tobool.not.i.i.i297, label %_ZNSt6vectorIdSaIdEED2Ev.exit, label %if.then.i.i.i298

if.then.i.i.i298:                                 ; preds = %for.cond.cleanup49
  %129 = bitcast double* %cond.i.i.i.i244395 to i8*
  call void @_ZdlPv(i8* %129) #41
  br label %_ZNSt6vectorIdSaIdEED2Ev.exit

_ZNSt6vectorIdSaIdEED2Ev.exit:                    ; preds = %if.then.i.i.i298, %for.cond.cleanup49
  %tobool.not.i.i.i300 = icmp eq double* %cond.i.i.i.i224392, null
  br i1 %tobool.not.i.i.i300, label %_ZNSt6vectorIdSaIdEED2Ev.exit302, label %if.then.i.i.i301

if.then.i.i.i301:                                 ; preds = %_ZNSt6vectorIdSaIdEED2Ev.exit
  %130 = bitcast double* %cond.i.i.i.i224392 to i8*
  call void @_ZdlPv(i8* %130) #41
  br label %_ZNSt6vectorIdSaIdEED2Ev.exit302

_ZNSt6vectorIdSaIdEED2Ev.exit302:                 ; preds = %if.then.i.i.i301, %_ZNSt6vectorIdSaIdEED2Ev.exit
  %tobool.not.i.i.i304 = icmp eq double* %cond.i.i.i.i199389, null
  br i1 %tobool.not.i.i.i304, label %_ZNSt6vectorIdSaIdEED2Ev.exit.i, label %if.then.i.i.i305

if.then.i.i.i305:                                 ; preds = %_ZNSt6vectorIdSaIdEED2Ev.exit302
  %131 = bitcast double* %cond.i.i.i.i199389 to i8*
  call void @_ZdlPv(i8* %131) #41
  br label %_ZNSt6vectorIdSaIdEED2Ev.exit.i

_ZNSt6vectorIdSaIdEED2Ev.exit.i:                  ; preds = %if.then.i.i.i305, %_ZNSt6vectorIdSaIdEED2Ev.exit302
  %132 = bitcast double* %cond.i.i.i.i174386 to i8*
  call void @_ZdlPv(i8* %132) #41
  %tobool.not.i.i.i3.i = icmp eq double* %100, null
  br i1 %tobool.not.i.i.i3.i, label %_ZN10HandOutputD2Ev.exit, label %if.then.i.i.i4.i

if.then.i.i.i4.i:                                 ; preds = %_ZNSt6vectorIdSaIdEED2Ev.exit.i
  %133 = bitcast double* %100 to i8*
  call void @_ZdlPv(i8* %133) #41
  br label %_ZN10HandOutputD2Ev.exit

_ZN10HandOutputD2Ev.exit:                         ; preds = %if.then.i.i.i4.i, %_ZNSt6vectorIdSaIdEED2Ev.exit.i
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %46) #38
  %134 = load i8*, i8** %_M_p.i23.i.i, align 8, !tbaa !17
  %cmp.i.i.i311 = icmp eq i8* %134, %arraydecay.i.i.i
  br i1 %cmp.i.i.i311, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit313, label %if.then.i.i312

if.then.i.i312:                                   ; preds = %_ZN10HandOutputD2Ev.exit
  call void @_ZdlPv(i8* %134) #41
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit313

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit313: ; preds = %if.then.i.i312, %_ZN10HandOutputD2Ev.exit
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %33) #38
  %135 = load double*, double** %_M_start.i213, align 8, !tbaa !121
  %tobool.not.i.i.i.i315 = icmp eq double* %135, null
  br i1 %tobool.not.i.i.i.i315, label %_ZNSt6vectorIdSaIdEED2Ev.exit.i319, label %if.then.i.i.i.i316

if.then.i.i.i.i316:                               ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit313
  %136 = bitcast double* %135 to i8*
  call void @_ZdlPv(i8* %136) #41
  br label %_ZNSt6vectorIdSaIdEED2Ev.exit.i319

_ZNSt6vectorIdSaIdEED2Ev.exit.i319:               ; preds = %if.then.i.i.i.i316, %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit313
  %137 = load i8, i8* %is_data_owner_.i.i.i, align 8, !tbaa !68, !range !90
  %tobool.not.i.i.i318 = icmp eq i8 %137, 0
  %138 = load double*, double** %data_.i.i.i, align 8
  %cmp.not.i.i.i = icmp eq double* %138, null
  %or.cond = or i1 %tobool.not.i.i.i318, %cmp.not.i.i.i
  br i1 %or.cond, label %_ZN11LightMatrixIdED2Ev.exit.i.i, label %delete.notnull.i.i.i

delete.notnull.i.i.i:                             ; preds = %_ZNSt6vectorIdSaIdEED2Ev.exit.i319
  %139 = bitcast double* %138 to i8*
  call void @_ZdaPv(i8* %139) #41
  br label %_ZN11LightMatrixIdED2Ev.exit.i.i

_ZN11LightMatrixIdED2Ev.exit.i.i:                 ; preds = %delete.notnull.i.i.i, %_ZNSt6vectorIdSaIdEED2Ev.exit.i319
  %140 = load i32*, i32** %_M_start.i.i.i.i, align 8, !tbaa !64
  %tobool.not.i.i.i.i.i = icmp eq i32* %140, null
  br i1 %tobool.not.i.i.i.i.i, label %_ZN19HandDataLightMatrixD2Ev.exit.i, label %if.then.i.i.i.i.i321

if.then.i.i.i.i.i321:                             ; preds = %_ZN11LightMatrixIdED2Ev.exit.i.i
  %141 = bitcast i32* %140 to i8*
  call void @_ZdlPv(i8* %141) #41
  br label %_ZN19HandDataLightMatrixD2Ev.exit.i

_ZN19HandDataLightMatrixD2Ev.exit.i:              ; preds = %if.then.i.i.i.i.i321, %_ZN11LightMatrixIdED2Ev.exit.i.i
  call void @_ZN20HandModelLightMatrixD2Ev(%class.HandModelLightMatrix* nonnull dereferenceable(169) %model.i.i) #38
  %142 = load double*, double** %_M_start.i157, align 8, !tbaa !121
  %tobool.not.i.i.i3.i323 = icmp eq double* %142, null
  br i1 %tobool.not.i.i.i3.i323, label %_ZN9HandInputD2Ev.exit, label %if.then.i.i.i4.i324

if.then.i.i.i4.i324:                              ; preds = %_ZN19HandDataLightMatrixD2Ev.exit.i
  %143 = bitcast double* %142 to i8*
  call void @_ZdlPv(i8* %143) #41
  br label %_ZN9HandInputD2Ev.exit

_ZN9HandInputD2Ev.exit:                           ; preds = %if.then.i.i.i4.i324, %_ZN19HandDataLightMatrixD2Ev.exit.i
  call void @llvm.lifetime.end.p0i8(i64 272, i8* nonnull %29) #38
  store i8 0, i8* %m_type.i325, align 8, !tbaa !145
  store i64 0, i64* %57, align 8
  call void @_ZN8nlohmann12json_v3_11_16detail20external_constructorILNS1_7value_tE3EE9constructINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES8_IhSaIhEEEEA8_cLi0EEEvRT_RKT0_(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull align 8 dereferenceable(16) %agg.tmp62, [8 x i8]* nonnull align 1 dereferenceable(8) @.str.26) #38
  call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %agg.tmp62, i1 zeroext true) #38
  %call63 = call nonnull align 8 dereferenceable(16) %"class.nlohmann::json_v3_11_1::basic_json"* @_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEEixIKcEERSD_PT_(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %test_suite, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.27, i64 0, i64 0))
  call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %agg.tmp62, i1 zeroext true) #38
  %m_type.i327 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %call63, i64 0, i32 0
  %144 = load i8, i8* %m_type.i327, align 8, !tbaa !148
  %145 = load i8, i8* %m_type.i325, align 8, !tbaa !148
  store i8 %145, i8* %m_type.i327, align 8, !tbaa !148
  store i8 %144, i8* %m_type.i325, align 8, !tbaa !148
  %m_value.i329 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %call63, i64 0, i32 1
  %146 = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value.i329 to i64*
  %147 = load i64, i64* %146, align 8
  %148 = load i64, i64* %57, align 8
  store i64 %148, i64* %146, align 8
  store i64 %147, i64* %57, align 8
  call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %call63, i1 zeroext true) #38
  call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %agg.tmp62, i1 zeroext false) #38
  %149 = load i8, i8* %m_type.i325, align 8, !tbaa !145
  call void @_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE10json_value7destroyENS0_6detail7value_tE(%"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* nonnull dereferenceable(8) %m_value.i326, i8 zeroext %149) #38
  store i8 0, i8* %m_type.i333, align 8, !tbaa !145
  store i64 0, i64* %58, align 8
  call void @_ZN8nlohmann12json_v3_11_16detail20external_constructorILNS1_7value_tE3EE9constructINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES8_IhSaIhEEEEA12_cLi0EEEvRT_RKT0_(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull align 8 dereferenceable(16) %agg.tmp65, [12 x i8]* nonnull align 1 dereferenceable(12) @.str.28) #38
  call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %agg.tmp65, i1 zeroext true) #38
  %call66 = call nonnull align 8 dereferenceable(16) %"class.nlohmann::json_v3_11_1::basic_json"* @_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEEixIKcEERSD_PT_(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %test_suite, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.29, i64 0, i64 0))
  call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %agg.tmp65, i1 zeroext true) #38
  %m_type.i335 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %call66, i64 0, i32 0
  %150 = load i8, i8* %m_type.i335, align 8, !tbaa !148
  %151 = load i8, i8* %m_type.i333, align 8, !tbaa !148
  store i8 %151, i8* %m_type.i335, align 8, !tbaa !148
  store i8 %150, i8* %m_type.i333, align 8, !tbaa !148
  %m_value.i337 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %call66, i64 0, i32 1
  %152 = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value.i337 to i64*
  %153 = load i64, i64* %152, align 8
  %154 = load i64, i64* %58, align 8
  store i64 %154, i64* %152, align 8
  store i64 %153, i64* %58, align 8
  call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %call66, i1 zeroext true) #38
  call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %agg.tmp65, i1 zeroext false) #38
  %155 = load i8, i8* %m_type.i333, align 8, !tbaa !145
  call void @_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE10json_value7destroyENS0_6detail7value_tE(%"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* nonnull dereferenceable(8) %m_value.i334, i8 zeroext %155) #38
  store i8 5, i8* %m_type.i341, align 8, !tbaa !145
  store i64 1, i64* %59, align 8
  call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %agg.tmp68, i1 zeroext true) #38
  call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %agg.tmp68, i1 zeroext true) #38
  %call70 = call nonnull align 8 dereferenceable(16) %"class.nlohmann::json_v3_11_1::basic_json"* @_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEEixIKcEERSD_PT_(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %test_suite, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.30, i64 0, i64 0))
  call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %agg.tmp68, i1 zeroext true) #38
  %m_type.i344 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %call70, i64 0, i32 0
  %156 = load i8, i8* %m_type.i344, align 8, !tbaa !148
  %157 = load i8, i8* %m_type.i341, align 8, !tbaa !148
  store i8 %157, i8* %m_type.i344, align 8, !tbaa !148
  store i8 %156, i8* %m_type.i341, align 8, !tbaa !148
  %m_value.i346 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %call70, i64 0, i32 1
  %158 = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value.i346 to i64*
  %159 = load i64, i64* %158, align 8
  %160 = load i64, i64* %59, align 8
  store i64 %160, i64* %158, align 8
  store i64 %159, i64* %59, align 8
  call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %call70, i1 zeroext true) #38
  call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %agg.tmp68, i1 zeroext false) #38
  %161 = load i8, i8* %m_type.i341, align 8, !tbaa !145
  call void @_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE10json_value7destroyENS0_6detail7value_tE(%"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* nonnull dereferenceable(8) %m_value.i342, i8 zeroext %161) #38
  call void @_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE9push_backERKSD_(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %test_results, %"class.nlohmann::json_v3_11_1::basic_json"* nonnull align 8 dereferenceable(16) %test_suite)
  call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %test_suite, i1 zeroext false) #38
  %162 = load i8, i8* %27, align 8, !tbaa !145
  call void @_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE10json_value7destroyENS0_6detail7value_tE(%"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* nonnull dereferenceable(8) %m_value.i350, i8 zeroext %162) #38
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %27) #38
  %163 = load i8*, i8** %_M_p.i.i.i112, align 8, !tbaa !17
  %cmp.i.i.i263 = icmp eq i8* %163, %26
  br i1 %cmp.i.i.i263, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit265, label %if.then.i.i264

if.then.i.i264:                                   ; preds = %_ZN9HandInputD2Ev.exit
  call void @_ZdlPv(i8* %163) #41
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit265

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit265: ; preds = %if.then.i.i264, %_ZN9HandInputD2Ev.exit
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %22) #38
  %incdec.ptr.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %6, i64 1
  %164 = bitcast %"class.std::basic_ofstream"* %jsonfile to %"class.std::basic_ostream"*
  %165 = bitcast %"class.std::basic_ofstream"* %jsonfile to i8**
  %vtable.i = load i8*, i8** %165, align 8, !tbaa !50
  %vbase.offset.ptr.i = getelementptr i8, i8* %vtable.i, i64 -24
  %166 = bitcast i8* %vbase.offset.ptr.i to i64*
  %vbase.offset.i = load i64, i64* %166, align 8
  %add.ptr.i99 = getelementptr inbounds i8, i8* %20, i64 %vbase.offset.i
  %_M_width.i.i = getelementptr inbounds i8, i8* %add.ptr.i99, i64 16
  %167 = bitcast i8* %_M_width.i.i to i64*
  store i64 4, i64* %167, align 8, !tbaa !164
  %call80 = call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZN8nlohmann12json_v3_11_1lsERSoRKNS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES4_IhSaIhEEEE(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) %164, %"class.nlohmann::json_v3_11_1::basic_json"* nonnull align 8 dereferenceable(16) %test_results)
  call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %test_results, i1 zeroext false) #38
  %m_value.i102 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %test_results, i64 0, i32 1
  %168 = load i8, i8* %21, align 8, !tbaa !145
  call void @_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE10json_value7destroyENS0_6detail7value_tE(%"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* nonnull dereferenceable(8) %m_value.i102, i8 zeroext %168) #38
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %21) #38
  %169 = load i32 (...)**, i32 (...)*** bitcast ([4 x i8*]* @_ZTTSt14basic_ofstreamIcSt11char_traitsIcEE to i32 (...)***), align 8
  %170 = getelementptr inbounds %"class.std::basic_ofstream", %"class.std::basic_ofstream"* %jsonfile, i64 0, i32 0, i32 0
  store i32 (...)** %169, i32 (...)*** %170, align 8, !tbaa !50
  %171 = load i32 (...)**, i32 (...)*** bitcast (i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTSt14basic_ofstreamIcSt11char_traitsIcEE, i64 0, i64 3) to i32 (...)***), align 8
  %vbase.offset.ptr3.i.i = getelementptr i32 (...)*, i32 (...)** %169, i64 -3
  %172 = bitcast i32 (...)** %vbase.offset.ptr3.i.i to i64*
  %vbase.offset.i.i = load i64, i64* %172, align 8
  %add.ptr.i.i104 = getelementptr inbounds i8, i8* %20, i64 %vbase.offset.i.i
  %173 = bitcast i8* %add.ptr.i.i104 to i32 (...)***
  store i32 (...)** %171, i32 (...)*** %173, align 8, !tbaa !50
  %_M_filebuf.i.i = getelementptr inbounds %"class.std::basic_ofstream", %"class.std::basic_ofstream"* %jsonfile, i64 0, i32 1
  %174 = getelementptr inbounds %"class.std::basic_filebuf", %"class.std::basic_filebuf"* %_M_filebuf.i.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVSt13basic_filebufIcSt11char_traitsIcEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %174, align 8, !tbaa !50
  %call.i.i.i = call %"class.std::basic_filebuf"* @_ZNSt13basic_filebufIcSt11char_traitsIcEE5closeEv(%"class.std::basic_filebuf"* nonnull dereferenceable(240) %_M_filebuf.i.i) #38
  %_M_file.i.i.i = getelementptr inbounds %"class.std::basic_ofstream", %"class.std::basic_ofstream"* %jsonfile, i64 0, i32 1, i32 2
  call void @_ZNSt12__basic_fileIcED1Ev(%"class.std::__basic_file"* nonnull dereferenceable(9) %_M_file.i.i.i) #38
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVSt15basic_streambufIcSt11char_traitsIcEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %174, align 8, !tbaa !50
  %_M_buf_locale.i.i.i.i = getelementptr inbounds %"class.std::basic_ofstream", %"class.std::basic_ofstream"* %jsonfile, i64 0, i32 1, i32 0, i32 7
  call void @_ZNSt6localeD1Ev(%"class.std::locale"* nonnull dereferenceable(8) %_M_buf_locale.i.i.i.i) #38
  %175 = getelementptr inbounds %"class.std::basic_ofstream", %"class.std::basic_ofstream"* %jsonfile, i64 0, i32 2, i32 0
  call void @_ZNSt8ios_baseD2Ev(%"class.std::ios_base"* nonnull dereferenceable(216) %175) #38
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %20) #38
  %_M_p.i.i.i.i.i.i.i.i.i107 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %6, i64 0, i32 0, i32 0
  %176 = load i8*, i8** %_M_p.i.i.i.i.i.i.i.i.i107, align 8, !tbaa !17
  %177 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %6, i64 0, i32 2
  %arraydecay.i.i.i.i.i.i.i.i.i = bitcast %union.anon* %177 to i8*
  %cmp.i.i.i.i.i.i.i.i108 = icmp eq i8* %176, %arraydecay.i.i.i.i.i.i.i.i.i
  br i1 %cmp.i.i.i.i.i.i.i.i108, label %_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_.exit.i.i.i.i, label %if.then.i.i.i.i.i.i.i

for.body50:                                       ; preds = %for.body50, %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit256
  %indvars.iv = phi i64 [ 0, %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit256 ], [ %indvars.iv.next, %for.body50 ]
  %add.ptr.i259 = getelementptr inbounds double, double* %cond.i.i.i.i174386, i64 %indvars.iv
  %178 = load double, double* %add.ptr.i259, align 8, !tbaa !75
  %call54 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.22, i64 0, i64 0), double %178)
  %call55 = call nonnull align 8 dereferenceable(16) %"class.nlohmann::json_v3_11_1::basic_json"* @_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEEixIKcEERSD_PT_(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %enzyme, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.23, i64 0, i64 0))
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %55) #38
  %179 = load double, double* %add.ptr.i259, align 8, !tbaa !75
  store i8 7, i8* %55, align 8, !tbaa !145
  store double %179, double* %56, align 8
  call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %ref.tmp56, i1 zeroext true) #38
  call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %ref.tmp56, i1 zeroext true) #38
  call void @_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE9push_backEOSD_(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %call55, %"class.nlohmann::json_v3_11_1::basic_json"* nonnull align 8 dereferenceable(16) %ref.tmp56)
  call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %ref.tmp56, i1 zeroext false) #38
  %180 = load i8, i8* %55, align 8, !tbaa !145
  call void @_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE10json_value7destroyENS0_6detail7value_tE(%"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* nonnull dereferenceable(8) %m_value.i98, i8 zeroext %180) #38
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %55) #38
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, 5
  br i1 %exitcond.not, label %for.cond.cleanup49, label %for.body50, !llvm.loop !165
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #13

; Function Attrs: nounwind uwtable
declare dso_local void @_ZNSt14basic_ofstreamIcSt11char_traitsIcEEC1EPKcSt13_Ios_Openmode(%"class.std::basic_ofstream"* nonnull dereferenceable(248), i8*, i32) unnamed_addr #0 align 2

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local nonnull align 8 dereferenceable(16) %"class.nlohmann::json_v3_11_1::basic_json"* @_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEEixIKcEERSD_PT_(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %this, i8* %key) local_unnamed_addr #0 comdat align 2 {
entry:
  %ref.tmp.i = alloca i8*, align 8
  %__dnew.i.i = alloca i64, align 8
  %agg.tmp = alloca %"class.std::__cxx11::basic_string", align 8
  %0 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.tmp, i64 0, i32 2
  %1 = bitcast %"class.std::__cxx11::basic_string"* %agg.tmp to %union.anon**
  store %union.anon* %0, %union.anon** %1, align 8, !tbaa !14
  %cmp.i = icmp eq i8* %key, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  call void @_ZSt19__throw_logic_errorPKc(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.34, i64 0, i64 0)) #40
  unreachable

if.end.i:                                         ; preds = %entry
  %2 = bitcast %union.anon* %0 to i8*
  %call.i.i = call i64 @strlen(i8* nonnull dereferenceable(1) %key) #38
  %3 = bitcast i64* %__dnew.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %3) #38
  store i64 %call.i.i, i64* %__dnew.i.i, align 8, !tbaa !20
  %cmp.i.i = icmp ugt i64 %call.i.i, 15
  br i1 %cmp.i.i, label %if.then.i.i2, label %if.end.i.i

if.then.i.i2:                                     ; preds = %if.end.i
  %call2.i.i = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %agg.tmp, i64* nonnull align 8 dereferenceable(8) %__dnew.i.i, i64 0) #38
  %_M_p.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.tmp, i64 0, i32 0, i32 0
  store i8* %call2.i.i, i8** %_M_p.i.i.i, align 8, !tbaa !17
  %4 = load i64, i64* %__dnew.i.i, align 8, !tbaa !20
  %_M_allocated_capacity.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.tmp, i64 0, i32 2, i32 0
  store i64 %4, i64* %_M_allocated_capacity.i.i.i, align 8, !tbaa !21
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i2, %if.end.i
  %5 = phi i8* [ %call2.i.i, %if.then.i.i2 ], [ %2, %if.end.i ]
  switch i64 %call.i.i, label %if.end.i.i.i.i.i [
    i64 1, label %if.then.i.i7.i.i
    i64 0, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit
  ]

if.then.i.i7.i.i:                                 ; preds = %if.end.i.i
  %6 = load i8, i8* %key, align 1, !tbaa !21
  store i8 %6, i8* %5, align 1, !tbaa !21
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit

if.end.i.i.i.i.i:                                 ; preds = %if.end.i.i
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %5, i8* nonnull align 1 %key, i64 %call.i.i, i1 false) #38
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit: ; preds = %if.end.i.i.i.i.i, %if.then.i.i7.i.i, %if.end.i.i
  %_M_p.i8.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.tmp, i64 0, i32 0, i32 0
  %7 = load i64, i64* %__dnew.i.i, align 8, !tbaa !20
  %_M_string_length.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.tmp, i64 0, i32 1
  store i64 %7, i64* %_M_string_length.i.i.i.i, align 8, !tbaa !19
  %8 = load i8*, i8** %_M_p.i8.i.i, align 8, !tbaa !17
  %arrayidx.i.i.i = getelementptr inbounds i8, i8* %8, i64 %7
  store i8 0, i8* %arrayidx.i.i.i, align 1, !tbaa !21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %3) #38
  %m_type.i.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %this, i64 0, i32 0
  %9 = load i8, i8* %m_type.i.i, align 8, !tbaa !145
  %cmp.i.i3 = icmp eq i8 %9, 0
  br i1 %cmp.i.i3, label %if.then.i4, label %if.end.i5

if.then.i4:                                       ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit
  store i8 1, i8* %m_type.i.i, align 8, !tbaa !145
  %call5.i.i.i.i = call noalias nonnull dereferenceable(48) i8* @_Znwm(i64 48) #43
  %10 = getelementptr inbounds i8, i8* %call5.i.i.i.i, i64 8
  %_M_left.i.i.i.i.i.i.i.i.i = getelementptr inbounds i8, i8* %call5.i.i.i.i, i64 24
  %11 = bitcast i8* %_M_left.i.i.i.i.i.i.i.i.i to i8**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(48) %call5.i.i.i.i, i8 0, i64 24, i1 false) #38
  store i8* %10, i8** %11, align 8, !tbaa !166
  %_M_right.i.i.i.i.i.i.i.i.i = getelementptr inbounds i8, i8* %call5.i.i.i.i, i64 32
  %12 = bitcast i8* %_M_right.i.i.i.i.i.i.i.i.i to i8**
  store i8* %10, i8** %12, align 8, !tbaa !170
  %_M_node_count.i.i.i.i.i.i.i.i.i = getelementptr inbounds i8, i8* %call5.i.i.i.i, i64 40
  %13 = bitcast i8* %_M_node_count.i.i.i.i.i.i.i.i.i to i64*
  store i64 0, i64* %13, align 8, !tbaa !171
  %object.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %this, i64 0, i32 1, i32 0
  %14 = bitcast %"class.std::map"** %object.i to i8**
  store i8* %call5.i.i.i.i, i8** %14, align 8, !tbaa !21
  call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %this, i1 zeroext true) #38
  %.pr.i = load i8, i8* %m_type.i.i, align 8, !tbaa !145
  br label %if.end.i5

if.end.i5:                                        ; preds = %if.then.i4, %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit
  %15 = phi i8 [ %.pr.i, %if.then.i4 ], [ %9, %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit ]
  %cmp.i14.i = icmp eq i8 %15, 1
  br i1 %cmp.i14.i, label %_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEEixES9_.exit, label %if.end12.i, !prof !172

if.end12.i:                                       ; preds = %if.end.i5
  call void @abort() #40
  unreachable

_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEEixES9_.exit: ; preds = %if.end.i5
  %object7.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %this, i64 0, i32 1, i32 0
  %16 = load %"class.std::map"*, %"class.std::map"** %object7.i, align 8, !tbaa !21
  %17 = bitcast i8** %ref.tmp.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #38
  store i8* null, i8** %ref.tmp.i, align 8, !tbaa !173
  %_M_t.i.i = getelementptr inbounds %"class.std::map", %"class.std::map"* %16, i64 0, i32 0
  %call5.i.i = call { %"struct.std::_Rb_tree_node_base"*, i8 } @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS5_blmdSaNS9_14adl_serializerESC_IhSaIhEEEEESt10_Select1stISH_ESt4lessIvESaISH_EE17_M_emplace_uniqueIJS5_DnEEES6_ISt17_Rb_tree_iteratorISH_EbEDpOT_(%"class.std::_Rb_tree"* nonnull dereferenceable(48) %_M_t.i.i, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %agg.tmp, i8** nonnull align 8 dereferenceable(8) %ref.tmp.i) #38
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #38
  %18 = load i8*, i8** %_M_p.i8.i.i, align 8, !tbaa !17
  %cmp.i.i.i = icmp eq i8* %18, %2
  br i1 %cmp.i.i.i, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit, label %if.then.i.i

if.then.i.i:                                      ; preds = %_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEEixES9_.exit
  call void @_ZdlPv(i8* %18) #41
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit: ; preds = %if.then.i.i, %_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEEixES9_.exit
  %19 = extractvalue { %"struct.std::_Rb_tree_node_base"*, i8 } %call5.i.i, 0
  %second.i = getelementptr inbounds %"struct.std::_Rb_tree_node_base", %"struct.std::_Rb_tree_node_base"* %19, i64 2
  %20 = bitcast %"struct.std::_Rb_tree_node_base"* %second.i to %"class.nlohmann::json_v3_11_1::basic_json"*
  ret %"class.nlohmann::json_v3_11_1::basic_json"* %20
}

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local void @_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_(%"class.std::__cxx11::basic_string"* noalias sret(%"class.std::__cxx11::basic_string") align 8 %agg.result, i8* %__lhs, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %__rhs) local_unnamed_addr #0 comdat {
entry:
  %call.i = tail call i64 @strlen(i8* nonnull dereferenceable(1) %__lhs) #38
  %0 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.result, i64 0, i32 2
  %1 = bitcast %"class.std::__cxx11::basic_string"* %agg.result to %union.anon**
  store %union.anon* %0, %union.anon** %1, align 8, !tbaa !14
  %_M_string_length.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.result, i64 0, i32 1
  store i64 0, i64* %_M_string_length.i.i.i, align 8, !tbaa !19
  %.cast.i = bitcast %union.anon* %0 to i8*
  store i8 0, i8* %.cast.i, align 8, !tbaa !21
  %_M_string_length.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__rhs, i64 0, i32 1
  %2 = load i64, i64* %_M_string_length.i, align 8, !tbaa !19
  %add = add i64 %2, %call.i
  tail call void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %agg.result, i64 %add) #38
  %3 = load i64, i64* %_M_string_length.i.i.i, align 8, !tbaa !19
  %sub3.i.i = sub i64 4611686018427387903, %3
  %cmp.i.i = icmp ult i64 %sub3.i.i, %call.i
  br i1 %cmp.i.i, label %if.then.i.i, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcm.exit

if.then.i.i:                                      ; preds = %entry
  tail call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.33, i64 0, i64 0)) #40
  unreachable

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcm.exit: ; preds = %entry
  %call.i11 = tail call nonnull align 8 dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %agg.result, i8* %__lhs, i64 %call.i) #38
  %4 = load i64, i64* %_M_string_length.i, align 8, !tbaa !19
  %5 = load i64, i64* %_M_string_length.i.i.i, align 8, !tbaa !19
  %sub3.i.i.i = sub i64 4611686018427387903, %5
  %cmp.i.i.i = icmp ult i64 %sub3.i.i.i, %4
  br i1 %cmp.i.i.i, label %if.then.i.i.i, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_.exit

if.then.i.i.i:                                    ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcm.exit
  tail call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.33, i64 0, i64 0)) #40
  unreachable

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_.exit: ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcm.exit
  %_M_p.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__rhs, i64 0, i32 0, i32 0
  %6 = load i8*, i8** %_M_p.i.i, align 8, !tbaa !17
  %call.i.i = tail call nonnull align 8 dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %agg.result, i8* %6, i64 %4) #38
  ret void
}

; Function Attrs: nofree nounwind
declare dso_local noundef i32 @gettimeofday(%struct.timeval* nocapture noundef, i8* nocapture noundef) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local void @_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE9push_backEOSD_(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %this, %"class.nlohmann::json_v3_11_1::basic_json"* nonnull align 8 dereferenceable(16) %val) local_unnamed_addr #0 comdat align 2 {
entry:
  %m_type.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %this, i64 0, i32 0
  %0 = load i8, i8* %m_type.i, align 8, !tbaa !145
  switch i8 %0, label %if.then [
    i8 0, label %if.then6
    i8 2, label %if.end7
  ], !prof !175

if.then:                                          ; preds = %entry
  tail call void @abort() #40
  unreachable

if.then6:                                         ; preds = %entry
  store i8 2, i8* %m_type.i, align 8, !tbaa !145
  %call5.i.i.i18.i = tail call noalias nonnull dereferenceable(24) i8* @_Znwm(i64 24) #43
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %call5.i.i.i18.i, i8 0, i64 24, i1 false) #38
  %m_value = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %this, i64 0, i32 1
  %1 = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value to i64*
  %2 = ptrtoint i8* %call5.i.i.i18.i to i64
  store i64 %2, i64* %1, align 8
  tail call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %this, i1 zeroext true) #38
  br label %if.end7

if.end7:                                          ; preds = %if.then6, %entry
  %m_value8 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %this, i64 0, i32 1
  %array = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value8 to %"class.std::vector.27"**
  %3 = load %"class.std::vector.27"*, %"class.std::vector.27"** %array, align 8, !tbaa !21
  %_M_end_of_storage.i = getelementptr inbounds %"class.std::vector.27", %"class.std::vector.27"* %3, i64 0, i32 0, i32 0, i32 0, i32 2
  %4 = load %"class.nlohmann::json_v3_11_1::basic_json"*, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_end_of_storage.i, align 8, !tbaa !176
  %_M_finish.i.i18 = getelementptr inbounds %"class.std::vector.27", %"class.std::vector.27"* %3, i64 0, i32 0, i32 0, i32 0, i32 1
  %5 = load %"class.nlohmann::json_v3_11_1::basic_json"*, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_finish.i.i18, align 8, !tbaa !178
  %cmp.not.i.i = icmp eq %"class.nlohmann::json_v3_11_1::basic_json"* %5, %4
  br i1 %cmp.not.i.i, label %if.else.i.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.end7
  %m_type.i.i.i.i.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %5, i64 0, i32 0
  %m_type2.i.i.i.i.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %val, i64 0, i32 0
  %6 = load i8, i8* %m_type2.i.i.i.i.i, align 8, !tbaa !148
  store i8 %6, i8* %m_type.i.i.i.i.i, align 8, !tbaa !145
  %m_value.i.i.i.i.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %5, i64 0, i32 1
  %m_value3.i.i.i.i.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %val, i64 0, i32 1
  %7 = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value3.i.i.i.i.i to i64*
  %8 = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value.i.i.i.i.i to i64*
  %9 = load i64, i64* %7, align 8
  store i64 %9, i64* %8, align 8
  tail call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %val, i1 zeroext false) #38
  store i8 0, i8* %m_type2.i.i.i.i.i, align 8, !tbaa !145
  %ref.tmp.sroa.0.0..sroa_idx.i.i.i.i.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %val, i64 0, i32 1, i32 0
  store %"class.std::map"* null, %"class.std::map"** %ref.tmp.sroa.0.0..sroa_idx.i.i.i.i.i, align 8, !tbaa.struct !179
  tail call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %5, i1 zeroext true) #38
  %10 = load %"class.nlohmann::json_v3_11_1::basic_json"*, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_finish.i.i18, align 8, !tbaa !178
  %incdec.ptr.i.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %10, i64 1
  store %"class.nlohmann::json_v3_11_1::basic_json"* %incdec.ptr.i.i, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_finish.i.i18, align 8, !tbaa !178
  br label %_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE9push_backEOSD_.exit

if.else.i.i:                                      ; preds = %if.end7
  tail call void @_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE17_M_realloc_insertIJSD_EEEvN9__gnu_cxx17__normal_iteratorIPSD_SF_EEDpOT_(%"class.std::vector.27"* nonnull dereferenceable(24) %3, %"class.nlohmann::json_v3_11_1::basic_json"* %4, %"class.nlohmann::json_v3_11_1::basic_json"* nonnull align 8 dereferenceable(16) %val) #38
  br label %_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE9push_backEOSD_.exit

_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE9push_backEOSD_.exit: ; preds = %if.else.i.i, %if.then.i.i
  ret void
}

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local void @_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE9push_backERKSD_(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %this, %"class.nlohmann::json_v3_11_1::basic_json"* nonnull align 8 dereferenceable(16) %val) local_unnamed_addr #0 comdat align 2 {
entry:
  %m_type.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %this, i64 0, i32 0
  %0 = load i8, i8* %m_type.i, align 8, !tbaa !145
  switch i8 %0, label %if.then [
    i8 0, label %if.then6
    i8 2, label %if.end7
  ], !prof !175

if.then:                                          ; preds = %entry
  tail call void @abort() #40
  unreachable

if.then6:                                         ; preds = %entry
  store i8 2, i8* %m_type.i, align 8, !tbaa !145
  %call5.i.i.i18.i = tail call noalias nonnull dereferenceable(24) i8* @_Znwm(i64 24) #43
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %call5.i.i.i18.i, i8 0, i64 24, i1 false) #38
  %m_value = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %this, i64 0, i32 1
  %1 = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value to i64*
  %2 = ptrtoint i8* %call5.i.i.i18.i to i64
  store i64 %2, i64* %1, align 8
  tail call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %this, i1 zeroext true) #38
  br label %if.end7

if.end7:                                          ; preds = %if.then6, %entry
  %m_value8 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %this, i64 0, i32 1
  %array = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value8 to %"class.std::vector.27"**
  %3 = load %"class.std::vector.27"*, %"class.std::vector.27"** %array, align 8, !tbaa !21
  %_M_end_of_storage.i21 = getelementptr inbounds %"class.std::vector.27", %"class.std::vector.27"* %3, i64 0, i32 0, i32 0, i32 0, i32 2
  %4 = load %"class.nlohmann::json_v3_11_1::basic_json"*, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_end_of_storage.i21, align 8, !tbaa !176
  %_M_finish.i = getelementptr inbounds %"class.std::vector.27", %"class.std::vector.27"* %3, i64 0, i32 0, i32 0, i32 0, i32 1
  %5 = load %"class.nlohmann::json_v3_11_1::basic_json"*, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_finish.i, align 8, !tbaa !178
  %cmp.not.i = icmp eq %"class.nlohmann::json_v3_11_1::basic_json"* %5, %4
  br i1 %cmp.not.i, label %if.else.i, label %if.then.i

if.then.i:                                        ; preds = %if.end7
  tail call void @_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEEC2ERKSD_(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %5, %"class.nlohmann::json_v3_11_1::basic_json"* nonnull align 8 dereferenceable(16) %val) #38
  %6 = load %"class.nlohmann::json_v3_11_1::basic_json"*, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_finish.i, align 8, !tbaa !178
  %incdec.ptr.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %6, i64 1
  store %"class.nlohmann::json_v3_11_1::basic_json"* %incdec.ptr.i, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_finish.i, align 8, !tbaa !178
  br label %_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE9push_backERKSD_.exit

if.else.i:                                        ; preds = %if.end7
  tail call void @_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE17_M_realloc_insertIJRKSD_EEEvN9__gnu_cxx17__normal_iteratorIPSD_SF_EEDpOT_(%"class.std::vector.27"* nonnull dereferenceable(24) %3, %"class.nlohmann::json_v3_11_1::basic_json"* %4, %"class.nlohmann::json_v3_11_1::basic_json"* nonnull align 8 dereferenceable(16) %val) #38
  br label %_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE9push_backERKSD_.exit

_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE9push_backERKSD_.exit: ; preds = %if.else.i, %if.then.i
  ret void
}

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZN8nlohmann12json_v3_11_1lsERSoRKNS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES4_IhSaIhEEEE(%"class.std::basic_ostream"* nonnull align 8 dereferenceable(8) %o, %"class.nlohmann::json_v3_11_1::basic_json"* nonnull align 8 dereferenceable(16) %j) local_unnamed_addr #0 comdat {
entry:
  %s = alloca %"class.nlohmann::json_v3_11_1::detail::serializer", align 8
  %0 = bitcast %"class.std::basic_ostream"* %o to i8**
  %vtable = load i8*, i8** %0, align 8, !tbaa !50
  %vbase.offset.ptr = getelementptr i8, i8* %vtable, i64 -24
  %1 = bitcast i8* %vbase.offset.ptr to i64*
  %vbase.offset = load i64, i64* %1, align 8
  %2 = bitcast %"class.std::basic_ostream"* %o to i8*
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 %vbase.offset
  %_M_width.i = getelementptr inbounds i8, i8* %add.ptr, i64 16
  %3 = bitcast i8* %_M_width.i to i64*
  %4 = load i64, i64* %3, align 8, !tbaa !164
  %cmp = icmp sgt i64 %4, 0
  %5 = icmp sgt i64 %4, 0
  %6 = select i1 %5, i64 %4, i64 0
  %7 = trunc i64 %6 to i32
  store i64 0, i64* %3, align 8, !tbaa !164
  %8 = bitcast %"class.nlohmann::json_v3_11_1::detail::serializer"* %s to i8*
  call void @llvm.lifetime.start.p0i8(i64 648, i8* nonnull %8) #38
  %call5.i.i.i.i.i.i.i.i = tail call noalias nonnull dereferenceable(32) i8* @_Znwm(i64 32) #43, !noalias !180
  %9 = bitcast i8* %call5.i.i.i.i.i.i.i.i to i32 (...)***
  %_M_use_count.i.i.i.i.i.i.i = getelementptr inbounds i8, i8* %call5.i.i.i.i.i.i.i.i, i64 8
  %10 = bitcast i8* %_M_use_count.i.i.i.i.i.i.i to i32*
  store i32 1, i32* %10, align 8, !tbaa !185, !noalias !187
  %_M_weak_count.i.i.i.i.i.i.i = getelementptr inbounds i8, i8* %call5.i.i.i.i.i.i.i.i, i64 12
  %11 = bitcast i8* %_M_weak_count.i.i.i.i.i.i.i to i32*
  store i32 1, i32* %11, align 4, !tbaa !188, !noalias !187
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVSt23_Sp_counted_ptr_inplaceIN8nlohmann12json_v3_11_16detail21output_stream_adapterIcEESaIvELN9__gnu_cxx12_Lock_policyE2EE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %9, align 8, !tbaa !50, !noalias !187
  %_M_storage.i.i.i.i.i.i.i = getelementptr inbounds i8, i8* %call5.i.i.i.i.i.i.i.i, i64 16
  %12 = bitcast i8* %_M_storage.i.i.i.i.i.i.i to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN8nlohmann12json_v3_11_16detail21output_stream_adapterIcEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %12, align 8, !tbaa !50, !noalias !187
  %13 = getelementptr inbounds i8, i8* %call5.i.i.i.i.i.i.i.i, i64 24
  %14 = bitcast i8* %13 to %"class.std::basic_ostream"**
  store %"class.std::basic_ostream"* %o, %"class.std::basic_ostream"** %14, align 8, !tbaa !60, !noalias !187
  %15 = bitcast i8* %call5.i.i.i.i.i.i.i.i to %"class.std::_Sp_counted_base"*
  %16 = load i8, i8* @__libc_single_threaded, align 1, !tbaa !21, !noalias !189
  %tobool.i.not.i.i.i.i.i.i = icmp eq i8 %16, 0
  br i1 %tobool.i.not.i.i.i.i.i.i, label %if.else.i.i.i.i.i.i, label %if.then.i.i.i.i.i.i

if.then.i.i.i.i.i.i:                              ; preds = %entry
  store i32 2, i32* %10, align 4, !tbaa !59, !noalias !189
  br label %_ZN8nlohmann12json_v3_11_16detail14output_adapterIcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEcvSt10shared_ptrINS1_23output_adapter_protocolIcEEEEv.exit

if.else.i.i.i.i.i.i:                              ; preds = %entry
  %17 = atomicrmw volatile add i32* %10, i32 1 acq_rel, !noalias !189
  %vtable11.pre = load i8*, i8** %0, align 8, !tbaa !50
  br label %_ZN8nlohmann12json_v3_11_16detail14output_adapterIcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEcvSt10shared_ptrINS1_23output_adapter_protocolIcEEEEv.exit

_ZN8nlohmann12json_v3_11_16detail14output_adapterIcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEcvSt10shared_ptrINS1_23output_adapter_protocolIcEEEEv.exit: ; preds = %if.else.i.i.i.i.i.i, %if.then.i.i.i.i.i.i
  %vtable11 = phi i8* [ %vtable, %if.then.i.i.i.i.i.i ], [ %vtable11.pre, %if.else.i.i.i.i.i.i ]
  %vbase.offset.ptr12 = getelementptr i8, i8* %vtable11, i64 -24
  %18 = bitcast i8* %vbase.offset.ptr12 to i64*
  %vbase.offset13 = load i64, i64* %18, align 8
  %add.ptr14 = getelementptr inbounds i8, i8* %2, i64 %vbase.offset13
  %19 = getelementptr inbounds i8, i8* %add.ptr14, i64 225
  %20 = load i8, i8* %19, align 1, !tbaa !192, !range !90
  %tobool.not.i = icmp eq i8 %20, 0
  br i1 %tobool.not.i, label %if.then.i, label %entry.if.end_crit_edge.i

entry.if.end_crit_edge.i:                         ; preds = %_ZN8nlohmann12json_v3_11_16detail14output_adapterIcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEcvSt10shared_ptrINS1_23output_adapter_protocolIcEEEEv.exit
  %21 = getelementptr inbounds i8, i8* %add.ptr14, i64 224
  %.pre.i = load i8, i8* %21, align 8, !tbaa !193
  br label %_ZNKSt9basic_iosIcSt11char_traitsIcEE4fillEv.exit

if.then.i:                                        ; preds = %_ZN8nlohmann12json_v3_11_16detail14output_adapterIcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEcvSt10shared_ptrINS1_23output_adapter_protocolIcEEEEv.exit
  %_M_ctype.i.i = getelementptr inbounds i8, i8* %add.ptr14, i64 240
  %22 = bitcast i8* %_M_ctype.i.i to %"class.std::ctype"**
  %23 = load %"class.std::ctype"*, %"class.std::ctype"** %22, align 8, !tbaa !85
  %tobool.not.i.i.i = icmp eq %"class.std::ctype"* %23, null
  br i1 %tobool.not.i.i.i, label %if.then.i.i.i28, label %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i

if.then.i.i.i28:                                  ; preds = %if.then.i
  tail call void @_ZSt16__throw_bad_castv() #40
  unreachable

_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i: ; preds = %if.then.i
  %_M_widen_ok.i.i.i = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %23, i64 0, i32 8
  %24 = load i8, i8* %_M_widen_ok.i.i.i, align 8, !tbaa !87
  %tobool.not.i3.i.i = icmp eq i8 %24, 0
  br i1 %tobool.not.i3.i.i, label %if.end.i.i.i, label %if.then.i4.i.i

if.then.i4.i.i:                                   ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i
  %arrayidx.i.i.i = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %23, i64 0, i32 9, i64 32
  %25 = load i8, i8* %arrayidx.i.i.i, align 1, !tbaa !21
  br label %_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i

if.end.i.i.i:                                     ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i
  tail call void @_ZNKSt5ctypeIcE13_M_widen_initEv(%"class.std::ctype"* nonnull dereferenceable(570) %23) #38
  %26 = bitcast %"class.std::ctype"* %23 to i8 (%"class.std::ctype"*, i8)***
  %vtable.i.i.i = load i8 (%"class.std::ctype"*, i8)**, i8 (%"class.std::ctype"*, i8)*** %26, align 8, !tbaa !50
  %vfn.i.i.i = getelementptr inbounds i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vtable.i.i.i, i64 6
  %27 = load i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vfn.i.i.i, align 8
  %call.i.i.i = tail call signext i8 %27(%"class.std::ctype"* nonnull dereferenceable(570) %23, i8 signext 32) #38
  br label %_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i

_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i: ; preds = %if.end.i.i.i, %if.then.i4.i.i
  %retval.0.i.i.i = phi i8 [ %25, %if.then.i4.i.i ], [ %call.i.i.i, %if.end.i.i.i ]
  %28 = getelementptr inbounds i8, i8* %add.ptr14, i64 224
  store i8 %retval.0.i.i.i, i8* %28, align 8, !tbaa !193
  store i8 1, i8* %19, align 1, !tbaa !192
  br label %_ZNKSt9basic_iosIcSt11char_traitsIcEE4fillEv.exit

_ZNKSt9basic_iosIcSt11char_traitsIcEE4fillEv.exit: ; preds = %_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i, %entry.if.end_crit_edge.i
  %29 = phi i8 [ %.pre.i, %entry.if.end_crit_edge.i ], [ %retval.0.i.i.i, %_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc.exit.i ]
  %30 = bitcast %"class.nlohmann::json_v3_11_1::detail::serializer"* %s to i8**
  store i8* %_M_storage.i.i.i.i.i.i.i, i8** %30, align 8, !tbaa !194
  %_M_pi.i.i.i.i31 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %s, i64 0, i32 0, i32 0, i32 1, i32 0
  %31 = bitcast %"class.std::_Sp_counted_base"** %_M_pi.i.i.i.i31 to i8**
  store i8* %call5.i.i.i.i.i.i.i.i, i8** %31, align 8, !tbaa !197
  %32 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %s, i64 0, i32 1, i32 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(64) %32, i8 0, i64 64, i1 false) #38
  %loc.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %s, i64 0, i32 2
  %call2.i = tail call %struct.lconv* @localeconv() #38
  store %struct.lconv* %call2.i, %struct.lconv** %loc.i, align 8, !tbaa !198
  %thousands_sep.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %s, i64 0, i32 3
  %thousands_sep4.i = getelementptr inbounds %struct.lconv, %struct.lconv* %call2.i, i64 0, i32 1
  %33 = load i8*, i8** %thousands_sep4.i, align 8, !tbaa !204
  %cmp.i = icmp eq i8* %33, null
  br i1 %cmp.i, label %cond.end.i, label %cond.false.i

cond.false.i:                                     ; preds = %_ZNKSt9basic_iosIcSt11char_traitsIcEE4fillEv.exit
  %34 = load i8, i8* %33, align 1, !tbaa !21
  br label %cond.end.i

cond.end.i:                                       ; preds = %cond.false.i, %_ZNKSt9basic_iosIcSt11char_traitsIcEE4fillEv.exit
  %cond.i = phi i8 [ %34, %cond.false.i ], [ 0, %_ZNKSt9basic_iosIcSt11char_traitsIcEE4fillEv.exit ]
  store i8 %cond.i, i8* %thousands_sep.i, align 8, !tbaa !206
  %decimal_point9.i = getelementptr inbounds %struct.lconv, %struct.lconv* %call2.i, i64 0, i32 0
  %35 = load i8*, i8** %decimal_point9.i, align 8, !tbaa !207
  %cmp10.i = icmp eq i8* %35, null
  br i1 %cmp10.i, label %if.then.i.i.i41, label %cond.false12.i

cond.false12.i:                                   ; preds = %cond.end.i
  %36 = load i8, i8* %35, align 1, !tbaa !21
  br label %if.then.i.i.i41

if.then.i.i.i41:                                  ; preds = %cond.false12.i, %cond.end.i
  %cond19.i = phi i8 [ %36, %cond.false12.i ], [ 0, %cond.end.i ]
  %decimal_point.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %s, i64 0, i32 4
  store i8 %cond19.i, i8* %decimal_point.i, align 1, !tbaa !208
  %37 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %s, i64 0, i32 5, i32 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 2 dereferenceable(512) %37, i8 0, i64 512, i1 false) #38
  %indent_char.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %s, i64 0, i32 6
  store i8 %29, i8* %indent_char.i, align 2, !tbaa !209
  %indent_string.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %s, i64 0, i32 8
  %38 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %s, i64 0, i32 8, i32 2
  %39 = bitcast %"class.std::__cxx11::basic_string"* %indent_string.i to %union.anon**
  store %union.anon* %38, %union.anon** %39, align 8, !tbaa !14
  call void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEmc(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %indent_string.i, i64 512, i8 signext %29) #38
  %error_handler.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %s, i64 0, i32 9
  store i32 0, i32* %error_handler.i, align 8, !tbaa !210
  %40 = bitcast i8* %_M_use_count.i.i.i.i.i.i.i to i64*
  %41 = load atomic i64, i64* %40 acquire, align 8
  %cmp.i.i.i.i40 = icmp eq i64 %41, 4294967297
  %42 = trunc i64 %41 to i32
  br i1 %cmp.i.i.i.i40, label %if.then.i.i.i.i47, label %if.end.i.i.i.i49

if.then.i.i.i.i47:                                ; preds = %if.then.i.i.i41
  store i32 0, i32* %10, align 8, !tbaa !185
  store i32 0, i32* %11, align 4, !tbaa !188
  %43 = bitcast i8* %call5.i.i.i.i.i.i.i.i to void (%"class.std::_Sp_counted_base"*)***
  %vtable.i.i.i.i43 = load void (%"class.std::_Sp_counted_base"*)**, void (%"class.std::_Sp_counted_base"*)*** %43, align 8, !tbaa !50
  %vfn.i.i.i.i44 = getelementptr inbounds void (%"class.std::_Sp_counted_base"*)*, void (%"class.std::_Sp_counted_base"*)** %vtable.i.i.i.i43, i64 2
  %44 = load void (%"class.std::_Sp_counted_base"*)*, void (%"class.std::_Sp_counted_base"*)** %vfn.i.i.i.i44, align 8
  call void %44(%"class.std::_Sp_counted_base"* nonnull dereferenceable(16) %15) #38
  %vtable3.i.i.i.i45 = load void (%"class.std::_Sp_counted_base"*)**, void (%"class.std::_Sp_counted_base"*)*** %43, align 8, !tbaa !50
  %vfn4.i.i.i.i46 = getelementptr inbounds void (%"class.std::_Sp_counted_base"*)*, void (%"class.std::_Sp_counted_base"*)** %vtable3.i.i.i.i45, i64 3
  %45 = load void (%"class.std::_Sp_counted_base"*)*, void (%"class.std::_Sp_counted_base"*)** %vfn4.i.i.i.i46, align 8
  call void %45(%"class.std::_Sp_counted_base"* nonnull dereferenceable(16) %15) #38
  br label %_ZN8nlohmann12json_v3_11_16detail14output_adapterIcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev.exit

if.end.i.i.i.i49:                                 ; preds = %if.then.i.i.i41
  %46 = load i8, i8* @__libc_single_threaded, align 1, !tbaa !21
  %tobool.i.not.i.i.i.i.i48 = icmp eq i8 %46, 0
  br i1 %tobool.i.not.i.i.i.i.i48, label %if.else.i.i.i.i.i52, label %if.then.i.i.i.i.i51

if.then.i.i.i.i.i51:                              ; preds = %if.end.i.i.i.i49
  %add.i.i.i.i.i.i50 = add nsw i32 %42, -1
  store i32 %add.i.i.i.i.i.i50, i32* %10, align 4, !tbaa !59
  br label %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.i.i55

if.else.i.i.i.i.i52:                              ; preds = %if.end.i.i.i.i49
  %47 = atomicrmw volatile add i32* %10, i32 -1 acq_rel
  br label %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.i.i55

_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.i.i55: ; preds = %if.else.i.i.i.i.i52, %if.then.i.i.i.i.i51
  %retval.0.i.i.i.i.i53 = phi i32 [ %42, %if.then.i.i.i.i.i51 ], [ %47, %if.else.i.i.i.i.i52 ]
  %cmp6.i.i.i.i54 = icmp eq i32 %retval.0.i.i.i.i.i53, 1
  br i1 %cmp6.i.i.i.i54, label %if.then7.i.i.i.i56, label %_ZN8nlohmann12json_v3_11_16detail14output_adapterIcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev.exit, !prof !211

if.then7.i.i.i.i56:                               ; preds = %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.i.i55
  call void @_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE24_M_release_last_use_coldEv(%"class.std::_Sp_counted_base"* nonnull dereferenceable(16) %15) #38
  br label %_ZN8nlohmann12json_v3_11_16detail14output_adapterIcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev.exit

_ZN8nlohmann12json_v3_11_16detail14output_adapterIcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev.exit: ; preds = %if.then7.i.i.i.i56, %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.i.i55, %if.then.i.i.i.i47
  call void @_ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE4dumpERKSF_bbjj(%"class.nlohmann::json_v3_11_1::detail::serializer"* nonnull dereferenceable(644) %s, %"class.nlohmann::json_v3_11_1::basic_json"* nonnull align 8 dereferenceable(16) %j, i1 zeroext %cmp, i1 zeroext false, i32 %7, i32 0)
  %_M_p.i.i.i.i.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %s, i64 0, i32 8, i32 0, i32 0
  %48 = load i8*, i8** %_M_p.i.i.i.i.i, align 8, !tbaa !17
  %arraydecay.i.i.i.i.i = bitcast %union.anon* %38 to i8*
  %cmp.i.i.i.i = icmp eq i8* %48, %arraydecay.i.i.i.i.i
  br i1 %cmp.i.i.i.i, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit.i, label %if.then.i.i.i

if.then.i.i.i:                                    ; preds = %_ZN8nlohmann12json_v3_11_16detail14output_adapterIcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev.exit
  call void @_ZdlPv(i8* %48) #41
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit.i

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit.i: ; preds = %if.then.i.i.i, %_ZN8nlohmann12json_v3_11_16detail14output_adapterIcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev.exit
  %49 = load %"class.std::_Sp_counted_base"*, %"class.std::_Sp_counted_base"** %_M_pi.i.i.i.i31, align 8, !tbaa !197
  %cmp.not.i.i.i = icmp eq %"class.std::_Sp_counted_base"* %49, null
  br i1 %cmp.not.i.i.i, label %_ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEED2Ev.exit, label %if.then.i.i3.i

if.then.i.i3.i:                                   ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit.i
  %_M_use_count.i.i.i.i = getelementptr inbounds %"class.std::_Sp_counted_base", %"class.std::_Sp_counted_base"* %49, i64 0, i32 1
  %50 = bitcast i32* %_M_use_count.i.i.i.i to i64*
  %51 = load atomic i64, i64* %50 acquire, align 8
  %cmp.i.i.i2.i = icmp eq i64 %51, 4294967297
  %52 = trunc i64 %51 to i32
  br i1 %cmp.i.i.i2.i, label %if.then.i.i.i.i, label %if.end.i.i.i.i

if.then.i.i.i.i:                                  ; preds = %if.then.i.i3.i
  store i32 0, i32* %_M_use_count.i.i.i.i, align 8, !tbaa !185
  %_M_weak_count.i.i.i.i = getelementptr inbounds %"class.std::_Sp_counted_base", %"class.std::_Sp_counted_base"* %49, i64 0, i32 2
  store i32 0, i32* %_M_weak_count.i.i.i.i, align 4, !tbaa !188
  %53 = bitcast %"class.std::_Sp_counted_base"* %49 to void (%"class.std::_Sp_counted_base"*)***
  %vtable.i.i.i.i = load void (%"class.std::_Sp_counted_base"*)**, void (%"class.std::_Sp_counted_base"*)*** %53, align 8, !tbaa !50
  %vfn.i.i.i.i = getelementptr inbounds void (%"class.std::_Sp_counted_base"*)*, void (%"class.std::_Sp_counted_base"*)** %vtable.i.i.i.i, i64 2
  %54 = load void (%"class.std::_Sp_counted_base"*)*, void (%"class.std::_Sp_counted_base"*)** %vfn.i.i.i.i, align 8
  call void %54(%"class.std::_Sp_counted_base"* nonnull dereferenceable(16) %49) #38
  %vtable3.i.i.i.i = load void (%"class.std::_Sp_counted_base"*)**, void (%"class.std::_Sp_counted_base"*)*** %53, align 8, !tbaa !50
  %vfn4.i.i.i.i = getelementptr inbounds void (%"class.std::_Sp_counted_base"*)*, void (%"class.std::_Sp_counted_base"*)** %vtable3.i.i.i.i, i64 3
  %55 = load void (%"class.std::_Sp_counted_base"*)*, void (%"class.std::_Sp_counted_base"*)** %vfn4.i.i.i.i, align 8
  call void %55(%"class.std::_Sp_counted_base"* nonnull dereferenceable(16) %49) #38
  br label %_ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEED2Ev.exit

if.end.i.i.i.i:                                   ; preds = %if.then.i.i3.i
  %56 = load i8, i8* @__libc_single_threaded, align 1, !tbaa !21
  %tobool.i.not.i.i.i.i.i = icmp eq i8 %56, 0
  br i1 %tobool.i.not.i.i.i.i.i, label %if.else.i.i.i.i.i, label %if.then.i.i.i.i.i

if.then.i.i.i.i.i:                                ; preds = %if.end.i.i.i.i
  %add.i.i.i.i.i.i = add nsw i32 %52, -1
  store i32 %add.i.i.i.i.i.i, i32* %_M_use_count.i.i.i.i, align 4, !tbaa !59
  br label %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.i.i

if.else.i.i.i.i.i:                                ; preds = %if.end.i.i.i.i
  %57 = atomicrmw volatile add i32* %_M_use_count.i.i.i.i, i32 -1 acq_rel
  br label %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.i.i

_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.i.i: ; preds = %if.else.i.i.i.i.i, %if.then.i.i.i.i.i
  %retval.0.i.i.i.i.i = phi i32 [ %52, %if.then.i.i.i.i.i ], [ %57, %if.else.i.i.i.i.i ]
  %cmp6.i.i.i.i = icmp eq i32 %retval.0.i.i.i.i.i, 1
  br i1 %cmp6.i.i.i.i, label %if.then7.i.i.i.i, label %_ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEED2Ev.exit, !prof !211

if.then7.i.i.i.i:                                 ; preds = %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.i.i
  call void @_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE24_M_release_last_use_coldEv(%"class.std::_Sp_counted_base"* nonnull dereferenceable(16) %49) #38
  br label %_ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEED2Ev.exit

_ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEED2Ev.exit: ; preds = %if.then7.i.i.i.i, %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i.i.i.i, %if.then.i.i.i.i, %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit.i
  call void @llvm.lifetime.end.p0i8(i64 648, i8* nonnull %8) #38
  ret %"class.std::basic_ostream"* %o
}

; Function Attrs: nofree nounwind uwtable willreturn mustprogress
define dso_local noalias %struct.Matrix* @get_new_matrix(i32 %nrows, i32 %ncols) local_unnamed_addr #14 {
entry:
  %call = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #38
  %0 = bitcast i8* %call to %struct.Matrix*
  %nrows1 = bitcast i8* %call to i32*
  store i32 %nrows, i32* %nrows1, align 8, !tbaa !138
  %ncols2 = getelementptr inbounds i8, i8* %call, i64 4
  %1 = bitcast i8* %ncols2 to i32*
  store i32 %ncols, i32* %1, align 4, !tbaa !139
  %mul = mul nsw i32 %ncols, %nrows
  %conv = sext i32 %mul to i64
  %mul3 = shl nsw i64 %conv, 3
  %call4 = tail call noalias i8* @malloc(i64 %mul3) #38
  %data = getelementptr inbounds i8, i8* %call, i64 8
  %2 = bitcast i8* %data to i8**
  store i8* %call4, i8** %2, align 8, !tbaa !137
  ret %struct.Matrix* %0
}

; Function Attrs: inaccessiblememonly nofree nounwind willreturn
declare dso_local noalias noundef i8* @malloc(i64) local_unnamed_addr #15

; Function Attrs: nofree nounwind uwtable willreturn mustprogress
define dso_local noalias %struct.Matrix* @get_new_empty_matrix() local_unnamed_addr #14 {
entry:
  %call = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #38
  %0 = bitcast i8* %call to %struct.Matrix*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %call, i8 0, i64 16, i1 false)
  ret %struct.Matrix* %0
}

; Function Attrs: nounwind uwtable willreturn mustprogress
define dso_local void @delete_matrix(%struct.Matrix* nocapture %mat) local_unnamed_addr #16 {
entry:
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 2
  %0 = load double*, double** %data, align 8, !tbaa !137
  %cmp.not = icmp eq double* %0, null
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = bitcast double* %0 to i8*
  tail call void @free(i8* %1) #38
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = bitcast %struct.Matrix* %mat to i8*
  tail call void @free(i8* %2) #38
  ret void
}

; Function Attrs: inaccessiblemem_or_argmemonly nounwind willreturn
declare dso_local void @free(i8* nocapture noundef) local_unnamed_addr #17

; Function Attrs: nofree nounwind uwtable mustprogress
define dso_local noalias %struct.Matrix* @get_matrix_array(i32 %count) local_unnamed_addr #9 {
entry:
  %conv = sext i32 %count to i64
  %mul = shl nsw i64 %conv, 4
  %call = tail call noalias i8* @malloc(i64 %mul) #38
  %cmp15 = icmp sgt i32 %count, 0
  br i1 %cmp15, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %entry
  %0 = zext i32 %count to i64
  %1 = shl nuw nsw i64 %0, 4
  call void @llvm.memset.p0i8.i64(i8* align 8 %call, i8 0, i64 %1, i1 false)
  br label %for.end

for.end:                                          ; preds = %for.body.preheader, %entry
  %2 = bitcast i8* %call to %struct.Matrix*
  ret %struct.Matrix* %2
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @delete_light_matrix_array(%struct.Matrix* nocapture %matricies, i32 %count) local_unnamed_addr #5 {
entry:
  %cmp11 = icmp sgt i32 %count, 0
  br i1 %cmp11, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %count to i64
  br label %for.body

for.body:                                         ; preds = %for.inc, %for.body.preheader
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.inc ]
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %matricies, i64 %indvars.iv, i32 2
  %0 = load double*, double** %data, align 8, !tbaa !137
  %cmp1.not = icmp eq double* %0, null
  br i1 %cmp1.not, label %for.inc, label %if.then

if.then:                                          ; preds = %for.body
  %1 = bitcast double* %0 to i8*
  tail call void @free(i8* %1) #38
  br label %for.inc

for.inc:                                          ; preds = %if.then, %for.body
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.end, label %for.body, !llvm.loop !212

for.end:                                          ; preds = %for.inc, %entry
  %2 = bitcast %struct.Matrix* %matricies to i8*
  tail call void @free(i8* %2) #38
  ret void
}

; Function Attrs: nounwind uwtable willreturn mustprogress
define dso_local void @resize(%struct.Matrix* nocapture %mat, i32 %nrows, i32 %ncols) local_unnamed_addr #16 {
entry:
  %nrows1 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 0
  %0 = load i32, i32* %nrows1, align 8, !tbaa !138
  %ncols2 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 1
  %1 = load i32, i32* %ncols2, align 4, !tbaa !139
  %mul = mul nsw i32 %1, %0
  %mul3 = mul nsw i32 %ncols, %nrows
  %cmp.not = icmp eq i32 %mul, %mul3
  br i1 %cmp.not, label %if.end15, label %if.then

if.then:                                          ; preds = %entry
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 2
  %2 = load double*, double** %data, align 8, !tbaa !137
  %cmp4.not = icmp eq double* %2, null
  br i1 %cmp4.not, label %if.end, label %if.then5

if.then5:                                         ; preds = %if.then
  %3 = bitcast double* %2 to i8*
  tail call void @free(i8* %3) #38
  br label %if.end

if.end:                                           ; preds = %if.then5, %if.then
  %cmp8 = icmp sgt i32 %mul3, 0
  br i1 %cmp8, label %if.then9, label %if.else

if.then9:                                         ; preds = %if.end
  %conv31 = zext i32 %mul3 to i64
  %mul11 = shl nuw nsw i64 %conv31, 3
  %call = tail call noalias i8* @malloc(i64 %mul11) #38
  %4 = bitcast double** %data to i8**
  store i8* %call, i8** %4, align 8, !tbaa !137
  br label %if.end15

if.else:                                          ; preds = %if.end
  store double* null, double** %data, align 8, !tbaa !137
  br label %if.end15

if.end15:                                         ; preds = %if.else, %if.then9, %entry
  store i32 %ncols, i32* %ncols2, align 4, !tbaa !139
  store i32 %nrows, i32* %nrows1, align 8, !tbaa !138
  ret void
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @mat_mult(%struct.Matrix* noalias nocapture readonly %lhs, %struct.Matrix* noalias nocapture readonly %rhs, %struct.Matrix* noalias nocapture %out) local_unnamed_addr #5 {
entry:
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 0
  %0 = load i32, i32* %nrows, align 8, !tbaa !138
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 1
  %1 = load i32, i32* %ncols, align 4, !tbaa !139
  %nrows1.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 0
  %2 = load i32, i32* %nrows1.i, align 8, !tbaa !138
  %ncols2.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 1
  %3 = load i32, i32* %ncols2.i, align 4, !tbaa !139
  %mul.i = mul nsw i32 %3, %2
  %mul3.i = mul nsw i32 %1, %0
  %cmp.not.i = icmp eq i32 %mul.i, %mul3.i
  br i1 %cmp.not.i, label %resize.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %data.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 2
  %4 = load double*, double** %data.i, align 8, !tbaa !137
  %cmp4.not.i = icmp eq double* %4, null
  br i1 %cmp4.not.i, label %if.end.i, label %if.then5.i

if.then5.i:                                       ; preds = %if.then.i
  %5 = bitcast double* %4 to i8*
  tail call void @free(i8* %5) #38
  br label %if.end.i

if.end.i:                                         ; preds = %if.then5.i, %if.then.i
  %cmp8.i = icmp sgt i32 %mul3.i, 0
  br i1 %cmp8.i, label %if.then9.i, label %if.else.i

if.then9.i:                                       ; preds = %if.end.i
  %conv31.i = zext i32 %mul3.i to i64
  %mul11.i = shl nuw nsw i64 %conv31.i, 3
  %call.i = tail call noalias i8* @malloc(i64 %mul11.i) #38
  %6 = bitcast double** %data.i to i8**
  store i8* %call.i, i8** %6, align 8, !tbaa !137
  br label %resize.exit

if.else.i:                                        ; preds = %if.end.i
  store double* null, double** %data.i, align 8, !tbaa !137
  br label %resize.exit

resize.exit:                                      ; preds = %if.else.i, %if.then9.i, %entry
  store i32 %1, i32* %ncols2.i, align 4, !tbaa !139
  store i32 %0, i32* %nrows1.i, align 8, !tbaa !138
  %cmp85 = icmp sgt i32 %0, 0
  br i1 %cmp85, label %for.cond2.preheader.lr.ph, label %for.end49

for.cond2.preheader.lr.ph:                        ; preds = %resize.exit
  %cmp483 = icmp sgt i32 %1, 0
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 2
  %data7 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 2
  %nrows8 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 0
  %data14 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 2
  %ncols21 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 1
  %7 = zext i32 %0 to i64
  %wide.trip.count96 = zext i32 %1 to i64
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.inc47, %for.cond2.preheader.lr.ph
  %indvars.iv98 = phi i64 [ 0, %for.cond2.preheader.lr.ph ], [ %indvars.iv.next99, %for.inc47 ]
  br i1 %cmp483, label %for.body5.lr.ph, label %for.inc47

for.body5.lr.ph:                                  ; preds = %for.cond2.preheader
  %8 = load double*, double** %data, align 8, !tbaa !137
  %arrayidx = getelementptr inbounds double, double* %8, i64 %indvars.iv98
  %9 = load double*, double** %data7, align 8, !tbaa !137
  %10 = load i32, i32* %nrows8, align 8, !tbaa !138
  %11 = load double*, double** %data14, align 8, !tbaa !137
  %12 = load i32, i32* %ncols21, align 4, !tbaa !139
  %cmp2281 = icmp sgt i32 %12, 1
  %13 = sext i32 %10 to i64
  %wide.trip.count = zext i32 %12 to i64
  br label %for.body5

for.body5:                                        ; preds = %for.inc44, %for.body5.lr.ph
  %indvars.iv91 = phi i64 [ 0, %for.body5.lr.ph ], [ %indvars.iv.next92, %for.inc44 ]
  %14 = load double, double* %arrayidx, align 8, !tbaa !75
  %15 = mul nsw i64 %indvars.iv91, %13
  %arrayidx12 = getelementptr inbounds double, double* %9, i64 %15
  %16 = load double, double* %arrayidx12, align 8, !tbaa !75
  %mul13 = fmul fast double %16, %14
  %17 = mul nuw nsw i64 %indvars.iv91, %7
  %18 = add nuw nsw i64 %17, %indvars.iv98
  %arrayidx19 = getelementptr inbounds double, double* %11, i64 %18
  store double %mul13, double* %arrayidx19, align 8, !tbaa !75
  br i1 %cmp2281, label %for.body23, label %for.inc44

for.body23:                                       ; preds = %for.body23, %for.body5
  %19 = phi double [ %add43, %for.body23 ], [ %mul13, %for.body5 ]
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body23 ], [ 1, %for.body5 ]
  %20 = mul nuw nsw i64 %indvars.iv, %7
  %21 = add nuw nsw i64 %20, %indvars.iv98
  %arrayidx29 = getelementptr inbounds double, double* %8, i64 %21
  %22 = load double, double* %arrayidx29, align 8, !tbaa !75
  %23 = add nsw i64 %indvars.iv, %15
  %arrayidx35 = getelementptr inbounds double, double* %9, i64 %23
  %24 = load double, double* %arrayidx35, align 8, !tbaa !75
  %mul36 = fmul fast double %24, %22
  %add43 = fadd fast double %19, %mul36
  store double %add43, double* %arrayidx19, align 8, !tbaa !75
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.inc44, label %for.body23, !llvm.loop !213

for.inc44:                                        ; preds = %for.body23, %for.body5
  %indvars.iv.next92 = add nuw nsw i64 %indvars.iv91, 1
  %exitcond97.not = icmp eq i64 %indvars.iv.next92, %wide.trip.count96
  br i1 %exitcond97.not, label %for.inc47, label %for.body5, !llvm.loop !214

for.inc47:                                        ; preds = %for.inc44, %for.cond2.preheader
  %indvars.iv.next99 = add nuw nsw i64 %indvars.iv98, 1
  %exitcond101.not = icmp eq i64 %indvars.iv.next99, %7
  br i1 %exitcond101.not, label %for.end49, label %for.cond2.preheader, !llvm.loop !215

for.end49:                                        ; preds = %for.inc47, %resize.exit
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable mustprogress
define dso_local void @set_identity(%struct.Matrix* nocapture readonly %mat) local_unnamed_addr #18 {
entry:
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 1
  %0 = load i32, i32* %ncols, align 4, !tbaa !139
  %cmp33 = icmp sgt i32 %0, 0
  br i1 %cmp33, label %for.cond1.preheader.lr.ph, label %for.end14

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 0
  %1 = load i32, i32* %nrows, align 8, !tbaa !138
  %cmp230 = icmp sgt i32 %1, 0
  %data6 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 2
  br label %for.cond1.preheader

for.cond1.preheader:                              ; preds = %for.inc12, %for.cond1.preheader.lr.ph
  %i_col.034 = phi i32 [ 0, %for.cond1.preheader.lr.ph ], [ %inc13, %for.inc12 ]
  br i1 %cmp230, label %for.body3.lr.ph, label %for.inc12

for.body3.lr.ph:                                  ; preds = %for.cond1.preheader
  %mul8 = mul nsw i32 %1, %i_col.034
  br label %for.body3

for.body3:                                        ; preds = %for.body3, %for.body3.lr.ph
  %i_row.031 = phi i32 [ 0, %for.body3.lr.ph ], [ %inc, %for.body3 ]
  %cmp4 = icmp eq i32 %i_col.034, %i_row.031
  %2 = load double*, double** %data6, align 8, !tbaa !137
  %idxprom.sink.v = add nsw i32 %mul8, %i_row.031
  %idxprom.sink = sext i32 %idxprom.sink.v to i64
  %.sink = select i1 %cmp4, double 1.000000e+00, double 0.000000e+00
  %arrayidx = getelementptr inbounds double, double* %2, i64 %idxprom.sink
  store double %.sink, double* %arrayidx, align 8, !tbaa !75
  %inc = add nuw nsw i32 %i_row.031, 1
  %exitcond.not = icmp eq i32 %inc, %1
  br i1 %exitcond.not, label %for.inc12, label %for.body3, !llvm.loop !216

for.inc12:                                        ; preds = %for.body3, %for.cond1.preheader
  %inc13 = add nuw nsw i32 %i_col.034, 1
  %exitcond37.not = icmp eq i32 %inc13, %0
  br i1 %exitcond37.not, label %for.end14, label %for.cond1.preheader, !llvm.loop !217

for.end14:                                        ; preds = %for.inc12, %entry
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable mustprogress
define dso_local void @fill(%struct.Matrix* nocapture readonly %mat, double %val) local_unnamed_addr #18 {
entry:
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 1
  %0 = load i32, i32* %ncols, align 4, !tbaa !139
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 0
  %1 = load i32, i32* %nrows, align 8, !tbaa !138
  %mul6 = mul i32 %1, %0
  %cmp7 = icmp sgt i32 %mul6, 0
  br i1 %cmp7, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %entry
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 2
  %2 = load double*, double** %data, align 8, !tbaa !137
  %wide.trip.count = zext i32 %mul6 to i64
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %arrayidx = getelementptr inbounds double, double* %2, i64 %indvars.iv
  store double %val, double* %arrayidx, align 8, !tbaa !75
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.end, label %for.body, !llvm.loop !218

for.end:                                          ; preds = %for.body, %entry
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable mustprogress
define dso_local void @set_block(%struct.Matrix* nocapture readonly %mat, i32 %row_off, i32 %col_off, %struct.Matrix* nocapture readonly %block) local_unnamed_addr #18 {
entry:
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %block, i64 0, i32 1
  %0 = load i32, i32* %ncols, align 4, !tbaa !139
  %cmp30 = icmp sgt i32 %0, 0
  br i1 %cmp30, label %for.cond1.preheader.lr.ph, label %for.end15

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %block, i64 0, i32 0
  %1 = load i32, i32* %nrows, align 8, !tbaa !138
  %cmp228 = icmp sgt i32 %1, 0
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %block, i64 0, i32 2
  %data5 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 2
  %nrows8 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 0
  %2 = sext i32 %row_off to i64
  %wide.trip.count = zext i32 %1 to i64
  %3 = sext i32 %col_off to i64
  %4 = sext i32 %1 to i64
  %5 = zext i32 %0 to i64
  br label %for.cond1.preheader

for.cond1.preheader:                              ; preds = %for.inc13, %for.cond1.preheader.lr.ph
  %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc13 ], [ 0, %for.cond1.preheader.lr.ph ]
  br i1 %cmp228, label %for.body3.lr.ph, label %for.inc13

for.body3.lr.ph:                                  ; preds = %for.cond1.preheader
  %6 = load double*, double** %data, align 8, !tbaa !137
  %7 = load double*, double** %data5, align 8, !tbaa !137
  %8 = add nsw i64 %indvars.iv1, %3
  %9 = load i32, i32* %nrows8, align 8, !tbaa !138
  %10 = sext i32 %9 to i64
  %11 = mul nsw i64 %8, %10
  %12 = mul nsw i64 %indvars.iv1, %4
  br label %for.body3

for.body3:                                        ; preds = %for.body3, %for.body3.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body3.lr.ph ], [ %indvars.iv.next, %for.body3 ]
  %13 = add nsw i64 %indvars.iv, %12
  %arrayidx = getelementptr inbounds double, double* %6, i64 %13
  %14 = load double, double* %arrayidx, align 8, !tbaa !75
  %15 = add nsw i64 %indvars.iv, %2
  %16 = add nsw i64 %15, %11
  %arrayidx12 = getelementptr inbounds double, double* %7, i64 %16
  store double %14, double* %arrayidx12, align 8, !tbaa !75
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.inc13, label %for.body3, !llvm.loop !219

for.inc13:                                        ; preds = %for.body3, %for.cond1.preheader
  %indvars.iv.next2 = add nuw nsw i64 %indvars.iv1, 1
  %exitcond37.not = icmp eq i64 %indvars.iv.next2, %5
  br i1 %exitcond37.not, label %for.end15, label %for.cond1.preheader, !llvm.loop !220

for.end15:                                        ; preds = %for.inc13, %entry
  ret void
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @copy(%struct.Matrix* nocapture %dst, %struct.Matrix* nocapture readonly %src) local_unnamed_addr #5 {
entry:
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %dst, i64 0, i32 2
  %0 = load double*, double** %data, align 8, !tbaa !137
  %cmp.not = icmp eq double* %0, null
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = bitcast double* %0 to i8*
  tail call void @free(i8* %1) #38
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %src, i64 0, i32 1
  %2 = load i32, i32* %ncols, align 4, !tbaa !139
  %ncols2 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %dst, i64 0, i32 1
  store i32 %2, i32* %ncols2, align 4, !tbaa !139
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %src, i64 0, i32 0
  %3 = load i32, i32* %nrows, align 8, !tbaa !138
  %nrows3 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %dst, i64 0, i32 0
  store i32 %3, i32* %nrows3, align 8, !tbaa !138
  %mul = mul i32 %3, %2
  %conv = sext i32 %mul to i64
  %mul6 = shl nsw i64 %conv, 3
  %call = tail call noalias i8* @malloc(i64 %mul6) #38
  %4 = bitcast double** %data to i8**
  store i8* %call, i8** %4, align 8, !tbaa !137
  %cmp1131 = icmp sgt i32 %mul, 0
  %5 = bitcast i8* %call to double*
  br i1 %cmp1131, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %if.end
  %data12 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %src, i64 0, i32 2
  %6 = load double*, double** %data12, align 8, !tbaa !137
  %wide.trip.count = zext i32 %mul to i64
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %arrayidx = getelementptr inbounds double, double* %6, i64 %indvars.iv
  %7 = load double, double* %arrayidx, align 8, !tbaa !75
  %arrayidx15 = getelementptr inbounds double, double* %5, i64 %indvars.iv
  store double %7, double* %arrayidx15, align 8, !tbaa !75
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.end, label %for.body, !llvm.loop !221

for.end:                                          ; preds = %for.body, %if.end
  ret void
}

; Function Attrs: norecurse nounwind readonly uwtable willreturn mustprogress
define dso_local double @square_sum(i32 %n, double* nocapture readonly %x) local_unnamed_addr #8 {
entry:
  %0 = load double, double* %x, align 8, !tbaa !75
  %mul = fmul fast double %0, %0
  %cmp15 = icmp sgt i32 %n, 1
  br i1 %cmp15, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %n to i64
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %indvars.iv = phi i64 [ 1, %for.body.preheader ], [ %indvars.iv.next, %for.body ]
  %res.017 = phi double [ %mul, %for.body.preheader ], [ %add, %for.body ]
  %arrayidx2 = getelementptr inbounds double, double* %x, i64 %indvars.iv
  %1 = load double, double* %arrayidx2, align 8, !tbaa !75
  %mul5 = fmul fast double %1, %1
  %add = fadd fast double %mul5, %res.017
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.end, label %for.body, !llvm.loop !222

for.end:                                          ; preds = %for.body, %entry
  %res.0.lcssa = phi double [ %mul, %entry ], [ %add, %for.body ]
  ret double %res.0.lcssa
}

; Function Attrs: nofree nounwind uwtable mustprogress
define dso_local void @angle_axis_to_rotation_matrix(double* nocapture readonly %angle_axis, %struct.Matrix* nocapture readonly %R) local_unnamed_addr #9 {
entry:
  %0 = load double, double* %angle_axis, align 8, !tbaa !75
  %mul.i = fmul fast double %0, %0
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i, %entry
  %indvars.iv.i = phi i64 [ 1, %entry ], [ %indvars.iv.next.i, %for.body.i ]
  %res.017.i = phi double [ %mul.i, %entry ], [ %add.i, %for.body.i ]
  %arrayidx2.i = getelementptr inbounds double, double* %angle_axis, i64 %indvars.iv.i
  %1 = load double, double* %arrayidx2.i, align 8, !tbaa !75
  %mul5.i = fmul fast double %1, %1
  %add.i = fadd fast double %mul5.i, %res.017.i
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, 3
  br i1 %exitcond.not.i, label %square_sum.exit, label %for.body.i, !llvm.loop !222

square_sum.exit:                                  ; preds = %for.body.i
  %add.i.lcssa = phi double [ %add.i, %for.body.i ]
  %2 = tail call fast double @llvm.sqrt.f64(double %add.i.lcssa)
  %cmp = fcmp fast olt double %2, 1.000000e-04
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %square_sum.exit
  %ncols.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %R, i64 0, i32 1
  %3 = load i32, i32* %ncols.i, align 4, !tbaa !139
  %cmp33.i = icmp sgt i32 %3, 0
  br i1 %cmp33.i, label %for.cond1.preheader.lr.ph.i, label %cleanup

for.cond1.preheader.lr.ph.i:                      ; preds = %if.then
  %nrows.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %R, i64 0, i32 0
  %4 = load i32, i32* %nrows.i, align 8, !tbaa !138
  %cmp230.i = icmp sgt i32 %4, 0
  %data6.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %R, i64 0, i32 2
  %5 = zext i32 %4 to i64
  %6 = zext i32 %3 to i64
  %7 = sext i32 %4 to i64
  br label %for.cond1.preheader.i

for.cond1.preheader.i:                            ; preds = %for.inc12.i, %for.cond1.preheader.lr.ph.i
  %indvars.iv174 = phi i64 [ %indvars.iv.next175, %for.inc12.i ], [ 0, %for.cond1.preheader.lr.ph.i ]
  br i1 %cmp230.i, label %for.body3.lr.ph.i, label %for.inc12.i

for.body3.lr.ph.i:                                ; preds = %for.cond1.preheader.i
  %8 = mul nsw i64 %indvars.iv174, %7
  br label %for.body3.i

for.body3.i:                                      ; preds = %for.body3.i, %for.body3.lr.ph.i
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.i ], [ 0, %for.body3.lr.ph.i ]
  %cmp4.i = icmp eq i64 %indvars.iv174, %indvars.iv
  %9 = load double*, double** %data6.i, align 8, !tbaa !137
  %.sink178 = add nsw i64 %indvars.iv, %8
  %.sink = select i1 %cmp4.i, double 1.000000e+00, double 0.000000e+00
  %arrayidx11.i = getelementptr inbounds double, double* %9, i64 %.sink178
  store double %.sink, double* %arrayidx11.i, align 8, !tbaa !75
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not.i172 = icmp eq i64 %indvars.iv.next, %5
  br i1 %exitcond.not.i172, label %for.inc12.i, label %for.body3.i, !llvm.loop !216

for.inc12.i:                                      ; preds = %for.body3.i, %for.cond1.preheader.i
  %indvars.iv.next175 = add nuw nsw i64 %indvars.iv174, 1
  %exitcond37.not.i = icmp eq i64 %indvars.iv.next175, %6
  br i1 %exitcond37.not.i, label %cleanup, label %for.cond1.preheader.i, !llvm.loop !217

if.end:                                           ; preds = %square_sum.exit
  %div = fdiv fast double %0, %2
  %arrayidx1 = getelementptr inbounds double, double* %angle_axis, i64 1
  %10 = load double, double* %arrayidx1, align 8, !tbaa !75
  %div2 = fdiv fast double %10, %2
  %arrayidx3 = getelementptr inbounds double, double* %angle_axis, i64 2
  %11 = load double, double* %arrayidx3, align 8, !tbaa !75
  %div4 = fdiv fast double %11, %2
  %12 = tail call fast double @llvm.sin.f64(double %2)
  %13 = tail call fast double @llvm.cos.f64(double %2)
  %mul = fmul fast double %div, %div
  %sub = fsub fast double 1.000000e+00, %mul
  %mul6 = fmul fast double %sub, %13
  %add = fadd fast double %mul6, %mul
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %R, i64 0, i32 2
  %14 = load double*, double** %data, align 8, !tbaa !137
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %R, i64 0, i32 0
  store double %add, double* %14, align 8, !tbaa !75
  %sub11 = fsub fast double 1.000000e+00, %13
  %mul10 = fmul fast double %sub11, %div
  %mul12 = fmul fast double %mul10, %div2
  %mul13 = fmul fast double %div4, %12
  %sub14 = fsub fast double %mul12, %mul13
  %15 = load i32, i32* %nrows, align 8, !tbaa !138
  %idxprom19 = sext i32 %15 to i64
  %arrayidx20 = getelementptr inbounds double, double* %14, i64 %idxprom19
  store double %sub14, double* %arrayidx20, align 8, !tbaa !75
  %mul23 = fmul fast double %mul10, %div4
  %mul24 = fmul fast double %div2, %12
  %add25 = fadd fast double %mul23, %mul24
  %mul28 = shl nsw i32 %15, 1
  %idxprom30 = sext i32 %mul28 to i64
  %arrayidx31 = getelementptr inbounds double, double* %14, i64 %idxprom30
  store double %add25, double* %arrayidx31, align 8, !tbaa !75
  %add36 = fadd fast double %mul12, %mul13
  %arrayidx42 = getelementptr inbounds double, double* %14, i64 1
  store double %add36, double* %arrayidx42, align 8, !tbaa !75
  %mul43 = fmul fast double %div2, %div2
  %sub45 = fsub fast double 1.000000e+00, %mul43
  %mul46 = fmul fast double %sub45, %13
  %add47 = fadd fast double %mul46, %mul43
  %add51 = add nsw i32 %15, 1
  %idxprom52 = sext i32 %add51 to i64
  %arrayidx53 = getelementptr inbounds double, double* %14, i64 %idxprom52
  store double %add47, double* %arrayidx53, align 8, !tbaa !75
  %mul54 = fmul fast double %div2, %sub11
  %mul56 = fmul fast double %mul54, %div4
  %mul57 = fmul fast double %div, %12
  %sub58 = fsub fast double %mul56, %mul57
  %add62 = or i32 %mul28, 1
  %idxprom63 = sext i32 %add62 to i64
  %arrayidx64 = getelementptr inbounds double, double* %14, i64 %idxprom63
  store double %sub58, double* %arrayidx64, align 8, !tbaa !75
  %sub69 = fsub fast double %mul23, %mul24
  %arrayidx75 = getelementptr inbounds double, double* %14, i64 2
  store double %sub69, double* %arrayidx75, align 8, !tbaa !75
  %add80 = fadd fast double %mul56, %mul57
  %add84 = add nsw i32 %15, 2
  %idxprom85 = sext i32 %add84 to i64
  %arrayidx86 = getelementptr inbounds double, double* %14, i64 %idxprom85
  store double %add80, double* %arrayidx86, align 8, !tbaa !75
  %mul87 = fmul fast double %div4, %div4
  %sub89 = fsub fast double 1.000000e+00, %mul87
  %mul90 = fmul fast double %sub89, %13
  %add91 = fadd fast double %mul90, %mul87
  %add95 = add nsw i32 %mul28, 2
  %idxprom96 = sext i32 %add95 to i64
  %arrayidx97 = getelementptr inbounds double, double* %14, i64 %idxprom96
  store double %add91, double* %arrayidx97, align 8, !tbaa !75
  br label %cleanup

cleanup:                                          ; preds = %if.end, %for.inc12.i, %if.then
  ret void
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.sqrt.f64(double) #11

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.sin.f64(double) #11

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.cos.f64(double) #11

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @apply_global_transform(%struct.Matrix* nocapture readonly %pose_params, %struct.Matrix* nocapture readonly %positions) local_unnamed_addr #5 {
entry:
  %call.i = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #38
  %0 = bitcast i8* %call.i to %struct.Matrix*
  %nrows1.i = bitcast i8* %call.i to i32*
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138
  %ncols2.i = getelementptr inbounds i8, i8* %call.i, i64 4
  %1 = bitcast i8* %ncols2.i to i32*
  store i32 3, i32* %1, align 4, !tbaa !139
  %call4.i = tail call noalias dereferenceable_or_null(72) i8* @malloc(i64 72) #38
  %data.i = getelementptr inbounds i8, i8* %call.i, i64 8
  %2 = bitcast i8* %data.i to i8**
  store i8* %call4.i, i8** %2, align 8, !tbaa !137
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 2
  %3 = load double*, double** %data, align 8, !tbaa !137
  tail call void @angle_axis_to_rotation_matrix(double* %3, %struct.Matrix* %0)
  %4 = load double*, double** %data, align 8, !tbaa !137
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 0
  %5 = load i32, i32* %nrows, align 8, !tbaa !138
  %6 = bitcast i8* %call4.i to double*
  %7 = sext i32 %5 to i64
  br label %for.cond1.preheader

for.cond1.preheader:                              ; preds = %for.inc12, %entry
  %indvars.iv103 = phi i64 [ 0, %entry ], [ %indvars.iv.next104, %for.inc12 ]
  %8 = add nsw i64 %indvars.iv103, %7
  %arrayidx = getelementptr inbounds double, double* %4, i64 %8
  %9 = mul nuw nsw i64 %indvars.iv103, 3
  br label %for.body3

for.body3:                                        ; preds = %for.body3, %for.cond1.preheader
  %indvars.iv99 = phi i64 [ 0, %for.cond1.preheader ], [ %indvars.iv.next100, %for.body3 ]
  %10 = load double, double* %arrayidx, align 8, !tbaa !75
  %11 = add nuw nsw i64 %9, %indvars.iv99
  %arrayidx10 = getelementptr inbounds double, double* %6, i64 %11
  %12 = load double, double* %arrayidx10, align 8, !tbaa !75
  %mul11 = fmul fast double %12, %10
  store double %mul11, double* %arrayidx10, align 8, !tbaa !75
  %indvars.iv.next100 = add nuw nsw i64 %indvars.iv99, 1
  %exitcond102.not = icmp eq i64 %indvars.iv.next100, 3
  br i1 %exitcond102.not, label %for.inc12, label %for.body3, !llvm.loop !223

for.inc12:                                        ; preds = %for.body3
  %indvars.iv.next104 = add nuw nsw i64 %indvars.iv103, 1
  %exitcond107.not = icmp eq i64 %indvars.iv.next104, 3
  br i1 %exitcond107.not, label %for.end14, label %for.cond1.preheader, !llvm.loop !224

for.end14:                                        ; preds = %for.inc12
  %call.i81 = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #38
  %13 = bitcast i8* %call.i81 to %struct.Matrix*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %call.i81, i8 0, i64 16, i1 false) #38
  tail call void @mat_mult(%struct.Matrix* %0, %struct.Matrix* %positions, %struct.Matrix* %13)
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 1
  %14 = load i32, i32* %ncols, align 4, !tbaa !139
  %cmp1789 = icmp sgt i32 %14, 0
  br i1 %cmp1789, label %for.cond19.preheader.lr.ph, label %if.then.i

for.cond19.preheader.lr.ph:                       ; preds = %for.end14
  %nrows20 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 0
  %15 = load i32, i32* %nrows20, align 8, !tbaa !138
  %cmp2187 = icmp sgt i32 %15, 0
  %data23 = getelementptr inbounds i8, i8* %call.i81, i64 8
  %16 = bitcast i8* %data23 to double**
  %nrows24 = bitcast i8* %call.i81 to i32*
  %data36 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 2
  %wide.trip.count = zext i32 %15 to i64
  %17 = sext i32 %15 to i64
  %18 = zext i32 %14 to i64
  br label %for.cond19.preheader

for.cond19.preheader:                             ; preds = %for.inc45, %for.cond19.preheader.lr.ph
  %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc45 ], [ 0, %for.cond19.preheader.lr.ph ]
  br i1 %cmp2187, label %for.body22.lr.ph, label %for.inc45

for.body22.lr.ph:                                 ; preds = %for.cond19.preheader
  %19 = load double*, double** %16, align 8, !tbaa !137
  %20 = load i32, i32* %nrows24, align 8, !tbaa !138
  %21 = sext i32 %20 to i64
  %22 = mul nsw i64 %indvars.iv1, %21
  %23 = load double*, double** %data, align 8, !tbaa !137
  %24 = load i32, i32* %nrows, align 8, !tbaa !138
  %mul31 = shl nsw i32 %24, 1
  %25 = load double*, double** %data36, align 8, !tbaa !137
  %26 = sext i32 %mul31 to i64
  %27 = mul nsw i64 %indvars.iv1, %17
  br label %for.body22

for.body22:                                       ; preds = %for.body22, %for.body22.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body22.lr.ph ], [ %indvars.iv.next, %for.body22 ]
  %28 = add nsw i64 %indvars.iv, %22
  %arrayidx28 = getelementptr inbounds double, double* %19, i64 %28
  %29 = load double, double* %arrayidx28, align 8, !tbaa !75
  %30 = add nsw i64 %indvars.iv, %26
  %arrayidx34 = getelementptr inbounds double, double* %23, i64 %30
  %31 = load double, double* %arrayidx34, align 8, !tbaa !75
  %add35 = fadd fast double %31, %29
  %32 = add nsw i64 %indvars.iv, %27
  %arrayidx41 = getelementptr inbounds double, double* %25, i64 %32
  store double %add35, double* %arrayidx41, align 8, !tbaa !75
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.inc45, label %for.body22, !llvm.loop !225

for.inc45:                                        ; preds = %for.body22, %for.cond19.preheader
  %indvars.iv.next2 = add nuw nsw i64 %indvars.iv1, 1
  %exitcond98.not = icmp eq i64 %indvars.iv.next2, %18
  br i1 %exitcond98.not, label %for.end47, label %for.cond19.preheader, !llvm.loop !226

for.end47:                                        ; preds = %for.inc45
  %cmp.not.i = icmp eq i8* %call4.i, null
  br i1 %cmp.not.i, label %delete_matrix.exit, label %if.then.i

if.then.i:                                        ; preds = %for.end47, %for.end14
  tail call void @free(i8* nonnull %call4.i) #38
  br label %delete_matrix.exit

delete_matrix.exit:                               ; preds = %if.then.i, %for.end47
  tail call void @free(i8* nonnull %call.i) #38
  %data.i83 = getelementptr inbounds i8, i8* %call.i81, i64 8
  %33 = bitcast i8* %data.i83 to double**
  %34 = load double*, double** %33, align 8, !tbaa !137
  %cmp.not.i84 = icmp eq double* %34, null
  br i1 %cmp.not.i84, label %delete_matrix.exit86, label %if.then.i85

if.then.i85:                                      ; preds = %delete_matrix.exit
  %35 = bitcast double* %34 to i8*
  tail call void @free(i8* %35) #38
  br label %delete_matrix.exit86

delete_matrix.exit86:                             ; preds = %if.then.i85, %delete_matrix.exit
  tail call void @free(i8* nonnull %call.i81) #38
  ret void
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @relatives_to_absolutes(i32 %count, %struct.Matrix* nocapture readonly %relatives, i32* nocapture readonly %parents, %struct.Matrix* nocapture %absolutes) local_unnamed_addr #5 {
entry:
  %cmp26 = icmp sgt i32 %count, 0
  br i1 %cmp26, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %count to i64
  br label %for.body

for.body:                                         ; preds = %for.inc, %for.body.preheader
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.inc ]
  %arrayidx = getelementptr inbounds i32, i32* %parents, i64 %indvars.iv
  %0 = load i32, i32* %arrayidx, align 4, !tbaa !59
  %cmp1 = icmp eq i32 %0, -1
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %data.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %indvars.iv, i32 2
  %1 = load double*, double** %data.i, align 8, !tbaa !137
  %cmp.not.i = icmp eq double* %1, null
  br i1 %cmp.not.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %if.then
  %2 = bitcast double* %1 to i8*
  tail call void @free(i8* %2) #38
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %if.then
  %ncols.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %indvars.iv, i32 1
  %3 = load i32, i32* %ncols.i, align 4, !tbaa !139
  %ncols2.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %indvars.iv, i32 1
  store i32 %3, i32* %ncols2.i, align 4, !tbaa !139
  %nrows.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %indvars.iv, i32 0
  %4 = load i32, i32* %nrows.i, align 8, !tbaa !138
  %nrows3.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %indvars.iv, i32 0
  store i32 %4, i32* %nrows3.i, align 8, !tbaa !138
  %mul.i = mul i32 %4, %3
  %conv.i = sext i32 %mul.i to i64
  %mul6.i = shl nsw i64 %conv.i, 3
  %call.i = tail call noalias i8* @malloc(i64 %mul6.i) #38
  %5 = bitcast double** %data.i to i8**
  store i8* %call.i, i8** %5, align 8, !tbaa !137
  %cmp1131.i = icmp sgt i32 %mul.i, 0
  %6 = bitcast i8* %call.i to double*
  br i1 %cmp1131.i, label %for.body.lr.ph.i, label %for.inc

for.body.lr.ph.i:                                 ; preds = %if.end.i
  %data12.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %indvars.iv, i32 2
  %7 = load double*, double** %data12.i, align 8, !tbaa !137
  %wide.trip.count.i = zext i32 %mul.i to i64
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i, %for.body.lr.ph.i
  %indvars.iv.i = phi i64 [ 0, %for.body.lr.ph.i ], [ %indvars.iv.next.i, %for.body.i ]
  %arrayidx.i = getelementptr inbounds double, double* %7, i64 %indvars.iv.i
  %8 = load double, double* %arrayidx.i, align 8, !tbaa !75
  %arrayidx15.i = getelementptr inbounds double, double* %6, i64 %indvars.iv.i
  store double %8, double* %arrayidx15.i, align 8, !tbaa !75
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, %wide.trip.count.i
  br i1 %exitcond.not.i, label %for.inc, label %for.body.i, !llvm.loop !221

if.else:                                          ; preds = %for.body
  %idxprom8 = sext i32 %0 to i64
  %arrayidx9 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %idxprom8
  %arrayidx11 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %indvars.iv
  %arrayidx13 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %indvars.iv
  tail call void @mat_mult(%struct.Matrix* %arrayidx9, %struct.Matrix* %arrayidx11, %struct.Matrix* %arrayidx13)
  br label %for.inc

for.inc:                                          ; preds = %if.else, %for.body.i, %if.end.i
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.end, label %for.body, !llvm.loop !227

for.end:                                          ; preds = %for.inc, %entry
  ret void
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @euler_angles_to_rotation_matrix(double* noalias nocapture readonly %xzy, %struct.Matrix* noalias nocapture %R) local_unnamed_addr #5 {
for.cond1.preheader.lr.ph.i:
  %0 = load double, double* %xzy, align 8, !tbaa !75
  %arrayidx1 = getelementptr inbounds double, double* %xzy, i64 2
  %1 = load double, double* %arrayidx1, align 8, !tbaa !75
  %arrayidx2 = getelementptr inbounds double, double* %xzy, i64 1
  %2 = load double, double* %arrayidx2, align 8, !tbaa !75
  %call.i = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #38
  %nrows1.i = bitcast i8* %call.i to i32*
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138
  %ncols2.i = getelementptr inbounds i8, i8* %call.i, i64 4
  %3 = bitcast i8* %ncols2.i to i32*
  store i32 3, i32* %3, align 4, !tbaa !139
  %call4.i = tail call noalias dereferenceable_or_null(72) i8* @malloc(i64 72) #38
  %data.i = getelementptr inbounds i8, i8* %call.i, i64 8
  %4 = bitcast i8* %data.i to i8**
  store i8* %call4.i, i8** %4, align 8, !tbaa !137
  %call.i167 = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #38
  %nrows1.i168 = bitcast i8* %call.i167 to i32*
  store i32 3, i32* %nrows1.i168, align 8, !tbaa !138
  %ncols2.i169 = getelementptr inbounds i8, i8* %call.i167, i64 4
  %5 = bitcast i8* %ncols2.i169 to i32*
  store i32 3, i32* %5, align 4, !tbaa !139
  %call4.i170 = tail call noalias dereferenceable_or_null(72) i8* @malloc(i64 72) #38
  %data.i171 = getelementptr inbounds i8, i8* %call.i167, i64 8
  %6 = bitcast i8* %data.i171 to i8**
  store i8* %call4.i170, i8** %6, align 8, !tbaa !137
  %call.i172 = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #38
  %nrows1.i173 = bitcast i8* %call.i172 to i32*
  store i32 3, i32* %nrows1.i173, align 8, !tbaa !138
  %ncols2.i174 = getelementptr inbounds i8, i8* %call.i172, i64 4
  %7 = bitcast i8* %ncols2.i174 to i32*
  store i32 3, i32* %7, align 4, !tbaa !139
  %call4.i175 = tail call noalias dereferenceable_or_null(72) i8* @malloc(i64 72) #38
  %data.i176 = getelementptr inbounds i8, i8* %call.i172, i64 8
  %8 = bitcast i8* %data.i176 to i8**
  store i8* %call4.i175, i8** %8, align 8, !tbaa !137
  %9 = bitcast i8* %call4.i to double*
  %10 = bitcast i8* %call4.i170 to double*
  br label %for.body3.lr.ph.i

for.body3.lr.ph.i:                                ; preds = %for.inc12.i, %for.cond1.preheader.lr.ph.i
  %indvars.iv265 = phi i64 [ %indvars.iv.next266, %for.inc12.i ], [ 0, %for.cond1.preheader.lr.ph.i ]
  %11 = mul nuw nsw i64 %indvars.iv265, 3
  %12 = shl nuw nsw i64 %indvars.iv265, 2
  %arrayidx.i = getelementptr inbounds double, double* %9, i64 %12
  br label %for.body3.i

for.body3.i:                                      ; preds = %for.inc.i, %for.body3.lr.ph.i
  %indvars.iv262 = phi i64 [ %indvars.iv.next263, %for.inc.i ], [ 0, %for.body3.lr.ph.i ]
  %cmp4.i = icmp eq i64 %indvars.iv265, %indvars.iv262
  br i1 %cmp4.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %for.body3.i
  store double 1.000000e+00, double* %arrayidx.i, align 8, !tbaa !75
  br label %for.inc.i

if.else.i:                                        ; preds = %for.body3.i
  %13 = add nuw nsw i64 %indvars.iv262, %11
  %arrayidx11.i = getelementptr inbounds double, double* %9, i64 %13
  store double 0.000000e+00, double* %arrayidx11.i, align 8, !tbaa !75
  br label %for.inc.i

for.inc.i:                                        ; preds = %if.else.i, %if.then.i
  %indvars.iv.next263 = add nuw nsw i64 %indvars.iv262, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.next263, 3
  br i1 %exitcond.not.i, label %for.inc12.i, label %for.body3.i, !llvm.loop !216

for.inc12.i:                                      ; preds = %for.inc.i
  %indvars.iv.next266 = add nuw nsw i64 %indvars.iv265, 1
  %exitcond37.not.i = icmp eq i64 %indvars.iv.next266, 3
  br i1 %exitcond37.not.i, label %for.cond1.preheader.lr.ph.i182, label %for.body3.lr.ph.i, !llvm.loop !217

for.cond1.preheader.lr.ph.i182:                   ; preds = %for.inc12.i
  %14 = bitcast i8* %call.i to %struct.Matrix*
  %15 = bitcast i8* %call.i167 to %struct.Matrix*
  %16 = bitcast i8* %call.i172 to %struct.Matrix*
  %17 = bitcast i8* %call4.i175 to double*
  %18 = tail call fast double @llvm.cos.f64(double %0)
  %arrayidx5 = getelementptr inbounds i8, i8* %call4.i, i64 32
  %19 = bitcast i8* %arrayidx5 to double*
  store double %18, double* %19, align 8, !tbaa !75
  %20 = tail call fast double @llvm.sin.f64(double %0)
  %arrayidx11 = getelementptr inbounds i8, i8* %call4.i, i64 40
  %21 = bitcast i8* %arrayidx11 to double*
  store double %20, double* %21, align 8, !tbaa !75
  %fneg = fneg fast double %20
  %arrayidx23 = getelementptr inbounds i8, i8* %call4.i, i64 56
  %22 = bitcast i8* %arrayidx23 to double*
  store double %fneg, double* %22, align 8, !tbaa !75
  %arrayidx35 = getelementptr inbounds i8, i8* %call4.i, i64 64
  %23 = bitcast i8* %arrayidx35 to double*
  store double %18, double* %23, align 8, !tbaa !75
  br label %for.body3.lr.ph.i189

for.body3.lr.ph.i189:                             ; preds = %for.inc12.i204, %for.cond1.preheader.lr.ph.i182
  %indvars.iv258 = phi i64 [ %indvars.iv.next259, %for.inc12.i204 ], [ 0, %for.cond1.preheader.lr.ph.i182 ]
  %24 = mul nuw nsw i64 %indvars.iv258, 3
  %25 = shl nuw nsw i64 %indvars.iv258, 2
  %arrayidx.i193 = getelementptr inbounds double, double* %10, i64 %25
  br label %for.body3.i192

for.body3.i192:                                   ; preds = %for.inc.i201, %for.body3.lr.ph.i189
  %indvars.iv255 = phi i64 [ %indvars.iv.next256, %for.inc.i201 ], [ 0, %for.body3.lr.ph.i189 ]
  %cmp4.i191 = icmp eq i64 %indvars.iv258, %indvars.iv255
  br i1 %cmp4.i191, label %if.then.i194, label %if.else.i198

if.then.i194:                                     ; preds = %for.body3.i192
  store double 1.000000e+00, double* %arrayidx.i193, align 8, !tbaa !75
  br label %for.inc.i201

if.else.i198:                                     ; preds = %for.body3.i192
  %26 = add nuw nsw i64 %indvars.iv255, %24
  %arrayidx11.i197 = getelementptr inbounds double, double* %10, i64 %26
  store double 0.000000e+00, double* %arrayidx11.i197, align 8, !tbaa !75
  br label %for.inc.i201

for.inc.i201:                                     ; preds = %if.else.i198, %if.then.i194
  %indvars.iv.next256 = add nuw nsw i64 %indvars.iv255, 1
  %exitcond.not.i200 = icmp eq i64 %indvars.iv.next256, 3
  br i1 %exitcond.not.i200, label %for.inc12.i204, label %for.body3.i192, !llvm.loop !216

for.inc12.i204:                                   ; preds = %for.inc.i201
  %indvars.iv.next259 = add nuw nsw i64 %indvars.iv258, 1
  %exitcond37.not.i203 = icmp eq i64 %indvars.iv.next259, 3
  br i1 %exitcond37.not.i203, label %for.cond1.preheader.lr.ph.i211, label %for.body3.lr.ph.i189, !llvm.loop !217

for.cond1.preheader.lr.ph.i211:                   ; preds = %for.inc12.i204
  %27 = tail call fast double @llvm.cos.f64(double %1)
  store double %27, double* %10, align 8, !tbaa !75
  %28 = tail call fast double @llvm.sin.f64(double %1)
  %arrayidx47 = getelementptr inbounds i8, i8* %call4.i170, i64 48
  %29 = bitcast i8* %arrayidx47 to double*
  store double %28, double* %29, align 8, !tbaa !75
  %fneg54 = fneg fast double %28
  %arrayidx60 = getelementptr inbounds i8, i8* %call4.i170, i64 16
  %30 = bitcast i8* %arrayidx60 to double*
  store double %fneg54, double* %30, align 8, !tbaa !75
  %arrayidx72 = getelementptr inbounds i8, i8* %call4.i170, i64 64
  %31 = bitcast i8* %arrayidx72 to double*
  store double %27, double* %31, align 8, !tbaa !75
  br label %for.body3.lr.ph.i218

for.body3.lr.ph.i218:                             ; preds = %for.inc12.i233, %for.cond1.preheader.lr.ph.i211
  %indvars.iv251 = phi i64 [ %indvars.iv.next252, %for.inc12.i233 ], [ 0, %for.cond1.preheader.lr.ph.i211 ]
  %32 = mul nuw nsw i64 %indvars.iv251, 3
  %33 = shl nuw nsw i64 %indvars.iv251, 2
  %arrayidx.i222 = getelementptr inbounds double, double* %17, i64 %33
  br label %for.body3.i221

for.body3.i221:                                   ; preds = %for.inc.i230, %for.body3.lr.ph.i218
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc.i230 ], [ 0, %for.body3.lr.ph.i218 ]
  %cmp4.i220 = icmp eq i64 %indvars.iv251, %indvars.iv
  br i1 %cmp4.i220, label %if.then.i223, label %if.else.i227

if.then.i223:                                     ; preds = %for.body3.i221
  store double 1.000000e+00, double* %arrayidx.i222, align 8, !tbaa !75
  br label %for.inc.i230

if.else.i227:                                     ; preds = %for.body3.i221
  %34 = add nuw nsw i64 %indvars.iv, %32
  %arrayidx11.i226 = getelementptr inbounds double, double* %17, i64 %34
  store double 0.000000e+00, double* %arrayidx11.i226, align 8, !tbaa !75
  br label %for.inc.i230

for.inc.i230:                                     ; preds = %if.else.i227, %if.then.i223
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not.i229 = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond.not.i229, label %for.inc12.i233, label %for.body3.i221, !llvm.loop !216

for.inc12.i233:                                   ; preds = %for.inc.i230
  %indvars.iv.next252 = add nuw nsw i64 %indvars.iv251, 1
  %exitcond37.not.i232 = icmp eq i64 %indvars.iv.next252, 3
  br i1 %exitcond37.not.i232, label %set_identity.exit234, label %for.body3.lr.ph.i218, !llvm.loop !217

set_identity.exit234:                             ; preds = %for.inc12.i233
  %35 = tail call fast double @llvm.cos.f64(double %2)
  store double %35, double* %17, align 8, !tbaa !75
  %36 = tail call fast double @llvm.sin.f64(double %2)
  %arrayidx84 = getelementptr inbounds i8, i8* %call4.i175, i64 8
  %37 = bitcast i8* %arrayidx84 to double*
  store double %36, double* %37, align 8, !tbaa !75
  %fneg91 = fneg fast double %36
  %arrayidx97 = getelementptr inbounds i8, i8* %call4.i175, i64 24
  %38 = bitcast i8* %arrayidx97 to double*
  store double %fneg91, double* %38, align 8, !tbaa !75
  %arrayidx109 = getelementptr inbounds i8, i8* %call4.i175, i64 32
  %39 = bitcast i8* %arrayidx109 to double*
  store double %35, double* %39, align 8, !tbaa !75
  %call.i235 = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #38
  %40 = bitcast i8* %call.i235 to %struct.Matrix*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %call.i235, i8 0, i64 16, i1 false) #38
  tail call void @mat_mult(%struct.Matrix* %16, %struct.Matrix* %15, %struct.Matrix* %40)
  tail call void @mat_mult(%struct.Matrix* %40, %struct.Matrix* %14, %struct.Matrix* %R)
  %cmp.not.i = icmp eq i8* %call4.i, null
  br i1 %cmp.not.i, label %delete_matrix.exit245, label %if.then.i237

if.then.i237:                                     ; preds = %set_identity.exit234
  tail call void @free(i8* nonnull %call4.i) #38
  br label %delete_matrix.exit245

delete_matrix.exit245:                            ; preds = %if.then.i237, %set_identity.exit234
  tail call void @free(i8* %call.i) #38
  tail call void @free(i8* %call4.i170) #38
  tail call void @free(i8* %call.i167) #38
  tail call void @free(i8* nonnull %call4.i175) #38
  tail call void @free(i8* nonnull %call.i172) #38
  %data.i246 = getelementptr inbounds i8, i8* %call.i235, i64 8
  %41 = bitcast i8* %data.i246 to double**
  %42 = load double*, double** %41, align 8, !tbaa !137
  %cmp.not.i247 = icmp eq double* %42, null
  br i1 %cmp.not.i247, label %delete_matrix.exit249, label %if.then.i248

if.then.i248:                                     ; preds = %delete_matrix.exit245
  %43 = bitcast double* %42 to i8*
  tail call void @free(i8* %43) #38
  br label %delete_matrix.exit249

delete_matrix.exit249:                            ; preds = %if.then.i248, %delete_matrix.exit245
  tail call void @free(i8* nonnull %call.i235) #38
  ret void
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @get_posed_relatives(i32 %bone_count, %struct.Matrix* noalias nocapture readonly %base_relatives, %struct.Matrix* noalias nocapture readonly %pose_params, %struct.Matrix* noalias nocapture %relatives) local_unnamed_addr #5 {
entry:
  %call.i = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #38
  %0 = bitcast i8* %call.i to %struct.Matrix*
  %nrows1.i = bitcast i8* %call.i to i32*
  store i32 4, i32* %nrows1.i, align 8, !tbaa !138
  %ncols2.i = getelementptr inbounds i8, i8* %call.i, i64 4
  %1 = bitcast i8* %ncols2.i to i32*
  store i32 4, i32* %1, align 4, !tbaa !139
  %call4.i = tail call noalias dereferenceable_or_null(128) i8* @malloc(i64 128) #38
  %data.i = getelementptr inbounds i8, i8* %call.i, i64 8
  %2 = bitcast i8* %data.i to i8**
  store i8* %call4.i, i8** %2, align 8, !tbaa !137
  %call.i18 = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #38
  %3 = bitcast i8* %call.i18 to %struct.Matrix*
  %nrows1.i19 = bitcast i8* %call.i18 to i32*
  store i32 3, i32* %nrows1.i19, align 8, !tbaa !138
  %ncols2.i20 = getelementptr inbounds i8, i8* %call.i18, i64 4
  %4 = bitcast i8* %ncols2.i20 to i32*
  store i32 3, i32* %4, align 4, !tbaa !139
  %call4.i21 = tail call noalias dereferenceable_or_null(72) i8* @malloc(i64 72) #38
  %data.i22 = getelementptr inbounds i8, i8* %call.i18, i64 8
  %5 = bitcast i8* %data.i22 to i8**
  store i8* %call4.i21, i8** %5, align 8, !tbaa !137
  %cmp40 = icmp sgt i32 %bone_count, 0
  %6 = bitcast i8* %call4.i to double*
  br i1 %cmp40, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %entry
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 2
  %7 = load double*, double** %data, align 8, !tbaa !137
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 0
  %8 = load i32, i32* %nrows, align 8, !tbaa !138
  %9 = bitcast i8* %data.i22 to double**
  %wide.trip.count = zext i32 %bone_count to i64
  br label %for.cond1.preheader.lr.ph.i

for.cond1.preheader.lr.ph.i:                      ; preds = %set_block.exit, %for.body.lr.ph
  %indvars.iv52 = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next53, %set_block.exit ]
  br label %for.body3.lr.ph.i

for.body3.lr.ph.i:                                ; preds = %for.inc12.i, %for.cond1.preheader.lr.ph.i
  %indvars.iv43 = phi i64 [ %indvars.iv.next44, %for.inc12.i ], [ 0, %for.cond1.preheader.lr.ph.i ]
  %10 = shl nsw i64 %indvars.iv43, 2
  %11 = mul nsw i64 %indvars.iv43, 5
  %arrayidx.i = getelementptr inbounds double, double* %6, i64 %11
  br label %for.body3.i

for.body3.i:                                      ; preds = %for.inc.i, %for.body3.lr.ph.i
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc.i ], [ 0, %for.body3.lr.ph.i ]
  %cmp4.i = icmp eq i64 %indvars.iv43, %indvars.iv
  br i1 %cmp4.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %for.body3.i
  store double 1.000000e+00, double* %arrayidx.i, align 8, !tbaa !75
  br label %for.inc.i

if.else.i:                                        ; preds = %for.body3.i
  %12 = add nuw nsw i64 %indvars.iv, %10
  %arrayidx11.i = getelementptr inbounds double, double* %6, i64 %12
  store double 0.000000e+00, double* %arrayidx11.i, align 8, !tbaa !75
  br label %for.inc.i

for.inc.i:                                        ; preds = %if.else.i, %if.then.i
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.next, 4
  br i1 %exitcond.not.i, label %for.inc12.i, label %for.body3.i, !llvm.loop !216

for.inc12.i:                                      ; preds = %for.inc.i
  %indvars.iv.next44 = add nuw nsw i64 %indvars.iv43, 1
  %exitcond37.not.i = icmp eq i64 %indvars.iv.next44, 4
  br i1 %exitcond37.not.i, label %set_identity.exit, label %for.body3.lr.ph.i, !llvm.loop !217

set_identity.exit:                                ; preds = %for.inc12.i
  %13 = trunc i64 %indvars.iv52 to i32
  %14 = add i32 %13, 3
  %mul = mul nsw i32 %8, %14
  %idx.ext = sext i32 %mul to i64
  %add.ptr = getelementptr inbounds double, double* %7, i64 %idx.ext
  tail call void @euler_angles_to_rotation_matrix(double* %add.ptr, %struct.Matrix* %3)
  %15 = load i32, i32* %4, align 4, !tbaa !139
  %cmp30.i = icmp sgt i32 %15, 0
  br i1 %cmp30.i, label %for.cond1.preheader.lr.ph.i26, label %set_block.exit

for.cond1.preheader.lr.ph.i26:                    ; preds = %set_identity.exit
  %16 = load i32, i32* %nrows1.i19, align 8, !tbaa !138
  %cmp228.i = icmp sgt i32 %16, 0
  %wide.trip.count.i = zext i32 %16 to i64
  %17 = zext i32 %15 to i64
  %18 = sext i32 %16 to i64
  br label %for.cond1.preheader.i27

for.cond1.preheader.i27:                          ; preds = %for.inc13.i, %for.cond1.preheader.lr.ph.i26
  %indvars.iv48 = phi i64 [ %indvars.iv.next49, %for.inc13.i ], [ 0, %for.cond1.preheader.lr.ph.i26 ]
  br i1 %cmp228.i, label %for.body3.lr.ph.i29, label %for.inc13.i

for.body3.lr.ph.i29:                              ; preds = %for.cond1.preheader.i27
  %19 = load double*, double** %9, align 8, !tbaa !137
  %20 = shl nsw i64 %indvars.iv48, 2
  %21 = mul nsw i64 %indvars.iv48, %18
  br label %for.body3.i32

for.body3.i32:                                    ; preds = %for.body3.i32, %for.body3.lr.ph.i29
  %indvars.iv.i = phi i64 [ 0, %for.body3.lr.ph.i29 ], [ %indvars.iv.next.i, %for.body3.i32 ]
  %22 = add nsw i64 %indvars.iv.i, %21
  %arrayidx.i30 = getelementptr inbounds double, double* %19, i64 %22
  %23 = load double, double* %arrayidx.i30, align 8, !tbaa !75
  %24 = add nuw nsw i64 %indvars.iv.i, %20
  %arrayidx12.i = getelementptr inbounds double, double* %6, i64 %24
  store double %23, double* %arrayidx12.i, align 8, !tbaa !75
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i31 = icmp eq i64 %indvars.iv.next.i, %wide.trip.count.i
  br i1 %exitcond.not.i31, label %for.inc13.i, label %for.body3.i32, !llvm.loop !219

for.inc13.i:                                      ; preds = %for.body3.i32, %for.cond1.preheader.i27
  %indvars.iv.next49 = add nuw nsw i64 %indvars.iv48, 1
  %exitcond37.not.i33 = icmp eq i64 %indvars.iv.next49, %17
  br i1 %exitcond37.not.i33, label %set_block.exit, label %for.cond1.preheader.i27, !llvm.loop !220

set_block.exit:                                   ; preds = %for.inc13.i, %set_identity.exit
  %arrayidx = getelementptr inbounds %struct.Matrix, %struct.Matrix* %base_relatives, i64 %indvars.iv52
  %arrayidx3 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %indvars.iv52
  tail call void @mat_mult(%struct.Matrix* %arrayidx, %struct.Matrix* %0, %struct.Matrix* %arrayidx3)
  %indvars.iv.next53 = add nuw nsw i64 %indvars.iv52, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next53, %wide.trip.count
  br i1 %exitcond.not, label %for.end, label %for.cond1.preheader.lr.ph.i, !llvm.loop !228

for.end:                                          ; preds = %set_block.exit, %entry
  %cmp.not.i = icmp eq i8* %call4.i, null
  br i1 %cmp.not.i, label %delete_matrix.exit, label %if.then.i35

if.then.i35:                                      ; preds = %for.end
  tail call void @free(i8* nonnull %call4.i) #38
  br label %delete_matrix.exit

delete_matrix.exit:                               ; preds = %if.then.i35, %for.end
  tail call void @free(i8* nonnull %call.i) #38
  %25 = bitcast i8* %data.i22 to double**
  %26 = load double*, double** %25, align 8, !tbaa !137
  %cmp.not.i37 = icmp eq double* %26, null
  br i1 %cmp.not.i37, label %delete_matrix.exit39, label %if.then.i38

if.then.i38:                                      ; preds = %delete_matrix.exit
  %27 = bitcast double* %26 to i8*
  tail call void @free(i8* %27) #38
  br label %delete_matrix.exit39

delete_matrix.exit39:                             ; preds = %if.then.i38, %delete_matrix.exit
  tail call void @free(i8* nonnull %call.i18) #38
  ret void
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @to_pose_params(i32 %count, double* noalias nocapture readonly %theta, i8** noalias nocapture readnone %bone_names, %struct.Matrix* noalias nocapture %pose_params) local_unnamed_addr #5 {
entry:
  %theta99 = bitcast double* %theta to i8*
  %add = add nsw i32 %count, 3
  %nrows1.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 0
  %0 = load i32, i32* %nrows1.i, align 8, !tbaa !138
  %ncols2.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 1
  %1 = load i32, i32* %ncols2.i, align 4, !tbaa !139
  %mul.i = mul nsw i32 %1, %0
  %mul3.i = mul i32 %add, 3
  %cmp.not.i = icmp eq i32 %mul.i, %mul3.i
  br i1 %cmp.not.i, label %resize.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %data.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 2
  %2 = load double*, double** %data.i, align 8, !tbaa !137
  %cmp4.not.i = icmp eq double* %2, null
  br i1 %cmp4.not.i, label %if.end.i, label %if.then5.i

if.then5.i:                                       ; preds = %if.then.i
  %3 = bitcast double* %2 to i8*
  tail call void @free(i8* %3) #38
  br label %if.end.i

if.end.i:                                         ; preds = %if.then5.i, %if.then.i
  %cmp8.i = icmp sgt i32 %mul3.i, 0
  br i1 %cmp8.i, label %resize.exit.thread, label %resize.exit.thread87

resize.exit.thread:                               ; preds = %if.end.i
  %conv31.i = zext i32 %mul3.i to i64
  %mul11.i = shl nuw nsw i64 %conv31.i, 3
  %call.i = tail call noalias i8* @malloc(i64 %mul11.i) #38
  %4 = bitcast double** %data.i to i8**
  store i8* %call.i, i8** %4, align 8, !tbaa !137
  store i32 %add, i32* %ncols2.i, align 4, !tbaa !139
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138
  %5 = bitcast i8* %call.i to double*
  br label %for.body.lr.ph.i

resize.exit.thread87:                             ; preds = %if.end.i
  store double* null, double** %data.i, align 8, !tbaa !137
  store i32 %add, i32* %ncols2.i, align 4, !tbaa !139
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138
  br label %fill.exit

resize.exit:                                      ; preds = %entry
  store i32 %add, i32* %ncols2.i, align 4, !tbaa !139
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138
  %cmp7.i = icmp sgt i32 %mul.i, 0
  %data.i85.phi.trans.insert = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 2
  %.pre = load double*, double** %data.i85.phi.trans.insert, align 8, !tbaa !137
  br i1 %cmp7.i, label %resize.exit.for.body.lr.ph.i_crit_edge, label %fill.exit

resize.exit.for.body.lr.ph.i_crit_edge:           ; preds = %resize.exit
  %.pre107 = zext i32 %mul3.i to i64
  %.pre108 = shl nuw nsw i64 %.pre107, 3
  br label %for.body.lr.ph.i

for.body.lr.ph.i:                                 ; preds = %resize.exit.for.body.lr.ph.i_crit_edge, %resize.exit.thread
  %.pre-phi = phi i64 [ %.pre108, %resize.exit.for.body.lr.ph.i_crit_edge ], [ %mul11.i, %resize.exit.thread ]
  %6 = phi double* [ %.pre, %resize.exit.for.body.lr.ph.i_crit_edge ], [ %5, %resize.exit.thread ]
  %7 = bitcast double* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 %.pre-phi, i1 false)
  br label %fill.exit

fill.exit:                                        ; preds = %for.body.lr.ph.i, %resize.exit, %resize.exit.thread87
  %8 = phi double* [ %6, %for.body.lr.ph.i ], [ null, %resize.exit.thread87 ], [ %.pre, %resize.exit ]
  %9 = bitcast double* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %9, i8* nonnull align 8 dereferenceable(24) %theta99, i64 24, i1 false)
  br label %for.body

for.cond17.preheader:                             ; preds = %for.body
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 2
  %10 = load double*, double** %data, align 8, !tbaa !137
  br label %for.cond20.preheader

for.body:                                         ; preds = %for.body, %fill.exit
  %indvars.iv101 = phi i64 [ 0, %fill.exit ], [ %indvars.iv.next102, %for.body ]
  %11 = add nuw nsw i64 %indvars.iv101, 3
  %arrayidx7 = getelementptr inbounds double, double* %8, i64 %11
  store double 1.000000e+00, double* %arrayidx7, align 8, !tbaa !75
  %arrayidx10 = getelementptr inbounds double, double* %theta, i64 %11
  %12 = load double, double* %arrayidx10, align 8, !tbaa !75
  %13 = add nuw nsw i64 %indvars.iv101, 6
  %arrayidx16 = getelementptr inbounds double, double* %8, i64 %13
  store double %12, double* %arrayidx16, align 8, !tbaa !75
  %indvars.iv.next102 = add nuw nsw i64 %indvars.iv101, 1
  %exitcond105.not = icmp eq i64 %indvars.iv.next102, 3
  br i1 %exitcond105.not, label %for.cond17.preheader, label %for.body, !llvm.loop !229

for.cond20.preheader:                             ; preds = %for.end45, %for.cond17.preheader
  %i_finger.094 = phi i32 [ 0, %for.cond17.preheader ], [ %inc48, %for.end45 ]
  %i_pose_params.093 = phi i32 [ 5, %for.cond17.preheader ], [ %inc46, %for.end45 ]
  %i_theta.092 = phi i32 [ 6, %for.cond17.preheader ], [ %i_theta.2.lcssa, %for.end45 ]
  %14 = sext i32 %i_pose_params.093 to i64
  %15 = add i32 %i_pose_params.093, 3
  br label %for.body22

for.body22:                                       ; preds = %if.end, %for.cond20.preheader
  %indvars.iv = phi i64 [ %14, %for.cond20.preheader ], [ %indvars.iv.next, %if.end ]
  %i.191 = phi i32 [ 2, %for.cond20.preheader ], [ %inc44, %if.end ]
  %i_theta.189 = phi i32 [ %i_theta.092, %for.cond20.preheader ], [ %i_theta.2, %if.end ]
  %idxprom23 = sext i32 %i_theta.189 to i64
  %arrayidx24 = getelementptr inbounds double, double* %theta, i64 %idxprom23
  %16 = load double, double* %arrayidx24, align 8, !tbaa !75
  %17 = mul nsw i64 %indvars.iv, 3
  %arrayidx30 = getelementptr inbounds double, double* %10, i64 %17
  store double %16, double* %arrayidx30, align 8, !tbaa !75
  %inc31 = add nsw i32 %i_theta.189, 1
  %cmp32 = icmp eq i32 %i.191, 2
  br i1 %cmp32, label %if.then, label %if.end

if.then:                                          ; preds = %for.body22
  %idxprom33 = sext i32 %inc31 to i64
  %arrayidx34 = getelementptr inbounds double, double* %theta, i64 %idxprom33
  %18 = load double, double* %arrayidx34, align 8, !tbaa !75
  %19 = add nsw i64 %17, 1
  %arrayidx40 = getelementptr inbounds double, double* %10, i64 %19
  store double %18, double* %arrayidx40, align 8, !tbaa !75
  %inc41 = add nsw i32 %i_theta.189, 2
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body22
  %i_theta.2 = phi i32 [ %inc41, %if.then ], [ %inc31, %for.body22 ]
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %inc44 = add nuw nsw i32 %i.191, 1
  %lftr.wideiv1 = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %15, %lftr.wideiv1
  br i1 %exitcond, label %for.end45, label %for.body22, !llvm.loop !230

for.end45:                                        ; preds = %if.end
  %i_theta.2.lcssa = phi i32 [ %i_theta.2, %if.end ]
  %indvars.iv.lcssa = phi i64 [ %indvars.iv, %if.end ]
  %20 = trunc i64 %indvars.iv.lcssa to i32
  %inc46 = add nsw i32 %20, 2
  %inc48 = add nuw nsw i32 %i_finger.094, 1
  %exitcond98.not = icmp eq i32 %inc48, 5
  br i1 %exitcond98.not, label %for.end49, label %for.cond20.preheader, !llvm.loop !231

for.end49:                                        ; preds = %for.end45
  ret void
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @hand_objective(double* noalias nocapture readonly %theta, i32 %bone_count, i8** noalias nocapture readnone %bone_names, i32* noalias nocapture readonly %parents, %struct.Matrix* noalias nocapture readonly %base_relatives, %struct.Matrix* noalias nocapture readonly %inverse_base_absolutes, %struct.Matrix* noalias nocapture readonly %base_positions, %struct.Matrix* noalias nocapture readonly %weights, %struct.Triangle* noalias nocapture readnone %triangles, i32 %is_mirrored, i32 %corresp_count, i32* noalias nocapture readonly %correspondences, %struct.Matrix* nocapture readonly %points, double* noalias nocapture %err) #5 {
entry:
  %call.i = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #38
  %0 = bitcast i8* %call.i to %struct.Matrix*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %call.i, i8 0, i64 16, i1 false) #38
  tail call void @to_pose_params(i32 %bone_count, double* %theta, i8** undef, %struct.Matrix* %0)
  %call.i39 = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #38
  %1 = bitcast i8* %call.i39 to %struct.Matrix*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %call.i39, i8 0, i64 16, i1 false) #38
  tail call fastcc void @_ZL28get_skinned_vertex_positionsiPK6MatrixPKiS1_S1_S1_iS1_PS_i(i32 %bone_count, %struct.Matrix* %base_relatives, i32* %parents, %struct.Matrix* %inverse_base_absolutes, %struct.Matrix* %base_positions, %struct.Matrix* %weights, i32 %is_mirrored, %struct.Matrix* %0, %struct.Matrix* %1)
  %cmp45 = icmp sgt i32 %corresp_count, 0
  br i1 %cmp45, label %for.cond2.preheader.lr.ph, label %for.end19

for.cond2.preheader.lr.ph:                        ; preds = %entry
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %points, i64 0, i32 2
  %2 = load double*, double** %data, align 8, !tbaa !137
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %points, i64 0, i32 0
  %3 = load i32, i32* %nrows, align 8, !tbaa !138
  %data5 = getelementptr inbounds i8, i8* %call.i39, i64 8
  %4 = bitcast i8* %data5 to double**
  %5 = load double*, double** %4, align 8, !tbaa !137
  %nrows8 = bitcast i8* %call.i39 to i32*
  %6 = load i32, i32* %nrows8, align 8, !tbaa !138
  %7 = sext i32 %3 to i64
  %wide.trip.count = zext i32 %corresp_count to i64
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.inc17, %for.cond2.preheader.lr.ph
  %indvars.iv50 = phi i64 [ 0, %for.cond2.preheader.lr.ph ], [ %indvars.iv.next51, %for.inc17 ]
  %8 = mul nsw i64 %indvars.iv50, %7
  %arrayidx7 = getelementptr inbounds i32, i32* %correspondences, i64 %indvars.iv50
  %9 = load i32, i32* %arrayidx7, align 4, !tbaa !59
  %mul9 = mul nsw i32 %6, %9
  %10 = mul nuw nsw i64 %indvars.iv50, 3
  %11 = sext i32 %mul9 to i64
  br label %for.body4

for.body4:                                        ; preds = %for.body4, %for.cond2.preheader
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next, %for.body4 ]
  %12 = add nsw i64 %8, %indvars.iv
  %arrayidx = getelementptr inbounds double, double* %2, i64 %12
  %13 = load double, double* %arrayidx, align 8, !tbaa !75
  %14 = add nsw i64 %indvars.iv, %11
  %arrayidx12 = getelementptr inbounds double, double* %5, i64 %14
  %15 = load double, double* %arrayidx12, align 8, !tbaa !75
  %sub = fsub fast double %13, %15
  %16 = add nuw nsw i64 %indvars.iv, %10
  %arrayidx16 = getelementptr inbounds double, double* %err, i64 %16
  store double %sub, double* %arrayidx16, align 8, !tbaa !75
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond.not, label %for.inc17, label %for.body4, !llvm.loop !232

for.inc17:                                        ; preds = %for.body4
  %indvars.iv.next51 = add nuw nsw i64 %indvars.iv50, 1
  %exitcond54.not = icmp eq i64 %indvars.iv.next51, %wide.trip.count
  br i1 %exitcond54.not, label %for.end19, label %for.cond2.preheader, !llvm.loop !233

for.end19:                                        ; preds = %for.inc17, %entry
  %data.i = getelementptr inbounds i8, i8* %call.i, i64 8
  %17 = bitcast i8* %data.i to double**
  %18 = load double*, double** %17, align 8, !tbaa !137
  %cmp.not.i = icmp eq double* %18, null
  br i1 %cmp.not.i, label %delete_matrix.exit, label %if.then.i

if.then.i:                                        ; preds = %for.end19
  %19 = bitcast double* %18 to i8*
  tail call void @free(i8* %19) #38
  br label %delete_matrix.exit

delete_matrix.exit:                               ; preds = %if.then.i, %for.end19
  tail call void @free(i8* nonnull %call.i) #38
  %data.i40 = getelementptr inbounds i8, i8* %call.i39, i64 8
  %20 = bitcast i8* %data.i40 to double**
  %21 = load double*, double** %20, align 8, !tbaa !137
  %cmp.not.i41 = icmp eq double* %21, null
  br i1 %cmp.not.i41, label %delete_matrix.exit43, label %if.then.i42

if.then.i42:                                      ; preds = %delete_matrix.exit
  %22 = bitcast double* %21 to i8*
  tail call void @free(i8* %22) #38
  br label %delete_matrix.exit43

delete_matrix.exit43:                             ; preds = %if.then.i42, %delete_matrix.exit
  tail call void @free(i8* nonnull %call.i39) #38
  ret void
}

; Function Attrs: inlinehint nounwind uwtable mustprogress
define internal fastcc void @_ZL28get_skinned_vertex_positionsiPK6MatrixPKiS1_S1_S1_iS1_PS_i(i32 %bone_count, %struct.Matrix* noalias nocapture readonly %base_relatives, i32* nocapture readonly %parents, %struct.Matrix* noalias nocapture readonly %inverse_base_absolutes, %struct.Matrix* noalias nocapture readonly %base_positions, %struct.Matrix* noalias nocapture readonly %weights, i32 %is_mirrored, %struct.Matrix* noalias nocapture readonly %pose_params, %struct.Matrix* noalias nocapture %positions) unnamed_addr #19 {
entry:
  %conv.i = sext i32 %bone_count to i64
  %mul.i = shl nsw i64 %conv.i, 4
  %call.i = tail call noalias i8* @malloc(i64 %mul.i) #38
  %cmp15.i = icmp sgt i32 %bone_count, 0
  br i1 %cmp15.i, label %for.body.preheader.i11, label %get_matrix_array.exit6

get_matrix_array.exit6:                           ; preds = %entry
  %call.i3 = tail call noalias i8* @malloc(i64 %mul.i) #38
  %call.i9 = tail call noalias i8* @malloc(i64 %mul.i) #38
  br label %get_matrix_array.exit12

for.body.preheader.i11:                           ; preds = %entry
  %0 = zext i32 %bone_count to i64
  %1 = shl nuw nsw i64 %0, 4
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %call.i, i8 0, i64 %1, i1 false) #38
  %call.i359 = tail call noalias i8* @malloc(i64 %mul.i) #38
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %call.i359, i8 0, i64 %1, i1 false) #38
  %call.i963 = tail call noalias i8* @malloc(i64 %mul.i) #38
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %call.i963, i8 0, i64 %1, i1 false) #38
  br label %get_matrix_array.exit12

get_matrix_array.exit12:                          ; preds = %for.body.preheader.i11, %get_matrix_array.exit6
  %call.i966 = phi i8* [ %call.i9, %get_matrix_array.exit6 ], [ %call.i963, %for.body.preheader.i11 ]
  %call.i36064 = phi i8* [ %call.i3, %get_matrix_array.exit6 ], [ %call.i359, %for.body.preheader.i11 ]
  %2 = bitcast i8* %call.i to %struct.Matrix*
  %3 = bitcast i8* %call.i36064 to %struct.Matrix*
  %4 = bitcast i8* %call.i966 to %struct.Matrix*
  tail call void @get_posed_relatives(i32 %bone_count, %struct.Matrix* %base_relatives, %struct.Matrix* %pose_params, %struct.Matrix* %2)
  tail call void @relatives_to_absolutes(i32 %bone_count, %struct.Matrix* %2, i32* %parents, %struct.Matrix* %3)
  br i1 %cmp15.i, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %get_matrix_array.exit12
  %wide.trip.count101 = zext i32 %bone_count to i64
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %indvars.iv99 = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next100, %for.body ]
  %arrayidx = getelementptr inbounds %struct.Matrix, %struct.Matrix* %3, i64 %indvars.iv99
  %arrayidx4 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %inverse_base_absolutes, i64 %indvars.iv99
  %arrayidx6 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %4, i64 %indvars.iv99
  tail call void @mat_mult(%struct.Matrix* %arrayidx, %struct.Matrix* %arrayidx4, %struct.Matrix* %arrayidx6)
  %indvars.iv.next100 = add nuw nsw i64 %indvars.iv99, 1
  %exitcond102.not = icmp eq i64 %indvars.iv.next100, %wide.trip.count101
  br i1 %exitcond102.not, label %for.end, label %for.body, !llvm.loop !234

for.end:                                          ; preds = %for.body, %get_matrix_array.exit12
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %base_positions, i64 0, i32 1
  %5 = load i32, i32* %ncols, align 4, !tbaa !139
  %nrows1.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 0
  %6 = load i32, i32* %nrows1.i, align 8, !tbaa !138
  %ncols2.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 1
  %7 = load i32, i32* %ncols2.i, align 4, !tbaa !139
  %mul.i13 = mul nsw i32 %7, %6
  %mul3.i = mul i32 %5, 3
  %cmp.not.i = icmp eq i32 %mul.i13, %mul3.i
  br i1 %cmp.not.i, label %resize.exit, label %if.then.i

if.then.i:                                        ; preds = %for.end
  %data.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 2
  %8 = load double*, double** %data.i, align 8, !tbaa !137
  %cmp4.not.i = icmp eq double* %8, null
  br i1 %cmp4.not.i, label %if.end.i, label %if.then5.i

if.then5.i:                                       ; preds = %if.then.i
  %9 = bitcast double* %8 to i8*
  tail call void @free(i8* %9) #38
  br label %if.end.i

if.end.i:                                         ; preds = %if.then5.i, %if.then.i
  %cmp8.i = icmp sgt i32 %mul3.i, 0
  br i1 %cmp8.i, label %resize.exit.thread, label %resize.exit.thread69

resize.exit.thread:                               ; preds = %if.end.i
  %conv31.i = zext i32 %mul3.i to i64
  %mul11.i = shl nuw nsw i64 %conv31.i, 3
  %call.i14 = tail call noalias i8* @malloc(i64 %mul11.i) #38
  %10 = bitcast double** %data.i to i8**
  store i8* %call.i14, i8** %10, align 8, !tbaa !137
  store i32 %5, i32* %ncols2.i, align 4, !tbaa !139
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138
  br label %for.body.lr.ph.i

resize.exit.thread69:                             ; preds = %if.end.i
  store double* null, double** %data.i, align 8, !tbaa !137
  store i32 %5, i32* %ncols2.i, align 4, !tbaa !139
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138
  br label %fill.exit

resize.exit:                                      ; preds = %for.end
  store i32 %5, i32* %ncols2.i, align 4, !tbaa !139
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138
  %cmp7.i = icmp sgt i32 %mul.i13, 0
  br i1 %cmp7.i, label %resize.exit.for.body.lr.ph.i_crit_edge, label %fill.exit

resize.exit.for.body.lr.ph.i_crit_edge:           ; preds = %resize.exit
  %data.i15.phi.trans.insert = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 2
  %11 = bitcast double** %data.i15.phi.trans.insert to i8**
  %.pre105 = load i8*, i8** %11, align 8, !tbaa !137
  %.pre103 = zext i32 %mul3.i to i64
  %.pre104 = shl nuw nsw i64 %.pre103, 3
  br label %for.body.lr.ph.i

for.body.lr.ph.i:                                 ; preds = %resize.exit.for.body.lr.ph.i_crit_edge, %resize.exit.thread
  %.pre-phi = phi i64 [ %.pre104, %resize.exit.for.body.lr.ph.i_crit_edge ], [ %mul11.i, %resize.exit.thread ]
  %12 = phi i8* [ %.pre105, %resize.exit.for.body.lr.ph.i_crit_edge ], [ %call.i14, %resize.exit.thread ]
  call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 %.pre-phi, i1 false)
  br label %fill.exit

fill.exit:                                        ; preds = %for.body.lr.ph.i, %resize.exit, %resize.exit.thread69
  %call.i16 = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #38
  %13 = bitcast i8* %call.i16 to %struct.Matrix*
  %nrows1.i17 = bitcast i8* %call.i16 to i32*
  store i32 4, i32* %nrows1.i17, align 8, !tbaa !138
  %ncols2.i18 = getelementptr inbounds i8, i8* %call.i16, i64 4
  %14 = bitcast i8* %ncols2.i18 to i32*
  store i32 %5, i32* %14, align 4, !tbaa !139
  %mul.i19 = shl nsw i32 %5, 2
  %conv.i20 = sext i32 %mul.i19 to i64
  %mul3.i21 = shl nsw i64 %conv.i20, 3
  %call4.i = tail call noalias i8* @malloc(i64 %mul3.i21) #38
  %data.i22 = getelementptr inbounds i8, i8* %call.i16, i64 8
  %15 = bitcast i8* %data.i22 to i8**
  store i8* %call4.i, i8** %15, align 8, !tbaa !137
  br i1 %cmp15.i, label %for.body11.lr.ph, label %for.end45

for.body11.lr.ph:                                 ; preds = %fill.exit
  %cmp1674 = icmp sgt i32 %5, 0
  %16 = bitcast i8* %data.i22 to double**
  %data23 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %weights, i64 0, i32 2
  %nrows24 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %weights, i64 0, i32 0
  %data30 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 2
  %wide.trip.count97 = zext i32 %bone_count to i64
  %wide.trip.count93 = zext i32 %5 to i64
  br label %for.body11

for.body11:                                       ; preds = %for.inc43, %for.body11.lr.ph
  %indvars.iv95 = phi i64 [ 0, %for.body11.lr.ph ], [ %indvars.iv.next96, %for.inc43 ]
  %arrayidx13 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %4, i64 %indvars.iv95
  tail call void @mat_mult(%struct.Matrix* %arrayidx13, %struct.Matrix* %base_positions, %struct.Matrix* %13)
  br i1 %cmp1674, label %for.cond18.preheader.lr.ph, label %for.inc43

for.cond18.preheader.lr.ph:                       ; preds = %for.body11
  %17 = load double*, double** %16, align 8, !tbaa !137
  %18 = load i32, i32* %nrows1.i17, align 8, !tbaa !138
  %19 = load double*, double** %data23, align 8, !tbaa !137
  %20 = load i32, i32* %nrows24, align 8, !tbaa !138
  %21 = load double*, double** %data30, align 8, !tbaa !137
  %22 = sext i32 %18 to i64
  %23 = sext i32 %20 to i64
  br label %for.cond18.preheader

for.cond18.preheader:                             ; preds = %for.inc40, %for.cond18.preheader.lr.ph
  %indvars.iv87 = phi i64 [ 0, %for.cond18.preheader.lr.ph ], [ %indvars.iv.next88, %for.inc40 ]
  %24 = mul nsw i64 %indvars.iv87, %22
  %25 = mul nsw i64 %indvars.iv87, %23
  %26 = add nsw i64 %25, %indvars.iv95
  %arrayidx28 = getelementptr inbounds double, double* %19, i64 %26
  %27 = mul nuw nsw i64 %indvars.iv87, 3
  br label %for.body20

for.body20:                                       ; preds = %for.body20, %for.cond18.preheader
  %indvars.iv82 = phi i64 [ 0, %for.cond18.preheader ], [ %indvars.iv.next83, %for.body20 ]
  %28 = add nsw i64 %24, %indvars.iv82
  %arrayidx22 = getelementptr inbounds double, double* %17, i64 %28
  %29 = load double, double* %arrayidx22, align 8, !tbaa !75
  %30 = load double, double* %arrayidx28, align 8, !tbaa !75
  %mul29 = fmul fast double %30, %29
  %31 = add nuw nsw i64 %indvars.iv82, %27
  %arrayidx35 = getelementptr inbounds double, double* %21, i64 %31
  %32 = load double, double* %arrayidx35, align 8, !tbaa !75
  %add36 = fadd fast double %32, %mul29
  store double %add36, double* %arrayidx35, align 8, !tbaa !75
  %indvars.iv.next83 = add nuw nsw i64 %indvars.iv82, 1
  %exitcond86.not = icmp eq i64 %indvars.iv.next83, 3
  br i1 %exitcond86.not, label %for.inc40, label %for.body20, !llvm.loop !235

for.inc40:                                        ; preds = %for.body20
  %indvars.iv.next88 = add nuw nsw i64 %indvars.iv87, 1
  %exitcond94.not = icmp eq i64 %indvars.iv.next88, %wide.trip.count93
  br i1 %exitcond94.not, label %for.inc43, label %for.cond18.preheader, !llvm.loop !236

for.inc43:                                        ; preds = %for.inc40, %for.body11
  %indvars.iv.next96 = add nuw nsw i64 %indvars.iv95, 1
  %exitcond98.not = icmp eq i64 %indvars.iv.next96, %wide.trip.count97
  br i1 %exitcond98.not, label %for.end45, label %for.body11, !llvm.loop !237

for.end45:                                        ; preds = %for.inc43, %fill.exit
  %tobool.not = icmp ne i32 %is_mirrored, 0
  %cmp4871 = icmp sgt i32 %5, 0
  %or.cond = and i1 %tobool.not, %cmp4871
  br i1 %or.cond, label %for.body49.lr.ph, label %if.then61

for.body49.lr.ph:                                 ; preds = %for.end45
  %data50 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 2
  %33 = load double*, double** %data50, align 8, !tbaa !137
  %wide.trip.count = zext i32 %5 to i64
  br label %for.body49

for.body49:                                       ; preds = %for.body49, %for.body49.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body49.lr.ph ], [ %indvars.iv.next, %for.body49 ]
  %34 = mul nuw nsw i64 %indvars.iv, 3
  %arrayidx55 = getelementptr inbounds double, double* %33, i64 %34
  %35 = load double, double* %arrayidx55, align 8, !tbaa !75
  %mul56 = fneg fast double %35
  store double %mul56, double* %arrayidx55, align 8, !tbaa !75
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %if.then61, label %for.body49, !llvm.loop !238

if.then61:                                        ; preds = %for.body49, %for.end45
  tail call void @apply_global_transform(%struct.Matrix* %pose_params, %struct.Matrix* %positions)
  %36 = bitcast i8* %data.i22 to double**
  %37 = load double*, double** %36, align 8, !tbaa !137
  %cmp.not.i24 = icmp eq double* %37, null
  br i1 %cmp.not.i24, label %delete_matrix.exit, label %if.then.i25

if.then.i25:                                      ; preds = %if.then61
  %38 = bitcast double* %37 to i8*
  tail call void @free(i8* %38) #38
  br label %delete_matrix.exit

delete_matrix.exit:                               ; preds = %if.then.i25, %if.then61
  tail call void @free(i8* nonnull %call.i16) #38
  br i1 %cmp15.i, label %for.body.preheader.i28, label %delete_light_matrix_array.exit46.thread

for.body.preheader.i28:                           ; preds = %delete_matrix.exit
  %wide.trip.count.i27 = zext i32 %bone_count to i64
  br label %for.body.i31

for.body.i31:                                     ; preds = %for.inc.i, %for.body.preheader.i28
  %indvars.iv.i29 = phi i64 [ 0, %for.body.preheader.i28 ], [ %indvars.iv.next.i33, %for.inc.i ]
  %data.i30 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %2, i64 %indvars.iv.i29, i32 2
  %39 = load double*, double** %data.i30, align 8, !tbaa !137
  %cmp1.not.i = icmp eq double* %39, null
  br i1 %cmp1.not.i, label %for.inc.i, label %if.then.i32

if.then.i32:                                      ; preds = %for.body.i31
  %40 = bitcast double* %39 to i8*
  tail call void @free(i8* %40) #38
  br label %for.inc.i

for.inc.i:                                        ; preds = %if.then.i32, %for.body.i31
  %indvars.iv.next.i33 = add nuw nsw i64 %indvars.iv.i29, 1
  %exitcond.not.i34 = icmp eq i64 %indvars.iv.next.i33, %wide.trip.count.i27
  br i1 %exitcond.not.i34, label %for.body.preheader.i37, label %for.body.i31, !llvm.loop !212

for.body.preheader.i37:                           ; preds = %for.inc.i
  tail call void @free(i8* nonnull %call.i) #38
  br label %for.body.i41

for.body.i41:                                     ; preds = %for.inc.i45, %for.body.preheader.i37
  %indvars.iv.i38 = phi i64 [ 0, %for.body.preheader.i37 ], [ %indvars.iv.next.i43, %for.inc.i45 ]
  %data.i39 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %3, i64 %indvars.iv.i38, i32 2
  %41 = load double*, double** %data.i39, align 8, !tbaa !137
  %cmp1.not.i40 = icmp eq double* %41, null
  br i1 %cmp1.not.i40, label %for.inc.i45, label %if.then.i42

if.then.i42:                                      ; preds = %for.body.i41
  %42 = bitcast double* %41 to i8*
  tail call void @free(i8* %42) #38
  br label %for.inc.i45

for.inc.i45:                                      ; preds = %if.then.i42, %for.body.i41
  %indvars.iv.next.i43 = add nuw nsw i64 %indvars.iv.i38, 1
  %exitcond.not.i44 = icmp eq i64 %indvars.iv.next.i43, %wide.trip.count.i27
  br i1 %exitcond.not.i44, label %for.body.preheader.i49, label %for.body.i41, !llvm.loop !212

delete_light_matrix_array.exit46.thread:          ; preds = %delete_matrix.exit
  tail call void @free(i8* %call.i) #38
  tail call void @free(i8* %call.i36064) #38
  br label %delete_light_matrix_array.exit58

for.body.preheader.i49:                           ; preds = %for.inc.i45
  tail call void @free(i8* nonnull %call.i36064) #38
  br label %for.body.i53

for.body.i53:                                     ; preds = %for.inc.i57, %for.body.preheader.i49
  %indvars.iv.i50 = phi i64 [ 0, %for.body.preheader.i49 ], [ %indvars.iv.next.i55, %for.inc.i57 ]
  %data.i51 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %4, i64 %indvars.iv.i50, i32 2
  %43 = load double*, double** %data.i51, align 8, !tbaa !137
  %cmp1.not.i52 = icmp eq double* %43, null
  br i1 %cmp1.not.i52, label %for.inc.i57, label %if.then.i54

if.then.i54:                                      ; preds = %for.body.i53
  %44 = bitcast double* %43 to i8*
  tail call void @free(i8* %44) #38
  br label %for.inc.i57

for.inc.i57:                                      ; preds = %if.then.i54, %for.body.i53
  %indvars.iv.next.i55 = add nuw nsw i64 %indvars.iv.i50, 1
  %exitcond.not.i56 = icmp eq i64 %indvars.iv.next.i55, %wide.trip.count.i27
  br i1 %exitcond.not.i56, label %delete_light_matrix_array.exit58, label %for.body.i53, !llvm.loop !212

delete_light_matrix_array.exit58:                 ; preds = %for.inc.i57, %delete_light_matrix_array.exit46.thread
  tail call void @free(i8* %call.i966) #38
  ret void
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @hand_objective_complicated(double* nocapture readonly %theta, double* nocapture readonly %us, i32 %bone_count, i8** nocapture readnone %bone_names, i32* nocapture readonly %parents, %struct.Matrix* nocapture readonly %base_relatives, %struct.Matrix* nocapture readonly %inverse_base_absolutes, %struct.Matrix* nocapture readonly %base_positions, %struct.Matrix* nocapture readonly %weights, %struct.Triangle* nocapture readonly %triangles, i32 %is_mirrored, i32 %corresp_count, i32* noalias nocapture readonly %correspondences, %struct.Matrix* nocapture readonly %points, double* nocapture %err) #5 {
entry:
  %call.i = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #38
  %0 = bitcast i8* %call.i to %struct.Matrix*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %call.i, i8 0, i64 16, i1 false) #38
  tail call void @to_pose_params(i32 %bone_count, double* %theta, i8** undef, %struct.Matrix* %0)
  %call.i84 = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #38
  %1 = bitcast i8* %call.i84 to %struct.Matrix*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %call.i84, i8 0, i64 16, i1 false) #38
  tail call fastcc void @_ZL28get_skinned_vertex_positionsiPK6MatrixPKiS1_S1_S1_iS1_PS_i(i32 %bone_count, %struct.Matrix* %base_relatives, i32* %parents, %struct.Matrix* %inverse_base_absolutes, %struct.Matrix* %base_positions, %struct.Matrix* %weights, i32 %is_mirrored, %struct.Matrix* %0, %struct.Matrix* %1)
  %cmp89 = icmp sgt i32 %corresp_count, 0
  br i1 %cmp89, label %for.body.lr.ph, label %for.end51

for.body.lr.ph:                                   ; preds = %entry
  %data = getelementptr inbounds i8, i8* %call.i84, i64 8
  %2 = bitcast i8* %data to double**
  %3 = load double*, double** %2, align 8, !tbaa !137
  %nrows = bitcast i8* %call.i84 to i32*
  %4 = load i32, i32* %nrows, align 8, !tbaa !138
  %data38 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %points, i64 0, i32 2
  %5 = load double*, double** %data38, align 8, !tbaa !137
  %nrows39 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %points, i64 0, i32 0
  %6 = load i32, i32* %nrows39, align 8, !tbaa !138
  %7 = sext i32 %6 to i64
  %wide.trip.count = zext i32 %corresp_count to i64
  br label %for.body

for.body:                                         ; preds = %for.end, %for.body.lr.ph
  %indvars.iv96 = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next97, %for.end ]
  %arrayidx = getelementptr inbounds i32, i32* %correspondences, i64 %indvars.iv96
  %8 = load i32, i32* %arrayidx, align 4, !tbaa !59
  %idxprom2 = sext i32 %8 to i64
  %arraydecay = getelementptr inbounds %struct.Triangle, %struct.Triangle* %triangles, i64 %idxprom2, i32 0, i64 0
  %9 = shl nuw nsw i64 %indvars.iv96, 1
  %arrayidx6 = getelementptr inbounds double, double* %us, i64 %9
  %10 = load i32, i32* %arraydecay, align 4, !tbaa !59
  %mul12 = mul nsw i32 %4, %10
  %arrayidx16 = getelementptr inbounds double, double* %arrayidx6, i64 1
  %arrayidx18 = getelementptr inbounds %struct.Triangle, %struct.Triangle* %triangles, i64 %idxprom2, i32 0, i64 1
  %11 = load i32, i32* %arrayidx18, align 4, !tbaa !59
  %mul20 = mul nsw i32 %11, %4
  %arrayidx30 = getelementptr inbounds %struct.Triangle, %struct.Triangle* %triangles, i64 %idxprom2, i32 0, i64 2
  %12 = load i32, i32* %arrayidx30, align 4, !tbaa !59
  %mul32 = mul nsw i32 %12, %4
  %13 = mul nsw i64 %indvars.iv96, %7
  %14 = mul nuw nsw i64 %indvars.iv96, 3
  %15 = sext i32 %mul12 to i64
  %16 = sext i32 %mul20 to i64
  %17 = sext i32 %mul32 to i64
  br label %for.body9

for.body9:                                        ; preds = %for.body9, %for.body
  %indvars.iv = phi i64 [ 0, %for.body ], [ %indvars.iv.next, %for.body9 ]
  %18 = load double, double* %arrayidx6, align 8, !tbaa !75
  %19 = add nsw i64 %indvars.iv, %15
  %arrayidx14 = getelementptr inbounds double, double* %3, i64 %19
  %20 = load double, double* %arrayidx14, align 8, !tbaa !75
  %21 = load double, double* %arrayidx16, align 8, !tbaa !75
  %22 = add nsw i64 %indvars.iv, %16
  %arrayidx23 = getelementptr inbounds double, double* %3, i64 %22
  %23 = load double, double* %arrayidx23, align 8, !tbaa !75
  %24 = fadd fast double %18, %21
  %sub28 = fsub fast double 1.000000e+00, %24
  %25 = add nsw i64 %indvars.iv, %17
  %arrayidx35 = getelementptr inbounds double, double* %3, i64 %25
  %26 = load double, double* %arrayidx35, align 8, !tbaa !75
  %27 = add nsw i64 %13, %indvars.iv
  %arrayidx43 = getelementptr inbounds double, double* %5, i64 %27
  %28 = load double, double* %arrayidx43, align 8, !tbaa !75
  %mul15.neg = fmul fast double %20, %18
  %mul24.neg = fmul fast double %23, %21
  %mul36.neg = fmul fast double %26, %sub28
  %reass.add = fadd fast double %mul24.neg, %mul15.neg
  %reass.add87 = fadd fast double %reass.add, %mul36.neg
  %sub44 = fsub fast double %28, %reass.add87
  %29 = add nuw nsw i64 %indvars.iv, %14
  %arrayidx48 = getelementptr inbounds double, double* %err, i64 %29
  store double %sub44, double* %arrayidx48, align 8, !tbaa !75
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond.not, label %for.end, label %for.body9, !llvm.loop !239

for.end:                                          ; preds = %for.body9
  %indvars.iv.next97 = add nuw nsw i64 %indvars.iv96, 1
  %exitcond101.not = icmp eq i64 %indvars.iv.next97, %wide.trip.count
  br i1 %exitcond101.not, label %for.end51, label %for.body, !llvm.loop !240

for.end51:                                        ; preds = %for.end, %entry
  ret void
}

; Function Attrs: nounwind
declare dso_local void @__enzyme_autodiff(...) local_unnamed_addr #6

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @dhand_objective_complicated(double* %theta, double* %dtheta, double* %us, double* %dus, i32 %bone_count, i8** %bone_names, i32* %parents, %struct.Matrix* %base_relatives, %struct.Matrix* %inverse_base_absolutes, %struct.Matrix* %base_positions, %struct.Matrix* %weights, %struct.Triangle* %triangles, i32 %is_mirrored, i32 %corresp_count, i32* %correspondences, %struct.Matrix* %points, double* %err, double* %derr) local_unnamed_addr #5 {
entry:
  call void @diffehand_objective_complicated(double* %theta, double* %dtheta, double* %us, double* %dus, i32 %bone_count, i8** %bone_names, i32* %parents, %struct.Matrix* %base_relatives, %struct.Matrix* %inverse_base_absolutes, %struct.Matrix* %base_positions, %struct.Matrix* %weights, %struct.Triangle* %triangles, i32 %is_mirrored, i32 %corresp_count, i32* %correspondences, %struct.Matrix* %points, double* %err, double* %derr)
  ret void
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @get_new_matrix_b(i32 %nrows, i32 %ncols, %struct.Matrix_diff* nocapture readnone %get_new_matrixb) local_unnamed_addr #5 {
entry:
  %call = tail call noalias dereferenceable_or_null(8) i8* @malloc(i64 8) #38
  %data = bitcast i8* %call to double**
  store double* null, double** %data, align 8, !tbaa !241
  %call1 = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #38
  tail call void @pushPointer8(i8* null) #38
  %mul = mul i32 %ncols, %nrows
  %conv = sext i32 %mul to i64
  %mul3 = shl nsw i64 %conv, 3
  %call4 = tail call noalias i8* @malloc(i64 %mul3) #38
  %0 = bitcast i8* %call to i8**
  store i8* %call4, i8** %0, align 8, !tbaa !241
  %cmp39 = icmp sgt i32 %mul, 0
  br i1 %cmp39, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %entry
  %1 = zext i32 %mul to i64
  %2 = shl nuw nsw i64 %1, 3
  call void @llvm.memset.p0i8.i64(i8* align 8 %call4, i8 0, i64 %2, i1 false)
  br label %for.end

for.end:                                          ; preds = %for.body.lr.ph, %entry
  %data8 = getelementptr inbounds i8, i8* %call1, i64 8
  %3 = bitcast i8* %data8 to i8**
  tail call void @pushPointer8(i8* undef) #38
  %call12 = tail call noalias i8* @malloc(i64 %mul3) #38
  store i8* %call12, i8** %3, align 8, !tbaa !137
  tail call void @free(i8* %call12) #38
  tail call void @popPointer8(i8** nonnull %3) #38
  tail call void @free(i8* %call4) #38
  tail call void @popPointer8(i8** nonnull %0) #38
  tail call void @free(i8* %call1) #38
  tail call void @free(i8* nonnull %call) #38
  ret void
}

declare dso_local void @pushPointer8(i8*) local_unnamed_addr #3

declare dso_local void @popPointer8(i8**) local_unnamed_addr #3

; Function Attrs: nofree nounwind uwtable willreturn mustprogress
define dso_local noalias %struct.Matrix* @get_new_matrix_c(i32 %nrows, i32 %ncols) local_unnamed_addr #14 {
entry:
  %call = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #38
  %0 = bitcast i8* %call to %struct.Matrix*
  %nrows1 = bitcast i8* %call to i32*
  store i32 %nrows, i32* %nrows1, align 8, !tbaa !138
  %ncols2 = getelementptr inbounds i8, i8* %call, i64 4
  %1 = bitcast i8* %ncols2 to i32*
  store i32 %ncols, i32* %1, align 4, !tbaa !139
  %mul = mul nsw i32 %ncols, %nrows
  %conv = sext i32 %mul to i64
  %mul3 = shl nsw i64 %conv, 3
  %call4 = tail call noalias i8* @malloc(i64 %mul3) #38
  %data = getelementptr inbounds i8, i8* %call, i64 8
  %2 = bitcast i8* %data to i8**
  store i8* %call4, i8** %2, align 8, !tbaa !137
  ret %struct.Matrix* %0
}

; Function Attrs: norecurse nounwind readnone uwtable willreturn mustprogress
define dso_local void @get_new_empty_matrix_b(%struct.Matrix_diff* nocapture %get_new_empty_matrixb) local_unnamed_addr #20 {
entry:
  ret void
}

; Function Attrs: nofree nounwind uwtable willreturn mustprogress
define dso_local noalias %struct.Matrix* @get_new_empty_matrix_c() local_unnamed_addr #14 {
entry:
  %call = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #38
  %0 = bitcast i8* %call to %struct.Matrix*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %call, i8 0, i64 16, i1 false)
  ret %struct.Matrix* %0
}

; Function Attrs: norecurse nounwind readnone uwtable willreturn mustprogress
define dso_local void @delete_matrix_b(%struct.Matrix* nocapture %mat, %struct.Matrix_diff* nocapture %matb) local_unnamed_addr #20 {
entry:
  ret void
}

; Function Attrs: nounwind uwtable willreturn mustprogress
define dso_local void @delete_matrix_c(%struct.Matrix* nocapture %mat) local_unnamed_addr #16 {
entry:
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 2
  %0 = load double*, double** %data, align 8, !tbaa !137
  %cmp.not = icmp eq double* %0, null
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = bitcast double* %0 to i8*
  tail call void @free(i8* %1) #38
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = bitcast %struct.Matrix* %mat to i8*
  tail call void @free(i8* %2) #38
  ret void
}

; Function Attrs: norecurse nounwind readnone uwtable willreturn mustprogress
define dso_local void @get_matrix_array_b(i32 %count, %struct.Matrix_diff* nocapture %get_matrix_arrayb) local_unnamed_addr #20 {
entry:
  ret void
}

; Function Attrs: nofree nounwind uwtable mustprogress
define dso_local noalias %struct.Matrix* @get_matrix_array_c(i32 %count) local_unnamed_addr #9 {
entry:
  %conv = sext i32 %count to i64
  %mul = shl nsw i64 %conv, 4
  %call = tail call noalias i8* @malloc(i64 %mul) #38
  %cmp20 = icmp sgt i32 %count, 0
  br i1 %cmp20, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %entry
  %0 = zext i32 %count to i64
  %1 = shl nuw nsw i64 %0, 4
  call void @llvm.memset.p0i8.i64(i8* align 8 %call, i8 0, i64 %1, i1 false)
  br label %for.end

for.end:                                          ; preds = %for.body.preheader, %entry
  %2 = bitcast i8* %call to %struct.Matrix*
  ret %struct.Matrix* %2
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @delete_light_matrix_array_b(%struct.Matrix* %matricies, %struct.Matrix_diff* %matriciesb, i32 %count) local_unnamed_addr #5 {
entry:
  %matricies.addr = alloca %struct.Matrix*, align 8
  %matriciesb.addr = alloca %struct.Matrix_diff*, align 8
  store %struct.Matrix* %matricies, %struct.Matrix** %matricies.addr, align 8, !tbaa !60
  store %struct.Matrix_diff* %matriciesb, %struct.Matrix_diff** %matriciesb.addr, align 8, !tbaa !60
  %0 = bitcast %struct.Matrix_diff* %matriciesb to i8*
  tail call void @pushPointer8(i8* %0) #38
  %1 = bitcast %struct.Matrix** %matricies.addr to i8**
  %.cast = bitcast %struct.Matrix* %matricies to i8*
  tail call void @pushPointer8(i8* %.cast) #38
  call void @popPointer8(i8** nonnull %1) #38
  %2 = bitcast %struct.Matrix_diff** %matriciesb.addr to i8**
  call void @popPointer8(i8** nonnull %2) #38
  ret void
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @delete_light_matrix_array_c(%struct.Matrix* nocapture %matricies, i32 %count) local_unnamed_addr #5 {
entry:
  %cmp11 = icmp sgt i32 %count, 0
  br i1 %cmp11, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %count to i64
  br label %for.body

for.body:                                         ; preds = %for.inc, %for.body.preheader
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.inc ]
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %matricies, i64 %indvars.iv, i32 2
  %0 = bitcast double** %data to i8**
  %1 = load i8*, i8** %0, align 8, !tbaa !137
  %cmp1.not = icmp eq i8* %1, null
  br i1 %cmp1.not, label %for.inc, label %if.then

if.then:                                          ; preds = %for.body
  tail call void @free(i8* nonnull %1) #38
  br label %for.inc

for.inc:                                          ; preds = %if.then, %for.body
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.end, label %for.body, !llvm.loop !243

for.end:                                          ; preds = %for.inc, %entry
  %2 = bitcast %struct.Matrix* %matricies to i8*
  tail call void @free(i8* %2) #38
  ret void
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @resize_b(%struct.Matrix* %mat, %struct.Matrix_diff* %matb, i32 %nrows, i32 %ncols) local_unnamed_addr #5 {
entry:
  %chunklength = alloca i32, align 4
  %diffchunkold = alloca i8*, align 8
  %chunkold = alloca i8*, align 8
  %branch = alloca i32, align 4
  %0 = bitcast i32* %chunklength to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #38
  %1 = bitcast i8** %diffchunkold to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #38
  %2 = bitcast i8** %chunkold to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %2) #38
  %3 = bitcast i32* %branch to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #38
  %nrows1 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 0
  %4 = load i32, i32* %nrows1, align 8, !tbaa !138
  %ncols2 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 1
  %5 = load i32, i32* %ncols2, align 4, !tbaa !139
  %mul = mul nsw i32 %5, %4
  %mul3 = mul i32 %ncols, %nrows
  %cmp.not = icmp eq i32 %mul, %mul3
  br i1 %cmp.not, label %if.end46, label %if.then

if.then:                                          ; preds = %entry
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 2
  %6 = bitcast double** %data to i8**
  %7 = load i8*, i8** %6, align 8, !tbaa !137
  %cmp4.not = icmp eq i8* %7, null
  br i1 %cmp4.not, label %if.end, label %if.then5

if.then5:                                         ; preds = %if.then
  %8 = bitcast %struct.Matrix_diff* %matb to i8**
  %9 = load i8*, i8** %8, align 8, !tbaa !241
  tail call void @pushPointer8(i8* %9) #38
  %10 = load i8*, i8** %8, align 8, !tbaa !241
  tail call void @free(i8* %10) #38
  %11 = load i8*, i8** %6, align 8, !tbaa !137
  tail call void @pushPointer8(i8* %11) #38
  %12 = load i8*, i8** %6, align 8, !tbaa !137
  tail call void @free(i8* %12) #38
  tail call void @pushInteger4(i32 undef) #38
  br label %if.end

if.end:                                           ; preds = %if.then5, %if.then
  %.sink = phi i32 [ 0, %if.then5 ], [ 1, %if.then ]
  tail call void @pushControl1b(i32 %.sink) #38
  %cmp11 = icmp sgt i32 %mul3, 0
  br i1 %cmp11, label %if.then12, label %if.else30

if.then12:                                        ; preds = %if.end
  %13 = bitcast %struct.Matrix_diff* %matb to i8**
  %14 = load i8*, i8** %13, align 8, !tbaa !241
  tail call void @pushPointer8(i8* %14) #38
  %conv77 = zext i32 %mul3 to i64
  %mul15 = shl nuw nsw i64 %conv77, 3
  %call = tail call noalias i8* @malloc(i64 %mul15) #38
  store i8* %call, i8** %13, align 8, !tbaa !241
  call void @llvm.memset.p0i8.i64(i8* align 8 %call, i8 0, i64 %mul15, i1 false)
  %15 = load i8*, i8** %6, align 8, !tbaa !137
  tail call void @pushPointer8(i8* %15) #38
  %call24 = tail call noalias i8* @malloc(i64 %mul15) #38
  store i8* %call24, i8** %6, align 8, !tbaa !137
  tail call void @free(i8* %call24) #38
  tail call void @popPointer8(i8** nonnull %6) #38
  %16 = load i8*, i8** %13, align 8, !tbaa !241
  tail call void @free(i8* %16) #38
  br label %if.end34

if.else30:                                        ; preds = %if.end
  %data31 = getelementptr inbounds %struct.Matrix_diff, %struct.Matrix_diff* %matb, i64 0, i32 0
  %17 = bitcast %struct.Matrix_diff* %matb to i8**
  %18 = load i8*, i8** %17, align 8, !tbaa !241
  tail call void @pushPointer8(i8* %18) #38
  store double* null, double** %data31, align 8, !tbaa !241
  br label %if.end34

if.end34:                                         ; preds = %if.else30, %if.then12
  %.sink80 = phi i8** [ %17, %if.else30 ], [ %13, %if.then12 ]
  tail call void @popPointer8(i8** nonnull %.sink80) #38
  call void @popControl1b(i32* nonnull %branch) #38
  %19 = load i32, i32* %branch, align 4, !tbaa !59
  %cmp35 = icmp eq i32 %19, 0
  br i1 %cmp35, label %if.then36, label %if.end46

if.then36:                                        ; preds = %if.end34
  call void @popInteger4(i32* nonnull %chunklength) #38
  %20 = load i32, i32* %chunklength, align 4, !tbaa !59
  %mul37 = shl nsw i32 %20, 3
  %conv38 = sext i32 %mul37 to i64
  %call39 = call noalias i8* @malloc(i64 %conv38) #38
  store i8* %call39, i8** %6, align 8, !tbaa !137
  call void @popPointer8(i8** nonnull %chunkold) #38
  %21 = load i32, i32* %chunklength, align 4, !tbaa !59
  %mul41 = shl nsw i32 %21, 3
  %conv42 = sext i32 %mul41 to i64
  %call43 = call noalias i8* @malloc(i64 %conv42) #38
  %22 = bitcast %struct.Matrix_diff* %matb to i8**
  store i8* %call43, i8** %22, align 8, !tbaa !241
  call void @popPointer8(i8** nonnull %diffchunkold) #38
  br label %if.end46

if.end46:                                         ; preds = %if.then36, %if.end34, %entry
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #38
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %2) #38
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #38
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #38
  ret void
}

declare dso_local void @pushInteger4(i32) local_unnamed_addr #3

declare dso_local void @pushControl1b(i32) local_unnamed_addr #3

declare dso_local void @popControl1b(i32*) local_unnamed_addr #3

declare dso_local void @popInteger4(i32*) local_unnamed_addr #3

; Function Attrs: nounwind uwtable willreturn mustprogress
define dso_local void @resize_c(%struct.Matrix* nocapture %mat, i32 %nrows, i32 %ncols) local_unnamed_addr #16 {
entry:
  %nrows1 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 0
  %0 = load i32, i32* %nrows1, align 8, !tbaa !138
  %ncols2 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 1
  %1 = load i32, i32* %ncols2, align 4, !tbaa !139
  %mul = mul nsw i32 %1, %0
  %mul3 = mul nsw i32 %ncols, %nrows
  %cmp.not = icmp eq i32 %mul, %mul3
  br i1 %cmp.not, label %if.end15, label %if.then

if.then:                                          ; preds = %entry
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 2
  %2 = bitcast double** %data to i8**
  %3 = load i8*, i8** %2, align 8, !tbaa !137
  %cmp4.not = icmp eq i8* %3, null
  br i1 %cmp4.not, label %if.end, label %if.then5

if.then5:                                         ; preds = %if.then
  tail call void @free(i8* nonnull %3) #38
  br label %if.end

if.end:                                           ; preds = %if.then5, %if.then
  %cmp8 = icmp sgt i32 %mul3, 0
  br i1 %cmp8, label %if.then9, label %if.else

if.then9:                                         ; preds = %if.end
  %conv31 = zext i32 %mul3 to i64
  %mul11 = shl nuw nsw i64 %conv31, 3
  %call = tail call noalias i8* @malloc(i64 %mul11) #38
  store i8* %call, i8** %2, align 8, !tbaa !137
  br label %if.end15

if.else:                                          ; preds = %if.end
  store double* null, double** %data, align 8, !tbaa !137
  br label %if.end15

if.end15:                                         ; preds = %if.else, %if.then9, %entry
  store i32 %ncols, i32* %ncols2, align 4, !tbaa !139
  store i32 %nrows, i32* %nrows1, align 8, !tbaa !138
  ret void
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @mat_mult_b(%struct.Matrix* nocapture readonly %lhs, %struct.Matrix_diff* nocapture readonly %lhsb, %struct.Matrix* nocapture readonly %rhs, %struct.Matrix_diff* nocapture readonly %rhsb, %struct.Matrix* %out, %struct.Matrix_diff* %outb) local_unnamed_addr #5 {
entry:
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 0
  %0 = load i32, i32* %nrows, align 8, !tbaa !138
  tail call void @pushInteger4(i32 %0) #38
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 1
  %1 = load i32, i32* %ncols, align 4, !tbaa !139
  tail call void @pushInteger4(i32 %1) #38
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 2
  %2 = bitcast double** %data to i8**
  %3 = load i8*, i8** %2, align 8, !tbaa !137
  tail call void @pushPointer8(i8* %3) #38
  %nrows1 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 0
  %4 = load i32, i32* %nrows1, align 8, !tbaa !138
  %ncols2 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 1
  %5 = load i32, i32* %ncols2, align 4, !tbaa !139
  %6 = load i32, i32* %nrows, align 8, !tbaa !138
  %7 = load i32, i32* %ncols, align 4, !tbaa !139
  %mul.i = mul nsw i32 %7, %6
  %mul3.i = mul nsw i32 %5, %4
  %cmp.not.i = icmp eq i32 %mul.i, %mul3.i
  br i1 %cmp.not.i, label %resize_c.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %8 = load i8*, i8** %2, align 8, !tbaa !137
  %cmp4.not.i = icmp eq i8* %8, null
  br i1 %cmp4.not.i, label %if.end.i, label %if.then5.i

if.then5.i:                                       ; preds = %if.then.i
  tail call void @free(i8* nonnull %8) #38
  br label %if.end.i

if.end.i:                                         ; preds = %if.then5.i, %if.then.i
  %cmp8.i = icmp sgt i32 %mul3.i, 0
  br i1 %cmp8.i, label %if.then9.i, label %if.else.i

if.then9.i:                                       ; preds = %if.end.i
  %conv31.i = zext i32 %mul3.i to i64
  %mul11.i = shl nuw nsw i64 %conv31.i, 3
  %call.i = tail call noalias i8* @malloc(i64 %mul11.i) #38
  store i8* %call.i, i8** %2, align 8, !tbaa !137
  br label %resize_c.exit

if.else.i:                                        ; preds = %if.end.i
  store double* null, double** %data, align 8, !tbaa !137
  br label %resize_c.exit

resize_c.exit:                                    ; preds = %if.else.i, %if.then9.i, %entry
  store i32 %5, i32* %ncols, align 4, !tbaa !139
  store i32 %4, i32* %nrows, align 8, !tbaa !138
  %9 = load i32, i32* %nrows1, align 8, !tbaa !138
  %cmp322 = icmp sgt i32 %9, 0
  br i1 %cmp322, label %for.cond4.preheader.lr.ph, label %for.end190

for.cond4.preheader.lr.ph:                        ; preds = %resize_c.exit
  %10 = load i32, i32* %ncols2, align 4, !tbaa !139
  %cmp6320 = icmp sgt i32 %10, 0
  %data8 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 2
  %data10 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 2
  %nrows11 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 0
  %ncols24 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 1
  %11 = sext i32 %4 to i64
  %wide.trip.count354 = zext i32 %9 to i64
  %12 = sext i32 %9 to i64
  %wide.trip.count349 = zext i32 %10 to i64
  br label %for.cond4.preheader

for.cond4.preheader:                              ; preds = %for.inc56, %for.cond4.preheader.lr.ph
  %indvars.iv351 = phi i64 [ 0, %for.cond4.preheader.lr.ph ], [ %indvars.iv.next352, %for.inc56 ]
  br i1 %cmp6320, label %for.body7.lr.ph, label %for.inc56

for.body7.lr.ph:                                  ; preds = %for.cond4.preheader
  %13 = load double*, double** %data8, align 8, !tbaa !137
  %arrayidx = getelementptr inbounds double, double* %13, i64 %indvars.iv351
  %14 = load double*, double** %data10, align 8, !tbaa !137
  %15 = load i32, i32* %nrows11, align 8, !tbaa !138
  %16 = load double*, double** %data, align 8, !tbaa !137
  %17 = load i32, i32* %ncols24, align 4, !tbaa !139
  %cmp25318 = icmp sgt i32 %17, 1
  %18 = sext i32 %15 to i64
  %wide.trip.count = zext i32 %17 to i64
  br label %for.body7

for.body62.lr.ph:                                 ; preds = %for.inc56
  %19 = load i32, i32* %ncols2, align 4, !tbaa !139
  %cmp66313 = icmp sgt i32 %19, 0
  %data73 = getelementptr inbounds %struct.Matrix_diff, %struct.Matrix_diff* %lhsb, i64 0, i32 0
  %data85 = getelementptr inbounds %struct.Matrix_diff, %struct.Matrix_diff* %outb, i64 0, i32 0
  %data99 = getelementptr inbounds %struct.Matrix_diff, %struct.Matrix_diff* %rhsb, i64 0, i32 0
  %20 = sext i32 %19 to i64
  br label %for.body62

for.body7:                                        ; preds = %for.inc53, %for.body7.lr.ph
  %indvars.iv343 = phi i64 [ 0, %for.body7.lr.ph ], [ %indvars.iv.next344, %for.inc53 ]
  %21 = load double, double* %arrayidx, align 8, !tbaa !75
  %22 = mul nsw i64 %indvars.iv343, %18
  %arrayidx15 = getelementptr inbounds double, double* %14, i64 %22
  %23 = load double, double* %arrayidx15, align 8, !tbaa !75
  %mul16 = fmul fast double %23, %21
  %24 = mul nsw i64 %indvars.iv343, %11
  %25 = add nsw i64 %24, %indvars.iv351
  %arrayidx22 = getelementptr inbounds double, double* %16, i64 %25
  store double %mul16, double* %arrayidx22, align 8, !tbaa !75
  br i1 %cmp25318, label %for.body26, label %for.inc53

for.body26:                                       ; preds = %for.body26, %for.body7
  %26 = phi double [ %add46, %for.body26 ], [ %mul16, %for.body7 ]
  %indvars.iv338 = phi i64 [ %indvars.iv.next339, %for.body26 ], [ 1, %for.body7 ]
  %27 = mul nsw i64 %indvars.iv338, %12
  %28 = add nsw i64 %27, %indvars.iv351
  %arrayidx38 = getelementptr inbounds double, double* %13, i64 %28
  %29 = load double, double* %arrayidx38, align 8, !tbaa !75
  %30 = add nsw i64 %indvars.iv338, %22
  %arrayidx44 = getelementptr inbounds double, double* %14, i64 %30
  %31 = load double, double* %arrayidx44, align 8, !tbaa !75
  %mul45 = fmul fast double %31, %29
  %add46 = fadd fast double %mul45, %26
  store double %add46, double* %arrayidx22, align 8, !tbaa !75
  %indvars.iv.next339 = add nuw nsw i64 %indvars.iv338, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next339, %wide.trip.count
  br i1 %exitcond.not, label %for.inc53, label %for.body26, !llvm.loop !244

for.inc53:                                        ; preds = %for.body26, %for.body7
  %indvars.iv.next344 = add nuw nsw i64 %indvars.iv343, 1
  %exitcond350.not = icmp eq i64 %indvars.iv.next344, %wide.trip.count349
  br i1 %exitcond350.not, label %for.inc56, label %for.body7, !llvm.loop !245

for.inc56:                                        ; preds = %for.inc53, %for.cond4.preheader
  %indvars.iv.next352 = add nuw nsw i64 %indvars.iv351, 1
  %exitcond355.not = icmp eq i64 %indvars.iv.next352, %wide.trip.count354
  br i1 %exitcond355.not, label %for.body62.lr.ph, label %for.cond4.preheader, !llvm.loop !246

for.cond60.loopexit:                              ; preds = %for.end126, %for.body62
  %cmp61 = icmp sgt i64 %indvars.iv336, 1
  br i1 %cmp61, label %for.body62, label %for.end190, !llvm.loop !247

for.body62:                                       ; preds = %for.cond60.loopexit, %for.body62.lr.ph
  %indvars.iv336 = phi i64 [ %wide.trip.count354, %for.body62.lr.ph ], [ %indvars.iv.next337, %for.cond60.loopexit ]
  %indvars.iv.next337 = add nsw i64 %indvars.iv336, -1
  br i1 %cmp66313, label %for.body67.lr.ph, label %for.cond60.loopexit

for.body67.lr.ph:                                 ; preds = %for.body62
  %32 = load i32, i32* %ncols24, align 4, !tbaa !139
  %cmp71310 = icmp sgt i32 %32, 1
  %33 = load double*, double** %data73, align 8, !tbaa !241
  %arrayidx132 = getelementptr inbounds double, double* %33, i64 %indvars.iv.next337
  %34 = load double*, double** %data10, align 8, !tbaa !137
  %35 = load i32, i32* %nrows11, align 8, !tbaa !138
  %36 = load double*, double** %data85, align 8, !tbaa !241
  %37 = load double*, double** %data99, align 8, !tbaa !241
  %38 = load double*, double** %data8, align 8, !tbaa !137
  %arrayidx164 = getelementptr inbounds double, double* %38, i64 %indvars.iv.next337
  %39 = sext i32 %32 to i64
  %40 = sext i32 %35 to i64
  br label %for.body67

for.body67:                                       ; preds = %for.end126, %for.body67.lr.ph
  %indvars.iv328 = phi i64 [ %20, %for.body67.lr.ph ], [ %indvars.iv.next329, %for.end126 ]
  %indvars.iv.next329 = add nsw i64 %indvars.iv328, -1
  %41 = mul nsw i64 %indvars.iv.next329, %40
  %42 = mul nsw i64 %indvars.iv.next329, %11
  %43 = add nsw i64 %42, %indvars.iv.next337
  br i1 %cmp71310, label %for.body72.lr.ph, label %for.end126

for.body72.lr.ph:                                 ; preds = %for.body67
  %arrayidx90 = getelementptr inbounds double, double* %36, i64 %43
  br label %for.body72

for.body72:                                       ; preds = %for.body72, %for.body72.lr.ph
  %indvars.iv = phi i64 [ %39, %for.body72.lr.ph ], [ %indvars.iv.next, %for.body72 ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %44 = mul nsw i64 %indvars.iv.next, %wide.trip.count354
  %45 = add nsw i64 %44, %indvars.iv.next337
  %arrayidx78 = getelementptr inbounds double, double* %33, i64 %45
  %46 = load double, double* %arrayidx78, align 8, !tbaa !75
  %47 = add nsw i64 %41, %indvars.iv.next
  %arrayidx84 = getelementptr inbounds double, double* %34, i64 %47
  %48 = load double, double* %arrayidx84, align 8, !tbaa !75
  %49 = load double, double* %arrayidx90, align 8, !tbaa !75
  %mul91 = fmul fast double %49, %48
  %add92 = fadd fast double %mul91, %46
  store double %add92, double* %arrayidx78, align 8, !tbaa !75
  %arrayidx104 = getelementptr inbounds double, double* %37, i64 %47
  %50 = load double, double* %arrayidx104, align 8, !tbaa !75
  %arrayidx110 = getelementptr inbounds double, double* %38, i64 %45
  %51 = load double, double* %arrayidx110, align 8, !tbaa !75
  %52 = load double, double* %arrayidx90, align 8, !tbaa !75
  %mul117 = fmul fast double %52, %51
  %add118 = fadd fast double %mul117, %50
  store double %add118, double* %arrayidx104, align 8, !tbaa !75
  %cmp71 = icmp sgt i64 %indvars.iv, 2
  br i1 %cmp71, label %for.body72, label %for.end126, !llvm.loop !248

for.end126:                                       ; preds = %for.body72, %for.body67
  %53 = load double, double* %arrayidx132, align 8, !tbaa !75
  %arrayidx138 = getelementptr inbounds double, double* %34, i64 %41
  %54 = load double, double* %arrayidx138, align 8, !tbaa !75
  %arrayidx144 = getelementptr inbounds double, double* %36, i64 %43
  %55 = load double, double* %arrayidx144, align 8, !tbaa !75
  %mul145 = fmul fast double %55, %54
  %add146 = fadd fast double %mul145, %53
  store double %add146, double* %arrayidx132, align 8, !tbaa !75
  %arrayidx158 = getelementptr inbounds double, double* %37, i64 %41
  %56 = load double, double* %arrayidx158, align 8, !tbaa !75
  %57 = load double, double* %arrayidx164, align 8, !tbaa !75
  %58 = load double, double* %arrayidx144, align 8, !tbaa !75
  %mul171 = fmul fast double %58, %57
  %add172 = fadd fast double %mul171, %56
  store double %add172, double* %arrayidx158, align 8, !tbaa !75
  store double 0.000000e+00, double* %arrayidx144, align 8, !tbaa !75
  %cmp66 = icmp sgt i64 %indvars.iv328, 1
  br i1 %cmp66, label %for.body67, label %for.cond60.loopexit, !llvm.loop !249

for.end190:                                       ; preds = %for.cond60.loopexit, %resize_c.exit
  tail call void @popPointer8(i8** nonnull %2) #38
  tail call void @popInteger4(i32* nonnull %ncols) #38
  tail call void @popInteger4(i32* nonnull %nrows) #38
  %59 = load i32, i32* %nrows1, align 8, !tbaa !138
  %60 = load i32, i32* %ncols2, align 4, !tbaa !139
  tail call void @resize_b(%struct.Matrix* %out, %struct.Matrix_diff* %outb, i32 %59, i32 %60)
  ret void
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @mat_mult_c(%struct.Matrix* nocapture readonly %lhs, %struct.Matrix* nocapture readonly %rhs, %struct.Matrix* nocapture %out) local_unnamed_addr #5 {
entry:
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 0
  %0 = load i32, i32* %nrows, align 8, !tbaa !138
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 1
  %1 = load i32, i32* %ncols, align 4, !tbaa !139
  %nrows1.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 0
  %2 = load i32, i32* %nrows1.i, align 8, !tbaa !138
  %ncols2.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 1
  %3 = load i32, i32* %ncols2.i, align 4, !tbaa !139
  %mul.i = mul nsw i32 %3, %2
  %mul3.i = mul nsw i32 %1, %0
  %cmp.not.i = icmp eq i32 %mul.i, %mul3.i
  br i1 %cmp.not.i, label %resize_c.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %data.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 2
  %4 = bitcast double** %data.i to i8**
  %5 = load i8*, i8** %4, align 8, !tbaa !137
  %cmp4.not.i = icmp eq i8* %5, null
  br i1 %cmp4.not.i, label %if.end.i, label %if.then5.i

if.then5.i:                                       ; preds = %if.then.i
  tail call void @free(i8* nonnull %5) #38
  br label %if.end.i

if.end.i:                                         ; preds = %if.then5.i, %if.then.i
  %cmp8.i = icmp sgt i32 %mul3.i, 0
  br i1 %cmp8.i, label %if.then9.i, label %if.else.i

if.then9.i:                                       ; preds = %if.end.i
  %conv31.i = zext i32 %mul3.i to i64
  %mul11.i = shl nuw nsw i64 %conv31.i, 3
  %call.i = tail call noalias i8* @malloc(i64 %mul11.i) #38
  store i8* %call.i, i8** %4, align 8, !tbaa !137
  br label %resize_c.exit

if.else.i:                                        ; preds = %if.end.i
  store double* null, double** %data.i, align 8, !tbaa !137
  br label %resize_c.exit

resize_c.exit:                                    ; preds = %if.else.i, %if.then9.i, %entry
  store i32 %1, i32* %ncols2.i, align 4, !tbaa !139
  store i32 %0, i32* %nrows1.i, align 8, !tbaa !138
  %6 = load i32, i32* %nrows, align 8, !tbaa !138
  %cmp85 = icmp sgt i32 %6, 0
  br i1 %cmp85, label %for.cond2.preheader.lr.ph, label %for.end49

for.cond2.preheader.lr.ph:                        ; preds = %resize_c.exit
  %7 = load i32, i32* %ncols, align 4, !tbaa !139
  %cmp483 = icmp sgt i32 %7, 0
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 2
  %data7 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 2
  %nrows8 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 0
  %data14 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 2
  %ncols21 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 1
  %8 = sext i32 %0 to i64
  %wide.trip.count102 = zext i32 %6 to i64
  %9 = sext i32 %6 to i64
  %wide.trip.count97 = zext i32 %7 to i64
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.inc47, %for.cond2.preheader.lr.ph
  %indvars.iv99 = phi i64 [ 0, %for.cond2.preheader.lr.ph ], [ %indvars.iv.next100, %for.inc47 ]
  br i1 %cmp483, label %for.body5.lr.ph, label %for.inc47

for.body5.lr.ph:                                  ; preds = %for.cond2.preheader
  %10 = load double*, double** %data, align 8, !tbaa !137
  %arrayidx = getelementptr inbounds double, double* %10, i64 %indvars.iv99
  %11 = load double*, double** %data7, align 8, !tbaa !137
  %12 = load i32, i32* %nrows8, align 8, !tbaa !138
  %13 = load double*, double** %data14, align 8, !tbaa !137
  %14 = load i32, i32* %ncols21, align 4, !tbaa !139
  %cmp2281 = icmp sgt i32 %14, 1
  %15 = sext i32 %12 to i64
  %wide.trip.count = zext i32 %14 to i64
  br label %for.body5

for.body5:                                        ; preds = %for.inc44, %for.body5.lr.ph
  %indvars.iv91 = phi i64 [ 0, %for.body5.lr.ph ], [ %indvars.iv.next92, %for.inc44 ]
  %16 = load double, double* %arrayidx, align 8, !tbaa !75
  %17 = mul nsw i64 %indvars.iv91, %15
  %arrayidx12 = getelementptr inbounds double, double* %11, i64 %17
  %18 = load double, double* %arrayidx12, align 8, !tbaa !75
  %mul13 = fmul fast double %18, %16
  %19 = mul nsw i64 %indvars.iv91, %8
  %20 = add nsw i64 %19, %indvars.iv99
  %arrayidx19 = getelementptr inbounds double, double* %13, i64 %20
  store double %mul13, double* %arrayidx19, align 8, !tbaa !75
  br i1 %cmp2281, label %for.body23, label %for.inc44

for.body23:                                       ; preds = %for.body23, %for.body5
  %21 = phi double [ %add43, %for.body23 ], [ %mul13, %for.body5 ]
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body23 ], [ 1, %for.body5 ]
  %22 = mul nsw i64 %indvars.iv, %9
  %23 = add nsw i64 %22, %indvars.iv99
  %arrayidx29 = getelementptr inbounds double, double* %10, i64 %23
  %24 = load double, double* %arrayidx29, align 8, !tbaa !75
  %25 = add nsw i64 %indvars.iv, %17
  %arrayidx35 = getelementptr inbounds double, double* %11, i64 %25
  %26 = load double, double* %arrayidx35, align 8, !tbaa !75
  %mul36 = fmul fast double %26, %24
  %add43 = fadd fast double %21, %mul36
  store double %add43, double* %arrayidx19, align 8, !tbaa !75
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.inc44, label %for.body23, !llvm.loop !250

for.inc44:                                        ; preds = %for.body23, %for.body5
  %indvars.iv.next92 = add nuw nsw i64 %indvars.iv91, 1
  %exitcond98.not = icmp eq i64 %indvars.iv.next92, %wide.trip.count97
  br i1 %exitcond98.not, label %for.inc47, label %for.body5, !llvm.loop !251

for.inc47:                                        ; preds = %for.inc44, %for.cond2.preheader
  %indvars.iv.next100 = add nuw nsw i64 %indvars.iv99, 1
  %exitcond103.not = icmp eq i64 %indvars.iv.next100, %wide.trip.count102
  br i1 %exitcond103.not, label %for.end49, label %for.cond2.preheader, !llvm.loop !252

for.end49:                                        ; preds = %for.inc47, %resize_c.exit
  ret void
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @set_identity_b(%struct.Matrix* nocapture readonly %mat, %struct.Matrix_diff* nocapture readonly %matb) local_unnamed_addr #5 {
entry:
  %branch = alloca i32, align 4
  %0 = bitcast i32* %branch to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #38
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 1
  %1 = load i32, i32* %ncols, align 4, !tbaa !139
  %cmp61 = icmp sgt i32 %1, 0
  br i1 %cmp61, label %for.cond1.preheader.lr.ph, label %for.end32

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 0
  %.pre = load i32, i32* %nrows, align 8, !tbaa !138
  br label %for.cond1.preheader

for.cond1.preheader:                              ; preds = %for.inc5, %for.cond1.preheader.lr.ph
  %2 = phi i32 [ %1, %for.cond1.preheader.lr.ph ], [ %5, %for.inc5 ]
  %3 = phi i32 [ %.pre, %for.cond1.preheader.lr.ph ], [ %6, %for.inc5 ]
  %i_col.062 = phi i32 [ 0, %for.cond1.preheader.lr.ph ], [ %inc6, %for.inc5 ]
  %cmp259 = icmp sgt i32 %3, 0
  br i1 %cmp259, label %for.body3, label %for.inc5

for.cond9.preheader:                              ; preds = %for.inc5
  %.lcssa4 = phi i32 [ %5, %for.inc5 ]
  %cmp1057 = icmp sgt i32 %.lcssa4, 0
  br i1 %cmp1057, label %for.body11.lr.ph, label %for.end32

for.body11.lr.ph:                                 ; preds = %for.cond9.preheader
  %data21 = getelementptr inbounds %struct.Matrix_diff, %struct.Matrix_diff* %matb, i64 0, i32 0
  %.pre66 = load i32, i32* %nrows, align 8, !tbaa !138
  br label %for.body11

for.body3:                                        ; preds = %for.body3, %for.cond1.preheader
  %i_row.060 = phi i32 [ %inc, %for.body3 ], [ 0, %for.cond1.preheader ]
  %cmp4 = icmp eq i32 %i_col.062, %i_row.060
  %.sink = zext i1 %cmp4 to i32
  tail call void @pushControl1b(i32 %.sink) #38
  %inc = add nuw nsw i32 %i_row.060, 1
  %4 = load i32, i32* %nrows, align 8, !tbaa !138
  %cmp2 = icmp slt i32 %inc, %4
  br i1 %cmp2, label %for.body3, label %for.inc5.loopexit, !llvm.loop !253

for.inc5.loopexit:                                ; preds = %for.body3
  %.lcssa3 = phi i32 [ %4, %for.body3 ]
  %.pre65 = load i32, i32* %ncols, align 4, !tbaa !139
  br label %for.inc5

for.inc5:                                         ; preds = %for.inc5.loopexit, %for.cond1.preheader
  %5 = phi i32 [ %.pre65, %for.inc5.loopexit ], [ %2, %for.cond1.preheader ]
  %6 = phi i32 [ %.lcssa3, %for.inc5.loopexit ], [ %3, %for.cond1.preheader ]
  %inc6 = add nuw nsw i32 %i_col.062, 1
  %cmp = icmp slt i32 %inc6, %5
  br i1 %cmp, label %for.cond1.preheader, label %for.cond9.preheader, !llvm.loop !254

for.cond9.loopexit:                               ; preds = %for.body16, %for.body11
  %7 = phi i32 [ %8, %for.body11 ], [ %10, %for.body16 ]
  %cmp10 = icmp sgt i32 %i_col.158.in, 1
  br i1 %cmp10, label %for.body11, label %for.end32, !llvm.loop !255

for.body11:                                       ; preds = %for.cond9.loopexit, %for.body11.lr.ph
  %8 = phi i32 [ %.pre66, %for.body11.lr.ph ], [ %7, %for.cond9.loopexit ]
  %i_col.158.in = phi i32 [ %.lcssa4, %for.body11.lr.ph ], [ %i_col.158, %for.cond9.loopexit ]
  %i_col.158 = add nsw i32 %i_col.158.in, -1
  %cmp1554 = icmp sgt i32 %8, 0
  br i1 %cmp1554, label %for.body16, label %for.cond9.loopexit

for.body16:                                       ; preds = %for.body16, %for.body11
  %i_row.155.in = phi i32 [ %i_row.155, %for.body16 ], [ %8, %for.body11 ]
  %i_row.155 = add nsw i32 %i_row.155.in, -1
  call void @popControl1b(i32* nonnull %branch) #38
  %9 = load double*, double** %data21, align 8, !tbaa !241
  %10 = load i32, i32* %nrows, align 8, !tbaa !138
  %mul = mul nsw i32 %10, %i_col.158
  %add = add nsw i32 %mul, %i_row.155
  %idxprom = sext i32 %add to i64
  %arrayidx = getelementptr inbounds double, double* %9, i64 %idxprom
  store double 0.000000e+00, double* %arrayidx, align 8, !tbaa !75
  %cmp15 = icmp sgt i32 %i_row.155.in, 1
  br i1 %cmp15, label %for.body16, label %for.cond9.loopexit, !llvm.loop !256

for.end32:                                        ; preds = %for.cond9.loopexit, %for.cond9.preheader, %entry
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #38
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable mustprogress
define dso_local void @set_identity_c(%struct.Matrix* nocapture readonly %mat) local_unnamed_addr #18 {
entry:
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 1
  %0 = load i32, i32* %ncols, align 4, !tbaa !139
  %cmp33 = icmp sgt i32 %0, 0
  br i1 %cmp33, label %for.cond1.preheader.lr.ph, label %for.end14

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 0
  %1 = load i32, i32* %nrows, align 8, !tbaa !138
  %cmp230 = icmp sgt i32 %1, 0
  %data6 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 2
  br label %for.cond1.preheader

for.cond1.preheader:                              ; preds = %for.inc12, %for.cond1.preheader.lr.ph
  %i_col.034 = phi i32 [ 0, %for.cond1.preheader.lr.ph ], [ %inc13, %for.inc12 ]
  br i1 %cmp230, label %for.body3.lr.ph, label %for.inc12

for.body3.lr.ph:                                  ; preds = %for.cond1.preheader
  %mul8 = mul nsw i32 %1, %i_col.034
  br label %for.body3

for.body3:                                        ; preds = %for.body3, %for.body3.lr.ph
  %i_row.031 = phi i32 [ 0, %for.body3.lr.ph ], [ %inc, %for.body3 ]
  %cmp4 = icmp eq i32 %i_col.034, %i_row.031
  %2 = load double*, double** %data6, align 8, !tbaa !137
  %idxprom.sink.v = add nsw i32 %mul8, %i_row.031
  %idxprom.sink = sext i32 %idxprom.sink.v to i64
  %.sink = select i1 %cmp4, double 1.000000e+00, double 0.000000e+00
  %arrayidx = getelementptr inbounds double, double* %2, i64 %idxprom.sink
  store double %.sink, double* %arrayidx, align 8, !tbaa !75
  %inc = add nuw nsw i32 %i_row.031, 1
  %exitcond.not = icmp eq i32 %inc, %1
  br i1 %exitcond.not, label %for.inc12, label %for.body3, !llvm.loop !257

for.inc12:                                        ; preds = %for.body3, %for.cond1.preheader
  %inc13 = add nuw nsw i32 %i_col.034, 1
  %exitcond37.not = icmp eq i32 %inc13, %0
  br i1 %exitcond37.not, label %for.end14, label %for.cond1.preheader, !llvm.loop !258

for.end14:                                        ; preds = %for.inc12, %entry
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable mustprogress
define dso_local void @fill_b(%struct.Matrix* nocapture readonly %mat, %struct.Matrix_diff* nocapture readonly %matb, double %val) local_unnamed_addr #18 {
entry:
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 1
  %0 = load i32, i32* %ncols, align 4, !tbaa !139
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 0
  %1 = load i32, i32* %nrows, align 8, !tbaa !138
  %mul = mul i32 %1, %0
  %cmp6 = icmp sgt i32 %mul, 0
  br i1 %cmp6, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %entry
  %data = getelementptr inbounds %struct.Matrix_diff, %struct.Matrix_diff* %matb, i64 0, i32 0
  %2 = load double*, double** %data, align 8, !tbaa !241
  %3 = zext i32 %mul to i64
  %4 = add nsw i32 %mul, -1
  %5 = zext i32 %4 to i64
  %6 = xor i64 %5, -1
  %7 = add nsw i64 %6, %3
  %scevgep = getelementptr double, double* %2, i64 %7
  %scevgep8 = bitcast double* %scevgep to i8*
  %8 = shl nuw nsw i64 %3, 3
  call void @llvm.memset.p0i8.i64(i8* align 8 %scevgep8, i8 0, i64 %8, i1 false)
  br label %for.end

for.end:                                          ; preds = %for.body.lr.ph, %entry
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable mustprogress
define dso_local void @fill_c(%struct.Matrix* nocapture readonly %mat, double %val) local_unnamed_addr #18 {
entry:
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 1
  %0 = load i32, i32* %ncols, align 4, !tbaa !139
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 0
  %1 = load i32, i32* %nrows, align 8, !tbaa !138
  %mul6 = mul i32 %1, %0
  %cmp7 = icmp sgt i32 %mul6, 0
  br i1 %cmp7, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %entry
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 2
  %2 = load double*, double** %data, align 8, !tbaa !137
  %wide.trip.count = zext i32 %mul6 to i64
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %arrayidx = getelementptr inbounds double, double* %2, i64 %indvars.iv
  store double %val, double* %arrayidx, align 8, !tbaa !75
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.end, label %for.body, !llvm.loop !259

for.end:                                          ; preds = %for.body, %entry
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable mustprogress
define dso_local void @set_block_b(%struct.Matrix* nocapture readonly %mat, %struct.Matrix_diff* nocapture readonly %matb, i32 %row_off, i32 %col_off, %struct.Matrix* nocapture readonly %block, %struct.Matrix_diff* nocapture readonly %blockb) local_unnamed_addr #18 {
entry:
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %block, i64 0, i32 1
  %0 = load i32, i32* %ncols, align 4, !tbaa !139
  %cmp56 = icmp sgt i32 %0, 0
  br i1 %cmp56, label %for.body.lr.ph, label %for.end31

for.body.lr.ph:                                   ; preds = %entry
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %block, i64 0, i32 0
  %1 = load i32, i32* %nrows, align 8, !tbaa !138
  %cmp353 = icmp sgt i32 %1, 0
  %data = getelementptr inbounds %struct.Matrix_diff, %struct.Matrix_diff* %blockb, i64 0, i32 0
  %data6 = getelementptr inbounds %struct.Matrix_diff, %struct.Matrix_diff* %matb, i64 0, i32 0
  %nrows9 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 0
  %2 = sext i32 %1 to i64
  %3 = sext i32 %row_off to i64
  %4 = zext i32 %0 to i64
  %5 = sext i32 %col_off to i64
  br label %for.body

for.cond.loopexit:                                ; preds = %for.body4, %for.body
  %cmp = icmp sgt i64 %indvars.iv63, 1
  br i1 %cmp, label %for.body, label %for.end31, !llvm.loop !260

for.body:                                         ; preds = %for.cond.loopexit, %for.body.lr.ph
  %indvars.iv63 = phi i64 [ %4, %for.body.lr.ph ], [ %indvars.iv.next64, %for.cond.loopexit ]
  %indvars.iv.next64 = add nsw i64 %indvars.iv63, -1
  br i1 %cmp353, label %for.body4.lr.ph, label %for.cond.loopexit

for.body4.lr.ph:                                  ; preds = %for.body
  %6 = load double*, double** %data, align 8, !tbaa !241
  %7 = mul nsw i64 %indvars.iv.next64, %2
  %8 = load double*, double** %data6, align 8, !tbaa !241
  %9 = add nsw i64 %indvars.iv.next64, %5
  %10 = load i32, i32* %nrows9, align 8, !tbaa !138
  %11 = sext i32 %10 to i64
  %12 = mul nsw i64 %9, %11
  br label %for.body4

for.body4:                                        ; preds = %for.body4, %for.body4.lr.ph
  %indvars.iv = phi i64 [ %2, %for.body4.lr.ph ], [ %indvars.iv.next, %for.body4 ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %13 = add nsw i64 %indvars.iv.next, %7
  %arrayidx = getelementptr inbounds double, double* %6, i64 %13
  %14 = load double, double* %arrayidx, align 8, !tbaa !75
  %15 = add nsw i64 %indvars.iv.next, %3
  %16 = add nsw i64 %15, %12
  %arrayidx13 = getelementptr inbounds double, double* %8, i64 %16
  %17 = load double, double* %arrayidx13, align 8, !tbaa !75
  %add14 = fadd fast double %17, %14
  store double %add14, double* %arrayidx, align 8, !tbaa !75
  store double 0.000000e+00, double* %arrayidx13, align 8, !tbaa !75
  %cmp3 = icmp sgt i64 %indvars.iv, 1
  br i1 %cmp3, label %for.body4, label %for.cond.loopexit, !llvm.loop !261

for.end31:                                        ; preds = %for.cond.loopexit, %entry
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable mustprogress
define dso_local void @set_block_c(%struct.Matrix* nocapture readonly %mat, i32 %row_off, i32 %col_off, %struct.Matrix* nocapture readonly %block) local_unnamed_addr #18 {
entry:
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %block, i64 0, i32 1
  %0 = load i32, i32* %ncols, align 4, !tbaa !139
  %cmp30 = icmp sgt i32 %0, 0
  br i1 %cmp30, label %for.cond1.preheader.lr.ph, label %for.end15

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %block, i64 0, i32 0
  %1 = load i32, i32* %nrows, align 8, !tbaa !138
  %cmp228 = icmp sgt i32 %1, 0
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %block, i64 0, i32 2
  %data5 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 2
  %nrows8 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 0
  %2 = sext i32 %row_off to i64
  %wide.trip.count = zext i32 %1 to i64
  %3 = sext i32 %col_off to i64
  %4 = sext i32 %1 to i64
  %5 = zext i32 %0 to i64
  br label %for.cond1.preheader

for.cond1.preheader:                              ; preds = %for.inc13, %for.cond1.preheader.lr.ph
  %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc13 ], [ 0, %for.cond1.preheader.lr.ph ]
  br i1 %cmp228, label %for.body3.lr.ph, label %for.inc13

for.body3.lr.ph:                                  ; preds = %for.cond1.preheader
  %6 = load double*, double** %data, align 8, !tbaa !137
  %7 = load double*, double** %data5, align 8, !tbaa !137
  %8 = add nsw i64 %indvars.iv1, %3
  %9 = load i32, i32* %nrows8, align 8, !tbaa !138
  %10 = sext i32 %9 to i64
  %11 = mul nsw i64 %8, %10
  %12 = mul nsw i64 %indvars.iv1, %4
  br label %for.body3

for.body3:                                        ; preds = %for.body3, %for.body3.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body3.lr.ph ], [ %indvars.iv.next, %for.body3 ]
  %13 = add nsw i64 %indvars.iv, %12
  %arrayidx = getelementptr inbounds double, double* %6, i64 %13
  %14 = load double, double* %arrayidx, align 8, !tbaa !75
  %15 = add nsw i64 %indvars.iv, %2
  %16 = add nsw i64 %15, %11
  %arrayidx12 = getelementptr inbounds double, double* %7, i64 %16
  store double %14, double* %arrayidx12, align 8, !tbaa !75
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.inc13, label %for.body3, !llvm.loop !262

for.inc13:                                        ; preds = %for.body3, %for.cond1.preheader
  %indvars.iv.next2 = add nuw nsw i64 %indvars.iv1, 1
  %exitcond37.not = icmp eq i64 %indvars.iv.next2, %5
  br i1 %exitcond37.not, label %for.end15, label %for.cond1.preheader, !llvm.loop !263

for.end15:                                        ; preds = %for.inc13, %entry
  ret void
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @copy_b(%struct.Matrix* %dst, %struct.Matrix_diff* nocapture %dstb, %struct.Matrix* nocapture readonly %src, %struct.Matrix_diff* nocapture readonly %srcb) local_unnamed_addr #5 {
entry:
  %chunklength = alloca i32, align 4
  %diffchunkold = alloca i8*, align 8
  %chunkold = alloca i8*, align 8
  %branch = alloca i32, align 4
  %0 = bitcast i32* %chunklength to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #38
  %1 = bitcast i8** %diffchunkold to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #38
  %2 = bitcast i8** %chunkold to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %2) #38
  %3 = bitcast i32* %branch to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #38
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %dst, i64 0, i32 2
  %4 = bitcast double** %data to i8**
  %5 = load i8*, i8** %4, align 8, !tbaa !137
  %cmp.not = icmp eq i8* %5, null
  br i1 %cmp.not, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %6 = bitcast %struct.Matrix_diff* %dstb to i8**
  %7 = load i8*, i8** %6, align 8, !tbaa !241
  tail call void @pushPointer8(i8* %7) #38
  %8 = load i8*, i8** %6, align 8, !tbaa !241
  tail call void @free(i8* %8) #38
  %9 = load i8*, i8** %4, align 8, !tbaa !137
  tail call void @pushPointer8(i8* %9) #38
  %10 = load i8*, i8** %4, align 8, !tbaa !137
  tail call void @free(i8* %10) #38
  tail call void @pushInteger4(i32 undef) #38
  tail call void @pushControl1b(i32 0) #38
  br label %if.end

if.else:                                          ; preds = %entry
  tail call void @pushControl1b(i32 1) #38
  %.pre = bitcast %struct.Matrix_diff* %dstb to i8**
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %.pre-phi = phi i8** [ %.pre, %if.else ], [ %6, %if.then ]
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %dst, i64 0, i32 1
  %11 = load i32, i32* %ncols, align 4, !tbaa !139
  tail call void @pushInteger4(i32 %11) #38
  %ncols5 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %src, i64 0, i32 1
  %12 = load i32, i32* %ncols5, align 4, !tbaa !139
  store i32 %12, i32* %ncols, align 4, !tbaa !139
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %dst, i64 0, i32 0
  %13 = load i32, i32* %nrows, align 8, !tbaa !138
  tail call void @pushInteger4(i32 %13) #38
  %nrows7 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %src, i64 0, i32 0
  %14 = load i32, i32* %nrows7, align 8, !tbaa !138
  store i32 %14, i32* %nrows, align 8, !tbaa !138
  %15 = load i32, i32* %ncols, align 4, !tbaa !139
  %mul = mul i32 %15, %14
  %conv = sext i32 %mul to i64
  %mul11 = shl nsw i64 %conv, 3
  %call = tail call noalias i8* @malloc(i64 %mul11) #38
  %data12 = getelementptr inbounds %struct.Matrix_diff, %struct.Matrix_diff* %dstb, i64 0, i32 0
  store i8* %call, i8** %.pre-phi, align 8, !tbaa !241
  %cmp16119 = icmp sgt i32 %mul, 0
  br i1 %cmp16119, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %if.end
  %16 = zext i32 %mul to i64
  %17 = shl nuw nsw i64 %16, 3
  call void @llvm.memset.p0i8.i64(i8* align 8 %call, i8 0, i64 %17, i1 false)
  br label %for.end

for.end:                                          ; preds = %for.body.lr.ph, %if.end
  %18 = load i8*, i8** %4, align 8, !tbaa !137
  tail call void @pushPointer8(i8* %18) #38
  %19 = load i32, i32* %ncols, align 4, !tbaa !139
  %20 = load i32, i32* %nrows, align 8, !tbaa !138
  %mul21 = mul i32 %20, %19
  %conv22 = sext i32 %mul21 to i64
  %mul23 = shl nsw i64 %conv22, 3
  %call24 = tail call noalias i8* @malloc(i64 %mul23) #38
  store i8* %call24, i8** %4, align 8, !tbaa !137
  %cmp30117 = icmp sgt i32 %mul21, 0
  br i1 %cmp30117, label %for.body31.lr.ph, label %for.end45

for.body31.lr.ph:                                 ; preds = %for.end
  %data32 = getelementptr inbounds %struct.Matrix_diff, %struct.Matrix_diff* %srcb, i64 0, i32 0
  %21 = load double*, double** %data32, align 8, !tbaa !241
  %22 = load double*, double** %data12, align 8, !tbaa !241
  br label %for.body31

for.body31:                                       ; preds = %for.body31, %for.body31.lr.ph
  %indvars.iv = phi i64 [ %conv22, %for.body31.lr.ph ], [ %indvars.iv.next, %for.body31 ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %arrayidx34 = getelementptr inbounds double, double* %21, i64 %indvars.iv.next
  %23 = load double, double* %arrayidx34, align 8, !tbaa !75
  %arrayidx37 = getelementptr inbounds double, double* %22, i64 %indvars.iv.next
  %24 = load double, double* %arrayidx37, align 8, !tbaa !75
  %add = fadd fast double %24, %23
  store double %add, double* %arrayidx34, align 8, !tbaa !75
  store double 0.000000e+00, double* %arrayidx37, align 8, !tbaa !75
  %cmp30 = icmp sgt i64 %indvars.iv, 1
  br i1 %cmp30, label %for.body31, label %for.end45, !llvm.loop !264

for.end45:                                        ; preds = %for.body31, %for.end
  tail call void @free(i8* %call24) #38
  tail call void @popPointer8(i8** nonnull %4) #38
  %25 = load i8*, i8** %.pre-phi, align 8, !tbaa !241
  tail call void @free(i8* %25) #38
  tail call void @popInteger4(i32* nonnull %nrows) #38
  tail call void @popInteger4(i32* nonnull %ncols) #38
  call void @popControl1b(i32* nonnull %branch) #38
  %26 = load i32, i32* %branch, align 4, !tbaa !59
  %cmp51 = icmp eq i32 %26, 0
  br i1 %cmp51, label %if.then52, label %if.end70

if.then52:                                        ; preds = %for.end45
  call void @popInteger4(i32* nonnull %chunklength) #38
  %27 = load i32, i32* %chunklength, align 4, !tbaa !59
  %mul53 = shl nsw i32 %27, 3
  %conv54 = sext i32 %mul53 to i64
  %call55 = call noalias i8* @malloc(i64 %conv54) #38
  store i8* %call55, i8** %4, align 8, !tbaa !137
  call void @popPointer8(i8** nonnull %chunkold) #38
  %28 = load i32, i32* %chunklength, align 4, !tbaa !59
  %mul57 = shl nsw i32 %28, 3
  %conv58 = sext i32 %mul57 to i64
  %call59 = call noalias i8* @malloc(i64 %conv58) #38
  store i8* %call59, i8** %.pre-phi, align 8, !tbaa !241
  call void @popPointer8(i8** nonnull %diffchunkold) #38
  %29 = load i32, i32* %chunklength, align 4, !tbaa !59
  %cmp62114 = icmp sgt i32 %29, 0
  br i1 %cmp62114, label %for.body63.lr.ph, label %if.end70

for.body63.lr.ph:                                 ; preds = %if.then52
  %30 = bitcast %struct.Matrix_diff* %dstb to i8**
  %31 = load i8*, i8** %30, align 8, !tbaa !241
  %32 = zext i32 %29 to i64
  %33 = shl nuw nsw i64 %32, 3
  call void @llvm.memset.p0i8.i64(i8* align 8 %31, i8 0, i64 %33, i1 false)
  br label %if.end70

if.end70:                                         ; preds = %for.body63.lr.ph, %if.then52, %for.end45
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #38
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %2) #38
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #38
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #38
  ret void
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @copy_c(%struct.Matrix* nocapture %dst, %struct.Matrix* nocapture readonly %src) local_unnamed_addr #5 {
entry:
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %dst, i64 0, i32 2
  %0 = bitcast double** %data to i8**
  %1 = load i8*, i8** %0, align 8, !tbaa !137
  %cmp.not = icmp eq i8* %1, null
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @free(i8* nonnull %1) #38
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %src, i64 0, i32 1
  %2 = load i32, i32* %ncols, align 4, !tbaa !139
  %ncols2 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %dst, i64 0, i32 1
  store i32 %2, i32* %ncols2, align 4, !tbaa !139
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %src, i64 0, i32 0
  %3 = load i32, i32* %nrows, align 8, !tbaa !138
  %nrows3 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %dst, i64 0, i32 0
  store i32 %3, i32* %nrows3, align 8, !tbaa !138
  %mul = mul i32 %3, %2
  %conv = sext i32 %mul to i64
  %mul6 = shl nsw i64 %conv, 3
  %call = tail call noalias i8* @malloc(i64 %mul6) #38
  store i8* %call, i8** %0, align 8, !tbaa !137
  %cmp1131 = icmp sgt i32 %mul, 0
  %4 = bitcast i8* %call to double*
  br i1 %cmp1131, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %if.end
  %data12 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %src, i64 0, i32 2
  %5 = load double*, double** %data12, align 8, !tbaa !137
  %wide.trip.count = zext i32 %mul to i64
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %arrayidx = getelementptr inbounds double, double* %5, i64 %indvars.iv
  %6 = load double, double* %arrayidx, align 8, !tbaa !75
  %arrayidx15 = getelementptr inbounds double, double* %4, i64 %indvars.iv
  store double %6, double* %arrayidx15, align 8, !tbaa !75
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.end, label %for.body, !llvm.loop !265

for.end:                                          ; preds = %for.body, %if.end
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable mustprogress
define dso_local void @square_sum_b(i32 %n, double* nocapture readonly %x, double* nocapture %xb, double %square_sumb) local_unnamed_addr #18 {
entry:
  %cmp31 = icmp sgt i32 %n, 1
  %mul5 = fmul fast double %square_sumb, 2.000000e+00
  br i1 %cmp31, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %entry
  %0 = zext i32 %n to i64
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ %0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %arrayidx2 = getelementptr inbounds double, double* %xb, i64 %indvars.iv.next
  %1 = load double, double* %arrayidx2, align 8, !tbaa !75
  %arrayidx4 = getelementptr inbounds double, double* %x, i64 %indvars.iv.next
  %2 = load double, double* %arrayidx4, align 8, !tbaa !75
  %mul6 = fmul fast double %mul5, %2
  %add = fadd fast double %mul6, %1
  store double %add, double* %arrayidx2, align 8, !tbaa !75
  %cmp = icmp sgt i64 %indvars.iv, 2
  br i1 %cmp, label %for.body, label %for.end, !llvm.loop !266

for.end:                                          ; preds = %for.body, %entry
  %3 = load double, double* %xb, align 8, !tbaa !75
  %4 = load double, double* %x, align 8, !tbaa !75
  %mul12 = fmul fast double %mul5, %4
  %add13 = fadd fast double %mul12, %3
  store double %add13, double* %xb, align 8, !tbaa !75
  ret void
}

; Function Attrs: norecurse nounwind readonly uwtable willreturn mustprogress
define dso_local double @square_sum_c(i32 %n, double* nocapture readonly %x) local_unnamed_addr #8 {
entry:
  %0 = load double, double* %x, align 8, !tbaa !75
  %mul = fmul fast double %0, %0
  %cmp15 = icmp sgt i32 %n, 1
  br i1 %cmp15, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %n to i64
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %indvars.iv = phi i64 [ 1, %for.body.preheader ], [ %indvars.iv.next, %for.body ]
  %res.017 = phi double [ %mul, %for.body.preheader ], [ %add, %for.body ]
  %arrayidx2 = getelementptr inbounds double, double* %x, i64 %indvars.iv
  %1 = load double, double* %arrayidx2, align 8, !tbaa !75
  %mul5 = fmul fast double %1, %1
  %add = fadd fast double %mul5, %res.017
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.end, label %for.body, !llvm.loop !267

for.end:                                          ; preds = %for.body, %entry
  %res.0.lcssa = phi double [ %mul, %entry ], [ %add, %for.body ]
  ret double %res.0.lcssa
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @angle_axis_to_rotation_matrix_b(double* nocapture readonly %angle_axis, double* nocapture %angle_axisb, %struct.Matrix* nocapture readonly %R, %struct.Matrix_diff* nocapture readonly %Rb) local_unnamed_addr #5 {
entry:
  %0 = load double, double* %angle_axis, align 8, !tbaa !75
  %mul.i = fmul fast double %0, %0
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i, %entry
  %indvars.iv.i = phi i64 [ 1, %entry ], [ %indvars.iv.next.i, %for.body.i ]
  %res.017.i = phi double [ %mul.i, %entry ], [ %add.i, %for.body.i ]
  %arrayidx2.i = getelementptr inbounds double, double* %angle_axis, i64 %indvars.iv.i
  %1 = load double, double* %arrayidx2.i, align 8, !tbaa !75
  %mul5.i = fmul fast double %1, %1
  %add.i = fadd fast double %mul5.i, %res.017.i
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, 3
  br i1 %exitcond.not.i, label %square_sum_c.exit, label %for.body.i, !llvm.loop !267

square_sum_c.exit:                                ; preds = %for.body.i
  %add.i.lcssa = phi double [ %add.i, %for.body.i ]
  %2 = tail call fast double @llvm.sqrt.f64(double %add.i.lcssa)
  %cmp = fcmp fast olt double %2, 1.000000e-04
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %square_sum_c.exit
  tail call void @set_identity_b(%struct.Matrix* %R, %struct.Matrix_diff* %Rb)
  br label %if.end

if.else:                                          ; preds = %square_sum_c.exit
  %div = fdiv fast double %0, %2
  %arrayidx1 = getelementptr inbounds double, double* %angle_axis, i64 1
  %3 = load double, double* %arrayidx1, align 8, !tbaa !75
  %div2 = fdiv fast double %3, %2
  %arrayidx3 = getelementptr inbounds double, double* %angle_axis, i64 2
  %4 = load double, double* %arrayidx3, align 8, !tbaa !75
  %div4 = fdiv fast double %4, %2
  %5 = tail call fast double @llvm.sin.f64(double %2)
  %6 = tail call fast double @llvm.cos.f64(double %2)
  %mul = fmul fast double %div4, 2.000000e+00
  %mul6 = fmul fast double %mul, %6
  %sub = fsub fast double %mul, %mul6
  %data = getelementptr inbounds %struct.Matrix_diff, %struct.Matrix_diff* %Rb, i64 0, i32 0
  %7 = load double*, double** %data, align 8, !tbaa !241
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %R, i64 0, i32 0
  %8 = load i32, i32* %nrows, align 8, !tbaa !138
  %mul7 = shl nsw i32 %8, 1
  %add = add nsw i32 %mul7, 2
  %idxprom = sext i32 %add to i64
  %arrayidx8 = getelementptr inbounds double, double* %7, i64 %idxprom
  %9 = load double, double* %arrayidx8, align 8, !tbaa !75
  %mul9 = fmul fast double %sub, %9
  %mul10 = fmul fast double %div4, %div4
  %sub11 = fsub fast double 1.000000e+00, %mul10
  %mul18 = fmul fast double %sub11, %9
  store double 0.000000e+00, double* %arrayidx8, align 8, !tbaa !75
  %sub25 = fsub fast double 1.000000e+00, %6
  %mul26 = fmul fast double %div2, %sub25
  %add30 = add nsw i32 %8, 2
  %idxprom31 = sext i32 %add30 to i64
  %arrayidx32 = getelementptr inbounds double, double* %7, i64 %idxprom31
  %10 = load double, double* %arrayidx32, align 8, !tbaa !75
  %mul36 = fmul fast double %div4, %sub25
  %mul44 = fmul fast double %div4, %div2
  %mul66 = fmul fast double %10, %div
  store double 0.000000e+00, double* %arrayidx32, align 8, !tbaa !75
  %arrayidx80 = getelementptr inbounds double, double* %7, i64 2
  %11 = load double, double* %arrayidx80, align 8, !tbaa !75
  %mul84 = fmul fast double %sub25, %div
  %mul93 = fmul fast double %div4, %div
  store double 0.000000e+00, double* %arrayidx80, align 8, !tbaa !75
  %add129 = or i32 %mul7, 1
  %idxprom130 = sext i32 %add129 to i64
  %arrayidx131 = getelementptr inbounds double, double* %7, i64 %idxprom130
  %12 = load double, double* %arrayidx131, align 8, !tbaa !75
  %mul116.neg = fmul fast double %11, %div2
  %mul167.neg = fmul fast double %12, %div
  store double 0.000000e+00, double* %arrayidx131, align 8, !tbaa !75
  %mul175 = fmul fast double %div2, 2.000000e+00
  %mul177 = fmul fast double %mul175, %6
  %sub178 = fsub fast double %mul175, %mul177
  %add182 = add nsw i32 %8, 1
  %idxprom183 = sext i32 %add182 to i64
  %arrayidx184 = getelementptr inbounds double, double* %7, i64 %idxprom183
  %13 = load double, double* %arrayidx184, align 8, !tbaa !75
  %mul185 = fmul fast double %13, %sub178
  %mul187 = fmul fast double %div2, %div2
  %sub188 = fsub fast double 1.000000e+00, %mul187
  %mul195 = fmul fast double %13, %sub188
  store double 0.000000e+00, double* %arrayidx184, align 8, !tbaa !75
  %arrayidx210 = getelementptr inbounds double, double* %7, i64 1
  %14 = load double, double* %arrayidx210, align 8, !tbaa !75
  %mul223 = fmul fast double %div2, %div
  %mul246 = fmul fast double %14, %div4
  store double 0.000000e+00, double* %arrayidx210, align 8, !tbaa !75
  %idxprom260 = sext i32 %mul7 to i64
  %arrayidx261 = getelementptr inbounds double, double* %7, i64 %idxprom260
  %15 = load double, double* %arrayidx261, align 8, !tbaa !75
  %mul297 = fmul fast double %15, %div2
  store double 0.000000e+00, double* %arrayidx261, align 8, !tbaa !75
  %idxprom311 = sext i32 %8 to i64
  %arrayidx312 = getelementptr inbounds double, double* %7, i64 %idxprom311
  %16 = load double, double* %arrayidx312, align 8, !tbaa !75
  %reass.add = fadd fast double %16, %14
  %reass.mul = fmul fast double %reass.add, %mul84
  %reass.add651 = fadd fast double %12, %10
  %reass.mul652 = fmul fast double %reass.add651, %mul36
  %reass.add669 = fsub fast double %15, %11
  %reass.mul670 = fmul fast double %reass.add669, %5
  %add222 = fadd fast double %mul185, %reass.mul652
  %add290 = fadd fast double %add222, %reass.mul
  %add324 = fadd fast double %add290, %reass.mul670
  %mul51.neg = fmul fast double %10, %mul44
  %mul100.neg = fmul fast double %11, %mul93
  %mul151.neg = fmul fast double %12, %mul44
  %mul281.neg = fmul fast double %15, %mul93
  %reass.add658 = fadd fast double %15, %11
  %reass.mul659 = fmul fast double %reass.add658, %mul84
  %reass.mul661 = fmul fast double %reass.add651, %mul26
  %reass.add679 = fsub fast double %14, %16
  %reass.mul680 = fmul fast double %reass.add679, %5
  %add239 = fadd fast double %reass.mul661, %mul9
  %add273 = fadd fast double %add239, %reass.mul659
  %sub341 = fadd fast double %add273, %reass.mul680
  %mul348.neg = fmul fast double %16, %div4
  %reass.add681 = fadd fast double %mul167.neg, %mul116.neg
  %reass.add682 = fadd fast double %reass.add681, %mul348.neg
  %add247 = fadd fast double %mul246, %mul66
  %add298 = fadd fast double %add247, %mul297
  %sub349 = fsub fast double %add298, %reass.add682
  store double 0.000000e+00, double* %arrayidx312, align 8, !tbaa !75
  %mul356 = fmul fast double %div, 2.000000e+00
  %mul358 = fmul fast double %mul356, %6
  %sub359 = fsub fast double %mul356, %mul358
  %17 = load double, double* %7, align 8, !tbaa !75
  %mul366 = fmul fast double %17, %sub359
  %reass.mul663 = fmul fast double %reass.add, %mul26
  %reass.mul665 = fmul fast double %reass.add658, %mul36
  %reass.add671 = fsub fast double %10, %12
  %reass.mul672 = fmul fast double %reass.add671, %5
  %add263 = fadd fast double %reass.mul663, %reass.mul665
  %add314 = fadd fast double %add263, %mul366
  %add367 = fadd fast double %add314, %reass.mul672
  %mul368 = fmul fast double %div, %div
  %sub369 = fsub fast double 1.000000e+00, %mul368
  %mul376 = fmul fast double %17, %sub369
  %reass.mul685 = fmul fast double %mul223, %reass.add
  %reass.add674 = fadd fast double %mul100.neg, %mul51.neg
  %reass.add675 = fadd fast double %reass.add674, %mul151.neg
  %reass.add676 = fadd fast double %reass.add675, %mul281.neg
  %reass.add677 = fadd fast double %reass.add676, %reass.mul685
  %18 = fadd fast double %mul195, %mul18
  %sub333 = fadd fast double %18, %mul376
  store double 0.000000e+00, double* %7, align 8, !tbaa !75
  %mul384 = fmul fast double %sub349, %6
  %19 = load double, double* %arrayidx3, align 8, !tbaa !75
  %20 = load double, double* %arrayidx1, align 8, !tbaa !75
  %21 = load double, double* %angle_axis, align 8, !tbaa !75
  %22 = fsub fast double %reass.add677, %sub333
  %mul385.neg = fmul fast double %22, %5
  %23 = fneg fast double %19
  %24 = fmul fast double %sub341, %23
  %div390.neg = fdiv fast double %24, %add.i.lcssa
  %25 = fneg fast double %20
  %26 = fmul fast double %add324, %25
  %div395.neg = fdiv fast double %26, %add.i.lcssa
  %27 = fneg fast double %21
  %28 = fmul fast double %add367, %27
  %div400.neg = fdiv fast double %28, %add.i.lcssa
  %.neg666 = fadd fast double %mul385.neg, %mul384
  %.neg667 = fadd fast double %.neg666, %div390.neg
  %.neg668 = fadd fast double %.neg667, %div395.neg
  %sub401 = fadd fast double %.neg668, %div400.neg
  %arrayidx402 = getelementptr inbounds double, double* %angle_axisb, i64 2
  %29 = load double, double* %arrayidx402, align 8, !tbaa !75
  %div403 = fdiv fast double %sub341, %2
  %add404 = fadd fast double %29, %div403
  store double %add404, double* %arrayidx402, align 8, !tbaa !75
  %arrayidx406 = getelementptr inbounds double, double* %angle_axisb, i64 1
  %30 = load double, double* %arrayidx406, align 8, !tbaa !75
  %div407 = fdiv fast double %add324, %2
  %add408 = fadd fast double %30, %div407
  store double %add408, double* %arrayidx406, align 8, !tbaa !75
  %31 = load double, double* %angle_axisb, align 8, !tbaa !75
  %div411 = fdiv fast double %add367, %2
  %add412 = fadd fast double %31, %div411
  store double %add412, double* %angle_axisb, align 8, !tbaa !75
  %phi.bo650 = fmul fast double %sub401, 2.000000e+00
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %normb.0 = phi double [ 0.000000e+00, %if.then ], [ %phi.bo650, %if.else ]
  %cmp414 = fcmp fast oeq double %add.i.lcssa, 0.000000e+00
  br i1 %cmp414, label %cond.end, label %cond.false

cond.false:                                       ; preds = %if.end
  %mul415 = fmul fast double %2, 2.000000e+00
  %phi.bo = fdiv fast double %normb.0, %mul415
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %if.end
  %cond = phi double [ %phi.bo, %cond.false ], [ 0.000000e+00, %if.end ]
  br label %for.body.i649

for.body.i649:                                    ; preds = %for.body.i649, %cond.end
  %indvars.iv.i645 = phi i64 [ 3, %cond.end ], [ %indvars.iv.next.i646, %for.body.i649 ]
  %indvars.iv.next.i646 = add nsw i64 %indvars.iv.i645, -1
  %arrayidx2.i647 = getelementptr inbounds double, double* %angle_axisb, i64 %indvars.iv.next.i646
  %32 = load double, double* %arrayidx2.i647, align 8, !tbaa !75
  %arrayidx4.i = getelementptr inbounds double, double* %angle_axis, i64 %indvars.iv.next.i646
  %33 = load double, double* %arrayidx4.i, align 8, !tbaa !75
  %mul6.i = fmul fast double %33, %cond
  %add.i648 = fadd fast double %mul6.i, %32
  store double %add.i648, double* %arrayidx2.i647, align 8, !tbaa !75
  %cmp.i = icmp ugt i64 %indvars.iv.i645, 2
  br i1 %cmp.i, label %for.body.i649, label %square_sum_b.exit, !llvm.loop !266

square_sum_b.exit:                                ; preds = %for.body.i649
  %34 = load double, double* %angle_axisb, align 8, !tbaa !75
  %35 = load double, double* %angle_axis, align 8, !tbaa !75
  %mul12.i = fmul fast double %35, %cond
  %add13.i = fadd fast double %mul12.i, %34
  store double %add13.i, double* %angle_axisb, align 8, !tbaa !75
  ret void
}

; Function Attrs: nofree nounwind uwtable mustprogress
define dso_local void @angle_axis_to_rotation_matrix_c(double* nocapture readonly %angle_axis, %struct.Matrix* nocapture readonly %R) local_unnamed_addr #9 {
entry:
  %0 = load double, double* %angle_axis, align 8, !tbaa !75
  %mul.i = fmul fast double %0, %0
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i, %entry
  %indvars.iv.i = phi i64 [ 1, %entry ], [ %indvars.iv.next.i, %for.body.i ]
  %res.017.i = phi double [ %mul.i, %entry ], [ %add.i, %for.body.i ]
  %arrayidx2.i = getelementptr inbounds double, double* %angle_axis, i64 %indvars.iv.i
  %1 = load double, double* %arrayidx2.i, align 8, !tbaa !75
  %mul5.i = fmul fast double %1, %1
  %add.i = fadd fast double %mul5.i, %res.017.i
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, 3
  br i1 %exitcond.not.i, label %square_sum_c.exit, label %for.body.i, !llvm.loop !267

square_sum_c.exit:                                ; preds = %for.body.i
  %add.i.lcssa = phi double [ %add.i, %for.body.i ]
  %2 = tail call fast double @llvm.sqrt.f64(double %add.i.lcssa)
  %cmp = fcmp fast olt double %2, 1.000000e-04
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %square_sum_c.exit
  %ncols.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %R, i64 0, i32 1
  %3 = load i32, i32* %ncols.i, align 4, !tbaa !139
  %cmp33.i = icmp sgt i32 %3, 0
  br i1 %cmp33.i, label %for.cond1.preheader.lr.ph.i, label %cleanup

for.cond1.preheader.lr.ph.i:                      ; preds = %if.then
  %nrows.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %R, i64 0, i32 0
  %4 = load i32, i32* %nrows.i, align 8, !tbaa !138
  %cmp230.i = icmp sgt i32 %4, 0
  %data6.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %R, i64 0, i32 2
  %5 = zext i32 %4 to i64
  %6 = zext i32 %3 to i64
  %7 = sext i32 %4 to i64
  br label %for.cond1.preheader.i

for.cond1.preheader.i:                            ; preds = %for.inc12.i, %for.cond1.preheader.lr.ph.i
  %indvars.iv176 = phi i64 [ %indvars.iv.next177, %for.inc12.i ], [ 0, %for.cond1.preheader.lr.ph.i ]
  br i1 %cmp230.i, label %for.body3.lr.ph.i, label %for.inc12.i

for.body3.lr.ph.i:                                ; preds = %for.cond1.preheader.i
  %8 = mul nsw i64 %indvars.iv176, %7
  br label %for.body3.i

for.body3.i:                                      ; preds = %for.body3.i, %for.body3.lr.ph.i
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.i ], [ 0, %for.body3.lr.ph.i ]
  %cmp4.i = icmp eq i64 %indvars.iv176, %indvars.iv
  %9 = load double*, double** %data6.i, align 8, !tbaa !137
  %.sink180 = add nsw i64 %indvars.iv, %8
  %.sink = select i1 %cmp4.i, double 1.000000e+00, double 0.000000e+00
  %arrayidx11.i = getelementptr inbounds double, double* %9, i64 %.sink180
  store double %.sink, double* %arrayidx11.i, align 8, !tbaa !75
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not.i174 = icmp eq i64 %indvars.iv.next, %5
  br i1 %exitcond.not.i174, label %for.inc12.i, label %for.body3.i, !llvm.loop !257

for.inc12.i:                                      ; preds = %for.body3.i, %for.cond1.preheader.i
  %indvars.iv.next177 = add nuw nsw i64 %indvars.iv176, 1
  %exitcond37.not.i = icmp eq i64 %indvars.iv.next177, %6
  br i1 %exitcond37.not.i, label %cleanup, label %for.cond1.preheader.i, !llvm.loop !258

if.else:                                          ; preds = %square_sum_c.exit
  %div = fdiv fast double %0, %2
  %arrayidx1 = getelementptr inbounds double, double* %angle_axis, i64 1
  %10 = load double, double* %arrayidx1, align 8, !tbaa !75
  %div2 = fdiv fast double %10, %2
  %arrayidx3 = getelementptr inbounds double, double* %angle_axis, i64 2
  %11 = load double, double* %arrayidx3, align 8, !tbaa !75
  %div4 = fdiv fast double %11, %2
  %12 = tail call fast double @llvm.sin.f64(double %2)
  %13 = tail call fast double @llvm.cos.f64(double %2)
  %mul = fmul fast double %div, %div
  %sub = fsub fast double 1.000000e+00, %mul
  %mul6 = fmul fast double %sub, %13
  %add = fadd fast double %mul6, %mul
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %R, i64 0, i32 2
  %14 = load double*, double** %data, align 8, !tbaa !137
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %R, i64 0, i32 0
  store double %add, double* %14, align 8, !tbaa !75
  %sub11 = fsub fast double 1.000000e+00, %13
  %mul10 = fmul fast double %sub11, %div
  %mul12 = fmul fast double %mul10, %div2
  %mul13 = fmul fast double %div4, %12
  %sub14 = fsub fast double %mul12, %mul13
  %15 = load i32, i32* %nrows, align 8, !tbaa !138
  %idxprom19 = sext i32 %15 to i64
  %arrayidx20 = getelementptr inbounds double, double* %14, i64 %idxprom19
  store double %sub14, double* %arrayidx20, align 8, !tbaa !75
  %mul23 = fmul fast double %mul10, %div4
  %mul24 = fmul fast double %div2, %12
  %add25 = fadd fast double %mul23, %mul24
  %mul28 = shl nsw i32 %15, 1
  %idxprom30 = sext i32 %mul28 to i64
  %arrayidx31 = getelementptr inbounds double, double* %14, i64 %idxprom30
  store double %add25, double* %arrayidx31, align 8, !tbaa !75
  %add36 = fadd fast double %mul12, %mul13
  %arrayidx42 = getelementptr inbounds double, double* %14, i64 1
  store double %add36, double* %arrayidx42, align 8, !tbaa !75
  %mul43 = fmul fast double %div2, %div2
  %sub45 = fsub fast double 1.000000e+00, %mul43
  %mul46 = fmul fast double %sub45, %13
  %add47 = fadd fast double %mul46, %mul43
  %add51 = add nsw i32 %15, 1
  %idxprom52 = sext i32 %add51 to i64
  %arrayidx53 = getelementptr inbounds double, double* %14, i64 %idxprom52
  store double %add47, double* %arrayidx53, align 8, !tbaa !75
  %mul54 = fmul fast double %div2, %sub11
  %mul56 = fmul fast double %mul54, %div4
  %mul57 = fmul fast double %div, %12
  %sub58 = fsub fast double %mul56, %mul57
  %add62 = or i32 %mul28, 1
  %idxprom63 = sext i32 %add62 to i64
  %arrayidx64 = getelementptr inbounds double, double* %14, i64 %idxprom63
  store double %sub58, double* %arrayidx64, align 8, !tbaa !75
  %sub69 = fsub fast double %mul23, %mul24
  %arrayidx75 = getelementptr inbounds double, double* %14, i64 2
  store double %sub69, double* %arrayidx75, align 8, !tbaa !75
  %add80 = fadd fast double %mul56, %mul57
  %add84 = add nsw i32 %15, 2
  %idxprom85 = sext i32 %add84 to i64
  %arrayidx86 = getelementptr inbounds double, double* %14, i64 %idxprom85
  store double %add80, double* %arrayidx86, align 8, !tbaa !75
  %mul87 = fmul fast double %div4, %div4
  %sub89 = fsub fast double 1.000000e+00, %mul87
  %mul90 = fmul fast double %sub89, %13
  %add91 = fadd fast double %mul90, %mul87
  %add95 = add nsw i32 %mul28, 2
  %idxprom96 = sext i32 %add95 to i64
  %arrayidx97 = getelementptr inbounds double, double* %14, i64 %idxprom96
  store double %add91, double* %arrayidx97, align 8, !tbaa !75
  br label %cleanup

cleanup:                                          ; preds = %if.else, %for.inc12.i, %if.then
  ret void
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @apply_global_transform_b(%struct.Matrix* nocapture readonly %pose_params, %struct.Matrix_diff* nocapture readonly %pose_paramsb, %struct.Matrix* nocapture readonly %positions, %struct.Matrix_diff* nocapture readonly %positionsb) local_unnamed_addr #5 {
entry:
  %branch = alloca i32, align 4
  %0 = bitcast i32* %branch to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #38
  %call.i = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #38
  %1 = bitcast i8* %call.i to %struct.Matrix*
  %nrows1.i = bitcast i8* %call.i to i32*
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138
  %ncols2.i = getelementptr inbounds i8, i8* %call.i, i64 4
  %2 = bitcast i8* %ncols2.i to i32*
  store i32 3, i32* %2, align 4, !tbaa !139
  %call4.i = tail call noalias dereferenceable_or_null(72) i8* @malloc(i64 72) #38
  %data.i = getelementptr inbounds i8, i8* %call.i, i64 8
  %3 = bitcast i8* %data.i to i8**
  store i8* %call4.i, i8** %3, align 8, !tbaa !137
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 2
  %4 = load double*, double** %data, align 8, !tbaa !137
  tail call void @angle_axis_to_rotation_matrix_c(double* %4, %struct.Matrix* %1)
  %.cast = bitcast i8* %call4.i to double*
  %nrows12 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 0
  br label %for.cond1.preheader

for.cond1.preheader:                              ; preds = %for.inc24, %entry
  %indvars.iv276 = phi i64 [ 0, %entry ], [ %indvars.iv.next277, %for.inc24 ]
  %5 = mul nuw nsw i64 %indvars.iv276, 3
  br label %for.body3

for.body3:                                        ; preds = %for.body3, %for.cond1.preheader
  %indvars.iv = phi i64 [ 0, %for.cond1.preheader ], [ %indvars.iv.next, %for.body3 ]
  %6 = add nuw nsw i64 %5, %indvars.iv
  %arrayidx = getelementptr inbounds double, double* %.cast, i64 %6
  %7 = load double, double* %arrayidx, align 8, !tbaa !75
  tail call void @pushReal8(double %7) #38
  %8 = load double, double* %arrayidx, align 8, !tbaa !75
  %9 = load double*, double** %data, align 8, !tbaa !137
  %10 = load i32, i32* %nrows12, align 8, !tbaa !138
  %11 = sext i32 %10 to i64
  %12 = add nsw i64 %indvars.iv276, %11
  %arrayidx16 = getelementptr inbounds double, double* %9, i64 %12
  %13 = load double, double* %arrayidx16, align 8, !tbaa !75
  %mul17 = fmul fast double %13, %8
  store double %mul17, double* %arrayidx, align 8, !tbaa !75
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond.not, label %for.inc24, label %for.body3, !llvm.loop !268

for.inc24:                                        ; preds = %for.body3
  %indvars.iv.next277 = add nuw nsw i64 %indvars.iv276, 1
  %exitcond280.not = icmp eq i64 %indvars.iv.next277, 3
  br i1 %exitcond280.not, label %if.end, label %for.cond1.preheader, !llvm.loop !269

if.end:                                           ; preds = %for.inc24
  %call.i272 = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #38
  %14 = bitcast i8* %call.i272 to %struct.Matrix*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %call.i272, i8 0, i64 16, i1 false) #38
  tail call void @pushInteger4(i32 0) #38
  tail call void @pushInteger4(i32 0) #38
  %data29 = getelementptr inbounds i8, i8* %call.i272, i64 8
  %15 = bitcast i8* %data29 to double**
  tail call void @pushControl1b(i32 0) #38
  %.phi.trans.insert = bitcast i8* %data29 to i8**
  %.pre = load i8*, i8** %.phi.trans.insert, align 8, !tbaa !137
  tail call void @pushPointer8(i8* %.pre) #38
  tail call void @mat_mult_c(%struct.Matrix* %1, %struct.Matrix* %positions, %struct.Matrix* nonnull %14)
  %ncols32 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 1
  %16 = load i32, i32* %ncols32, align 4, !tbaa !139
  %nrows36 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 0
  br label %for.cond33

for.cond33:                                       ; preds = %for.body35, %if.end
  %j.1.in = phi i32 [ %16, %if.end ], [ %j.1, %for.body35 ]
  %cmp34 = icmp sgt i32 %j.1.in, 0
  br i1 %cmp34, label %for.body35, label %for.end89

for.body35:                                       ; preds = %for.cond33
  %j.1 = add nsw i32 %j.1.in, -1
  %17 = load i32, i32* %nrows36, align 8, !tbaa !138
  %cmp39 = icmp sgt i32 %17, 0
  br i1 %cmp39, label %for.body40, label %for.cond33, !llvm.loop !270

for.body40:                                       ; preds = %for.body35
  tail call void @llvm.trap()
  unreachable

for.end89:                                        ; preds = %for.cond33
  tail call void @popPointer8(i8** nonnull %.phi.trans.insert) #38
  call void @popControl1b(i32* nonnull %branch) #38
  %18 = load i32, i32* %branch, align 4, !tbaa !59
  %cmp91 = icmp eq i32 %18, 1
  br i1 %cmp91, label %if.then92, label %for.body102

if.then92:                                        ; preds = %for.end89
  %19 = load double*, double** %15, align 8, !tbaa !137
  call void @popReal8(double* %19) #38
  br label %for.body102

for.body102:                                      ; preds = %if.then92, %for.end89
  %ncols = getelementptr inbounds i8, i8* %call.i272, i64 4
  %20 = bitcast i8* %ncols to i32*
  %nrows28 = bitcast i8* %call.i272 to i32*
  call void @popInteger4(i32* nonnull %20) #38
  call void @popInteger4(i32* nonnull %nrows28) #38
  call void @mat_mult_b(%struct.Matrix* %1, %struct.Matrix_diff* undef, %struct.Matrix* nonnull %positions, %struct.Matrix_diff* %positionsb, %struct.Matrix* %14, %struct.Matrix_diff* undef)
  %arrayidx108 = getelementptr inbounds i8, i8* %call4.i, i64 64
  %21 = bitcast i8* %arrayidx108 to double*
  call void @popReal8(double* nonnull %21) #38
  call void @llvm.trap()
  unreachable
}

declare dso_local void @pushReal8(double) local_unnamed_addr #3

declare dso_local void @popReal8(double*) local_unnamed_addr #3

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @apply_global_transform_c(%struct.Matrix* nocapture readonly %pose_params, %struct.Matrix* nocapture readonly %positions) local_unnamed_addr #5 {
entry:
  %call.i = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #38
  %0 = bitcast i8* %call.i to %struct.Matrix*
  %nrows1.i = bitcast i8* %call.i to i32*
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138
  %ncols2.i = getelementptr inbounds i8, i8* %call.i, i64 4
  %1 = bitcast i8* %ncols2.i to i32*
  store i32 3, i32* %1, align 4, !tbaa !139
  %call4.i = tail call noalias dereferenceable_or_null(72) i8* @malloc(i64 72) #38
  %data.i = getelementptr inbounds i8, i8* %call.i, i64 8
  %2 = bitcast i8* %data.i to i8**
  store i8* %call4.i, i8** %2, align 8, !tbaa !137
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 2
  %3 = load double*, double** %data, align 8, !tbaa !137
  tail call void @angle_axis_to_rotation_matrix_c(double* %3, %struct.Matrix* %0)
  %4 = load double*, double** %data, align 8, !tbaa !137
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 0
  %5 = load i32, i32* %nrows, align 8, !tbaa !138
  %6 = bitcast i8* %call4.i to double*
  %7 = sext i32 %5 to i64
  br label %for.cond1.preheader

for.cond1.preheader:                              ; preds = %for.inc12, %entry
  %indvars.iv103 = phi i64 [ 0, %entry ], [ %indvars.iv.next104, %for.inc12 ]
  %8 = add nsw i64 %indvars.iv103, %7
  %arrayidx = getelementptr inbounds double, double* %4, i64 %8
  %9 = mul nuw nsw i64 %indvars.iv103, 3
  br label %for.body3

for.body3:                                        ; preds = %for.body3, %for.cond1.preheader
  %indvars.iv99 = phi i64 [ 0, %for.cond1.preheader ], [ %indvars.iv.next100, %for.body3 ]
  %10 = load double, double* %arrayidx, align 8, !tbaa !75
  %11 = add nuw nsw i64 %9, %indvars.iv99
  %arrayidx10 = getelementptr inbounds double, double* %6, i64 %11
  %12 = load double, double* %arrayidx10, align 8, !tbaa !75
  %mul11 = fmul fast double %12, %10
  store double %mul11, double* %arrayidx10, align 8, !tbaa !75
  %indvars.iv.next100 = add nuw nsw i64 %indvars.iv99, 1
  %exitcond102.not = icmp eq i64 %indvars.iv.next100, 3
  br i1 %exitcond102.not, label %for.inc12, label %for.body3, !llvm.loop !271

for.inc12:                                        ; preds = %for.body3
  %indvars.iv.next104 = add nuw nsw i64 %indvars.iv103, 1
  %exitcond107.not = icmp eq i64 %indvars.iv.next104, 3
  br i1 %exitcond107.not, label %for.end14, label %for.cond1.preheader, !llvm.loop !272

for.end14:                                        ; preds = %for.inc12
  %call.i81 = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #38
  %13 = bitcast i8* %call.i81 to %struct.Matrix*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %call.i81, i8 0, i64 16, i1 false) #38
  tail call void @mat_mult_c(%struct.Matrix* %0, %struct.Matrix* %positions, %struct.Matrix* %13)
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 1
  %14 = load i32, i32* %ncols, align 4, !tbaa !139
  %cmp1789 = icmp sgt i32 %14, 0
  br i1 %cmp1789, label %for.cond19.preheader.lr.ph, label %if.then.i

for.cond19.preheader.lr.ph:                       ; preds = %for.end14
  %nrows20 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 0
  %15 = load i32, i32* %nrows20, align 8, !tbaa !138
  %cmp2187 = icmp sgt i32 %15, 0
  %data23 = getelementptr inbounds i8, i8* %call.i81, i64 8
  %16 = bitcast i8* %data23 to double**
  %nrows24 = bitcast i8* %call.i81 to i32*
  %data36 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 2
  %wide.trip.count = zext i32 %15 to i64
  %17 = sext i32 %15 to i64
  %18 = zext i32 %14 to i64
  br label %for.cond19.preheader

for.cond19.preheader:                             ; preds = %for.inc45, %for.cond19.preheader.lr.ph
  %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc45 ], [ 0, %for.cond19.preheader.lr.ph ]
  br i1 %cmp2187, label %for.body22.lr.ph, label %for.inc45

for.body22.lr.ph:                                 ; preds = %for.cond19.preheader
  %19 = load double*, double** %16, align 8, !tbaa !137
  %20 = load i32, i32* %nrows24, align 8, !tbaa !138
  %21 = sext i32 %20 to i64
  %22 = mul nsw i64 %indvars.iv1, %21
  %23 = load double*, double** %data, align 8, !tbaa !137
  %24 = load i32, i32* %nrows, align 8, !tbaa !138
  %mul31 = shl nsw i32 %24, 1
  %25 = load double*, double** %data36, align 8, !tbaa !137
  %26 = sext i32 %mul31 to i64
  %27 = mul nsw i64 %indvars.iv1, %17
  br label %for.body22

for.body22:                                       ; preds = %for.body22, %for.body22.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body22.lr.ph ], [ %indvars.iv.next, %for.body22 ]
  %28 = add nsw i64 %indvars.iv, %22
  %arrayidx28 = getelementptr inbounds double, double* %19, i64 %28
  %29 = load double, double* %arrayidx28, align 8, !tbaa !75
  %30 = add nsw i64 %indvars.iv, %26
  %arrayidx34 = getelementptr inbounds double, double* %23, i64 %30
  %31 = load double, double* %arrayidx34, align 8, !tbaa !75
  %add35 = fadd fast double %31, %29
  %32 = add nsw i64 %indvars.iv, %27
  %arrayidx41 = getelementptr inbounds double, double* %25, i64 %32
  store double %add35, double* %arrayidx41, align 8, !tbaa !75
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.inc45, label %for.body22, !llvm.loop !273

for.inc45:                                        ; preds = %for.body22, %for.cond19.preheader
  %indvars.iv.next2 = add nuw nsw i64 %indvars.iv1, 1
  %exitcond98.not = icmp eq i64 %indvars.iv.next2, %18
  br i1 %exitcond98.not, label %for.end47, label %for.cond19.preheader, !llvm.loop !274

for.end47:                                        ; preds = %for.inc45
  %cmp.not.i = icmp eq i8* %call4.i, null
  br i1 %cmp.not.i, label %delete_matrix_c.exit, label %if.then.i

if.then.i:                                        ; preds = %for.end47, %for.end14
  tail call void @free(i8* nonnull %call4.i) #38
  br label %delete_matrix_c.exit

delete_matrix_c.exit:                             ; preds = %if.then.i, %for.end47
  tail call void @free(i8* nonnull %call.i) #38
  %data.i83 = getelementptr inbounds i8, i8* %call.i81, i64 8
  %33 = bitcast i8* %data.i83 to double**
  %34 = load double*, double** %33, align 8, !tbaa !137
  %cmp.not.i84 = icmp eq double* %34, null
  br i1 %cmp.not.i84, label %delete_matrix_c.exit86, label %if.then.i85

if.then.i85:                                      ; preds = %delete_matrix_c.exit
  %35 = bitcast double* %34 to i8*
  tail call void @free(i8* %35) #38
  br label %delete_matrix_c.exit86

delete_matrix_c.exit86:                           ; preds = %if.then.i85, %delete_matrix_c.exit
  tail call void @free(i8* nonnull %call.i81) #38
  ret void
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @relatives_to_absolutes_b(i32 %count, %struct.Matrix* nocapture readonly %relatives, %struct.Matrix_diff* nocapture readonly %relativesb, i32* nocapture readonly %parents, %struct.Matrix* %absolutes, %struct.Matrix_diff* %absolutesb) local_unnamed_addr #5 {
entry:
  %branch = alloca i32, align 4
  %0 = bitcast i32* %branch to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #38
  %cmp168 = icmp sgt i32 %count, 0
  br i1 %cmp168, label %for.body.preheader, label %for.end95

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %count to i64
  br label %for.body

for.body:                                         ; preds = %for.inc, %for.body.preheader
  %indvars.iv170 = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next171, %for.inc ]
  %arrayidx = getelementptr inbounds i32, i32* %parents, i64 %indvars.iv170
  %1 = load i32, i32* %arrayidx, align 4, !tbaa !59
  %cmp1 = icmp eq i32 %1, -1
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %indvars.iv170, i32 0
  %2 = load i32, i32* %nrows, align 8, !tbaa !138
  tail call void @pushInteger4(i32 %2) #38
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %indvars.iv170, i32 1
  %3 = load i32, i32* %ncols, align 4, !tbaa !139
  tail call void @pushInteger4(i32 %3) #38
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %indvars.iv170, i32 2
  %4 = bitcast double** %data to i8**
  %5 = load i8*, i8** %4, align 8, !tbaa !137
  tail call void @pushPointer8(i8* %5) #38
  %6 = load i8*, i8** %4, align 8, !tbaa !137
  %cmp.not.i = icmp eq i8* %6, null
  br i1 %cmp.not.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %if.then
  tail call void @free(i8* nonnull %6) #38
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %if.then
  %ncols.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %indvars.iv170, i32 1
  %7 = load i32, i32* %ncols.i, align 4, !tbaa !139
  store i32 %7, i32* %ncols, align 4, !tbaa !139
  %nrows.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %indvars.iv170, i32 0
  %8 = load i32, i32* %nrows.i, align 8, !tbaa !138
  store i32 %8, i32* %nrows, align 8, !tbaa !138
  %mul.i = mul i32 %8, %7
  %conv.i = sext i32 %mul.i to i64
  %mul6.i = shl nsw i64 %conv.i, 3
  %call.i = tail call noalias i8* @malloc(i64 %mul6.i) #38
  store i8* %call.i, i8** %4, align 8, !tbaa !137
  %cmp1131.i = icmp sgt i32 %mul.i, 0
  %9 = bitcast i8* %call.i to double*
  br i1 %cmp1131.i, label %for.body.lr.ph.i, label %for.inc

for.body.lr.ph.i:                                 ; preds = %if.end.i
  %data12.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %indvars.iv170, i32 2
  %10 = load double*, double** %data12.i, align 8, !tbaa !137
  %wide.trip.count.i = zext i32 %mul.i to i64
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i, %for.body.lr.ph.i
  %indvars.iv.i = phi i64 [ 0, %for.body.lr.ph.i ], [ %indvars.iv.next.i, %for.body.i ]
  %arrayidx.i = getelementptr inbounds double, double* %10, i64 %indvars.iv.i
  %11 = load double, double* %arrayidx.i, align 8, !tbaa !75
  %arrayidx15.i = getelementptr inbounds double, double* %9, i64 %indvars.iv.i
  store double %11, double* %arrayidx15.i, align 8, !tbaa !75
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, %wide.trip.count.i
  br i1 %exitcond.not.i, label %for.inc, label %for.body.i, !llvm.loop !265

if.else:                                          ; preds = %for.body
  %arrayidx13 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %indvars.iv170
  %nrows14 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %arrayidx13, i64 0, i32 0
  %12 = load i32, i32* %nrows14, align 8, !tbaa !138
  tail call void @pushInteger4(i32 %12) #38
  %ncols17 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %indvars.iv170, i32 1
  %13 = load i32, i32* %ncols17, align 4, !tbaa !139
  tail call void @pushInteger4(i32 %13) #38
  %data20 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %indvars.iv170, i32 2
  %14 = load double*, double** %data20, align 8, !tbaa !137
  %15 = load double, double* %14, align 8, !tbaa !75
  tail call void @pushReal8(double %15) #38
  %16 = bitcast double** %data20 to i8**
  %17 = load i8*, i8** %16, align 8, !tbaa !137
  tail call void @pushPointer8(i8* %17) #38
  %18 = load i32, i32* %arrayidx, align 4, !tbaa !59
  %idxprom26 = sext i32 %18 to i64
  %data28 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %idxprom26, i32 2
  %19 = load double*, double** %data28, align 8, !tbaa !137
  %20 = load double, double* %19, align 8, !tbaa !75
  tail call void @pushReal8(double %20) #38
  %21 = load i32, i32* %arrayidx, align 4, !tbaa !59
  %idxprom31 = sext i32 %21 to i64
  %arrayidx32 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %idxprom31
  %arrayidx34 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %indvars.iv170
  tail call void @mat_mult_c(%struct.Matrix* %arrayidx32, %struct.Matrix* %arrayidx34, %struct.Matrix* %arrayidx13)
  br label %for.inc

for.inc:                                          ; preds = %if.else, %for.body.i, %if.end.i
  %.sink = phi i32 [ 0, %if.else ], [ 1, %if.end.i ], [ 1, %for.body.i ]
  tail call void @pushControl1b(i32 %.sink) #38
  %indvars.iv.next171 = add nuw nsw i64 %indvars.iv170, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next171, %wide.trip.count
  br i1 %exitcond.not, label %for.body39, label %for.body, !llvm.loop !275

for.body39:                                       ; preds = %for.inc94, %for.inc
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc94 ], [ %wide.trip.count, %for.inc ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  call void @popControl1b(i32* nonnull %branch) #38
  %22 = load i32, i32* %branch, align 4, !tbaa !59
  %cmp40 = icmp eq i32 %22, 0
  br i1 %cmp40, label %if.then41, label %if.else75

if.then41:                                        ; preds = %for.body39
  %arrayidx43 = getelementptr inbounds i32, i32* %parents, i64 %indvars.iv.next
  %23 = load i32, i32* %arrayidx43, align 4, !tbaa !59
  %idxprom44 = sext i32 %23 to i64
  %data46 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %idxprom44, i32 2
  %24 = load double*, double** %data46, align 8, !tbaa !137
  call void @popReal8(double* %24) #38
  %arrayidx48 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %indvars.iv.next
  %data49 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %indvars.iv.next, i32 2
  %25 = bitcast double** %data49 to i8**
  call void @popPointer8(i8** nonnull %25) #38
  %26 = load double*, double** %data49, align 8, !tbaa !137
  call void @popReal8(double* %26) #38
  %ncols55 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %indvars.iv.next, i32 1
  call void @popInteger4(i32* nonnull %ncols55) #38
  %nrows58 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %arrayidx48, i64 0, i32 0
  call void @popInteger4(i32* %nrows58) #38
  %27 = load i32, i32* %arrayidx43, align 4, !tbaa !59
  %idxprom61 = sext i32 %27 to i64
  %arrayidx62 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %idxprom61
  %arrayidx66 = getelementptr inbounds %struct.Matrix_diff, %struct.Matrix_diff* %absolutesb, i64 %idxprom61
  %arrayidx68 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %indvars.iv.next
  %arrayidx70 = getelementptr inbounds %struct.Matrix_diff, %struct.Matrix_diff* %relativesb, i64 %indvars.iv.next
  %arrayidx74 = getelementptr inbounds %struct.Matrix_diff, %struct.Matrix_diff* %absolutesb, i64 %indvars.iv.next
  call void @mat_mult_b(%struct.Matrix* %arrayidx62, %struct.Matrix_diff* %arrayidx66, %struct.Matrix* %arrayidx68, %struct.Matrix_diff* %arrayidx70, %struct.Matrix* %arrayidx48, %struct.Matrix_diff* %arrayidx74)
  br label %for.inc94

if.else75:                                        ; preds = %for.body39
  %arrayidx77 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %indvars.iv.next
  %data78 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %indvars.iv.next, i32 2
  %28 = bitcast double** %data78 to i8**
  call void @popPointer8(i8** nonnull %28) #38
  %ncols81 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %indvars.iv.next, i32 1
  call void @popInteger4(i32* nonnull %ncols81) #38
  %nrows84 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %arrayidx77, i64 0, i32 0
  call void @popInteger4(i32* %nrows84) #38
  %arrayidx88 = getelementptr inbounds %struct.Matrix_diff, %struct.Matrix_diff* %absolutesb, i64 %indvars.iv.next
  %arrayidx90 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %indvars.iv.next
  %arrayidx92 = getelementptr inbounds %struct.Matrix_diff, %struct.Matrix_diff* %relativesb, i64 %indvars.iv.next
  call void @copy_b(%struct.Matrix* %arrayidx77, %struct.Matrix_diff* %arrayidx88, %struct.Matrix* %arrayidx90, %struct.Matrix_diff* %arrayidx92)
  br label %for.inc94

for.inc94:                                        ; preds = %if.else75, %if.then41
  %cmp38 = icmp sgt i64 %indvars.iv, 1
  br i1 %cmp38, label %for.body39, label %for.end95, !llvm.loop !276

for.end95:                                        ; preds = %for.inc94, %entry
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #38
  ret void
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @relatives_to_absolutes_c(i32 %count, %struct.Matrix* nocapture readonly %relatives, i32* nocapture readonly %parents, %struct.Matrix* nocapture %absolutes) local_unnamed_addr #5 {
entry:
  %cmp26 = icmp sgt i32 %count, 0
  br i1 %cmp26, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %count to i64
  br label %for.body

for.body:                                         ; preds = %for.inc, %for.body.preheader
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.inc ]
  %arrayidx = getelementptr inbounds i32, i32* %parents, i64 %indvars.iv
  %0 = load i32, i32* %arrayidx, align 4, !tbaa !59
  %cmp1 = icmp eq i32 %0, -1
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %data.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %indvars.iv, i32 2
  %1 = bitcast double** %data.i to i8**
  %2 = load i8*, i8** %1, align 8, !tbaa !137
  %cmp.not.i = icmp eq i8* %2, null
  br i1 %cmp.not.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %if.then
  tail call void @free(i8* nonnull %2) #38
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %if.then
  %ncols.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %indvars.iv, i32 1
  %3 = load i32, i32* %ncols.i, align 4, !tbaa !139
  %ncols2.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %indvars.iv, i32 1
  store i32 %3, i32* %ncols2.i, align 4, !tbaa !139
  %nrows.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %indvars.iv, i32 0
  %4 = load i32, i32* %nrows.i, align 8, !tbaa !138
  %nrows3.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %indvars.iv, i32 0
  store i32 %4, i32* %nrows3.i, align 8, !tbaa !138
  %mul.i = mul i32 %4, %3
  %conv.i = sext i32 %mul.i to i64
  %mul6.i = shl nsw i64 %conv.i, 3
  %call.i = tail call noalias i8* @malloc(i64 %mul6.i) #38
  store i8* %call.i, i8** %1, align 8, !tbaa !137
  %cmp1131.i = icmp sgt i32 %mul.i, 0
  %5 = bitcast i8* %call.i to double*
  br i1 %cmp1131.i, label %for.body.lr.ph.i, label %for.inc

for.body.lr.ph.i:                                 ; preds = %if.end.i
  %data12.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %indvars.iv, i32 2
  %6 = load double*, double** %data12.i, align 8, !tbaa !137
  %wide.trip.count.i = zext i32 %mul.i to i64
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i, %for.body.lr.ph.i
  %indvars.iv.i = phi i64 [ 0, %for.body.lr.ph.i ], [ %indvars.iv.next.i, %for.body.i ]
  %arrayidx.i = getelementptr inbounds double, double* %6, i64 %indvars.iv.i
  %7 = load double, double* %arrayidx.i, align 8, !tbaa !75
  %arrayidx15.i = getelementptr inbounds double, double* %5, i64 %indvars.iv.i
  store double %7, double* %arrayidx15.i, align 8, !tbaa !75
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, %wide.trip.count.i
  br i1 %exitcond.not.i, label %for.inc, label %for.body.i, !llvm.loop !265

if.else:                                          ; preds = %for.body
  %idxprom8 = sext i32 %0 to i64
  %arrayidx9 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %idxprom8
  %arrayidx11 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %indvars.iv
  %arrayidx13 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %indvars.iv
  tail call void @mat_mult_c(%struct.Matrix* %arrayidx9, %struct.Matrix* %arrayidx11, %struct.Matrix* %arrayidx13)
  br label %for.inc

for.inc:                                          ; preds = %if.else, %for.body.i, %if.end.i
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.end, label %for.body, !llvm.loop !277

for.end:                                          ; preds = %for.inc, %entry
  ret void
}

; Function Attrs: noreturn nounwind uwtable mustprogress
define dso_local void @euler_angles_to_rotation_matrix_b(double* nocapture readonly %xzy, %struct.Matrix* %R, %struct.Matrix_diff* %Rb) local_unnamed_addr #21 {
for.cond1.preheader.lr.ph.i:
  %branch = alloca i32, align 4
  %0 = load double, double* %xzy, align 8, !tbaa !75
  %arrayidx1 = getelementptr inbounds double, double* %xzy, i64 2
  %1 = load double, double* %arrayidx1, align 8, !tbaa !75
  %arrayidx2 = getelementptr inbounds double, double* %xzy, i64 1
  %2 = load double, double* %arrayidx2, align 8, !tbaa !75
  %3 = bitcast i32* %branch to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #38
  %call.i = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #38
  %nrows1.i = bitcast i8* %call.i to i32*
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138
  %ncols2.i = getelementptr inbounds i8, i8* %call.i, i64 4
  %4 = bitcast i8* %ncols2.i to i32*
  store i32 3, i32* %4, align 4, !tbaa !139
  %call4.i = tail call noalias dereferenceable_or_null(72) i8* @malloc(i64 72) #38
  %data.i = getelementptr inbounds i8, i8* %call.i, i64 8
  %5 = bitcast i8* %data.i to i8**
  store i8* %call4.i, i8** %5, align 8, !tbaa !137
  %call.i415 = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #38
  %nrows1.i416 = bitcast i8* %call.i415 to i32*
  store i32 3, i32* %nrows1.i416, align 8, !tbaa !138
  %ncols2.i417 = getelementptr inbounds i8, i8* %call.i415, i64 4
  %6 = bitcast i8* %ncols2.i417 to i32*
  store i32 3, i32* %6, align 4, !tbaa !139
  %call4.i418 = tail call noalias dereferenceable_or_null(72) i8* @malloc(i64 72) #38
  %data.i419 = getelementptr inbounds i8, i8* %call.i415, i64 8
  %7 = bitcast i8* %data.i419 to i8**
  store i8* %call4.i418, i8** %7, align 8, !tbaa !137
  %call.i420 = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #38
  %nrows1.i421 = bitcast i8* %call.i420 to i32*
  store i32 3, i32* %nrows1.i421, align 8, !tbaa !138
  %ncols2.i422 = getelementptr inbounds i8, i8* %call.i420, i64 4
  %8 = bitcast i8* %ncols2.i422 to i32*
  store i32 3, i32* %8, align 4, !tbaa !139
  %call4.i423 = tail call noalias dereferenceable_or_null(72) i8* @malloc(i64 72) #38
  %data.i424 = getelementptr inbounds i8, i8* %call.i420, i64 8
  %9 = bitcast i8* %data.i424 to i8**
  store i8* %call4.i423, i8** %9, align 8, !tbaa !137
  %10 = bitcast i8* %call4.i to double*
  %11 = bitcast i8* %call4.i418 to double*
  br label %for.body3.lr.ph.i

for.body3.lr.ph.i:                                ; preds = %for.inc12.i, %for.cond1.preheader.lr.ph.i
  %indvars.iv499 = phi i64 [ %indvars.iv.next500, %for.inc12.i ], [ 0, %for.cond1.preheader.lr.ph.i ]
  %12 = mul nuw nsw i64 %indvars.iv499, 3
  %13 = shl nuw nsw i64 %indvars.iv499, 2
  %arrayidx.i = getelementptr inbounds double, double* %10, i64 %13
  br label %for.body3.i

for.body3.i:                                      ; preds = %for.inc.i, %for.body3.lr.ph.i
  %indvars.iv496 = phi i64 [ %indvars.iv.next497, %for.inc.i ], [ 0, %for.body3.lr.ph.i ]
  %cmp4.i = icmp eq i64 %indvars.iv499, %indvars.iv496
  br i1 %cmp4.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %for.body3.i
  store double 1.000000e+00, double* %arrayidx.i, align 8, !tbaa !75
  br label %for.inc.i

if.else.i:                                        ; preds = %for.body3.i
  %14 = add nuw nsw i64 %indvars.iv496, %12
  %arrayidx11.i = getelementptr inbounds double, double* %10, i64 %14
  store double 0.000000e+00, double* %arrayidx11.i, align 8, !tbaa !75
  br label %for.inc.i

for.inc.i:                                        ; preds = %if.else.i, %if.then.i
  %indvars.iv.next497 = add nuw nsw i64 %indvars.iv496, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.next497, 3
  br i1 %exitcond.not.i, label %for.inc12.i, label %for.body3.i, !llvm.loop !257

for.inc12.i:                                      ; preds = %for.inc.i
  %indvars.iv.next500 = add nuw nsw i64 %indvars.iv499, 1
  %exitcond37.not.i = icmp eq i64 %indvars.iv.next500, 3
  br i1 %exitcond37.not.i, label %for.cond1.preheader.lr.ph.i430, label %for.body3.lr.ph.i, !llvm.loop !258

for.cond1.preheader.lr.ph.i430:                   ; preds = %for.inc12.i
  %15 = bitcast i8* %call.i to %struct.Matrix*
  %16 = bitcast i8* %call.i415 to %struct.Matrix*
  %17 = bitcast i8* %call.i420 to %struct.Matrix*
  %18 = bitcast i8* %call4.i423 to double*
  %19 = tail call fast double @llvm.cos.f64(double %0)
  %arrayidx5 = getelementptr inbounds i8, i8* %call4.i, i64 32
  %20 = bitcast i8* %arrayidx5 to double*
  store double %19, double* %20, align 8, !tbaa !75
  %21 = tail call fast double @llvm.sin.f64(double %0)
  %arrayidx11 = getelementptr inbounds i8, i8* %call4.i, i64 40
  %22 = bitcast i8* %arrayidx11 to double*
  store double %21, double* %22, align 8, !tbaa !75
  %fneg = fneg fast double %21
  %arrayidx23 = getelementptr inbounds i8, i8* %call4.i, i64 56
  %23 = bitcast i8* %arrayidx23 to double*
  store double %fneg, double* %23, align 8, !tbaa !75
  %arrayidx35 = getelementptr inbounds i8, i8* %call4.i, i64 64
  %24 = bitcast i8* %arrayidx35 to double*
  store double %19, double* %24, align 8, !tbaa !75
  br label %for.body3.lr.ph.i437

for.body3.lr.ph.i437:                             ; preds = %for.inc12.i452, %for.cond1.preheader.lr.ph.i430
  %indvars.iv492 = phi i64 [ %indvars.iv.next493, %for.inc12.i452 ], [ 0, %for.cond1.preheader.lr.ph.i430 ]
  %25 = mul nuw nsw i64 %indvars.iv492, 3
  %26 = shl nuw nsw i64 %indvars.iv492, 2
  %arrayidx.i441 = getelementptr inbounds double, double* %11, i64 %26
  br label %for.body3.i440

for.body3.i440:                                   ; preds = %for.inc.i449, %for.body3.lr.ph.i437
  %indvars.iv489 = phi i64 [ %indvars.iv.next490, %for.inc.i449 ], [ 0, %for.body3.lr.ph.i437 ]
  %cmp4.i439 = icmp eq i64 %indvars.iv492, %indvars.iv489
  br i1 %cmp4.i439, label %if.then.i442, label %if.else.i446

if.then.i442:                                     ; preds = %for.body3.i440
  store double 1.000000e+00, double* %arrayidx.i441, align 8, !tbaa !75
  br label %for.inc.i449

if.else.i446:                                     ; preds = %for.body3.i440
  %27 = add nuw nsw i64 %indvars.iv489, %25
  %arrayidx11.i445 = getelementptr inbounds double, double* %11, i64 %27
  store double 0.000000e+00, double* %arrayidx11.i445, align 8, !tbaa !75
  br label %for.inc.i449

for.inc.i449:                                     ; preds = %if.else.i446, %if.then.i442
  %indvars.iv.next490 = add nuw nsw i64 %indvars.iv489, 1
  %exitcond.not.i448 = icmp eq i64 %indvars.iv.next490, 3
  br i1 %exitcond.not.i448, label %for.inc12.i452, label %for.body3.i440, !llvm.loop !257

for.inc12.i452:                                   ; preds = %for.inc.i449
  %indvars.iv.next493 = add nuw nsw i64 %indvars.iv492, 1
  %exitcond37.not.i451 = icmp eq i64 %indvars.iv.next493, 3
  br i1 %exitcond37.not.i451, label %for.cond1.preheader.lr.ph.i459, label %for.body3.lr.ph.i437, !llvm.loop !258

for.cond1.preheader.lr.ph.i459:                   ; preds = %for.inc12.i452
  %28 = tail call fast double @llvm.cos.f64(double %1)
  store double %28, double* %11, align 8, !tbaa !75
  %29 = tail call fast double @llvm.sin.f64(double %1)
  %arrayidx47 = getelementptr inbounds i8, i8* %call4.i418, i64 48
  %30 = bitcast i8* %arrayidx47 to double*
  store double %29, double* %30, align 8, !tbaa !75
  %fneg54 = fneg fast double %29
  %arrayidx60 = getelementptr inbounds i8, i8* %call4.i418, i64 16
  %31 = bitcast i8* %arrayidx60 to double*
  store double %fneg54, double* %31, align 8, !tbaa !75
  %arrayidx72 = getelementptr inbounds i8, i8* %call4.i418, i64 64
  %32 = bitcast i8* %arrayidx72 to double*
  store double %28, double* %32, align 8, !tbaa !75
  br label %for.body3.lr.ph.i466

for.body3.lr.ph.i466:                             ; preds = %for.inc12.i481, %for.cond1.preheader.lr.ph.i459
  %indvars.iv485 = phi i64 [ %indvars.iv.next486, %for.inc12.i481 ], [ 0, %for.cond1.preheader.lr.ph.i459 ]
  %33 = mul nuw nsw i64 %indvars.iv485, 3
  %34 = shl nuw nsw i64 %indvars.iv485, 2
  %arrayidx.i470 = getelementptr inbounds double, double* %18, i64 %34
  br label %for.body3.i469

for.body3.i469:                                   ; preds = %for.inc.i478, %for.body3.lr.ph.i466
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc.i478 ], [ 0, %for.body3.lr.ph.i466 ]
  %cmp4.i468 = icmp eq i64 %indvars.iv485, %indvars.iv
  br i1 %cmp4.i468, label %if.then.i471, label %if.else.i475

if.then.i471:                                     ; preds = %for.body3.i469
  store double 1.000000e+00, double* %arrayidx.i470, align 8, !tbaa !75
  br label %for.inc.i478

if.else.i475:                                     ; preds = %for.body3.i469
  %35 = add nuw nsw i64 %indvars.iv, %33
  %arrayidx11.i474 = getelementptr inbounds double, double* %18, i64 %35
  store double 0.000000e+00, double* %arrayidx11.i474, align 8, !tbaa !75
  br label %for.inc.i478

for.inc.i478:                                     ; preds = %if.else.i475, %if.then.i471
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not.i477 = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond.not.i477, label %for.inc12.i481, label %for.body3.i469, !llvm.loop !257

for.inc12.i481:                                   ; preds = %for.inc.i478
  %indvars.iv.next486 = add nuw nsw i64 %indvars.iv485, 1
  %exitcond37.not.i480 = icmp eq i64 %indvars.iv.next486, 3
  br i1 %exitcond37.not.i480, label %if.end, label %for.body3.lr.ph.i466, !llvm.loop !258

if.end:                                           ; preds = %for.inc12.i481
  %36 = tail call fast double @llvm.cos.f64(double %2)
  store double %36, double* %18, align 8, !tbaa !75
  %37 = tail call fast double @llvm.sin.f64(double %2)
  %arrayidx84 = getelementptr inbounds i8, i8* %call4.i423, i64 8
  %38 = bitcast i8* %arrayidx84 to double*
  store double %37, double* %38, align 8, !tbaa !75
  %fneg91 = fneg fast double %37
  %arrayidx97 = getelementptr inbounds i8, i8* %call4.i423, i64 24
  %39 = bitcast i8* %arrayidx97 to double*
  store double %fneg91, double* %39, align 8, !tbaa !75
  %arrayidx109 = getelementptr inbounds i8, i8* %call4.i423, i64 32
  %40 = bitcast i8* %arrayidx109 to double*
  store double %36, double* %40, align 8, !tbaa !75
  %call.i483 = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #38
  %41 = bitcast i8* %call.i483 to %struct.Matrix*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %call.i483, i8 0, i64 16, i1 false) #38
  tail call void @pushInteger4(i32 0) #38
  tail call void @pushInteger4(i32 0) #38
  %data112 = getelementptr inbounds i8, i8* %call.i483, i64 8
  tail call void @pushControl1b(i32 0) #38
  %.phi.trans.insert = bitcast i8* %data112 to i8**
  %.pre = load i8*, i8** %.phi.trans.insert, align 8, !tbaa !137
  tail call void @pushPointer8(i8* %.pre) #38
  tail call void @mat_mult_c(%struct.Matrix* nonnull %17, %struct.Matrix* %16, %struct.Matrix* nonnull %41)
  tail call void @mat_mult_b(%struct.Matrix* nonnull %41, %struct.Matrix_diff* undef, %struct.Matrix* %15, %struct.Matrix_diff* undef, %struct.Matrix* %R, %struct.Matrix_diff* %Rb)
  tail call void @popPointer8(i8** nonnull %.phi.trans.insert) #38
  call void @popControl1b(i32* nonnull %branch) #38
  %42 = load i32, i32* %branch, align 4, !tbaa !59
  %cmp = icmp eq i32 %42, 1
  br i1 %cmp, label %if.then116, label %if.end118

if.then116:                                       ; preds = %if.end
  %43 = bitcast i8* %data112 to double**
  %44 = load double*, double** %43, align 8, !tbaa !137
  call void @popReal8(double* %44) #38
  br label %if.end118

if.end118:                                        ; preds = %if.then116, %if.end
  %ncols = getelementptr inbounds i8, i8* %call.i483, i64 4
  %45 = bitcast i8* %ncols to i32*
  %nrows111 = bitcast i8* %call.i483 to i32*
  call void @popInteger4(i32* nonnull %45) #38
  call void @popInteger4(i32* nonnull %nrows111) #38
  call void @mat_mult_b(%struct.Matrix* nonnull %17, %struct.Matrix_diff* undef, %struct.Matrix* %16, %struct.Matrix_diff* undef, %struct.Matrix* nonnull %41, %struct.Matrix_diff* undef)
  call void @llvm.trap()
  unreachable
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @euler_angles_to_rotation_matrix_c(double* nocapture readonly %xzy, %struct.Matrix* nocapture %R) local_unnamed_addr #5 {
for.cond1.preheader.lr.ph.i:
  %0 = load double, double* %xzy, align 8, !tbaa !75
  %arrayidx1 = getelementptr inbounds double, double* %xzy, i64 2
  %1 = load double, double* %arrayidx1, align 8, !tbaa !75
  %arrayidx2 = getelementptr inbounds double, double* %xzy, i64 1
  %2 = load double, double* %arrayidx2, align 8, !tbaa !75
  %call.i = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #38
  %nrows1.i = bitcast i8* %call.i to i32*
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138
  %ncols2.i = getelementptr inbounds i8, i8* %call.i, i64 4
  %3 = bitcast i8* %ncols2.i to i32*
  store i32 3, i32* %3, align 4, !tbaa !139
  %call4.i = tail call noalias dereferenceable_or_null(72) i8* @malloc(i64 72) #38
  %data.i = getelementptr inbounds i8, i8* %call.i, i64 8
  %4 = bitcast i8* %data.i to i8**
  store i8* %call4.i, i8** %4, align 8, !tbaa !137
  %call.i167 = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #38
  %nrows1.i168 = bitcast i8* %call.i167 to i32*
  store i32 3, i32* %nrows1.i168, align 8, !tbaa !138
  %ncols2.i169 = getelementptr inbounds i8, i8* %call.i167, i64 4
  %5 = bitcast i8* %ncols2.i169 to i32*
  store i32 3, i32* %5, align 4, !tbaa !139
  %call4.i170 = tail call noalias dereferenceable_or_null(72) i8* @malloc(i64 72) #38
  %data.i171 = getelementptr inbounds i8, i8* %call.i167, i64 8
  %6 = bitcast i8* %data.i171 to i8**
  store i8* %call4.i170, i8** %6, align 8, !tbaa !137
  %call.i172 = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #38
  %nrows1.i173 = bitcast i8* %call.i172 to i32*
  store i32 3, i32* %nrows1.i173, align 8, !tbaa !138
  %ncols2.i174 = getelementptr inbounds i8, i8* %call.i172, i64 4
  %7 = bitcast i8* %ncols2.i174 to i32*
  store i32 3, i32* %7, align 4, !tbaa !139
  %call4.i175 = tail call noalias dereferenceable_or_null(72) i8* @malloc(i64 72) #38
  %data.i176 = getelementptr inbounds i8, i8* %call.i172, i64 8
  %8 = bitcast i8* %data.i176 to i8**
  store i8* %call4.i175, i8** %8, align 8, !tbaa !137
  %9 = bitcast i8* %call4.i to double*
  %10 = bitcast i8* %call4.i170 to double*
  br label %for.body3.lr.ph.i

for.body3.lr.ph.i:                                ; preds = %for.inc12.i, %for.cond1.preheader.lr.ph.i
  %indvars.iv265 = phi i64 [ %indvars.iv.next266, %for.inc12.i ], [ 0, %for.cond1.preheader.lr.ph.i ]
  %11 = mul nuw nsw i64 %indvars.iv265, 3
  %12 = shl nuw nsw i64 %indvars.iv265, 2
  %arrayidx.i = getelementptr inbounds double, double* %9, i64 %12
  br label %for.body3.i

for.body3.i:                                      ; preds = %for.inc.i, %for.body3.lr.ph.i
  %indvars.iv262 = phi i64 [ %indvars.iv.next263, %for.inc.i ], [ 0, %for.body3.lr.ph.i ]
  %cmp4.i = icmp eq i64 %indvars.iv265, %indvars.iv262
  br i1 %cmp4.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %for.body3.i
  store double 1.000000e+00, double* %arrayidx.i, align 8, !tbaa !75
  br label %for.inc.i

if.else.i:                                        ; preds = %for.body3.i
  %13 = add nuw nsw i64 %indvars.iv262, %11
  %arrayidx11.i = getelementptr inbounds double, double* %9, i64 %13
  store double 0.000000e+00, double* %arrayidx11.i, align 8, !tbaa !75
  br label %for.inc.i

for.inc.i:                                        ; preds = %if.else.i, %if.then.i
  %indvars.iv.next263 = add nuw nsw i64 %indvars.iv262, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.next263, 3
  br i1 %exitcond.not.i, label %for.inc12.i, label %for.body3.i, !llvm.loop !257

for.inc12.i:                                      ; preds = %for.inc.i
  %indvars.iv.next266 = add nuw nsw i64 %indvars.iv265, 1
  %exitcond37.not.i = icmp eq i64 %indvars.iv.next266, 3
  br i1 %exitcond37.not.i, label %for.cond1.preheader.lr.ph.i182, label %for.body3.lr.ph.i, !llvm.loop !258

for.cond1.preheader.lr.ph.i182:                   ; preds = %for.inc12.i
  %14 = bitcast i8* %call.i to %struct.Matrix*
  %15 = bitcast i8* %call.i167 to %struct.Matrix*
  %16 = bitcast i8* %call.i172 to %struct.Matrix*
  %17 = bitcast i8* %call4.i175 to double*
  %18 = tail call fast double @llvm.cos.f64(double %0)
  %arrayidx5 = getelementptr inbounds i8, i8* %call4.i, i64 32
  %19 = bitcast i8* %arrayidx5 to double*
  store double %18, double* %19, align 8, !tbaa !75
  %20 = tail call fast double @llvm.sin.f64(double %0)
  %arrayidx11 = getelementptr inbounds i8, i8* %call4.i, i64 40
  %21 = bitcast i8* %arrayidx11 to double*
  store double %20, double* %21, align 8, !tbaa !75
  %fneg = fneg fast double %20
  %arrayidx23 = getelementptr inbounds i8, i8* %call4.i, i64 56
  %22 = bitcast i8* %arrayidx23 to double*
  store double %fneg, double* %22, align 8, !tbaa !75
  %arrayidx35 = getelementptr inbounds i8, i8* %call4.i, i64 64
  %23 = bitcast i8* %arrayidx35 to double*
  store double %18, double* %23, align 8, !tbaa !75
  br label %for.body3.lr.ph.i189

for.body3.lr.ph.i189:                             ; preds = %for.inc12.i204, %for.cond1.preheader.lr.ph.i182
  %indvars.iv258 = phi i64 [ %indvars.iv.next259, %for.inc12.i204 ], [ 0, %for.cond1.preheader.lr.ph.i182 ]
  %24 = mul nuw nsw i64 %indvars.iv258, 3
  %25 = shl nuw nsw i64 %indvars.iv258, 2
  %arrayidx.i193 = getelementptr inbounds double, double* %10, i64 %25
  br label %for.body3.i192

for.body3.i192:                                   ; preds = %for.inc.i201, %for.body3.lr.ph.i189
  %indvars.iv255 = phi i64 [ %indvars.iv.next256, %for.inc.i201 ], [ 0, %for.body3.lr.ph.i189 ]
  %cmp4.i191 = icmp eq i64 %indvars.iv258, %indvars.iv255
  br i1 %cmp4.i191, label %if.then.i194, label %if.else.i198

if.then.i194:                                     ; preds = %for.body3.i192
  store double 1.000000e+00, double* %arrayidx.i193, align 8, !tbaa !75
  br label %for.inc.i201

if.else.i198:                                     ; preds = %for.body3.i192
  %26 = add nuw nsw i64 %indvars.iv255, %24
  %arrayidx11.i197 = getelementptr inbounds double, double* %10, i64 %26
  store double 0.000000e+00, double* %arrayidx11.i197, align 8, !tbaa !75
  br label %for.inc.i201

for.inc.i201:                                     ; preds = %if.else.i198, %if.then.i194
  %indvars.iv.next256 = add nuw nsw i64 %indvars.iv255, 1
  %exitcond.not.i200 = icmp eq i64 %indvars.iv.next256, 3
  br i1 %exitcond.not.i200, label %for.inc12.i204, label %for.body3.i192, !llvm.loop !257

for.inc12.i204:                                   ; preds = %for.inc.i201
  %indvars.iv.next259 = add nuw nsw i64 %indvars.iv258, 1
  %exitcond37.not.i203 = icmp eq i64 %indvars.iv.next259, 3
  br i1 %exitcond37.not.i203, label %for.cond1.preheader.lr.ph.i211, label %for.body3.lr.ph.i189, !llvm.loop !258

for.cond1.preheader.lr.ph.i211:                   ; preds = %for.inc12.i204
  %27 = tail call fast double @llvm.cos.f64(double %1)
  store double %27, double* %10, align 8, !tbaa !75
  %28 = tail call fast double @llvm.sin.f64(double %1)
  %arrayidx47 = getelementptr inbounds i8, i8* %call4.i170, i64 48
  %29 = bitcast i8* %arrayidx47 to double*
  store double %28, double* %29, align 8, !tbaa !75
  %fneg54 = fneg fast double %28
  %arrayidx60 = getelementptr inbounds i8, i8* %call4.i170, i64 16
  %30 = bitcast i8* %arrayidx60 to double*
  store double %fneg54, double* %30, align 8, !tbaa !75
  %arrayidx72 = getelementptr inbounds i8, i8* %call4.i170, i64 64
  %31 = bitcast i8* %arrayidx72 to double*
  store double %27, double* %31, align 8, !tbaa !75
  br label %for.body3.lr.ph.i218

for.body3.lr.ph.i218:                             ; preds = %for.inc12.i233, %for.cond1.preheader.lr.ph.i211
  %indvars.iv251 = phi i64 [ %indvars.iv.next252, %for.inc12.i233 ], [ 0, %for.cond1.preheader.lr.ph.i211 ]
  %32 = mul nuw nsw i64 %indvars.iv251, 3
  %33 = shl nuw nsw i64 %indvars.iv251, 2
  %arrayidx.i222 = getelementptr inbounds double, double* %17, i64 %33
  br label %for.body3.i221

for.body3.i221:                                   ; preds = %for.inc.i230, %for.body3.lr.ph.i218
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc.i230 ], [ 0, %for.body3.lr.ph.i218 ]
  %cmp4.i220 = icmp eq i64 %indvars.iv251, %indvars.iv
  br i1 %cmp4.i220, label %if.then.i223, label %if.else.i227

if.then.i223:                                     ; preds = %for.body3.i221
  store double 1.000000e+00, double* %arrayidx.i222, align 8, !tbaa !75
  br label %for.inc.i230

if.else.i227:                                     ; preds = %for.body3.i221
  %34 = add nuw nsw i64 %indvars.iv, %32
  %arrayidx11.i226 = getelementptr inbounds double, double* %17, i64 %34
  store double 0.000000e+00, double* %arrayidx11.i226, align 8, !tbaa !75
  br label %for.inc.i230

for.inc.i230:                                     ; preds = %if.else.i227, %if.then.i223
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not.i229 = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond.not.i229, label %for.inc12.i233, label %for.body3.i221, !llvm.loop !257

for.inc12.i233:                                   ; preds = %for.inc.i230
  %indvars.iv.next252 = add nuw nsw i64 %indvars.iv251, 1
  %exitcond37.not.i232 = icmp eq i64 %indvars.iv.next252, 3
  br i1 %exitcond37.not.i232, label %set_identity_c.exit234, label %for.body3.lr.ph.i218, !llvm.loop !258

set_identity_c.exit234:                           ; preds = %for.inc12.i233
  %35 = tail call fast double @llvm.cos.f64(double %2)
  store double %35, double* %17, align 8, !tbaa !75
  %36 = tail call fast double @llvm.sin.f64(double %2)
  %arrayidx84 = getelementptr inbounds i8, i8* %call4.i175, i64 8
  %37 = bitcast i8* %arrayidx84 to double*
  store double %36, double* %37, align 8, !tbaa !75
  %fneg91 = fneg fast double %36
  %arrayidx97 = getelementptr inbounds i8, i8* %call4.i175, i64 24
  %38 = bitcast i8* %arrayidx97 to double*
  store double %fneg91, double* %38, align 8, !tbaa !75
  %arrayidx109 = getelementptr inbounds i8, i8* %call4.i175, i64 32
  %39 = bitcast i8* %arrayidx109 to double*
  store double %35, double* %39, align 8, !tbaa !75
  %call.i235 = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #38
  %40 = bitcast i8* %call.i235 to %struct.Matrix*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %call.i235, i8 0, i64 16, i1 false) #38
  tail call void @mat_mult_c(%struct.Matrix* %16, %struct.Matrix* %15, %struct.Matrix* %40)
  tail call void @mat_mult_c(%struct.Matrix* %40, %struct.Matrix* %14, %struct.Matrix* %R)
  %cmp.not.i = icmp eq i8* %call4.i, null
  br i1 %cmp.not.i, label %delete_matrix_c.exit245, label %if.then.i237

if.then.i237:                                     ; preds = %set_identity_c.exit234
  tail call void @free(i8* nonnull %call4.i) #38
  br label %delete_matrix_c.exit245

delete_matrix_c.exit245:                          ; preds = %if.then.i237, %set_identity_c.exit234
  tail call void @free(i8* %call.i) #38
  tail call void @free(i8* %call4.i170) #38
  tail call void @free(i8* %call.i167) #38
  tail call void @free(i8* nonnull %call4.i175) #38
  tail call void @free(i8* nonnull %call.i172) #38
  %data.i246 = getelementptr inbounds i8, i8* %call.i235, i64 8
  %41 = bitcast i8* %data.i246 to double**
  %42 = load double*, double** %41, align 8, !tbaa !137
  %cmp.not.i247 = icmp eq double* %42, null
  br i1 %cmp.not.i247, label %delete_matrix_c.exit249, label %if.then.i248

if.then.i248:                                     ; preds = %delete_matrix_c.exit245
  %43 = bitcast double* %42 to i8*
  tail call void @free(i8* %43) #38
  br label %delete_matrix_c.exit249

delete_matrix_c.exit249:                          ; preds = %if.then.i248, %delete_matrix_c.exit245
  tail call void @free(i8* nonnull %call.i235) #38
  ret void
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @get_posed_relatives_b(i32 %bone_count, %struct.Matrix* nocapture readonly %base_relatives, %struct.Matrix_diff* nocapture readonly %base_relativesb, %struct.Matrix* nocapture readonly %pose_params, %struct.Matrix_diff* nocapture readnone %pose_paramsb, %struct.Matrix* %relatives, %struct.Matrix_diff* %relativesb) local_unnamed_addr #5 {
entry:
  %branch = alloca i32, align 4
  %0 = bitcast i32* %branch to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #38
  %call.i = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #38
  %1 = bitcast i8* %call.i to %struct.Matrix*
  %nrows1.i = bitcast i8* %call.i to i32*
  store i32 4, i32* %nrows1.i, align 8, !tbaa !138
  %ncols2.i = getelementptr inbounds i8, i8* %call.i, i64 4
  %2 = bitcast i8* %ncols2.i to i32*
  store i32 4, i32* %2, align 4, !tbaa !139
  %call4.i = tail call noalias dereferenceable_or_null(128) i8* @malloc(i64 128) #38
  %data.i = getelementptr inbounds i8, i8* %call.i, i64 8
  %3 = bitcast i8* %data.i to i8**
  store i8* %call4.i, i8** %3, align 8, !tbaa !137
  %call.i152 = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #38
  %4 = bitcast i8* %call.i152 to %struct.Matrix*
  %nrows1.i153 = bitcast i8* %call.i152 to i32*
  store i32 3, i32* %nrows1.i153, align 8, !tbaa !138
  %ncols2.i154 = getelementptr inbounds i8, i8* %call.i152, i64 4
  %5 = bitcast i8* %ncols2.i154 to i32*
  store i32 3, i32* %5, align 4, !tbaa !139
  %call4.i155 = tail call noalias dereferenceable_or_null(72) i8* @malloc(i64 72) #38
  %data.i156 = getelementptr inbounds i8, i8* %call.i152, i64 8
  %6 = bitcast i8* %data.i156 to i8**
  store i8* %call4.i155, i8** %6, align 8, !tbaa !137
  %cmp173 = icmp sgt i32 %bone_count, 0
  %7 = bitcast i8* %call4.i to double*
  br i1 %cmp173, label %for.body.lr.ph, label %for.end75

for.body.lr.ph:                                   ; preds = %entry
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 2
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 0
  %8 = bitcast i8* %data.i156 to double**
  %wide.trip.count = zext i32 %bone_count to i64
  %tobool21.not = icmp eq i8* %call4.i, null
  br label %for.cond1.preheader.lr.ph.i

for.cond1.preheader.lr.ph.i:                      ; preds = %if.end25, %for.body.lr.ph
  %indvars.iv185 = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next186, %if.end25 ]
  br label %for.body3.lr.ph.i

for.body3.lr.ph.i:                                ; preds = %for.inc12.i, %for.cond1.preheader.lr.ph.i
  %indvars.iv176 = phi i64 [ %indvars.iv.next177, %for.inc12.i ], [ 0, %for.cond1.preheader.lr.ph.i ]
  %9 = shl nsw i64 %indvars.iv176, 2
  %10 = mul nsw i64 %indvars.iv176, 5
  %arrayidx.i = getelementptr inbounds double, double* %7, i64 %10
  br label %for.body3.i

for.body3.i:                                      ; preds = %for.inc.i, %for.body3.lr.ph.i
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc.i ], [ 0, %for.body3.lr.ph.i ]
  %cmp4.i = icmp eq i64 %indvars.iv176, %indvars.iv
  br i1 %cmp4.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %for.body3.i
  store double 1.000000e+00, double* %arrayidx.i, align 8, !tbaa !75
  br label %for.inc.i

if.else.i:                                        ; preds = %for.body3.i
  %11 = add nuw nsw i64 %indvars.iv, %9
  %arrayidx11.i = getelementptr inbounds double, double* %7, i64 %11
  store double 0.000000e+00, double* %arrayidx11.i, align 8, !tbaa !75
  br label %for.inc.i

for.inc.i:                                        ; preds = %if.else.i, %if.then.i
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.next, 4
  br i1 %exitcond.not.i, label %for.inc12.i, label %for.body3.i, !llvm.loop !257

for.inc12.i:                                      ; preds = %for.inc.i
  %indvars.iv.next177 = add nuw nsw i64 %indvars.iv176, 1
  %exitcond37.not.i = icmp eq i64 %indvars.iv.next177, 4
  br i1 %exitcond37.not.i, label %set_identity_c.exit, label %for.body3.lr.ph.i, !llvm.loop !258

set_identity_c.exit:                              ; preds = %for.inc12.i
  %12 = load double*, double** %data, align 8, !tbaa !137
  %13 = load i32, i32* %nrows, align 8, !tbaa !138
  %14 = trunc i64 %indvars.iv185 to i32
  %15 = add i32 %14, 3
  %mul = mul nsw i32 %13, %15
  %idx.ext = sext i32 %mul to i64
  %add.ptr = getelementptr inbounds double, double* %12, i64 %idx.ext
  %tobool.not = icmp eq double* %12, null
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %set_identity_c.exit
  %16 = load double, double* %add.ptr, align 8, !tbaa !75
  tail call void @pushReal8(double %16) #38
  br label %if.end

if.end:                                           ; preds = %if.then, %set_identity_c.exit
  %.sink = phi i32 [ 1, %if.then ], [ 0, %set_identity_c.exit ]
  tail call void @pushControl1b(i32 %.sink) #38
  %17 = load i32, i32* %nrows1.i153, align 8, !tbaa !138
  tail call void @pushInteger4(i32 %17) #38
  %18 = load i32, i32* %5, align 4, !tbaa !139
  tail call void @pushInteger4(i32 %18) #38
  %19 = load double*, double** %8, align 8, !tbaa !137
  %tobool4.not = icmp eq double* %19, null
  br i1 %tobool4.not, label %if.end8, label %if.then5

if.then5:                                         ; preds = %if.end
  %20 = load double, double* %19, align 8, !tbaa !75
  tail call void @pushReal8(double %20) #38
  br label %if.end8

if.end8:                                          ; preds = %if.then5, %if.end
  %.sink189 = phi i32 [ 1, %if.then5 ], [ 0, %if.end ]
  tail call void @pushControl1b(i32 %.sink189) #38
  %21 = load i8*, i8** %6, align 8, !tbaa !137
  tail call void @pushPointer8(i8* %21) #38
  tail call void @euler_angles_to_rotation_matrix_c(double* %add.ptr, %struct.Matrix* nonnull %4)
  %22 = load i32, i32* %5, align 4, !tbaa !139
  %cmp30.i = icmp sgt i32 %22, 0
  br i1 %cmp30.i, label %for.cond1.preheader.lr.ph.i160, label %set_block_c.exit

for.cond1.preheader.lr.ph.i160:                   ; preds = %if.end8
  %23 = load i32, i32* %nrows1.i153, align 8, !tbaa !138
  %cmp228.i = icmp sgt i32 %23, 0
  %wide.trip.count.i = zext i32 %23 to i64
  %24 = zext i32 %22 to i64
  %25 = sext i32 %23 to i64
  br label %for.cond1.preheader.i161

for.cond1.preheader.i161:                         ; preds = %for.inc13.i, %for.cond1.preheader.lr.ph.i160
  %indvars.iv181 = phi i64 [ %indvars.iv.next182, %for.inc13.i ], [ 0, %for.cond1.preheader.lr.ph.i160 ]
  br i1 %cmp228.i, label %for.body3.lr.ph.i163, label %for.inc13.i

for.body3.lr.ph.i163:                             ; preds = %for.cond1.preheader.i161
  %26 = load double*, double** %8, align 8, !tbaa !137
  %27 = shl nsw i64 %indvars.iv181, 2
  %28 = mul nsw i64 %indvars.iv181, %25
  br label %for.body3.i166

for.body3.i166:                                   ; preds = %for.body3.i166, %for.body3.lr.ph.i163
  %indvars.iv.i = phi i64 [ 0, %for.body3.lr.ph.i163 ], [ %indvars.iv.next.i, %for.body3.i166 ]
  %29 = add nsw i64 %indvars.iv.i, %28
  %arrayidx.i164 = getelementptr inbounds double, double* %26, i64 %29
  %30 = load double, double* %arrayidx.i164, align 8, !tbaa !75
  %31 = add nuw nsw i64 %indvars.iv.i, %27
  %arrayidx12.i = getelementptr inbounds double, double* %7, i64 %31
  store double %30, double* %arrayidx12.i, align 8, !tbaa !75
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i165 = icmp eq i64 %indvars.iv.next.i, %wide.trip.count.i
  br i1 %exitcond.not.i165, label %for.inc13.i, label %for.body3.i166, !llvm.loop !262

for.inc13.i:                                      ; preds = %for.body3.i166, %for.cond1.preheader.i161
  %indvars.iv.next182 = add nuw nsw i64 %indvars.iv181, 1
  %exitcond37.not.i167 = icmp eq i64 %indvars.iv.next182, %24
  br i1 %exitcond37.not.i167, label %set_block_c.exit, label %for.cond1.preheader.i161, !llvm.loop !263

set_block_c.exit:                                 ; preds = %for.inc13.i, %if.end8
  %arrayidx = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %indvars.iv185
  %nrows10 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %arrayidx, i64 0, i32 0
  %32 = load i32, i32* %nrows10, align 8, !tbaa !138
  tail call void @pushInteger4(i32 %32) #38
  %ncols13 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %indvars.iv185, i32 1
  %33 = load i32, i32* %ncols13, align 4, !tbaa !139
  tail call void @pushInteger4(i32 %33) #38
  %data16 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %indvars.iv185, i32 2
  %34 = load double*, double** %data16, align 8, !tbaa !137
  %35 = load double, double* %34, align 8, !tbaa !75
  tail call void @pushReal8(double %35) #38
  %36 = bitcast double** %data16 to i8**
  %37 = load i8*, i8** %36, align 8, !tbaa !137
  tail call void @pushPointer8(i8* %37) #38
  br i1 %tobool21.not, label %if.end25, label %if.then22

if.then22:                                        ; preds = %set_block_c.exit
  %38 = load double, double* %7, align 8, !tbaa !75
  tail call void @pushReal8(double %38) #38
  br label %if.end25

if.end25:                                         ; preds = %if.then22, %set_block_c.exit
  %.sink190 = phi i32 [ 1, %if.then22 ], [ 0, %set_block_c.exit ]
  tail call void @pushControl1b(i32 %.sink190) #38
  %arrayidx27 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %base_relatives, i64 %indvars.iv185
  tail call void @mat_mult_c(%struct.Matrix* %arrayidx27, %struct.Matrix* nonnull %1, %struct.Matrix* nonnull %arrayidx)
  %indvars.iv.next186 = add nuw nsw i64 %indvars.iv185, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next186, %wide.trip.count
  br i1 %exitcond.not, label %for.cond30, label %for.cond1.preheader.lr.ph.i, !llvm.loop !278

for.cond30:                                       ; preds = %if.end25
  %i.1 = add nsw i32 %bone_count, -1
  call void @popControl1b(i32* nonnull %branch) #38
  %39 = load i32, i32* %branch, align 4, !tbaa !59
  %cmp33 = icmp eq i32 %39, 1
  br i1 %cmp33, label %if.then34, label %if.end36

if.then34:                                        ; preds = %for.cond30
  call void @popReal8(double* %7) #38
  br label %if.end36

if.end36:                                         ; preds = %if.then34, %for.cond30
  %idxprom37 = sext i32 %i.1 to i64
  %arrayidx38 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %idxprom37
  %data39 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %idxprom37, i32 2
  %40 = bitcast double** %data39 to i8**
  call void @popPointer8(i8** nonnull %40) #38
  %41 = load double*, double** %data39, align 8, !tbaa !137
  call void @popReal8(double* %41) #38
  %ncols45 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %idxprom37, i32 1
  call void @popInteger4(i32* nonnull %ncols45) #38
  %nrows48 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %arrayidx38, i64 0, i32 0
  call void @popInteger4(i32* %nrows48) #38
  %data49 = getelementptr inbounds %struct.Matrix_diff, %struct.Matrix_diff* %base_relativesb, i64 0, i32 0
  %42 = load double*, double** %data49, align 8, !tbaa !241
  store double 0.000000e+00, double* %42, align 8, !tbaa !75
  %arrayidx51 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %base_relatives, i64 %idxprom37
  %arrayidx53 = getelementptr inbounds %struct.Matrix_diff, %struct.Matrix_diff* %base_relativesb, i64 %idxprom37
  %arrayidx57 = getelementptr inbounds %struct.Matrix_diff, %struct.Matrix_diff* %relativesb, i64 %idxprom37
  call void @mat_mult_b(%struct.Matrix* %arrayidx51, %struct.Matrix_diff* %arrayidx53, %struct.Matrix* %1, %struct.Matrix_diff* undef, %struct.Matrix* %arrayidx38, %struct.Matrix_diff* %arrayidx57)
  %43 = load i32, i32* %5, align 4, !tbaa !139
  %cmp56.i = icmp sgt i32 %43, 0
  br i1 %cmp56.i, label %for.body.lr.ph.i, label %set_block_b.exit

for.body.lr.ph.i:                                 ; preds = %if.end36
  %44 = load i32, i32* %nrows1.i153, align 8, !tbaa !138
  %cmp353.i = icmp sgt i32 %44, 0
  br i1 %cmp353.i, label %for.body4.lr.ph.i.split, label %set_block_b.exit

for.body4.lr.ph.i.split:                          ; preds = %for.body.lr.ph.i
  call void @llvm.trap()
  unreachable

set_block_b.exit:                                 ; preds = %for.body.lr.ph.i, %if.end36
  %45 = load double*, double** %data, align 8, !tbaa !137
  %46 = load i32, i32* %nrows, align 8, !tbaa !138
  call void @popPointer8(i8** nonnull %6) #38
  call void @popControl1b(i32* nonnull %branch) #38
  %47 = load i32, i32* %branch, align 4, !tbaa !59
  %cmp65 = icmp eq i32 %47, 1
  br i1 %cmp65, label %if.then66, label %if.end68

if.then66:                                        ; preds = %set_block_b.exit
  %48 = load double*, double** %8, align 8, !tbaa !137
  call void @popReal8(double* %48) #38
  br label %if.end68

if.end68:                                         ; preds = %if.then66, %set_block_b.exit
  %add59 = add nuw nsw i32 %bone_count, 2
  %mul61 = mul nsw i32 %46, %add59
  %idx.ext62 = sext i32 %mul61 to i64
  %add.ptr63 = getelementptr inbounds double, double* %45, i64 %idx.ext62
  call void @popInteger4(i32* nonnull %5) #38
  call void @popInteger4(i32* nonnull %nrows1.i153) #38
  call void @euler_angles_to_rotation_matrix_b(double* %add.ptr63, %struct.Matrix* nonnull %4, %struct.Matrix_diff* undef)
  unreachable

for.end75:                                        ; preds = %entry
  tail call void @get_new_matrix_b(i32 3, i32 3, %struct.Matrix_diff* undef)
  tail call void @get_new_matrix_b(i32 4, i32 4, %struct.Matrix_diff* undef)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #38
  ret void
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @get_posed_relatives_c(i32 %bone_count, %struct.Matrix* nocapture readonly %base_relatives, %struct.Matrix* nocapture readonly %pose_params, %struct.Matrix* nocapture %relatives) local_unnamed_addr #5 {
entry:
  %call.i = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #38
  %0 = bitcast i8* %call.i to %struct.Matrix*
  %nrows1.i = bitcast i8* %call.i to i32*
  store i32 4, i32* %nrows1.i, align 8, !tbaa !138
  %ncols2.i = getelementptr inbounds i8, i8* %call.i, i64 4
  %1 = bitcast i8* %ncols2.i to i32*
  store i32 4, i32* %1, align 4, !tbaa !139
  %call4.i = tail call noalias dereferenceable_or_null(128) i8* @malloc(i64 128) #38
  %data.i = getelementptr inbounds i8, i8* %call.i, i64 8
  %2 = bitcast i8* %data.i to i8**
  store i8* %call4.i, i8** %2, align 8, !tbaa !137
  %call.i19 = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #38
  %3 = bitcast i8* %call.i19 to %struct.Matrix*
  %nrows1.i20 = bitcast i8* %call.i19 to i32*
  store i32 3, i32* %nrows1.i20, align 8, !tbaa !138
  %ncols2.i21 = getelementptr inbounds i8, i8* %call.i19, i64 4
  %4 = bitcast i8* %ncols2.i21 to i32*
  store i32 3, i32* %4, align 4, !tbaa !139
  %call4.i22 = tail call noalias dereferenceable_or_null(72) i8* @malloc(i64 72) #38
  %data.i23 = getelementptr inbounds i8, i8* %call.i19, i64 8
  %5 = bitcast i8* %data.i23 to i8**
  store i8* %call4.i22, i8** %5, align 8, !tbaa !137
  %cmp41 = icmp sgt i32 %bone_count, 0
  %6 = bitcast i8* %call4.i to double*
  br i1 %cmp41, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %entry
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 2
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 0
  %7 = bitcast i8* %data.i23 to double**
  %wide.trip.count = zext i32 %bone_count to i64
  br label %for.cond1.preheader.lr.ph.i

for.cond1.preheader.lr.ph.i:                      ; preds = %set_block_c.exit, %for.body.lr.ph
  %indvars.iv53 = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next54, %set_block_c.exit ]
  br label %for.body3.lr.ph.i

for.body3.lr.ph.i:                                ; preds = %for.inc12.i, %for.cond1.preheader.lr.ph.i
  %indvars.iv44 = phi i64 [ %indvars.iv.next45, %for.inc12.i ], [ 0, %for.cond1.preheader.lr.ph.i ]
  %8 = shl nsw i64 %indvars.iv44, 2
  %9 = mul nsw i64 %indvars.iv44, 5
  %arrayidx.i = getelementptr inbounds double, double* %6, i64 %9
  br label %for.body3.i

for.body3.i:                                      ; preds = %for.inc.i, %for.body3.lr.ph.i
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc.i ], [ 0, %for.body3.lr.ph.i ]
  %cmp4.i = icmp eq i64 %indvars.iv44, %indvars.iv
  br i1 %cmp4.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %for.body3.i
  store double 1.000000e+00, double* %arrayidx.i, align 8, !tbaa !75
  br label %for.inc.i

if.else.i:                                        ; preds = %for.body3.i
  %10 = add nuw nsw i64 %indvars.iv, %8
  %arrayidx11.i = getelementptr inbounds double, double* %6, i64 %10
  store double 0.000000e+00, double* %arrayidx11.i, align 8, !tbaa !75
  br label %for.inc.i

for.inc.i:                                        ; preds = %if.else.i, %if.then.i
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.next, 4
  br i1 %exitcond.not.i, label %for.inc12.i, label %for.body3.i, !llvm.loop !257

for.inc12.i:                                      ; preds = %for.inc.i
  %indvars.iv.next45 = add nuw nsw i64 %indvars.iv44, 1
  %exitcond37.not.i = icmp eq i64 %indvars.iv.next45, 4
  br i1 %exitcond37.not.i, label %set_identity_c.exit, label %for.body3.lr.ph.i, !llvm.loop !258

set_identity_c.exit:                              ; preds = %for.inc12.i
  %11 = load double*, double** %data, align 8, !tbaa !137
  %12 = load i32, i32* %nrows, align 8, !tbaa !138
  %13 = trunc i64 %indvars.iv53 to i32
  %14 = add i32 %13, 3
  %mul = mul nsw i32 %12, %14
  %idx.ext = sext i32 %mul to i64
  %add.ptr = getelementptr inbounds double, double* %11, i64 %idx.ext
  tail call void @euler_angles_to_rotation_matrix_c(double* %add.ptr, %struct.Matrix* %3)
  %15 = load i32, i32* %4, align 4, !tbaa !139
  %cmp30.i = icmp sgt i32 %15, 0
  br i1 %cmp30.i, label %for.cond1.preheader.lr.ph.i27, label %set_block_c.exit

for.cond1.preheader.lr.ph.i27:                    ; preds = %set_identity_c.exit
  %16 = load i32, i32* %nrows1.i20, align 8, !tbaa !138
  %cmp228.i = icmp sgt i32 %16, 0
  %wide.trip.count.i = zext i32 %16 to i64
  %17 = zext i32 %15 to i64
  %18 = sext i32 %16 to i64
  br label %for.cond1.preheader.i28

for.cond1.preheader.i28:                          ; preds = %for.inc13.i, %for.cond1.preheader.lr.ph.i27
  %indvars.iv49 = phi i64 [ %indvars.iv.next50, %for.inc13.i ], [ 0, %for.cond1.preheader.lr.ph.i27 ]
  br i1 %cmp228.i, label %for.body3.lr.ph.i30, label %for.inc13.i

for.body3.lr.ph.i30:                              ; preds = %for.cond1.preheader.i28
  %19 = load double*, double** %7, align 8, !tbaa !137
  %20 = shl nsw i64 %indvars.iv49, 2
  %21 = mul nsw i64 %indvars.iv49, %18
  br label %for.body3.i33

for.body3.i33:                                    ; preds = %for.body3.i33, %for.body3.lr.ph.i30
  %indvars.iv.i = phi i64 [ 0, %for.body3.lr.ph.i30 ], [ %indvars.iv.next.i, %for.body3.i33 ]
  %22 = add nsw i64 %indvars.iv.i, %21
  %arrayidx.i31 = getelementptr inbounds double, double* %19, i64 %22
  %23 = load double, double* %arrayidx.i31, align 8, !tbaa !75
  %24 = add nuw nsw i64 %indvars.iv.i, %20
  %arrayidx12.i = getelementptr inbounds double, double* %6, i64 %24
  store double %23, double* %arrayidx12.i, align 8, !tbaa !75
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i32 = icmp eq i64 %indvars.iv.next.i, %wide.trip.count.i
  br i1 %exitcond.not.i32, label %for.inc13.i, label %for.body3.i33, !llvm.loop !262

for.inc13.i:                                      ; preds = %for.body3.i33, %for.cond1.preheader.i28
  %indvars.iv.next50 = add nuw nsw i64 %indvars.iv49, 1
  %exitcond37.not.i34 = icmp eq i64 %indvars.iv.next50, %17
  br i1 %exitcond37.not.i34, label %set_block_c.exit, label %for.cond1.preheader.i28, !llvm.loop !263

set_block_c.exit:                                 ; preds = %for.inc13.i, %set_identity_c.exit
  %arrayidx = getelementptr inbounds %struct.Matrix, %struct.Matrix* %base_relatives, i64 %indvars.iv53
  %arrayidx3 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %indvars.iv53
  tail call void @mat_mult_c(%struct.Matrix* %arrayidx, %struct.Matrix* %0, %struct.Matrix* %arrayidx3)
  %indvars.iv.next54 = add nuw nsw i64 %indvars.iv53, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next54, %wide.trip.count
  br i1 %exitcond.not, label %for.end, label %for.cond1.preheader.lr.ph.i, !llvm.loop !279

for.end:                                          ; preds = %set_block_c.exit, %entry
  %cmp.not.i = icmp eq i8* %call4.i, null
  br i1 %cmp.not.i, label %delete_matrix_c.exit, label %if.then.i36

if.then.i36:                                      ; preds = %for.end
  tail call void @free(i8* nonnull %call4.i) #38
  br label %delete_matrix_c.exit

delete_matrix_c.exit:                             ; preds = %if.then.i36, %for.end
  tail call void @free(i8* nonnull %call.i) #38
  %25 = bitcast i8* %data.i23 to double**
  %26 = load double*, double** %25, align 8, !tbaa !137
  %cmp.not.i38 = icmp eq double* %26, null
  br i1 %cmp.not.i38, label %delete_matrix_c.exit40, label %if.then.i39

if.then.i39:                                      ; preds = %delete_matrix_c.exit
  %27 = bitcast double* %26 to i8*
  tail call void @free(i8* %27) #38
  br label %delete_matrix_c.exit40

delete_matrix_c.exit40:                           ; preds = %if.then.i39, %delete_matrix_c.exit
  tail call void @free(i8* nonnull %call.i19) #38
  ret void
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @get_skinned_vertex_positions_b(i32 %bone_count, %struct.Matrix* nocapture readonly %base_relatives, i32* nocapture readonly %parents, %struct.Matrix* nocapture readonly %inverse_base_absolutes, %struct.Matrix_diff* nocapture readonly %inverse_base_absolutesb, %struct.Matrix* nocapture readonly %base_positions, %struct.Matrix_diff* nocapture readonly %base_positionsb, %struct.Matrix* nocapture readonly %weights, i32 %is_mirrored, %struct.Matrix* nocapture readonly %pose_params, %struct.Matrix_diff* nocapture readonly %pose_paramsb, %struct.Matrix* %positions, %struct.Matrix_diff* %positionsb, i32 %apply_global) local_unnamed_addr #5 {
entry:
  %matricies.addr.i539 = alloca %struct.Matrix*, align 8
  %matriciesb.addr.i540 = alloca %struct.Matrix_diff*, align 8
  %matricies.addr.i537 = alloca %struct.Matrix*, align 8
  %matriciesb.addr.i538 = alloca %struct.Matrix_diff*, align 8
  %matricies.addr.i = alloca %struct.Matrix*, align 8
  %matriciesb.addr.i = alloca %struct.Matrix_diff*, align 8
  %branch = alloca i32, align 4
  %0 = bitcast i32* %branch to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #38
  %conv.i = sext i32 %bone_count to i64
  %mul.i = shl nsw i64 %conv.i, 4
  %call.i = tail call noalias i8* @malloc(i64 %mul.i) #38
  %cmp20.i = icmp sgt i32 %bone_count, 0
  br i1 %cmp20.i, label %for.body.preheader.i525, label %get_matrix_array_c.exit

get_matrix_array_c.exit:                          ; preds = %entry
  %call.i523 = tail call noalias i8* @malloc(i64 %mul.i) #38
  %.pre571 = bitcast i8* %call.i to i32*
  br label %get_matrix_array_c.exit526

for.body.preheader.i525:                          ; preds = %entry
  %1 = zext i32 %bone_count to i64
  %2 = shl nuw nsw i64 %1, 4
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %call.i, i8 0, i64 %2, i1 false) #38
  %call.i523546 = tail call noalias i8* @malloc(i64 %mul.i) #38
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %call.i523546, i8 0, i64 %2, i1 false) #38
  %nrows.phi.trans.insert = bitcast i8* %call.i to i32*
  %.pre = load i32, i32* %nrows.phi.trans.insert, align 8, !tbaa !138
  br label %get_matrix_array_c.exit526

get_matrix_array_c.exit526:                       ; preds = %for.body.preheader.i525, %get_matrix_array_c.exit
  %nrows.pre-phi = phi i32* [ %.pre571, %get_matrix_array_c.exit ], [ %nrows.phi.trans.insert, %for.body.preheader.i525 ]
  %3 = phi i32 [ undef, %get_matrix_array_c.exit ], [ %.pre, %for.body.preheader.i525 ]
  %call.i523547 = phi i8* [ %call.i523, %get_matrix_array_c.exit ], [ %call.i523546, %for.body.preheader.i525 ]
  %4 = bitcast i8* %call.i to %struct.Matrix*
  %5 = bitcast i8* %call.i523547 to %struct.Matrix*
  tail call void @pushInteger4(i32 %3) #38
  %ncols = getelementptr inbounds i8, i8* %call.i, i64 4
  %6 = bitcast i8* %ncols to i32*
  %7 = load i32, i32* %6, align 4, !tbaa !139
  tail call void @pushInteger4(i32 %7) #38
  %data = getelementptr inbounds i8, i8* %call.i, i64 8
  %8 = bitcast i8* %data to double**
  %9 = load double*, double** %8, align 8, !tbaa !137
  %tobool.not = icmp eq double* %9, null
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %get_matrix_array_c.exit526
  %10 = load double, double* %9, align 8, !tbaa !75
  tail call void @pushReal8(double %10) #38
  br label %if.end

if.end:                                           ; preds = %if.then, %get_matrix_array_c.exit526
  %.sink = phi i32 [ 1, %if.then ], [ 0, %get_matrix_array_c.exit526 ]
  tail call void @pushControl1b(i32 %.sink) #38
  %11 = bitcast i8* %data to i8**
  %12 = load i8*, i8** %11, align 8, !tbaa !137
  tail call void @pushPointer8(i8* %12) #38
  tail call void @get_posed_relatives_c(i32 %bone_count, %struct.Matrix* %base_relatives, %struct.Matrix* %pose_params, %struct.Matrix* nonnull %4)
  %nrows4 = bitcast i8* %call.i523547 to i32*
  %13 = load i32, i32* %nrows4, align 8, !tbaa !138
  tail call void @pushInteger4(i32 %13) #38
  %ncols5 = getelementptr inbounds i8, i8* %call.i523547, i64 4
  %14 = bitcast i8* %ncols5 to i32*
  %15 = load i32, i32* %14, align 4, !tbaa !139
  tail call void @pushInteger4(i32 %15) #38
  %data6 = getelementptr inbounds i8, i8* %call.i523547, i64 8
  %16 = bitcast i8* %data6 to double**
  %17 = load double*, double** %16, align 8, !tbaa !137
  %tobool7.not = icmp eq double* %17, null
  br i1 %tobool7.not, label %if.end11, label %if.then8

if.then8:                                         ; preds = %if.end
  %18 = load double, double* %17, align 8, !tbaa !75
  tail call void @pushReal8(double %18) #38
  br label %if.end11

if.end11:                                         ; preds = %if.then8, %if.end
  %.sink580 = phi i32 [ 1, %if.then8 ], [ 0, %if.end ]
  tail call void @pushControl1b(i32 %.sink580) #38
  %19 = bitcast i8* %data6 to i8**
  %20 = load i8*, i8** %19, align 8, !tbaa !137
  tail call void @pushPointer8(i8* %20) #38
  %21 = load double*, double** %8, align 8, !tbaa !137
  %tobool14.not = icmp eq double* %21, null
  br i1 %tobool14.not, label %for.cond, label %if.then15

if.then15:                                        ; preds = %if.end11
  %22 = load double, double* %21, align 8, !tbaa !75
  tail call void @pushReal8(double %22) #38
  br label %for.cond

for.cond:                                         ; preds = %if.then15, %if.end11
  %.sink581 = phi i32 [ 1, %if.then15 ], [ 0, %if.end11 ]
  tail call void @pushControl1b(i32 %.sink581) #38
  tail call void @relatives_to_absolutes_c(i32 %bone_count, %struct.Matrix* nonnull %4, i32* %parents, %struct.Matrix* nonnull %5)
  br i1 %cmp20.i, label %if.then27, label %for.end

if.then27:                                        ; preds = %for.cond
  tail call void @pushInteger4(i32 undef) #38
  tail call void @pushInteger4(i32 undef) #38
  tail call void @llvm.trap()
  unreachable

for.end:                                          ; preds = %for.cond
  %ncols52 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %base_positions, i64 0, i32 1
  %23 = load i32, i32* %ncols52, align 4, !tbaa !139
  %nrows1.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 0
  %24 = load i32, i32* %nrows1.i, align 8, !tbaa !138
  %ncols2.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 1
  %25 = load i32, i32* %ncols2.i, align 4, !tbaa !139
  %mul.i527 = mul nsw i32 %25, %24
  %mul3.i = mul i32 %23, 3
  %cmp.not.i = icmp eq i32 %mul.i527, %mul3.i
  br i1 %cmp.not.i, label %resize_c.exit, label %if.then.i

if.then.i:                                        ; preds = %for.end
  %data.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 2
  %26 = bitcast double** %data.i to i8**
  %27 = load i8*, i8** %26, align 8, !tbaa !137
  %cmp4.not.i = icmp eq i8* %27, null
  br i1 %cmp4.not.i, label %if.end.i, label %if.then5.i

if.then5.i:                                       ; preds = %if.then.i
  tail call void @free(i8* nonnull %27) #38
  br label %if.end.i

if.end.i:                                         ; preds = %if.then5.i, %if.then.i
  %cmp8.i = icmp sgt i32 %mul3.i, 0
  br i1 %cmp8.i, label %resize_c.exit.thread, label %resize_c.exit.thread550

resize_c.exit.thread:                             ; preds = %if.end.i
  %conv31.i = zext i32 %mul3.i to i64
  %mul11.i = shl nuw nsw i64 %conv31.i, 3
  %call.i528 = tail call noalias i8* @malloc(i64 %mul11.i) #38
  store i8* %call.i528, i8** %26, align 8, !tbaa !137
  store i32 %23, i32* %ncols2.i, align 4, !tbaa !139
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138
  br label %for.body.lr.ph.i

resize_c.exit.thread550:                          ; preds = %if.end.i
  store double* null, double** %data.i, align 8, !tbaa !137
  store i32 %23, i32* %ncols2.i, align 4, !tbaa !139
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138
  br label %for.end118

resize_c.exit:                                    ; preds = %for.end
  store i32 %23, i32* %ncols2.i, align 4, !tbaa !139
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138
  %cmp7.i = icmp sgt i32 %mul.i527, 0
  br i1 %cmp7.i, label %resize_c.exit.for.body.lr.ph.i_crit_edge, label %for.end118

resize_c.exit.for.body.lr.ph.i_crit_edge:         ; preds = %resize_c.exit
  %data.i529.phi.trans.insert = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 2
  %28 = bitcast double** %data.i529.phi.trans.insert to i8**
  %.pre569579 = load i8*, i8** %28, align 8, !tbaa !137
  %.pre572 = zext i32 %mul3.i to i64
  %.pre573 = shl nuw nsw i64 %.pre572, 3
  br label %for.body.lr.ph.i

for.body.lr.ph.i:                                 ; preds = %resize_c.exit.for.body.lr.ph.i_crit_edge, %resize_c.exit.thread
  %.pre-phi = phi i64 [ %.pre573, %resize_c.exit.for.body.lr.ph.i_crit_edge ], [ %mul11.i, %resize_c.exit.thread ]
  %29 = phi i8* [ %.pre569579, %resize_c.exit.for.body.lr.ph.i_crit_edge ], [ %call.i528, %resize_c.exit.thread ]
  call void @llvm.memset.p0i8.i64(i8* align 8 %29, i8 0, i64 %.pre-phi, i1 false)
  br label %for.end118

for.end118:                                       ; preds = %for.body.lr.ph.i, %resize_c.exit, %resize_c.exit.thread550
  %tobool119.not = icmp eq i32 %is_mirrored, 0
  br i1 %tobool119.not, label %if.end142, label %for.cond121.preheader

for.cond121.preheader:                            ; preds = %for.end118
  %30 = load i32, i32* %ncols2.i, align 4, !tbaa !139
  %cmp123561 = icmp sgt i32 %30, 0
  br i1 %cmp123561, label %for.body124.lr.ph, label %if.end142

for.body124.lr.ph:                                ; preds = %for.cond121.preheader
  %data125 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 2
  %31 = load double*, double** %data125, align 8, !tbaa !137
  %32 = load i32, i32* %nrows1.i, align 8, !tbaa !138
  %33 = sext i32 %32 to i64
  %wide.trip.count = zext i32 %30 to i64
  br label %for.body124

for.body124:                                      ; preds = %for.body124, %for.body124.lr.ph
  %indvars.iv566 = phi i64 [ 0, %for.body124.lr.ph ], [ %indvars.iv.next567, %for.body124 ]
  %34 = mul nsw i64 %indvars.iv566, %33
  %arrayidx130 = getelementptr inbounds double, double* %31, i64 %34
  %35 = load double, double* %arrayidx130, align 8, !tbaa !75
  %mul131 = fneg fast double %35
  store double %mul131, double* %arrayidx130, align 8, !tbaa !75
  %indvars.iv.next567 = add nuw nsw i64 %indvars.iv566, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next567, %wide.trip.count
  br i1 %exitcond.not, label %if.end142, label %for.body124, !llvm.loop !280

if.end142:                                        ; preds = %for.body124, %for.cond121.preheader, %for.end118
  %.sink582 = phi i32 [ 0, %for.cond121.preheader ], [ 1, %for.end118 ], [ 0, %for.body124 ]
  tail call void @pushControl1b(i32 %.sink582) #38
  %tobool143.not = icmp eq i32 %apply_global, 0
  %.sink583 = zext i1 %tobool143.not to i32
  tail call void @pushControl1b(i32 %.sink583) #38
  %36 = bitcast %struct.Matrix** %matricies.addr.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %36)
  %37 = bitcast %struct.Matrix_diff** %matriciesb.addr.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37)
  tail call void @pushPointer8(i8* undef) #38
  %38 = bitcast %struct.Matrix** %matricies.addr.i to i8**
  tail call void @pushPointer8(i8* undef) #38
  call void @popPointer8(i8** nonnull %38) #38
  %39 = bitcast %struct.Matrix_diff** %matriciesb.addr.i to i8**
  call void @popPointer8(i8** nonnull %39) #38
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %36)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  %40 = bitcast %struct.Matrix** %matricies.addr.i537 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %40)
  %41 = bitcast %struct.Matrix_diff** %matriciesb.addr.i538 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %41)
  %42 = bitcast %struct.Matrix** %matricies.addr.i537 to i8**
  store i8* %call.i523547, i8** %42, align 8, !tbaa !60
  call void @pushPointer8(i8* undef) #38
  call void @pushPointer8(i8* %call.i523547) #38
  call void @popPointer8(i8** nonnull %42) #38
  %43 = bitcast %struct.Matrix_diff** %matriciesb.addr.i538 to i8**
  call void @popPointer8(i8** nonnull %43) #38
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %40)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %41)
  %44 = bitcast %struct.Matrix** %matricies.addr.i539 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %44)
  %45 = bitcast %struct.Matrix_diff** %matriciesb.addr.i540 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %45)
  %46 = bitcast %struct.Matrix** %matricies.addr.i539 to i8**
  store i8* %call.i, i8** %46, align 8, !tbaa !60
  call void @pushPointer8(i8* undef) #38
  call void @pushPointer8(i8* %call.i) #38
  call void @popPointer8(i8** nonnull %46) #38
  %47 = bitcast %struct.Matrix_diff** %matriciesb.addr.i540 to i8**
  call void @popPointer8(i8** nonnull %47) #38
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %44)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %45)
  call void @popControl1b(i32* nonnull %branch) #38
  %48 = load i32, i32* %branch, align 4, !tbaa !59
  %cmp147 = icmp eq i32 %48, 0
  br i1 %cmp147, label %if.then148, label %if.end149

if.then148:                                       ; preds = %if.end142
  call void @apply_global_transform_b(%struct.Matrix* %pose_params, %struct.Matrix_diff* %pose_paramsb, %struct.Matrix* %positions, %struct.Matrix_diff* %positionsb)
  br label %if.end149

if.end149:                                        ; preds = %if.then148, %if.end142
  call void @popControl1b(i32* nonnull %branch) #38
  %49 = load i32, i32* %branch, align 4, !tbaa !59
  %cmp150 = icmp eq i32 %49, 0
  br i1 %cmp150, label %if.then151, label %for.end241

if.then151:                                       ; preds = %if.end149
  %50 = load i32, i32* %ncols2.i, align 4, !tbaa !139
  %cmp154559 = icmp sgt i32 %50, 0
  br i1 %cmp154559, label %for.body155.lr.ph, label %for.end241

for.body155.lr.ph:                                ; preds = %if.then151
  %data156 = getelementptr inbounds %struct.Matrix_diff, %struct.Matrix_diff* %positionsb, i64 0, i32 0
  %51 = load double*, double** %data156, align 8, !tbaa !241
  %52 = load i32, i32* %nrows1.i, align 8, !tbaa !138
  %53 = zext i32 %50 to i64
  %54 = sext i32 %52 to i64
  br label %for.body155

for.body155:                                      ; preds = %for.body155, %for.body155.lr.ph
  %indvars.iv563 = phi i64 [ %53, %for.body155.lr.ph ], [ %indvars.iv.next564, %for.body155 ]
  %indvars.iv.next564 = add nsw i64 %indvars.iv563, -1
  %55 = mul nsw i64 %indvars.iv.next564, %54
  %arrayidx161 = getelementptr inbounds double, double* %51, i64 %55
  %56 = load double, double* %arrayidx161, align 8, !tbaa !75
  %fneg = fneg fast double %56
  store double %fneg, double* %arrayidx161, align 8, !tbaa !75
  %cmp154 = icmp sgt i64 %indvars.iv563, 1
  br i1 %cmp154, label %for.body155, label %for.end241, !llvm.loop !281

for.end241:                                       ; preds = %for.body155, %if.then151, %if.end149
  %.pre570 = load i32, i32* %ncols52, align 4, !tbaa !139
  call void @get_new_matrix_b(i32 4, i32 %.pre570, %struct.Matrix_diff* undef)
  %57 = load i32, i32* %ncols2.i, align 4, !tbaa !139
  %58 = load i32, i32* %nrows1.i, align 8, !tbaa !138
  %mul.i543 = mul i32 %58, %57
  %cmp6.i = icmp sgt i32 %mul.i543, 0
  br i1 %cmp6.i, label %for.body.lr.ph.i545, label %for.end284

for.body.lr.ph.i545:                              ; preds = %for.end241
  %data.i544 = getelementptr inbounds %struct.Matrix_diff, %struct.Matrix_diff* %positionsb, i64 0, i32 0
  %59 = load double*, double** %data.i544, align 8, !tbaa !241
  %60 = zext i32 %mul.i543 to i64
  %61 = add nsw i32 %mul.i543, -1
  %62 = zext i32 %61 to i64
  %63 = xor i64 %62, -1
  %64 = add nsw i64 %63, %60
  %scevgep.i = getelementptr double, double* %59, i64 %64
  %scevgep8.i = bitcast double* %scevgep.i to i8*
  %65 = shl nuw nsw i64 %60, 3
  call void @llvm.memset.p0i8.i64(i8* align 8 %scevgep8.i, i8 0, i64 %65, i1 false) #38
  br label %for.end284

for.end284:                                       ; preds = %for.body.lr.ph.i545, %for.end241
  %66 = load i32, i32* %ncols52, align 4, !tbaa !139
  call void @resize_b(%struct.Matrix* nonnull %positions, %struct.Matrix_diff* %positionsb, i32 3, i32 %66)
  call void @popControl1b(i32* nonnull %branch) #38
  %67 = load i32, i32* %branch, align 4, !tbaa !59
  %cmp285 = icmp eq i32 %67, 1
  br i1 %cmp285, label %if.then286, label %if.end288

if.then286:                                       ; preds = %for.end284
  %68 = load double*, double** %8, align 8, !tbaa !137
  call void @popReal8(double* %68) #38
  br label %if.end288

if.end288:                                        ; preds = %if.then286, %for.end284
  call void @popPointer8(i8** nonnull %19) #38
  call void @popControl1b(i32* nonnull %branch) #38
  %69 = load i32, i32* %branch, align 4, !tbaa !59
  %cmp290 = icmp eq i32 %69, 1
  br i1 %cmp290, label %if.then291, label %if.end293

if.then291:                                       ; preds = %if.end288
  %70 = load double*, double** %16, align 8, !tbaa !137
  call void @popReal8(double* %70) #38
  br label %if.end293

if.end293:                                        ; preds = %if.then291, %if.end288
  call void @popInteger4(i32* nonnull %14) #38
  call void @popInteger4(i32* nonnull %nrows4) #38
  call void @relatives_to_absolutes_b(i32 %bone_count, %struct.Matrix* %4, %struct.Matrix_diff* undef, i32* %parents, %struct.Matrix* %5, %struct.Matrix_diff* undef)
  call void @popPointer8(i8** nonnull %11) #38
  call void @popControl1b(i32* nonnull %branch) #38
  %71 = load i32, i32* %branch, align 4, !tbaa !59
  %cmp297 = icmp eq i32 %71, 1
  br i1 %cmp297, label %if.then298, label %if.end300

if.then298:                                       ; preds = %if.end293
  %72 = load double*, double** %8, align 8, !tbaa !137
  call void @popReal8(double* %72) #38
  br label %if.end300

if.end300:                                        ; preds = %if.then298, %if.end293
  call void @popInteger4(i32* nonnull %6) #38
  call void @popInteger4(i32* nonnull %nrows.pre-phi) #38
  call void @get_posed_relatives_b(i32 %bone_count, %struct.Matrix* %base_relatives, %struct.Matrix_diff* undef, %struct.Matrix* %pose_params, %struct.Matrix_diff* undef, %struct.Matrix* %4, %struct.Matrix_diff* undef)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #38
  ret void
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @get_skinned_vertex_positions_c(i32 %bone_count, %struct.Matrix* nocapture readonly %base_relatives, i32* nocapture readonly %parents, %struct.Matrix* nocapture readonly %inverse_base_absolutes, %struct.Matrix* nocapture readonly %base_positions, %struct.Matrix* nocapture readonly %weights, i32 %is_mirrored, %struct.Matrix* nocapture readonly %pose_params, %struct.Matrix* nocapture %positions, i32 %apply_global) local_unnamed_addr #5 {
entry:
  %conv.i = sext i32 %bone_count to i64
  %mul.i = shl nsw i64 %conv.i, 4
  %call.i = tail call noalias i8* @malloc(i64 %mul.i) #38
  %cmp20.i = icmp sgt i32 %bone_count, 0
  br i1 %cmp20.i, label %for.body.preheader.i128, label %get_matrix_array_c.exit123

get_matrix_array_c.exit123:                       ; preds = %entry
  %call.i120 = tail call noalias i8* @malloc(i64 %mul.i) #38
  %call.i126 = tail call noalias i8* @malloc(i64 %mul.i) #38
  br label %get_matrix_array_c.exit129

for.body.preheader.i128:                          ; preds = %entry
  %0 = zext i32 %bone_count to i64
  %1 = shl nuw nsw i64 %0, 4
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %call.i, i8 0, i64 %1, i1 false) #38
  %call.i120176 = tail call noalias i8* @malloc(i64 %mul.i) #38
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %call.i120176, i8 0, i64 %1, i1 false) #38
  %call.i126180 = tail call noalias i8* @malloc(i64 %mul.i) #38
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %call.i126180, i8 0, i64 %1, i1 false) #38
  br label %get_matrix_array_c.exit129

get_matrix_array_c.exit129:                       ; preds = %for.body.preheader.i128, %get_matrix_array_c.exit123
  %call.i126183 = phi i8* [ %call.i126, %get_matrix_array_c.exit123 ], [ %call.i126180, %for.body.preheader.i128 ]
  %call.i120177181 = phi i8* [ %call.i120, %get_matrix_array_c.exit123 ], [ %call.i120176, %for.body.preheader.i128 ]
  %2 = bitcast i8* %call.i to %struct.Matrix*
  %3 = bitcast i8* %call.i120177181 to %struct.Matrix*
  %4 = bitcast i8* %call.i126183 to %struct.Matrix*
  tail call void @get_posed_relatives_c(i32 %bone_count, %struct.Matrix* %base_relatives, %struct.Matrix* %pose_params, %struct.Matrix* %2)
  tail call void @relatives_to_absolutes_c(i32 %bone_count, %struct.Matrix* %2, i32* %parents, %struct.Matrix* %3)
  br i1 %cmp20.i, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %get_matrix_array_c.exit129
  %wide.trip.count219 = zext i32 %bone_count to i64
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %indvars.iv217 = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next218, %for.body ]
  %arrayidx = getelementptr inbounds %struct.Matrix, %struct.Matrix* %3, i64 %indvars.iv217
  %arrayidx4 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %inverse_base_absolutes, i64 %indvars.iv217
  %arrayidx6 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %4, i64 %indvars.iv217
  tail call void @mat_mult_c(%struct.Matrix* %arrayidx, %struct.Matrix* %arrayidx4, %struct.Matrix* %arrayidx6)
  %indvars.iv.next218 = add nuw nsw i64 %indvars.iv217, 1
  %exitcond220.not = icmp eq i64 %indvars.iv.next218, %wide.trip.count219
  br i1 %exitcond220.not, label %for.end, label %for.body, !llvm.loop !282

for.end:                                          ; preds = %for.body, %get_matrix_array_c.exit129
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %base_positions, i64 0, i32 1
  %5 = load i32, i32* %ncols, align 4, !tbaa !139
  %nrows1.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 0
  %6 = load i32, i32* %nrows1.i, align 8, !tbaa !138
  %ncols2.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 1
  %7 = load i32, i32* %ncols2.i, align 4, !tbaa !139
  %mul.i130 = mul nsw i32 %7, %6
  %mul3.i = mul i32 %5, 3
  %cmp.not.i = icmp eq i32 %mul.i130, %mul3.i
  br i1 %cmp.not.i, label %resize_c.exit, label %if.then.i

if.then.i:                                        ; preds = %for.end
  %data.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 2
  %8 = bitcast double** %data.i to i8**
  %9 = load i8*, i8** %8, align 8, !tbaa !137
  %cmp4.not.i = icmp eq i8* %9, null
  br i1 %cmp4.not.i, label %if.end.i, label %if.then5.i

if.then5.i:                                       ; preds = %if.then.i
  tail call void @free(i8* nonnull %9) #38
  br label %if.end.i

if.end.i:                                         ; preds = %if.then5.i, %if.then.i
  %cmp8.i = icmp sgt i32 %mul3.i, 0
  br i1 %cmp8.i, label %resize_c.exit.thread, label %resize_c.exit.thread186

resize_c.exit.thread:                             ; preds = %if.end.i
  %conv31.i = zext i32 %mul3.i to i64
  %mul11.i = shl nuw nsw i64 %conv31.i, 3
  %call.i131 = tail call noalias i8* @malloc(i64 %mul11.i) #38
  store i8* %call.i131, i8** %8, align 8, !tbaa !137
  store i32 %5, i32* %ncols2.i, align 4, !tbaa !139
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138
  br label %for.body.lr.ph.i

resize_c.exit.thread186:                          ; preds = %if.end.i
  store double* null, double** %data.i, align 8, !tbaa !137
  store i32 %5, i32* %ncols2.i, align 4, !tbaa !139
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138
  br label %fill_c.exit

resize_c.exit:                                    ; preds = %for.end
  store i32 %5, i32* %ncols2.i, align 4, !tbaa !139
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138
  %cmp7.i = icmp sgt i32 %mul.i130, 0
  br i1 %cmp7.i, label %resize_c.exit.for.body.lr.ph.i_crit_edge, label %fill_c.exit

resize_c.exit.for.body.lr.ph.i_crit_edge:         ; preds = %resize_c.exit
  %data.i132.phi.trans.insert = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 2
  %10 = bitcast double** %data.i132.phi.trans.insert to i8**
  %.pre223 = load i8*, i8** %10, align 8, !tbaa !137
  %.pre221 = zext i32 %mul3.i to i64
  %.pre222 = shl nuw nsw i64 %.pre221, 3
  br label %for.body.lr.ph.i

for.body.lr.ph.i:                                 ; preds = %resize_c.exit.for.body.lr.ph.i_crit_edge, %resize_c.exit.thread
  %.pre-phi = phi i64 [ %.pre222, %resize_c.exit.for.body.lr.ph.i_crit_edge ], [ %mul11.i, %resize_c.exit.thread ]
  %11 = phi i8* [ %.pre223, %resize_c.exit.for.body.lr.ph.i_crit_edge ], [ %call.i131, %resize_c.exit.thread ]
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 %.pre-phi, i1 false)
  br label %fill_c.exit

fill_c.exit:                                      ; preds = %for.body.lr.ph.i, %resize_c.exit, %resize_c.exit.thread186
  %12 = load i32, i32* %ncols, align 4, !tbaa !139
  %call.i133 = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #38
  %13 = bitcast i8* %call.i133 to %struct.Matrix*
  %nrows1.i134 = bitcast i8* %call.i133 to i32*
  store i32 4, i32* %nrows1.i134, align 8, !tbaa !138
  %ncols2.i135 = getelementptr inbounds i8, i8* %call.i133, i64 4
  %14 = bitcast i8* %ncols2.i135 to i32*
  store i32 %12, i32* %14, align 4, !tbaa !139
  %mul.i136 = shl nsw i32 %12, 2
  %conv.i137 = sext i32 %mul.i136 to i64
  %mul3.i138 = shl nsw i64 %conv.i137, 3
  %call4.i = tail call noalias i8* @malloc(i64 %mul3.i138) #38
  %data.i139 = getelementptr inbounds i8, i8* %call.i133, i64 8
  %15 = bitcast i8* %data.i139 to i8**
  store i8* %call4.i, i8** %15, align 8, !tbaa !137
  br i1 %cmp20.i, label %for.body11.lr.ph, label %for.end45

for.body11.lr.ph:                                 ; preds = %fill_c.exit
  %16 = bitcast i8* %data.i139 to double**
  %data23 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %weights, i64 0, i32 2
  %nrows24 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %weights, i64 0, i32 0
  %data30 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 2
  %wide.trip.count215 = zext i32 %bone_count to i64
  br label %for.body11

for.body11:                                       ; preds = %for.inc43, %for.body11.lr.ph
  %indvars.iv213 = phi i64 [ 0, %for.body11.lr.ph ], [ %indvars.iv.next214, %for.inc43 ]
  %arrayidx13 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %4, i64 %indvars.iv213
  tail call void @mat_mult_c(%struct.Matrix* %arrayidx13, %struct.Matrix* %base_positions, %struct.Matrix* %13)
  %17 = load i32, i32* %ncols2.i, align 4, !tbaa !139
  %cmp16191 = icmp sgt i32 %17, 0
  br i1 %cmp16191, label %for.cond18.preheader.lr.ph, label %for.inc43

for.cond18.preheader.lr.ph:                       ; preds = %for.body11
  %18 = load double*, double** %16, align 8, !tbaa !137
  %19 = load i32, i32* %nrows1.i134, align 8, !tbaa !138
  %20 = load double*, double** %data23, align 8, !tbaa !137
  %21 = load i32, i32* %nrows24, align 8, !tbaa !138
  %22 = load double*, double** %data30, align 8, !tbaa !137
  %23 = load i32, i32* %nrows1.i, align 8, !tbaa !138
  %24 = sext i32 %19 to i64
  %25 = sext i32 %21 to i64
  %26 = sext i32 %23 to i64
  %wide.trip.count211 = zext i32 %17 to i64
  br label %for.cond18.preheader

for.cond18.preheader:                             ; preds = %for.inc40, %for.cond18.preheader.lr.ph
  %indvars.iv204 = phi i64 [ 0, %for.cond18.preheader.lr.ph ], [ %indvars.iv.next205, %for.inc40 ]
  %27 = mul nsw i64 %indvars.iv204, %24
  %28 = mul nsw i64 %indvars.iv204, %25
  %29 = add nsw i64 %28, %indvars.iv213
  %arrayidx28 = getelementptr inbounds double, double* %20, i64 %29
  %30 = mul nsw i64 %indvars.iv204, %26
  br label %for.body20

for.body20:                                       ; preds = %for.body20, %for.cond18.preheader
  %indvars.iv199 = phi i64 [ 0, %for.cond18.preheader ], [ %indvars.iv.next200, %for.body20 ]
  %31 = add nsw i64 %27, %indvars.iv199
  %arrayidx22 = getelementptr inbounds double, double* %18, i64 %31
  %32 = load double, double* %arrayidx22, align 8, !tbaa !75
  %33 = load double, double* %arrayidx28, align 8, !tbaa !75
  %mul29 = fmul fast double %33, %32
  %34 = add nsw i64 %30, %indvars.iv199
  %arrayidx35 = getelementptr inbounds double, double* %22, i64 %34
  %35 = load double, double* %arrayidx35, align 8, !tbaa !75
  %add36 = fadd fast double %35, %mul29
  store double %add36, double* %arrayidx35, align 8, !tbaa !75
  %indvars.iv.next200 = add nuw nsw i64 %indvars.iv199, 1
  %exitcond203.not = icmp eq i64 %indvars.iv.next200, 3
  br i1 %exitcond203.not, label %for.inc40, label %for.body20, !llvm.loop !283

for.inc40:                                        ; preds = %for.body20
  %indvars.iv.next205 = add nuw nsw i64 %indvars.iv204, 1
  %exitcond212.not = icmp eq i64 %indvars.iv.next205, %wide.trip.count211
  br i1 %exitcond212.not, label %for.inc43, label %for.cond18.preheader, !llvm.loop !284

for.inc43:                                        ; preds = %for.inc40, %for.body11
  %indvars.iv.next214 = add nuw nsw i64 %indvars.iv213, 1
  %exitcond216.not = icmp eq i64 %indvars.iv.next214, %wide.trip.count215
  br i1 %exitcond216.not, label %for.end45, label %for.body11, !llvm.loop !285

for.end45:                                        ; preds = %for.inc43, %fill_c.exit
  %tobool.not = icmp eq i32 %is_mirrored, 0
  br i1 %tobool.not, label %if.end, label %for.cond46.preheader

for.cond46.preheader:                             ; preds = %for.end45
  %36 = load i32, i32* %ncols2.i, align 4, !tbaa !139
  %cmp48188 = icmp sgt i32 %36, 0
  br i1 %cmp48188, label %for.body49.lr.ph, label %if.end

for.body49.lr.ph:                                 ; preds = %for.cond46.preheader
  %data50 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 2
  %37 = load double*, double** %data50, align 8, !tbaa !137
  %38 = load i32, i32* %nrows1.i, align 8, !tbaa !138
  %39 = sext i32 %38 to i64
  %wide.trip.count = zext i32 %36 to i64
  br label %for.body49

for.body49:                                       ; preds = %for.body49, %for.body49.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body49.lr.ph ], [ %indvars.iv.next, %for.body49 ]
  %40 = mul nsw i64 %indvars.iv, %39
  %arrayidx55 = getelementptr inbounds double, double* %37, i64 %40
  %41 = load double, double* %arrayidx55, align 8, !tbaa !75
  %mul56 = fneg fast double %41
  store double %mul56, double* %arrayidx55, align 8, !tbaa !75
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %if.end, label %for.body49, !llvm.loop !286

if.end:                                           ; preds = %for.body49, %for.cond46.preheader, %for.end45
  %tobool60.not = icmp eq i32 %apply_global, 0
  br i1 %tobool60.not, label %if.end62, label %if.then61

if.then61:                                        ; preds = %if.end
  tail call void @apply_global_transform_c(%struct.Matrix* %pose_params, %struct.Matrix* %positions)
  br label %if.end62

if.end62:                                         ; preds = %if.then61, %if.end
  %42 = bitcast i8* %data.i139 to double**
  %43 = load double*, double** %42, align 8, !tbaa !137
  %cmp.not.i141 = icmp eq double* %43, null
  br i1 %cmp.not.i141, label %delete_matrix_c.exit, label %if.then.i142

if.then.i142:                                     ; preds = %if.end62
  %44 = bitcast double* %43 to i8*
  tail call void @free(i8* %44) #38
  br label %delete_matrix_c.exit

delete_matrix_c.exit:                             ; preds = %if.then.i142, %if.end62
  tail call void @free(i8* nonnull %call.i133) #38
  br i1 %cmp20.i, label %for.body.preheader.i145, label %delete_light_matrix_array_c.exit163.thread

for.body.preheader.i145:                          ; preds = %delete_matrix_c.exit
  %wide.trip.count.i144 = zext i32 %bone_count to i64
  br label %for.body.i148

for.body.i148:                                    ; preds = %for.inc.i, %for.body.preheader.i145
  %indvars.iv.i146 = phi i64 [ 0, %for.body.preheader.i145 ], [ %indvars.iv.next.i150, %for.inc.i ]
  %data.i147 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %2, i64 %indvars.iv.i146, i32 2
  %45 = bitcast double** %data.i147 to i8**
  %46 = load i8*, i8** %45, align 8, !tbaa !137
  %cmp1.not.i = icmp eq i8* %46, null
  br i1 %cmp1.not.i, label %for.inc.i, label %if.then.i149

if.then.i149:                                     ; preds = %for.body.i148
  tail call void @free(i8* nonnull %46) #38
  br label %for.inc.i

for.inc.i:                                        ; preds = %if.then.i149, %for.body.i148
  %indvars.iv.next.i150 = add nuw nsw i64 %indvars.iv.i146, 1
  %exitcond.not.i151 = icmp eq i64 %indvars.iv.next.i150, %wide.trip.count.i144
  br i1 %exitcond.not.i151, label %for.body.preheader.i154, label %for.body.i148, !llvm.loop !243

for.body.preheader.i154:                          ; preds = %for.inc.i
  tail call void @free(i8* nonnull %call.i) #38
  br label %for.body.i158

for.body.i158:                                    ; preds = %for.inc.i162, %for.body.preheader.i154
  %indvars.iv.i155 = phi i64 [ 0, %for.body.preheader.i154 ], [ %indvars.iv.next.i160, %for.inc.i162 ]
  %data.i156 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %3, i64 %indvars.iv.i155, i32 2
  %47 = bitcast double** %data.i156 to i8**
  %48 = load i8*, i8** %47, align 8, !tbaa !137
  %cmp1.not.i157 = icmp eq i8* %48, null
  br i1 %cmp1.not.i157, label %for.inc.i162, label %if.then.i159

if.then.i159:                                     ; preds = %for.body.i158
  tail call void @free(i8* nonnull %48) #38
  br label %for.inc.i162

for.inc.i162:                                     ; preds = %if.then.i159, %for.body.i158
  %indvars.iv.next.i160 = add nuw nsw i64 %indvars.iv.i155, 1
  %exitcond.not.i161 = icmp eq i64 %indvars.iv.next.i160, %wide.trip.count.i144
  br i1 %exitcond.not.i161, label %for.body.preheader.i166, label %for.body.i158, !llvm.loop !243

delete_light_matrix_array_c.exit163.thread:       ; preds = %delete_matrix_c.exit
  tail call void @free(i8* %call.i) #38
  tail call void @free(i8* %call.i120177181) #38
  br label %delete_light_matrix_array_c.exit175

for.body.preheader.i166:                          ; preds = %for.inc.i162
  tail call void @free(i8* nonnull %call.i120177181) #38
  br label %for.body.i170

for.body.i170:                                    ; preds = %for.inc.i174, %for.body.preheader.i166
  %indvars.iv.i167 = phi i64 [ 0, %for.body.preheader.i166 ], [ %indvars.iv.next.i172, %for.inc.i174 ]
  %data.i168 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %4, i64 %indvars.iv.i167, i32 2
  %49 = bitcast double** %data.i168 to i8**
  %50 = load i8*, i8** %49, align 8, !tbaa !137
  %cmp1.not.i169 = icmp eq i8* %50, null
  br i1 %cmp1.not.i169, label %for.inc.i174, label %if.then.i171

if.then.i171:                                     ; preds = %for.body.i170
  tail call void @free(i8* nonnull %50) #38
  br label %for.inc.i174

for.inc.i174:                                     ; preds = %if.then.i171, %for.body.i170
  %indvars.iv.next.i172 = add nuw nsw i64 %indvars.iv.i167, 1
  %exitcond.not.i173 = icmp eq i64 %indvars.iv.next.i172, %wide.trip.count.i144
  br i1 %exitcond.not.i173, label %delete_light_matrix_array_c.exit175, label %for.body.i170, !llvm.loop !243

delete_light_matrix_array_c.exit175:              ; preds = %for.inc.i174, %delete_light_matrix_array_c.exit163.thread
  tail call void @free(i8* %call.i126183) #38
  ret void
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @to_pose_params_b(i32 %count, double* nocapture readonly %theta, double* nocapture %thetab, i8** nocapture readnone %bone_names, %struct.Matrix* %pose_params, %struct.Matrix_diff* %pose_paramsb) local_unnamed_addr #5 {
entry:
  %branch = alloca i32, align 4
  %0 = bitcast i32* %branch to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #38
  %add = add nsw i32 %count, 3
  %nrows1.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 0
  %1 = load i32, i32* %nrows1.i, align 8, !tbaa !138
  %ncols2.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 1
  %2 = load i32, i32* %ncols2.i, align 4, !tbaa !139
  %mul.i = mul nsw i32 %2, %1
  %mul3.i = mul nsw i32 %add, 3
  %cmp.not.i = icmp eq i32 %mul.i, %mul3.i
  %data.phi.trans.insert = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 2
  br i1 %cmp.not.i, label %entry.resize_c.exit_crit_edge, label %if.then.i

entry.resize_c.exit_crit_edge:                    ; preds = %entry
  %.pre = load double*, double** %data.phi.trans.insert, align 8, !tbaa !137
  br label %resize_c.exit

if.then.i:                                        ; preds = %entry
  %3 = bitcast double** %data.phi.trans.insert to i8**
  %4 = load i8*, i8** %3, align 8, !tbaa !137
  %cmp4.not.i = icmp eq i8* %4, null
  br i1 %cmp4.not.i, label %if.end.i, label %if.then5.i

if.then5.i:                                       ; preds = %if.then.i
  tail call void @free(i8* nonnull %4) #38
  br label %if.end.i

if.end.i:                                         ; preds = %if.then5.i, %if.then.i
  %cmp8.i = icmp sgt i32 %count, -3
  br i1 %cmp8.i, label %if.then9.i, label %if.else.i

if.then9.i:                                       ; preds = %if.end.i
  %conv31.i = zext i32 %mul3.i to i64
  %mul11.i = shl nuw nsw i64 %conv31.i, 3
  %call.i = tail call noalias i8* @malloc(i64 %mul11.i) #38
  store i8* %call.i, i8** %3, align 8, !tbaa !137
  %5 = bitcast i8* %call.i to double*
  br label %resize_c.exit

if.else.i:                                        ; preds = %if.end.i
  store double* null, double** %data.phi.trans.insert, align 8, !tbaa !137
  br label %resize_c.exit

resize_c.exit:                                    ; preds = %if.else.i, %if.then9.i, %entry.resize_c.exit_crit_edge
  %6 = phi double* [ %.pre, %entry.resize_c.exit_crit_edge ], [ %5, %if.then9.i ], [ null, %if.else.i ]
  store i32 %add, i32* %ncols2.i, align 4, !tbaa !139
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138
  br label %for.body

for.body:                                         ; preds = %for.body, %resize_c.exit
  %indvars.iv246 = phi i64 [ 0, %resize_c.exit ], [ %indvars.iv.next247, %for.body ]
  %arrayidx = getelementptr inbounds double, double* %theta, i64 %indvars.iv246
  %7 = load double, double* %arrayidx, align 8, !tbaa !75
  %arrayidx2 = getelementptr inbounds double, double* %6, i64 %indvars.iv246
  store double %7, double* %arrayidx2, align 8, !tbaa !75
  %8 = add nuw nsw i64 %indvars.iv246, 3
  %arrayidx7 = getelementptr inbounds double, double* %6, i64 %8
  store double 1.000000e+00, double* %arrayidx7, align 8, !tbaa !75
  %indvars.iv.next247 = add nuw nsw i64 %indvars.iv246, 1
  %exitcond249.not = icmp eq i64 %indvars.iv.next247, 3
  br i1 %exitcond249.not, label %for.cond11.preheader, label %for.body, !llvm.loop !287

for.cond11.preheader:                             ; preds = %for.end36, %for.body
  %i_finger.0237 = phi i32 [ %inc39, %for.end36 ], [ 0, %for.body ]
  %i_pose_params.0236 = phi i32 [ %inc37, %for.end36 ], [ 5, %for.body ]
  %i_theta.0235 = phi i32 [ %i_theta.2.lcssa, %for.end36 ], [ 6, %for.body ]
  br label %for.body13

for.body13:                                       ; preds = %if.end, %for.cond11.preheader
  %i.1234 = phi i32 [ 2, %for.cond11.preheader ], [ %inc35, %if.end ]
  %i_pose_params.1233 = phi i32 [ %i_pose_params.0236, %for.cond11.preheader ], [ %inc33, %if.end ]
  %i_theta.1232 = phi i32 [ %i_theta.0235, %for.cond11.preheader ], [ %i_theta.2, %if.end ]
  %idxprom14 = sext i32 %i_theta.1232 to i64
  %arrayidx15 = getelementptr inbounds double, double* %theta, i64 %idxprom14
  %9 = load double, double* %arrayidx15, align 8, !tbaa !75
  %10 = load double*, double** %data.phi.trans.insert, align 8, !tbaa !137
  %11 = load i32, i32* %nrows1.i, align 8, !tbaa !138
  %mul18 = mul nsw i32 %11, %i_pose_params.1233
  %idxprom20 = sext i32 %mul18 to i64
  %arrayidx21 = getelementptr inbounds double, double* %10, i64 %idxprom20
  store double %9, double* %arrayidx21, align 8, !tbaa !75
  %inc22 = add nsw i32 %i_theta.1232, 1
  %cmp23 = icmp eq i32 %i.1234, 2
  br i1 %cmp23, label %if.then, label %if.end

if.then:                                          ; preds = %for.body13
  %idxprom24 = sext i32 %inc22 to i64
  %arrayidx25 = getelementptr inbounds double, double* %theta, i64 %idxprom24
  %12 = load double, double* %arrayidx25, align 8, !tbaa !75
  %add29 = add nsw i32 %mul18, 1
  %idxprom30 = sext i32 %add29 to i64
  %arrayidx31 = getelementptr inbounds double, double* %10, i64 %idxprom30
  store double %12, double* %arrayidx31, align 8, !tbaa !75
  %inc32 = add nsw i32 %i_theta.1232, 2
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body13
  %.sink = phi i32 [ 0, %if.then ], [ 1, %for.body13 ]
  %i_theta.2 = phi i32 [ %inc32, %if.then ], [ %inc22, %for.body13 ]
  tail call void @pushControl1b(i32 %.sink) #38
  %inc33 = add nsw i32 %i_pose_params.1233, 1
  %inc35 = add nuw nsw i32 %i.1234, 1
  %exitcond.not = icmp eq i32 %inc35, 5
  br i1 %exitcond.not, label %for.end36, label %for.body13, !llvm.loop !288

for.end36:                                        ; preds = %if.end
  %i_theta.2.lcssa = phi i32 [ %i_theta.2, %if.end ]
  %i_pose_params.1233.lcssa = phi i32 [ %i_pose_params.1233, %if.end ]
  %inc37 = add nsw i32 %i_pose_params.1233.lcssa, 2
  %inc39 = add nuw nsw i32 %i_finger.0237, 1
  %exitcond245.not = icmp eq i32 %inc39, 5
  br i1 %exitcond245.not, label %for.end40, label %for.cond11.preheader, !llvm.loop !289

for.end40:                                        ; preds = %for.end36
  %inc37.lcssa = phi i32 [ %inc37, %for.end36 ]
  %i_theta.2.lcssa.lcssa = phi i32 [ %i_theta.2.lcssa, %for.end36 ]
  store double 0.000000e+00, double* %thetab, align 8, !tbaa !75
  %data53 = getelementptr inbounds %struct.Matrix_diff, %struct.Matrix_diff* %pose_paramsb, i64 0, i32 0
  br label %for.body43

for.body43:                                       ; preds = %for.inc90, %for.end40
  %i_finger.1231 = phi i32 [ 4, %for.end40 ], [ %dec91, %for.inc90 ]
  %i_pose_params.2230 = phi i32 [ %inc37.lcssa, %for.end40 ], [ %dec47.lcssa, %for.inc90 ]
  %i_theta.3229 = phi i32 [ %i_theta.2.lcssa.lcssa, %for.end40 ], [ %dec69.lcssa, %for.inc90 ]
  %dec = add nsw i32 %i_pose_params.2230, -1
  br label %for.body46

for.body46:                                       ; preds = %if.end68, %for.body43
  %i.2228 = phi i32 [ 4, %for.body43 ], [ %dec88, %if.end68 ]
  %i_pose_params.3227 = phi i32 [ %dec, %for.body43 ], [ %dec47, %if.end68 ]
  %i_theta.4226 = phi i32 [ %i_theta.3229, %for.body43 ], [ %dec69, %if.end68 ]
  %dec47 = add nsw i32 %i_pose_params.3227, -1
  call void @popControl1b(i32* nonnull %branch) #38
  %13 = load i32, i32* %branch, align 4, !tbaa !59
  %cmp48 = icmp eq i32 %13, 0
  br i1 %cmp48, label %if.then49, label %for.body46.if.end68_crit_edge

for.body46.if.end68_crit_edge:                    ; preds = %for.body46
  %.pre250 = load double*, double** %data53, align 8, !tbaa !241
  %.pre251 = load i32, i32* %nrows1.i, align 8, !tbaa !138
  %.pre252 = mul nsw i32 %.pre251, %dec47
  br label %if.end68

if.then49:                                        ; preds = %for.body46
  %dec50 = add nsw i32 %i_theta.4226, -1
  %idxprom51 = sext i32 %dec50 to i64
  %arrayidx52 = getelementptr inbounds double, double* %thetab, i64 %idxprom51
  %14 = load double, double* %arrayidx52, align 8, !tbaa !75
  %15 = load double*, double** %data53, align 8, !tbaa !241
  %16 = load i32, i32* %nrows1.i, align 8, !tbaa !138
  %mul55 = mul nsw i32 %16, %dec47
  %add56 = add nsw i32 %mul55, 1
  %idxprom57 = sext i32 %add56 to i64
  %arrayidx58 = getelementptr inbounds double, double* %15, i64 %idxprom57
  %17 = load double, double* %arrayidx58, align 8, !tbaa !75
  %add59 = fadd fast double %17, %14
  store double %add59, double* %arrayidx52, align 8, !tbaa !75
  store double 0.000000e+00, double* %arrayidx58, align 8, !tbaa !75
  br label %if.end68

if.end68:                                         ; preds = %if.then49, %for.body46.if.end68_crit_edge
  %mul74.pre-phi = phi i32 [ %.pre252, %for.body46.if.end68_crit_edge ], [ %mul55, %if.then49 ]
  %18 = phi i32 [ %.pre251, %for.body46.if.end68_crit_edge ], [ %16, %if.then49 ]
  %19 = phi double* [ %.pre250, %for.body46.if.end68_crit_edge ], [ %15, %if.then49 ]
  %i_theta.5 = phi i32 [ %i_theta.4226, %for.body46.if.end68_crit_edge ], [ %dec50, %if.then49 ]
  %dec69 = add nsw i32 %i_theta.5, -1
  %idxprom70 = sext i32 %dec69 to i64
  %arrayidx71 = getelementptr inbounds double, double* %thetab, i64 %idxprom70
  %20 = load double, double* %arrayidx71, align 8, !tbaa !75
  %idxprom76 = sext i32 %mul74.pre-phi to i64
  %arrayidx77 = getelementptr inbounds double, double* %19, i64 %idxprom76
  %21 = load double, double* %arrayidx77, align 8, !tbaa !75
  %add78 = fadd fast double %21, %20
  store double %add78, double* %arrayidx71, align 8, !tbaa !75
  store double 0.000000e+00, double* %arrayidx77, align 8, !tbaa !75
  %dec88 = add nsw i32 %i.2228, -1
  %cmp45 = icmp ugt i32 %i.2228, 2
  br i1 %cmp45, label %for.body46, label %for.inc90, !llvm.loop !290

for.inc90:                                        ; preds = %if.end68
  %.lcssa2 = phi i32 [ %18, %if.end68 ]
  %.lcssa = phi double* [ %19, %if.end68 ]
  %dec69.lcssa = phi i32 [ %dec69, %if.end68 ]
  %dec47.lcssa = phi i32 [ %dec47, %if.end68 ]
  %dec91 = add nsw i32 %i_finger.1231, -1
  %cmp42.not = icmp eq i32 %i_finger.1231, 0
  br i1 %cmp42.not, label %for.end92, label %for.body43, !llvm.loop !291

for.end92:                                        ; preds = %for.inc90
  %.lcssa2.lcssa = phi i32 [ %.lcssa2, %for.inc90 ]
  %.lcssa.lcssa = phi double* [ %.lcssa, %for.inc90 ]
  %cmp96223 = icmp sgt i32 %.lcssa2.lcssa, 0
  br i1 %cmp96223, label %for.body97.lr.ph, label %for.end136

for.body97.lr.ph:                                 ; preds = %for.end92
  %mul103 = shl nuw nsw i32 %.lcssa2.lcssa, 1
  %22 = zext i32 %.lcssa2.lcssa to i64
  %23 = sext i32 %mul103 to i64
  br label %for.body97

for.body97:                                       ; preds = %for.body97, %for.body97.lr.ph
  %indvars.iv = phi i64 [ %22, %for.body97.lr.ph ], [ %indvars.iv.next, %for.body97 ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %24 = add nuw nsw i64 %indvars.iv, 2
  %arrayidx100 = getelementptr inbounds double, double* %thetab, i64 %24
  %25 = load double, double* %arrayidx100, align 8, !tbaa !75
  %26 = add nsw i64 %indvars.iv.next, %23
  %arrayidx106 = getelementptr inbounds double, double* %.lcssa.lcssa, i64 %26
  %27 = load double, double* %arrayidx106, align 8, !tbaa !75
  %add107 = fadd fast double %27, %25
  store double %add107, double* %arrayidx100, align 8, !tbaa !75
  store double 0.000000e+00, double* %arrayidx106, align 8, !tbaa !75
  %28 = add nsw i64 %indvars.iv.next, %22
  %arrayidx122 = getelementptr inbounds double, double* %.lcssa.lcssa, i64 %28
  store double 0.000000e+00, double* %arrayidx122, align 8, !tbaa !75
  %arrayidx124 = getelementptr inbounds double, double* %thetab, i64 %indvars.iv.next
  %29 = load double, double* %arrayidx124, align 8, !tbaa !75
  %arrayidx127 = getelementptr inbounds double, double* %.lcssa.lcssa, i64 %indvars.iv.next
  %30 = load double, double* %arrayidx127, align 8, !tbaa !75
  %add128 = fadd fast double %30, %29
  store double %add128, double* %arrayidx124, align 8, !tbaa !75
  store double 0.000000e+00, double* %arrayidx127, align 8, !tbaa !75
  %cmp96 = icmp sgt i64 %indvars.iv, 1
  br i1 %cmp96, label %for.body97, label %for.end136, !llvm.loop !292

for.end136:                                       ; preds = %for.body97, %for.end92
  call void @resize_b(%struct.Matrix* %pose_params, %struct.Matrix_diff* %pose_paramsb, i32 3, i32 %add)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #38
  ret void
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @to_pose_params_c(i32 %count, double* nocapture readonly %theta, i8** nocapture readnone %bone_names, %struct.Matrix* nocapture %pose_params) local_unnamed_addr #5 {
entry:
  %add = add nsw i32 %count, 3
  %nrows1.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 0
  %0 = load i32, i32* %nrows1.i, align 8, !tbaa !138
  %ncols2.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 1
  %1 = load i32, i32* %ncols2.i, align 4, !tbaa !139
  %mul.i = mul nsw i32 %1, %0
  %mul3.i = mul i32 %add, 3
  %cmp.not.i = icmp eq i32 %mul.i, %mul3.i
  br i1 %cmp.not.i, label %resize_c.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %data.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 2
  %2 = bitcast double** %data.i to i8**
  %3 = load i8*, i8** %2, align 8, !tbaa !137
  %cmp4.not.i = icmp eq i8* %3, null
  br i1 %cmp4.not.i, label %if.end.i, label %if.then5.i

if.then5.i:                                       ; preds = %if.then.i
  tail call void @free(i8* nonnull %3) #38
  br label %if.end.i

if.end.i:                                         ; preds = %if.then5.i, %if.then.i
  %cmp8.i = icmp sgt i32 %mul3.i, 0
  br i1 %cmp8.i, label %resize_c.exit.thread, label %resize_c.exit.thread88

resize_c.exit.thread:                             ; preds = %if.end.i
  %conv31.i = zext i32 %mul3.i to i64
  %mul11.i = shl nuw nsw i64 %conv31.i, 3
  %call.i = tail call noalias i8* @malloc(i64 %mul11.i) #38
  store i8* %call.i, i8** %2, align 8, !tbaa !137
  store i32 %add, i32* %ncols2.i, align 4, !tbaa !139
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138
  br label %for.body.lr.ph.i

resize_c.exit.thread88:                           ; preds = %if.end.i
  store double* null, double** %data.i, align 8, !tbaa !137
  store i32 %add, i32* %ncols2.i, align 4, !tbaa !139
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138
  br label %fill_c.exit

resize_c.exit:                                    ; preds = %entry
  store i32 %add, i32* %ncols2.i, align 4, !tbaa !139
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138
  %cmp7.i = icmp sgt i32 %mul.i, 0
  br i1 %cmp7.i, label %resize_c.exit.for.body.lr.ph.i_crit_edge, label %fill_c.exit

resize_c.exit.for.body.lr.ph.i_crit_edge:         ; preds = %resize_c.exit
  %data.i86.phi.trans.insert = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 2
  %4 = bitcast double** %data.i86.phi.trans.insert to i8**
  %.pre108 = load i8*, i8** %4, align 8, !tbaa !137
  %.pre106 = zext i32 %mul3.i to i64
  %.pre107 = shl nuw nsw i64 %.pre106, 3
  br label %for.body.lr.ph.i

for.body.lr.ph.i:                                 ; preds = %resize_c.exit.for.body.lr.ph.i_crit_edge, %resize_c.exit.thread
  %.pre-phi = phi i64 [ %.pre107, %resize_c.exit.for.body.lr.ph.i_crit_edge ], [ %mul11.i, %resize_c.exit.thread ]
  %5 = phi i8* [ %.pre108, %resize_c.exit.for.body.lr.ph.i_crit_edge ], [ %call.i, %resize_c.exit.thread ]
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 %.pre-phi, i1 false)
  br label %fill_c.exit

fill_c.exit:                                      ; preds = %for.body.lr.ph.i, %resize_c.exit, %resize_c.exit.thread88
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 2
  %6 = load double*, double** %data, align 8, !tbaa !137
  br label %for.body

for.body:                                         ; preds = %for.body, %fill_c.exit
  %indvars.iv101 = phi i64 [ 0, %fill_c.exit ], [ %indvars.iv.next102, %for.body ]
  %arrayidx = getelementptr inbounds double, double* %theta, i64 %indvars.iv101
  %7 = load double, double* %arrayidx, align 8, !tbaa !75
  %arrayidx2 = getelementptr inbounds double, double* %6, i64 %indvars.iv101
  store double %7, double* %arrayidx2, align 8, !tbaa !75
  %8 = add nuw nsw i64 %indvars.iv101, 3
  %arrayidx7 = getelementptr inbounds double, double* %6, i64 %8
  store double 1.000000e+00, double* %arrayidx7, align 8, !tbaa !75
  %arrayidx10 = getelementptr inbounds double, double* %theta, i64 %8
  %9 = load double, double* %arrayidx10, align 8, !tbaa !75
  %10 = add nuw nsw i64 %indvars.iv101, 6
  %arrayidx16 = getelementptr inbounds double, double* %6, i64 %10
  store double %9, double* %arrayidx16, align 8, !tbaa !75
  %indvars.iv.next102 = add nuw nsw i64 %indvars.iv101, 1
  %exitcond105.not = icmp eq i64 %indvars.iv.next102, 3
  br i1 %exitcond105.not, label %for.cond20.preheader, label %for.body, !llvm.loop !293

for.cond20.preheader:                             ; preds = %for.end45, %for.body
  %i_finger.095 = phi i32 [ %inc48, %for.end45 ], [ 0, %for.body ]
  %i_pose_params.094 = phi i32 [ %inc46, %for.end45 ], [ 5, %for.body ]
  %i_theta.093 = phi i32 [ %i_theta.2.lcssa, %for.end45 ], [ 6, %for.body ]
  %11 = sext i32 %i_pose_params.094 to i64
  %12 = add i32 %i_pose_params.094, 3
  br label %for.body22

for.body22:                                       ; preds = %if.end, %for.cond20.preheader
  %indvars.iv = phi i64 [ %11, %for.cond20.preheader ], [ %indvars.iv.next, %if.end ]
  %i.192 = phi i32 [ 2, %for.cond20.preheader ], [ %inc44, %if.end ]
  %i_theta.190 = phi i32 [ %i_theta.093, %for.cond20.preheader ], [ %i_theta.2, %if.end ]
  %idxprom23 = sext i32 %i_theta.190 to i64
  %arrayidx24 = getelementptr inbounds double, double* %theta, i64 %idxprom23
  %13 = load double, double* %arrayidx24, align 8, !tbaa !75
  %14 = mul nsw i64 %indvars.iv, 3
  %arrayidx30 = getelementptr inbounds double, double* %6, i64 %14
  store double %13, double* %arrayidx30, align 8, !tbaa !75
  %inc31 = add nsw i32 %i_theta.190, 1
  %cmp32 = icmp eq i32 %i.192, 2
  br i1 %cmp32, label %if.then, label %if.end

if.then:                                          ; preds = %for.body22
  %idxprom33 = sext i32 %inc31 to i64
  %arrayidx34 = getelementptr inbounds double, double* %theta, i64 %idxprom33
  %15 = load double, double* %arrayidx34, align 8, !tbaa !75
  %16 = add nsw i64 %14, 1
  %arrayidx40 = getelementptr inbounds double, double* %6, i64 %16
  store double %15, double* %arrayidx40, align 8, !tbaa !75
  %inc41 = add nsw i32 %i_theta.190, 2
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body22
  %i_theta.2 = phi i32 [ %inc41, %if.then ], [ %inc31, %for.body22 ]
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %inc44 = add nuw nsw i32 %i.192, 1
  %lftr.wideiv1 = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %12, %lftr.wideiv1
  br i1 %exitcond, label %for.end45, label %for.body22, !llvm.loop !294

for.end45:                                        ; preds = %if.end
  %i_theta.2.lcssa = phi i32 [ %i_theta.2, %if.end ]
  %indvars.iv.lcssa = phi i64 [ %indvars.iv, %if.end ]
  %17 = trunc i64 %indvars.iv.lcssa to i32
  %inc46 = add nsw i32 %17, 2
  %inc48 = add nuw nsw i32 %i_finger.095, 1
  %exitcond99.not = icmp eq i32 %inc48, 5
  br i1 %exitcond99.not, label %for.end49, label %for.cond20.preheader, !llvm.loop !295

for.end49:                                        ; preds = %for.end45
  ret void
}

; Function Attrs: nofree nounwind willreturn
declare dso_local i64 @strtol(i8* readonly, i8** nocapture, i32) local_unnamed_addr #22

; Function Attrs: noreturn
declare dso_local void @_ZSt24__throw_invalid_argumentPKc(i8*) local_unnamed_addr #23

; Function Attrs: nounwind readnone willreturn
declare dso_local i32* @__errno_location() local_unnamed_addr #24

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_out_of_rangePKc(i8*) local_unnamed_addr #23

; Function Attrs: nofree nounwind willreturn
declare dso_local double @strtod(i8* readonly, i8** nocapture) local_unnamed_addr #22

; Function Attrs: inlinehint nounwind uwtable
define linkonce_odr dso_local void @_ZN20HandModelLightMatrixD2Ev(%class.HandModelLightMatrix* nonnull dereferenceable(169) %this) unnamed_addr #25 comdat align 2 {
entry:
  %_M_start.i.i = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %this, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0
  %0 = load %struct.Triangle*, %struct.Triangle** %_M_start.i.i, align 8, !tbaa !142
  %tobool.not.i.i.i = icmp eq %struct.Triangle* %0, null
  br i1 %tobool.not.i.i.i, label %_ZNSt6vectorI8TriangleSaIS0_EED2Ev.exit, label %if.then.i.i.i

if.then.i.i.i:                                    ; preds = %entry
  %1 = bitcast %struct.Triangle* %0 to i8*
  tail call void @_ZdlPv(i8* %1) #41
  br label %_ZNSt6vectorI8TriangleSaIS0_EED2Ev.exit

_ZNSt6vectorI8TriangleSaIS0_EED2Ev.exit:          ; preds = %if.then.i.i.i, %entry
  %is_data_owner_.i = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %this, i64 0, i32 5, i32 0
  %2 = load i8, i8* %is_data_owner_.i, align 8, !tbaa !68, !range !90
  %tobool.not.i = icmp eq i8 %2, 0
  br i1 %tobool.not.i, label %_ZN11LightMatrixIdED2Ev.exit, label %land.lhs.true.i

land.lhs.true.i:                                  ; preds = %_ZNSt6vectorI8TriangleSaIS0_EED2Ev.exit
  %data_.i = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %this, i64 0, i32 5, i32 3
  %3 = load double*, double** %data_.i, align 8, !tbaa !73
  %cmp.not.i = icmp eq double* %3, null
  br i1 %cmp.not.i, label %_ZN11LightMatrixIdED2Ev.exit, label %delete.notnull.i

delete.notnull.i:                                 ; preds = %land.lhs.true.i
  %4 = bitcast double* %3 to i8*
  tail call void @_ZdaPv(i8* %4) #41
  br label %_ZN11LightMatrixIdED2Ev.exit

_ZN11LightMatrixIdED2Ev.exit:                     ; preds = %delete.notnull.i, %land.lhs.true.i, %_ZNSt6vectorI8TriangleSaIS0_EED2Ev.exit
  %is_data_owner_.i2 = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %this, i64 0, i32 4, i32 0
  %5 = load i8, i8* %is_data_owner_.i2, align 8, !tbaa !68, !range !90
  %tobool.not.i3 = icmp eq i8 %5, 0
  br i1 %tobool.not.i3, label %_ZN11LightMatrixIdED2Ev.exit8, label %land.lhs.true.i6

land.lhs.true.i6:                                 ; preds = %_ZN11LightMatrixIdED2Ev.exit
  %data_.i4 = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %this, i64 0, i32 4, i32 3
  %6 = load double*, double** %data_.i4, align 8, !tbaa !73
  %cmp.not.i5 = icmp eq double* %6, null
  br i1 %cmp.not.i5, label %_ZN11LightMatrixIdED2Ev.exit8, label %delete.notnull.i7

delete.notnull.i7:                                ; preds = %land.lhs.true.i6
  %7 = bitcast double* %6 to i8*
  tail call void @_ZdaPv(i8* %7) #41
  br label %_ZN11LightMatrixIdED2Ev.exit8

_ZN11LightMatrixIdED2Ev.exit8:                    ; preds = %delete.notnull.i7, %land.lhs.true.i6, %_ZN11LightMatrixIdED2Ev.exit
  %_M_start.i = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %this, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0
  %8 = load %class.LightMatrix*, %class.LightMatrix** %_M_start.i, align 8, !tbaa !143
  %_M_finish.i = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %this, i64 0, i32 3, i32 0, i32 0, i32 0, i32 1
  %9 = load %class.LightMatrix*, %class.LightMatrix** %_M_finish.i, align 8, !tbaa !65
  %cmp.not3.i.i.i.i = icmp eq %class.LightMatrix* %8, %9
  br i1 %cmp.not3.i.i.i.i, label %_ZSt8_DestroyIP11LightMatrixIdES1_EvT_S3_RSaIT0_E.exit.i, label %for.body.i.i.i.i

for.body.i.i.i.i:                                 ; preds = %_ZSt8_DestroyI11LightMatrixIdEEvPT_.exit.i.i.i.i, %_ZN11LightMatrixIdED2Ev.exit8
  %__first.addr.04.i.i.i.i = phi %class.LightMatrix* [ %incdec.ptr.i.i.i.i, %_ZSt8_DestroyI11LightMatrixIdEEvPT_.exit.i.i.i.i ], [ %8, %_ZN11LightMatrixIdED2Ev.exit8 ]
  %is_data_owner_.i.i.i.i.i.i = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %__first.addr.04.i.i.i.i, i64 0, i32 0
  %10 = load i8, i8* %is_data_owner_.i.i.i.i.i.i, align 8, !tbaa !68, !range !90
  %tobool.not.i.i.i.i.i.i = icmp eq i8 %10, 0
  br i1 %tobool.not.i.i.i.i.i.i, label %_ZSt8_DestroyI11LightMatrixIdEEvPT_.exit.i.i.i.i, label %land.lhs.true.i.i.i.i.i.i

land.lhs.true.i.i.i.i.i.i:                        ; preds = %for.body.i.i.i.i
  %data_.i.i.i.i.i.i = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %__first.addr.04.i.i.i.i, i64 0, i32 3
  %11 = load double*, double** %data_.i.i.i.i.i.i, align 8, !tbaa !73
  %cmp.not.i.i.i.i.i.i = icmp eq double* %11, null
  br i1 %cmp.not.i.i.i.i.i.i, label %_ZSt8_DestroyI11LightMatrixIdEEvPT_.exit.i.i.i.i, label %delete.notnull.i.i.i.i.i.i

delete.notnull.i.i.i.i.i.i:                       ; preds = %land.lhs.true.i.i.i.i.i.i
  %12 = bitcast double* %11 to i8*
  tail call void @_ZdaPv(i8* %12) #41
  br label %_ZSt8_DestroyI11LightMatrixIdEEvPT_.exit.i.i.i.i

_ZSt8_DestroyI11LightMatrixIdEEvPT_.exit.i.i.i.i: ; preds = %delete.notnull.i.i.i.i.i.i, %land.lhs.true.i.i.i.i.i.i, %for.body.i.i.i.i
  %incdec.ptr.i.i.i.i = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %__first.addr.04.i.i.i.i, i64 1
  %cmp.not.i.i.i.i = icmp eq %class.LightMatrix* %incdec.ptr.i.i.i.i, %9
  br i1 %cmp.not.i.i.i.i, label %_ZSt8_DestroyIP11LightMatrixIdES1_EvT_S3_RSaIT0_E.exit.loopexit.i, label %for.body.i.i.i.i, !llvm.loop !296

_ZSt8_DestroyIP11LightMatrixIdES1_EvT_S3_RSaIT0_E.exit.loopexit.i: ; preds = %_ZSt8_DestroyI11LightMatrixIdEEvPT_.exit.i.i.i.i
  %.pre.i = load %class.LightMatrix*, %class.LightMatrix** %_M_start.i, align 8, !tbaa !143
  br label %_ZSt8_DestroyIP11LightMatrixIdES1_EvT_S3_RSaIT0_E.exit.i

_ZSt8_DestroyIP11LightMatrixIdES1_EvT_S3_RSaIT0_E.exit.i: ; preds = %_ZSt8_DestroyIP11LightMatrixIdES1_EvT_S3_RSaIT0_E.exit.loopexit.i, %_ZN11LightMatrixIdED2Ev.exit8
  %13 = phi %class.LightMatrix* [ %.pre.i, %_ZSt8_DestroyIP11LightMatrixIdES1_EvT_S3_RSaIT0_E.exit.loopexit.i ], [ %8, %_ZN11LightMatrixIdED2Ev.exit8 ]
  %tobool.not.i.i.i9 = icmp eq %class.LightMatrix* %13, null
  br i1 %tobool.not.i.i.i9, label %_ZNSt6vectorI11LightMatrixIdESaIS1_EED2Ev.exit, label %if.then.i.i.i10

if.then.i.i.i10:                                  ; preds = %_ZSt8_DestroyIP11LightMatrixIdES1_EvT_S3_RSaIT0_E.exit.i
  %14 = getelementptr %class.LightMatrix, %class.LightMatrix* %13, i64 0, i32 0
  tail call void @_ZdlPv(i8* %14) #41
  br label %_ZNSt6vectorI11LightMatrixIdESaIS1_EED2Ev.exit

_ZNSt6vectorI11LightMatrixIdESaIS1_EED2Ev.exit:   ; preds = %if.then.i.i.i10, %_ZSt8_DestroyIP11LightMatrixIdES1_EvT_S3_RSaIT0_E.exit.i
  %_M_start.i11 = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %this, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %15 = load %class.LightMatrix*, %class.LightMatrix** %_M_start.i11, align 8, !tbaa !143
  %_M_finish.i12 = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %this, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1
  %16 = load %class.LightMatrix*, %class.LightMatrix** %_M_finish.i12, align 8, !tbaa !65
  %cmp.not3.i.i.i.i13 = icmp eq %class.LightMatrix* %15, %16
  br i1 %cmp.not3.i.i.i.i13, label %_ZSt8_DestroyIP11LightMatrixIdES1_EvT_S3_RSaIT0_E.exit.i28, label %for.body.i.i.i.i17

for.body.i.i.i.i17:                               ; preds = %_ZSt8_DestroyI11LightMatrixIdEEvPT_.exit.i.i.i.i24, %_ZNSt6vectorI11LightMatrixIdESaIS1_EED2Ev.exit
  %__first.addr.04.i.i.i.i14 = phi %class.LightMatrix* [ %incdec.ptr.i.i.i.i22, %_ZSt8_DestroyI11LightMatrixIdEEvPT_.exit.i.i.i.i24 ], [ %15, %_ZNSt6vectorI11LightMatrixIdESaIS1_EED2Ev.exit ]
  %is_data_owner_.i.i.i.i.i.i15 = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %__first.addr.04.i.i.i.i14, i64 0, i32 0
  %17 = load i8, i8* %is_data_owner_.i.i.i.i.i.i15, align 8, !tbaa !68, !range !90
  %tobool.not.i.i.i.i.i.i16 = icmp eq i8 %17, 0
  br i1 %tobool.not.i.i.i.i.i.i16, label %_ZSt8_DestroyI11LightMatrixIdEEvPT_.exit.i.i.i.i24, label %land.lhs.true.i.i.i.i.i.i20

land.lhs.true.i.i.i.i.i.i20:                      ; preds = %for.body.i.i.i.i17
  %data_.i.i.i.i.i.i18 = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %__first.addr.04.i.i.i.i14, i64 0, i32 3
  %18 = load double*, double** %data_.i.i.i.i.i.i18, align 8, !tbaa !73
  %cmp.not.i.i.i.i.i.i19 = icmp eq double* %18, null
  br i1 %cmp.not.i.i.i.i.i.i19, label %_ZSt8_DestroyI11LightMatrixIdEEvPT_.exit.i.i.i.i24, label %delete.notnull.i.i.i.i.i.i21

delete.notnull.i.i.i.i.i.i21:                     ; preds = %land.lhs.true.i.i.i.i.i.i20
  %19 = bitcast double* %18 to i8*
  tail call void @_ZdaPv(i8* %19) #41
  br label %_ZSt8_DestroyI11LightMatrixIdEEvPT_.exit.i.i.i.i24

_ZSt8_DestroyI11LightMatrixIdEEvPT_.exit.i.i.i.i24: ; preds = %delete.notnull.i.i.i.i.i.i21, %land.lhs.true.i.i.i.i.i.i20, %for.body.i.i.i.i17
  %incdec.ptr.i.i.i.i22 = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %__first.addr.04.i.i.i.i14, i64 1
  %cmp.not.i.i.i.i23 = icmp eq %class.LightMatrix* %incdec.ptr.i.i.i.i22, %16
  br i1 %cmp.not.i.i.i.i23, label %_ZSt8_DestroyIP11LightMatrixIdES1_EvT_S3_RSaIT0_E.exit.loopexit.i26, label %for.body.i.i.i.i17, !llvm.loop !296

_ZSt8_DestroyIP11LightMatrixIdES1_EvT_S3_RSaIT0_E.exit.loopexit.i26: ; preds = %_ZSt8_DestroyI11LightMatrixIdEEvPT_.exit.i.i.i.i24
  %.pre.i25 = load %class.LightMatrix*, %class.LightMatrix** %_M_start.i11, align 8, !tbaa !143
  br label %_ZSt8_DestroyIP11LightMatrixIdES1_EvT_S3_RSaIT0_E.exit.i28

_ZSt8_DestroyIP11LightMatrixIdES1_EvT_S3_RSaIT0_E.exit.i28: ; preds = %_ZSt8_DestroyIP11LightMatrixIdES1_EvT_S3_RSaIT0_E.exit.loopexit.i26, %_ZNSt6vectorI11LightMatrixIdESaIS1_EED2Ev.exit
  %20 = phi %class.LightMatrix* [ %.pre.i25, %_ZSt8_DestroyIP11LightMatrixIdES1_EvT_S3_RSaIT0_E.exit.loopexit.i26 ], [ %15, %_ZNSt6vectorI11LightMatrixIdESaIS1_EED2Ev.exit ]
  %tobool.not.i.i.i27 = icmp eq %class.LightMatrix* %20, null
  br i1 %tobool.not.i.i.i27, label %_ZNSt6vectorI11LightMatrixIdESaIS1_EED2Ev.exit30, label %if.then.i.i.i29

if.then.i.i.i29:                                  ; preds = %_ZSt8_DestroyIP11LightMatrixIdES1_EvT_S3_RSaIT0_E.exit.i28
  %21 = getelementptr %class.LightMatrix, %class.LightMatrix* %20, i64 0, i32 0
  tail call void @_ZdlPv(i8* %21) #41
  br label %_ZNSt6vectorI11LightMatrixIdESaIS1_EED2Ev.exit30

_ZNSt6vectorI11LightMatrixIdESaIS1_EED2Ev.exit30: ; preds = %if.then.i.i.i29, %_ZSt8_DestroyIP11LightMatrixIdES1_EvT_S3_RSaIT0_E.exit.i28
  %_M_start.i.i31 = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %this, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %22 = load i32*, i32** %_M_start.i.i31, align 8, !tbaa !64
  %tobool.not.i.i.i32 = icmp eq i32* %22, null
  br i1 %tobool.not.i.i.i32, label %_ZNSt6vectorIiSaIiEED2Ev.exit, label %if.then.i.i.i33

if.then.i.i.i33:                                  ; preds = %_ZNSt6vectorI11LightMatrixIdESaIS1_EED2Ev.exit30
  %23 = bitcast i32* %22 to i8*
  tail call void @_ZdlPv(i8* %23) #41
  br label %_ZNSt6vectorIiSaIiEED2Ev.exit

_ZNSt6vectorIiSaIiEED2Ev.exit:                    ; preds = %if.then.i.i.i33, %_ZNSt6vectorI11LightMatrixIdESaIS1_EED2Ev.exit30
  %_M_start.i34 = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %this, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %24 = load %"class.std::__cxx11::basic_string"*, %"class.std::__cxx11::basic_string"** %_M_start.i34, align 8, !tbaa !81
  %_M_finish.i35 = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %this, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %25 = load %"class.std::__cxx11::basic_string"*, %"class.std::__cxx11::basic_string"** %_M_finish.i35, align 8, !tbaa !32
  %cmp.not3.i.i.i.i36 = icmp eq %"class.std::__cxx11::basic_string"* %24, %25
  br i1 %cmp.not3.i.i.i.i36, label %_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E.exit.i, label %for.body.i.i.i.i38

for.body.i.i.i.i38:                               ; preds = %_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_.exit.i.i.i.i, %_ZNSt6vectorIiSaIiEED2Ev.exit
  %__first.addr.04.i.i.i.i37 = phi %"class.std::__cxx11::basic_string"* [ %incdec.ptr.i.i.i.i39, %_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_.exit.i.i.i.i ], [ %24, %_ZNSt6vectorIiSaIiEED2Ev.exit ]
  %_M_p.i.i.i.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__first.addr.04.i.i.i.i37, i64 0, i32 0, i32 0
  %26 = load i8*, i8** %_M_p.i.i.i.i.i.i.i.i.i, align 8, !tbaa !17
  %27 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__first.addr.04.i.i.i.i37, i64 0, i32 2
  %arraydecay.i.i.i.i.i.i.i.i.i = bitcast %union.anon* %27 to i8*
  %cmp.i.i.i.i.i.i.i.i = icmp eq i8* %26, %arraydecay.i.i.i.i.i.i.i.i.i
  br i1 %cmp.i.i.i.i.i.i.i.i, label %_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_.exit.i.i.i.i, label %if.then.i.i.i.i.i.i.i

if.then.i.i.i.i.i.i.i:                            ; preds = %for.body.i.i.i.i38
  tail call void @_ZdlPv(i8* %26) #41
  br label %_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_.exit.i.i.i.i

_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_.exit.i.i.i.i: ; preds = %if.then.i.i.i.i.i.i.i, %for.body.i.i.i.i38
  %incdec.ptr.i.i.i.i39 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__first.addr.04.i.i.i.i37, i64 1
  %cmp.not.i.i.i.i40 = icmp eq %"class.std::__cxx11::basic_string"* %incdec.ptr.i.i.i.i39, %25
  br i1 %cmp.not.i.i.i.i40, label %_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E.exit.loopexit.i, label %for.body.i.i.i.i38, !llvm.loop !297

_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E.exit.loopexit.i: ; preds = %_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_.exit.i.i.i.i
  %.pre.i41 = load %"class.std::__cxx11::basic_string"*, %"class.std::__cxx11::basic_string"** %_M_start.i34, align 8, !tbaa !81
  br label %_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E.exit.i

_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E.exit.i: ; preds = %_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E.exit.loopexit.i, %_ZNSt6vectorIiSaIiEED2Ev.exit
  %28 = phi %"class.std::__cxx11::basic_string"* [ %.pre.i41, %_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E.exit.loopexit.i ], [ %24, %_ZNSt6vectorIiSaIiEED2Ev.exit ]
  %tobool.not.i.i.i42 = icmp eq %"class.std::__cxx11::basic_string"* %28, null
  br i1 %tobool.not.i.i.i42, label %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev.exit, label %if.then.i.i.i43

if.then.i.i.i43:                                  ; preds = %_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E.exit.i
  %29 = bitcast %"class.std::__cxx11::basic_string"* %28 to i8*
  tail call void @_ZdlPv(i8* %29) #41
  br label %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev.exit

_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev.exit: ; preds = %if.then.i.i.i43, %_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E.exit.i
  ret void
}

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdaPv(i8*) local_unnamed_addr #26

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #26

declare dso_local nonnull align 8 dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32), i8*, i64) local_unnamed_addr #3

; Function Attrs: argmemonly nofree nounwind readonly willreturn
declare dso_local i64 @strlen(i8* nocapture) local_unnamed_addr #4

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #23

; Function Attrs: nofree
declare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32), i64* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #27

; Function Attrs: noreturn
declare dso_local void @_ZSt19__throw_logic_errorPKc(i8*) local_unnamed_addr #23

; Function Attrs: nounwind uwtable mustprogress
define linkonce_odr dso_local void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %this, i1 zeroext %check_parents) local_unnamed_addr #5 comdat align 2 {
entry:
  %m_type = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %this, i64 0, i32 0
  %0 = load i8, i8* %m_type, align 8, !tbaa !145
  switch i8 %0, label %cond.end29 [
    i8 1, label %lor.rhs
    i8 2, label %lor.rhs5
    i8 3, label %lor.rhs14
    i8 8, label %lor.rhs23
  ]

lor.rhs:                                          ; preds = %entry
  %object = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %this, i64 0, i32 1, i32 0
  %1 = load %"class.std::map"*, %"class.std::map"** %object, align 8, !tbaa !21
  %cmp2.not = icmp eq %"class.std::map"* %1, null
  br i1 %cmp2.not, label %cond.false, label %cond.end29

cond.false:                                       ; preds = %lor.rhs
  tail call void @__assert_fail(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.35, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.36, i64 0, i64 0), i32 19377, i8* getelementptr inbounds ([359 x i8], [359 x i8]* @__PRETTY_FUNCTION__._ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb, i64 0, i64 0)) #40
  unreachable

lor.rhs5:                                         ; preds = %entry
  %m_value6 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %this, i64 0, i32 1
  %array = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value6 to %"class.std::vector.27"**
  %2 = load %"class.std::vector.27"*, %"class.std::vector.27"** %array, align 8, !tbaa !21
  %cmp7.not = icmp eq %"class.std::vector.27"* %2, null
  br i1 %cmp7.not, label %cond.false10, label %cond.end29

cond.false10:                                     ; preds = %lor.rhs5
  tail call void @__assert_fail(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.37, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.36, i64 0, i64 0), i32 19378, i8* getelementptr inbounds ([359 x i8], [359 x i8]* @__PRETTY_FUNCTION__._ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb, i64 0, i64 0)) #40
  unreachable

lor.rhs14:                                        ; preds = %entry
  %m_value15 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %this, i64 0, i32 1
  %string = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value15 to %"class.std::__cxx11::basic_string"**
  %3 = load %"class.std::__cxx11::basic_string"*, %"class.std::__cxx11::basic_string"** %string, align 8, !tbaa !21
  %cmp16.not = icmp eq %"class.std::__cxx11::basic_string"* %3, null
  br i1 %cmp16.not, label %cond.false19, label %cond.end29

cond.false19:                                     ; preds = %lor.rhs14
  tail call void @__assert_fail(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.38, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.36, i64 0, i64 0), i32 19379, i8* getelementptr inbounds ([359 x i8], [359 x i8]* @__PRETTY_FUNCTION__._ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb, i64 0, i64 0)) #40
  unreachable

lor.rhs23:                                        ; preds = %entry
  %m_value24 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %this, i64 0, i32 1
  %binary = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value24 to %"class.nlohmann::json_v3_11_1::byte_container_with_subtype"**
  %4 = load %"class.nlohmann::json_v3_11_1::byte_container_with_subtype"*, %"class.nlohmann::json_v3_11_1::byte_container_with_subtype"** %binary, align 8, !tbaa !21
  %cmp25.not = icmp eq %"class.nlohmann::json_v3_11_1::byte_container_with_subtype"* %4, null
  br i1 %cmp25.not, label %cond.false28, label %cond.end29

cond.false28:                                     ; preds = %lor.rhs23
  tail call void @__assert_fail(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.39, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.36, i64 0, i64 0), i32 19380, i8* getelementptr inbounds ([359 x i8], [359 x i8]* @__PRETTY_FUNCTION__._ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb, i64 0, i64 0)) #40
  unreachable

cond.end29:                                       ; preds = %lor.rhs23, %lor.rhs14, %lor.rhs5, %lor.rhs, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local void @_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE10json_value7destroyENS0_6detail7value_tE(%"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* nonnull dereferenceable(8) %this, i8 zeroext %t) local_unnamed_addr #0 comdat align 2 {
entry:
  %stack = alloca %"class.std::vector.27", align 8
  %current_item = alloca %"class.nlohmann::json_v3_11_1::basic_json", align 8
  %0 = add i8 %t, -1
  %1 = icmp ult i8 %0, 2
  br i1 %1, label %if.then, label %if.end80

if.then:                                          ; preds = %entry
  %cmp = icmp eq i8 %t, 2
  %2 = bitcast %"class.std::vector.27"* %stack to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %2) #38
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %2, i8 0, i64 24, i1 false) #38
  br i1 %cmp, label %if.then4, label %if.else

if.then4:                                         ; preds = %if.then
  %array = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %this to %"class.std::vector.27"**
  %3 = load %"class.std::vector.27"*, %"class.std::vector.27"** %array, align 8, !tbaa !21
  %_M_finish.i121 = getelementptr inbounds %"class.std::vector.27", %"class.std::vector.27"* %3, i64 0, i32 0, i32 0, i32 0, i32 1
  %4 = load %"class.nlohmann::json_v3_11_1::basic_json"*, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_finish.i121, align 8, !tbaa !178
  %_M_start.i122 = getelementptr inbounds %"class.std::vector.27", %"class.std::vector.27"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load %"class.nlohmann::json_v3_11_1::basic_json"*, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_start.i122, align 8, !tbaa !298
  %sub.ptr.lhs.cast.i = ptrtoint %"class.nlohmann::json_v3_11_1::basic_json"* %4 to i64
  %sub.ptr.rhs.cast.i = ptrtoint %"class.nlohmann::json_v3_11_1::basic_json"* %5 to i64
  %sub.ptr.sub.i = sub i64 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i
  %sub.ptr.div.i = ashr exact i64 %sub.ptr.sub.i, 4
  call void @_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE7reserveEm(%"class.std::vector.27"* nonnull dereferenceable(24) %stack, i64 %sub.ptr.div.i)
  %6 = load %"class.std::vector.27"*, %"class.std::vector.27"** %array, align 8, !tbaa !21
  %_M_start.i120 = getelementptr inbounds %"class.std::vector.27", %"class.std::vector.27"* %6, i64 0, i32 0, i32 0, i32 0, i32 0
  %7 = load %"class.nlohmann::json_v3_11_1::basic_json"*, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_start.i120, align 8, !tbaa !60
  %_M_finish.i119 = getelementptr inbounds %"class.std::vector.27", %"class.std::vector.27"* %6, i64 0, i32 0, i32 0, i32 0, i32 1
  %8 = load %"class.nlohmann::json_v3_11_1::basic_json"*, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_finish.i119, align 8, !tbaa !60
  %sub.ptr.lhs.cast.i.i152 = ptrtoint %"class.nlohmann::json_v3_11_1::basic_json"* %8 to i64
  %sub.ptr.rhs.cast.i.i153 = ptrtoint %"class.nlohmann::json_v3_11_1::basic_json"* %7 to i64
  %sub.ptr.sub.i.i154 = sub i64 %sub.ptr.lhs.cast.i.i152, %sub.ptr.rhs.cast.i.i153
  %cmp.i.i158232 = icmp sgt i64 %sub.ptr.sub.i.i154, 0
  br i1 %cmp.i.i158232, label %for.body.i.i162.lr.ph, label %if.end

for.body.i.i162.lr.ph:                            ; preds = %if.then4
  %sub.ptr.div.i.i155253 = lshr exact i64 %sub.ptr.sub.i.i154, 4
  %_M_finish.i190 = getelementptr inbounds %"class.std::vector.27", %"class.std::vector.27"* %stack, i64 0, i32 0, i32 0, i32 0, i32 1
  %_M_end_of_storage.i191 = getelementptr inbounds %"class.std::vector.27", %"class.std::vector.27"* %stack, i64 0, i32 0, i32 0, i32 0, i32 2
  br label %for.body.i.i162

for.body.i.i162:                                  ; preds = %_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE12emplace_backIJSD_EEEvDpOT_.exit202, %for.body.i.i162.lr.ph
  %__n.0.i.i157235 = phi i64 [ %sub.ptr.div.i.i155253, %for.body.i.i162.lr.ph ], [ %dec.i.i161, %_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE12emplace_backIJSD_EEEvDpOT_.exit202 ]
  %__first.addr.0.i.i156233 = phi %"class.nlohmann::json_v3_11_1::basic_json"* [ %7, %for.body.i.i162.lr.ph ], [ %incdec.ptr.i.i160, %_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE12emplace_backIJSD_EEEvDpOT_.exit202 ]
  %9 = load %"class.nlohmann::json_v3_11_1::basic_json"*, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_finish.i190, align 8, !tbaa !178
  %10 = load %"class.nlohmann::json_v3_11_1::basic_json"*, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_end_of_storage.i191, align 8, !tbaa !176
  %cmp.not.i192 = icmp eq %"class.nlohmann::json_v3_11_1::basic_json"* %9, %10
  br i1 %cmp.not.i192, label %if.else.i201, label %if.then.i199

if.then.i199:                                     ; preds = %for.body.i.i162
  %m_type.i.i.i.i193 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %9, i64 0, i32 0
  %m_type2.i.i.i.i194 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %__first.addr.0.i.i156233, i64 0, i32 0
  %11 = load i8, i8* %m_type2.i.i.i.i194, align 8, !tbaa !148
  store i8 %11, i8* %m_type.i.i.i.i193, align 8, !tbaa !145
  %m_value.i.i.i.i195 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %9, i64 0, i32 1
  %m_value3.i.i.i.i196 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %__first.addr.0.i.i156233, i64 0, i32 1
  %12 = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value3.i.i.i.i196 to i64*
  %13 = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value.i.i.i.i195 to i64*
  %14 = load i64, i64* %12, align 8
  store i64 %14, i64* %13, align 8
  call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %__first.addr.0.i.i156233, i1 zeroext false) #38
  store i8 0, i8* %m_type2.i.i.i.i194, align 8, !tbaa !145
  %ref.tmp.sroa.0.0..sroa_idx.i.i.i.i197 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %__first.addr.0.i.i156233, i64 0, i32 1, i32 0
  store %"class.std::map"* null, %"class.std::map"** %ref.tmp.sroa.0.0..sroa_idx.i.i.i.i197, align 8, !tbaa.struct !179
  call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %9, i1 zeroext true) #38
  %15 = load %"class.nlohmann::json_v3_11_1::basic_json"*, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_finish.i190, align 8, !tbaa !178
  %incdec.ptr.i198 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %15, i64 1
  store %"class.nlohmann::json_v3_11_1::basic_json"* %incdec.ptr.i198, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_finish.i190, align 8, !tbaa !178
  br label %_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE12emplace_backIJSD_EEEvDpOT_.exit202

if.else.i201:                                     ; preds = %for.body.i.i162
  call void @_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE17_M_realloc_insertIJSD_EEEvN9__gnu_cxx17__normal_iteratorIPSD_SF_EEDpOT_(%"class.std::vector.27"* nonnull dereferenceable(24) %stack, %"class.nlohmann::json_v3_11_1::basic_json"* %9, %"class.nlohmann::json_v3_11_1::basic_json"* nonnull align 8 dereferenceable(16) %__first.addr.0.i.i156233) #38
  br label %_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE12emplace_backIJSD_EEEvDpOT_.exit202

_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE12emplace_backIJSD_EEEvDpOT_.exit202: ; preds = %if.else.i201, %if.then.i199
  %incdec.ptr.i.i160 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %__first.addr.0.i.i156233, i64 1
  %dec.i.i161 = add nsw i64 %__n.0.i.i157235, -1
  %cmp.i.i158 = icmp sgt i64 %__n.0.i.i157235, 1
  br i1 %cmp.i.i158, label %for.body.i.i162, label %if.end, !llvm.loop !299

if.else:                                          ; preds = %if.then
  %object = getelementptr inbounds %"union.nlohmann::json_v3_11_1::basic_json<>::json_value", %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %this, i64 0, i32 0
  %16 = load %"class.std::map"*, %"class.std::map"** %object, align 8, !tbaa !21
  %17 = getelementptr inbounds %"class.std::map", %"class.std::map"* %16, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %_M_node_count.i.i = getelementptr inbounds i8, i8* %17, i64 40
  %18 = bitcast i8* %_M_node_count.i.i to i64*
  %19 = load i64, i64* %18, align 8, !tbaa !171
  call void @_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE7reserveEm(%"class.std::vector.27"* nonnull dereferenceable(24) %stack, i64 %19)
  %20 = load %"class.std::map"*, %"class.std::map"** %object, align 8, !tbaa !21
  %21 = getelementptr inbounds %"class.std::map", %"class.std::map"* %20, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %_M_left.i.i118 = getelementptr inbounds i8, i8* %21, i64 24
  %22 = bitcast i8* %_M_left.i.i118 to %"struct.std::_Rb_tree_node_base"**
  %23 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %22, align 8, !tbaa !166
  %add.ptr.i.i116 = getelementptr inbounds i8, i8* %21, i64 8
  %_M_header.i.i117 = bitcast i8* %add.ptr.i.i116 to %"struct.std::_Rb_tree_node_base"*
  %cmp.i115.not236 = icmp eq %"struct.std::_Rb_tree_node_base"* %23, %_M_header.i.i117
  br i1 %cmp.i115.not236, label %if.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.else
  %_M_finish.i131 = getelementptr inbounds %"class.std::vector.27", %"class.std::vector.27"* %stack, i64 0, i32 0, i32 0, i32 0, i32 1
  %_M_end_of_storage.i = getelementptr inbounds %"class.std::vector.27", %"class.std::vector.27"* %stack, i64 0, i32 0, i32 0, i32 0, i32 2
  br label %for.body

for.body:                                         ; preds = %_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE12emplace_backIJSD_EEEvDpOT_.exit, %for.body.lr.ph
  %__begin0.sroa.0.0237 = phi %"struct.std::_Rb_tree_node_base"* [ %23, %for.body.lr.ph ], [ %call.i111, %_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE12emplace_backIJSD_EEEvDpOT_.exit ]
  %second = getelementptr inbounds %"struct.std::_Rb_tree_node_base", %"struct.std::_Rb_tree_node_base"* %__begin0.sroa.0.0237, i64 2
  %24 = bitcast %"struct.std::_Rb_tree_node_base"* %second to %"class.nlohmann::json_v3_11_1::basic_json"*
  %25 = load %"class.nlohmann::json_v3_11_1::basic_json"*, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_finish.i131, align 8, !tbaa !178
  %26 = load %"class.nlohmann::json_v3_11_1::basic_json"*, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_end_of_storage.i, align 8, !tbaa !176
  %cmp.not.i = icmp eq %"class.nlohmann::json_v3_11_1::basic_json"* %25, %26
  br i1 %cmp.not.i, label %if.else.i, label %if.then.i

if.then.i:                                        ; preds = %for.body
  %m_type.i.i.i.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %25, i64 0, i32 0
  %m_type2.i.i.i.i = bitcast %"struct.std::_Rb_tree_node_base"* %second to i8*
  %27 = load i8, i8* %m_type2.i.i.i.i, align 8, !tbaa !148
  store i8 %27, i8* %m_type.i.i.i.i, align 8, !tbaa !145
  %m_value.i.i.i.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %25, i64 0, i32 1
  %m_value3.i.i.i.i = getelementptr inbounds %"struct.std::_Rb_tree_node_base", %"struct.std::_Rb_tree_node_base"* %__begin0.sroa.0.0237, i64 2, i32 1
  %28 = bitcast %"struct.std::_Rb_tree_node_base"** %m_value3.i.i.i.i to i64*
  %29 = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value.i.i.i.i to i64*
  %30 = load i64, i64* %28, align 8
  store i64 %30, i64* %29, align 8
  call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %24, i1 zeroext false) #38
  store i8 0, i8* %m_type2.i.i.i.i, align 8, !tbaa !145
  %31 = bitcast %"struct.std::_Rb_tree_node_base"** %m_value3.i.i.i.i to %"class.std::map"**
  store %"class.std::map"* null, %"class.std::map"** %31, align 8, !tbaa.struct !179
  call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %25, i1 zeroext true) #38
  %32 = load %"class.nlohmann::json_v3_11_1::basic_json"*, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_finish.i131, align 8, !tbaa !178
  %incdec.ptr.i132 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %32, i64 1
  store %"class.nlohmann::json_v3_11_1::basic_json"* %incdec.ptr.i132, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_finish.i131, align 8, !tbaa !178
  br label %_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE12emplace_backIJSD_EEEvDpOT_.exit

if.else.i:                                        ; preds = %for.body
  call void @_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE17_M_realloc_insertIJSD_EEEvN9__gnu_cxx17__normal_iteratorIPSD_SF_EEDpOT_(%"class.std::vector.27"* nonnull dereferenceable(24) %stack, %"class.nlohmann::json_v3_11_1::basic_json"* %25, %"class.nlohmann::json_v3_11_1::basic_json"* nonnull align 8 dereferenceable(16) %24) #38
  br label %_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE12emplace_backIJSD_EEEvDpOT_.exit

_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE12emplace_backIJSD_EEEvDpOT_.exit: ; preds = %if.else.i, %if.then.i
  %call.i111 = call %"struct.std::_Rb_tree_node_base"* @_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base(%"struct.std::_Rb_tree_node_base"* %__begin0.sroa.0.0237) #39
  %cmp.i115.not = icmp eq %"struct.std::_Rb_tree_node_base"* %call.i111, %_M_header.i.i117
  br i1 %cmp.i115.not, label %if.end, label %for.body, !llvm.loop !300

if.end:                                           ; preds = %_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE12emplace_backIJSD_EEEvDpOT_.exit, %if.else, %_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE12emplace_backIJSD_EEEvDpOT_.exit202, %if.then4
  %_M_start.i.i = getelementptr inbounds %"class.std::vector.27", %"class.std::vector.27"* %stack, i64 0, i32 0, i32 0, i32 0, i32 0
  %33 = load %"class.nlohmann::json_v3_11_1::basic_json"*, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_start.i.i, align 8, !tbaa !60
  %_M_finish.i.i109 = getelementptr inbounds %"class.std::vector.27", %"class.std::vector.27"* %stack, i64 0, i32 0, i32 0, i32 0, i32 1
  %34 = load %"class.nlohmann::json_v3_11_1::basic_json"*, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_finish.i.i109, align 8, !tbaa !60
  %cmp.i.i230 = icmp eq %"class.nlohmann::json_v3_11_1::basic_json"* %33, %34
  br i1 %cmp.i.i230, label %_ZSt8_DestroyIPN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESE_EvT_SG_RSaIT0_E.exit, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %if.end
  %35 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %current_item, i64 0, i32 0
  %m_value.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %current_item, i64 0, i32 1
  %36 = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value.i to i64*
  %object58 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %current_item, i64 0, i32 1, i32 0
  %_M_end_of_storage.i.i = getelementptr inbounds %"class.std::vector.27", %"class.std::vector.27"* %stack, i64 0, i32 0, i32 0, i32 0, i32 2
  %array35 = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value.i to %"class.std::vector.27"**
  br label %while.body

while.body:                                       ; preds = %if.end79, %while.body.lr.ph
  %37 = phi %"class.nlohmann::json_v3_11_1::basic_json"* [ %34, %while.body.lr.ph ], [ %81, %if.end79 ]
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %35) #38
  %add.ptr.i.i108 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %37, i64 -1
  %m_type2.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %add.ptr.i.i108, i64 0, i32 0
  %38 = load i8, i8* %m_type2.i, align 8, !tbaa !148
  store i8 %38, i8* %35, align 8, !tbaa !145
  %m_value3.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %37, i64 -1, i32 1
  %39 = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value3.i to i64*
  %40 = load i64, i64* %39, align 8
  store i64 %40, i64* %36, align 8
  call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %add.ptr.i.i108, i1 zeroext false) #38
  store i8 0, i8* %m_type2.i, align 8, !tbaa !145
  %ref.tmp.sroa.0.0..sroa_idx.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %37, i64 -1, i32 1, i32 0
  store %"class.std::map"* null, %"class.std::map"** %ref.tmp.sroa.0.0..sroa_idx.i, align 8, !tbaa.struct !179
  call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %current_item, i1 zeroext true) #38
  %41 = load %"class.nlohmann::json_v3_11_1::basic_json"*, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_finish.i.i109, align 8, !tbaa !178
  %incdec.ptr.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %41, i64 -1
  store %"class.nlohmann::json_v3_11_1::basic_json"* %incdec.ptr.i, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_finish.i.i109, align 8, !tbaa !178
  call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %incdec.ptr.i, i1 zeroext false) #38
  %m_value.i.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %41, i64 -1, i32 1
  %m_type.i.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %incdec.ptr.i, i64 0, i32 0
  %42 = load i8, i8* %m_type.i.i, align 8, !tbaa !145
  call void @_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE10json_value7destroyENS0_6detail7value_tE(%"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* nonnull dereferenceable(8) %m_value.i.i, i8 zeroext %42) #38
  %43 = load i8, i8* %35, align 8, !tbaa !145
  switch i8 %43, label %if.end79 [
    i8 2, label %if.then33
    i8 1, label %if.then56
  ]

if.then33:                                        ; preds = %while.body
  %44 = load %"class.std::vector.27"*, %"class.std::vector.27"** %array35, align 8, !tbaa !21
  %_M_start.i = getelementptr inbounds %"class.std::vector.27", %"class.std::vector.27"* %44, i64 0, i32 0, i32 0, i32 0, i32 0
  %45 = load %"class.nlohmann::json_v3_11_1::basic_json"*, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_start.i, align 8, !tbaa !60
  %_M_finish.i = getelementptr inbounds %"class.std::vector.27", %"class.std::vector.27"* %44, i64 0, i32 0, i32 0, i32 0, i32 1
  %46 = load %"class.nlohmann::json_v3_11_1::basic_json"*, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_finish.i, align 8, !tbaa !60
  %sub.ptr.lhs.cast.i.i = ptrtoint %"class.nlohmann::json_v3_11_1::basic_json"* %46 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint %"class.nlohmann::json_v3_11_1::basic_json"* %45 to i64
  %sub.ptr.sub.i.i = sub i64 %sub.ptr.lhs.cast.i.i, %sub.ptr.rhs.cast.i.i
  %cmp.i.i135224 = icmp sgt i64 %sub.ptr.sub.i.i, 0
  br i1 %cmp.i.i135224, label %for.body.i.i.preheader, label %_ZSt14__copy_move_a1ILb1EPN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESt20back_insert_iteratorIS4_ISE_SaISE_EEEET1_T0_SL_SK_.exit

for.body.i.i.preheader:                           ; preds = %if.then33
  %sub.ptr.div.i.i254 = lshr exact i64 %sub.ptr.sub.i.i, 4
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE9push_backEOSD_.exit177, %for.body.i.i.preheader
  %__n.0.i.i227 = phi i64 [ %dec.i.i, %_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE9push_backEOSD_.exit177 ], [ %sub.ptr.div.i.i254, %for.body.i.i.preheader ]
  %__first.addr.0.i.i225 = phi %"class.nlohmann::json_v3_11_1::basic_json"* [ %incdec.ptr.i.i136, %_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE9push_backEOSD_.exit177 ], [ %45, %for.body.i.i.preheader ]
  %47 = load %"class.nlohmann::json_v3_11_1::basic_json"*, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_finish.i.i109, align 8, !tbaa !178
  %48 = load %"class.nlohmann::json_v3_11_1::basic_json"*, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_end_of_storage.i.i, align 8, !tbaa !176
  %cmp.not.i.i167 = icmp eq %"class.nlohmann::json_v3_11_1::basic_json"* %47, %48
  br i1 %cmp.not.i.i167, label %if.else.i.i176, label %if.then.i.i174

if.then.i.i174:                                   ; preds = %for.body.i.i
  %m_type.i.i.i.i.i168 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %47, i64 0, i32 0
  %m_type2.i.i.i.i.i169 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %__first.addr.0.i.i225, i64 0, i32 0
  %49 = load i8, i8* %m_type2.i.i.i.i.i169, align 8, !tbaa !148
  store i8 %49, i8* %m_type.i.i.i.i.i168, align 8, !tbaa !145
  %m_value.i.i.i.i.i170 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %47, i64 0, i32 1
  %m_value3.i.i.i.i.i171 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %__first.addr.0.i.i225, i64 0, i32 1
  %50 = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value3.i.i.i.i.i171 to i64*
  %51 = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value.i.i.i.i.i170 to i64*
  %52 = load i64, i64* %50, align 8
  store i64 %52, i64* %51, align 8
  call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %__first.addr.0.i.i225, i1 zeroext false) #38
  store i8 0, i8* %m_type2.i.i.i.i.i169, align 8, !tbaa !145
  %ref.tmp.sroa.0.0..sroa_idx.i.i.i.i.i172 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %__first.addr.0.i.i225, i64 0, i32 1, i32 0
  store %"class.std::map"* null, %"class.std::map"** %ref.tmp.sroa.0.0..sroa_idx.i.i.i.i.i172, align 8, !tbaa.struct !179
  call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %47, i1 zeroext true) #38
  %53 = load %"class.nlohmann::json_v3_11_1::basic_json"*, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_finish.i.i109, align 8, !tbaa !178
  %incdec.ptr.i.i173 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %53, i64 1
  store %"class.nlohmann::json_v3_11_1::basic_json"* %incdec.ptr.i.i173, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_finish.i.i109, align 8, !tbaa !178
  br label %_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE9push_backEOSD_.exit177

if.else.i.i176:                                   ; preds = %for.body.i.i
  call void @_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE17_M_realloc_insertIJSD_EEEvN9__gnu_cxx17__normal_iteratorIPSD_SF_EEDpOT_(%"class.std::vector.27"* nonnull dereferenceable(24) %stack, %"class.nlohmann::json_v3_11_1::basic_json"* %47, %"class.nlohmann::json_v3_11_1::basic_json"* nonnull align 8 dereferenceable(16) %__first.addr.0.i.i225) #38
  br label %_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE9push_backEOSD_.exit177

_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE9push_backEOSD_.exit177: ; preds = %if.else.i.i176, %if.then.i.i174
  %incdec.ptr.i.i136 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %__first.addr.0.i.i225, i64 1
  %dec.i.i = add nsw i64 %__n.0.i.i227, -1
  %cmp.i.i135 = icmp sgt i64 %__n.0.i.i227, 1
  br i1 %cmp.i.i135, label %for.body.i.i, label %_ZSt14__copy_move_a1ILb1EPN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESt20back_insert_iteratorIS4_ISE_SaISE_EEEET1_T0_SL_SK_.exit.loopexit, !llvm.loop !299

_ZSt14__copy_move_a1ILb1EPN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESt20back_insert_iteratorIS4_ISE_SaISE_EEEET1_T0_SL_SK_.exit.loopexit: ; preds = %_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE9push_backEOSD_.exit177
  %.pre242 = load %"class.std::vector.27"*, %"class.std::vector.27"** %array35, align 8, !tbaa !21
  %_M_start.i124.phi.trans.insert = getelementptr inbounds %"class.std::vector.27", %"class.std::vector.27"* %.pre242, i64 0, i32 0, i32 0, i32 0, i32 0
  %.pre243 = load %"class.nlohmann::json_v3_11_1::basic_json"*, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_start.i124.phi.trans.insert, align 8, !tbaa !298
  %_M_finish.i137.phi.trans.insert = getelementptr inbounds %"class.std::vector.27", %"class.std::vector.27"* %.pre242, i64 0, i32 0, i32 0, i32 0, i32 1
  %.pre244 = load %"class.nlohmann::json_v3_11_1::basic_json"*, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_finish.i137.phi.trans.insert, align 8, !tbaa !178
  br label %_ZSt14__copy_move_a1ILb1EPN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESt20back_insert_iteratorIS4_ISE_SaISE_EEEET1_T0_SL_SK_.exit

_ZSt14__copy_move_a1ILb1EPN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESt20back_insert_iteratorIS4_ISE_SaISE_EEEET1_T0_SL_SK_.exit: ; preds = %_ZSt14__copy_move_a1ILb1EPN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESt20back_insert_iteratorIS4_ISE_SaISE_EEEET1_T0_SL_SK_.exit.loopexit, %if.then33
  %54 = phi %"class.nlohmann::json_v3_11_1::basic_json"* [ %.pre244, %_ZSt14__copy_move_a1ILb1EPN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESt20back_insert_iteratorIS4_ISE_SaISE_EEEET1_T0_SL_SK_.exit.loopexit ], [ %46, %if.then33 ]
  %55 = phi %"class.nlohmann::json_v3_11_1::basic_json"* [ %.pre243, %_ZSt14__copy_move_a1ILb1EPN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESt20back_insert_iteratorIS4_ISE_SaISE_EEEET1_T0_SL_SK_.exit.loopexit ], [ %45, %if.then33 ]
  %56 = phi %"class.std::vector.27"* [ %.pre242, %_ZSt14__copy_move_a1ILb1EPN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESt20back_insert_iteratorIS4_ISE_SaISE_EEEET1_T0_SL_SK_.exit.loopexit ], [ %44, %if.then33 ]
  %_M_finish.i137 = getelementptr inbounds %"class.std::vector.27", %"class.std::vector.27"* %56, i64 0, i32 0, i32 0, i32 0, i32 1
  %tobool.not.i = icmp eq %"class.nlohmann::json_v3_11_1::basic_json"* %54, %55
  br i1 %tobool.not.i, label %if.end79, label %for.body.i.i182

for.body.i.i182:                                  ; preds = %for.body.i.i182, %_ZSt14__copy_move_a1ILb1EPN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESt20back_insert_iteratorIS4_ISE_SaISE_EEEET1_T0_SL_SK_.exit
  %__first.addr.0.i.i178229 = phi %"class.nlohmann::json_v3_11_1::basic_json"* [ %incdec.ptr.i.i181, %for.body.i.i182 ], [ %55, %_ZSt14__copy_move_a1ILb1EPN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESt20back_insert_iteratorIS4_ISE_SaISE_EEEET1_T0_SL_SK_.exit ]
  call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %__first.addr.0.i.i178229, i1 zeroext false) #38
  %m_value.i.i.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %__first.addr.0.i.i178229, i64 0, i32 1
  %m_type.i.i.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %__first.addr.0.i.i178229, i64 0, i32 0
  %57 = load i8, i8* %m_type.i.i.i, align 8, !tbaa !145
  call void @_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE10json_value7destroyENS0_6detail7value_tE(%"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* nonnull dereferenceable(8) %m_value.i.i.i, i8 zeroext %57) #38
  %incdec.ptr.i.i181 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %__first.addr.0.i.i178229, i64 1
  %cmp.not.i.i179 = icmp eq %"class.nlohmann::json_v3_11_1::basic_json"* %incdec.ptr.i.i181, %54
  br i1 %cmp.not.i.i179, label %_ZSt8_DestroyIPN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEEEvT_SG_.exit, label %for.body.i.i182, !llvm.loop !301

_ZSt8_DestroyIPN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEEEvT_SG_.exit: ; preds = %for.body.i.i182
  store %"class.nlohmann::json_v3_11_1::basic_json"* %55, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_finish.i137, align 8, !tbaa !178
  br label %if.end79

if.then56:                                        ; preds = %while.body
  %58 = load %"class.std::map"*, %"class.std::map"** %object58, align 8, !tbaa !21
  %59 = getelementptr inbounds %"class.std::map", %"class.std::map"* %58, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %_M_left.i.i = getelementptr inbounds i8, i8* %59, i64 24
  %60 = bitcast i8* %_M_left.i.i to %"struct.std::_Rb_tree_node_base"**
  %61 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %60, align 8, !tbaa !166
  %add.ptr.i.i = getelementptr inbounds i8, i8* %59, i64 8
  %_M_header.i.i = bitcast i8* %add.ptr.i.i to %"struct.std::_Rb_tree_node_base"*
  %cmp.i.not221 = icmp eq %"struct.std::_Rb_tree_node_base"* %61, %_M_header.i.i
  br i1 %cmp.i.not221, label %for.cond.cleanup67, label %for.body68

for.cond.cleanup67.loopexit:                      ; preds = %_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE9push_backEOSD_.exit
  %.pre = load %"class.std::map"*, %"class.std::map"** %object58, align 8, !tbaa !21
  br label %for.cond.cleanup67

for.cond.cleanup67:                               ; preds = %for.cond.cleanup67.loopexit, %if.then56
  %62 = phi %"class.std::map"* [ %.pre, %for.cond.cleanup67.loopexit ], [ %58, %if.then56 ]
  %_M_t.i = getelementptr inbounds %"class.std::map", %"class.std::map"* %62, i64 0, i32 0
  %63 = getelementptr inbounds %"class.std::map", %"class.std::map"* %62, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %_M_parent.i.i.i = getelementptr inbounds i8, i8* %63, i64 16
  %64 = bitcast i8* %_M_parent.i.i.i to %"struct.std::_Rb_tree_node"**
  %65 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %64, align 8, !tbaa !302
  call void @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS5_blmdSaNS9_14adl_serializerESC_IhSaIhEEEEESt10_Select1stISH_ESt4lessIvESaISH_EE8_M_eraseEPSt13_Rb_tree_nodeISH_E(%"class.std::_Rb_tree"* nonnull dereferenceable(48) %_M_t.i, %"struct.std::_Rb_tree_node"* %65) #38
  %add.ptr.i = getelementptr inbounds i8, i8* %63, i64 8
  %66 = bitcast i8* %_M_parent.i.i.i to %"struct.std::_Rb_tree_node_base"**
  store %"struct.std::_Rb_tree_node_base"* null, %"struct.std::_Rb_tree_node_base"** %66, align 8, !tbaa !302
  %_M_left.i.i140 = getelementptr inbounds i8, i8* %63, i64 24
  %67 = bitcast i8* %_M_left.i.i140 to i8**
  store i8* %add.ptr.i, i8** %67, align 8, !tbaa !166
  %_M_right.i.i = getelementptr inbounds i8, i8* %63, i64 32
  %68 = bitcast i8* %_M_right.i.i to i8**
  store i8* %add.ptr.i, i8** %68, align 8, !tbaa !170
  %_M_node_count.i.i141 = getelementptr inbounds i8, i8* %63, i64 40
  %69 = bitcast i8* %_M_node_count.i.i141 to i64*
  store i64 0, i64* %69, align 8, !tbaa !171
  br label %if.end79

for.body68:                                       ; preds = %_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE9push_backEOSD_.exit, %if.then56
  %__begin059.sroa.0.0222 = phi %"struct.std::_Rb_tree_node_base"* [ %call.i, %_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE9push_backEOSD_.exit ], [ %61, %if.then56 ]
  %second71 = getelementptr inbounds %"struct.std::_Rb_tree_node_base", %"struct.std::_Rb_tree_node_base"* %__begin059.sroa.0.0222, i64 2
  %70 = bitcast %"struct.std::_Rb_tree_node_base"* %second71 to %"class.nlohmann::json_v3_11_1::basic_json"*
  %71 = load %"class.nlohmann::json_v3_11_1::basic_json"*, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_finish.i.i109, align 8, !tbaa !178
  %72 = load %"class.nlohmann::json_v3_11_1::basic_json"*, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_end_of_storage.i.i, align 8, !tbaa !176
  %cmp.not.i.i = icmp eq %"class.nlohmann::json_v3_11_1::basic_json"* %71, %72
  br i1 %cmp.not.i.i, label %if.else.i.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %for.body68
  %m_type.i.i.i.i.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %71, i64 0, i32 0
  %m_type2.i.i.i.i.i = bitcast %"struct.std::_Rb_tree_node_base"* %second71 to i8*
  %73 = load i8, i8* %m_type2.i.i.i.i.i, align 8, !tbaa !148
  store i8 %73, i8* %m_type.i.i.i.i.i, align 8, !tbaa !145
  %m_value.i.i.i.i.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %71, i64 0, i32 1
  %m_value3.i.i.i.i.i = getelementptr inbounds %"struct.std::_Rb_tree_node_base", %"struct.std::_Rb_tree_node_base"* %__begin059.sroa.0.0222, i64 2, i32 1
  %74 = bitcast %"struct.std::_Rb_tree_node_base"** %m_value3.i.i.i.i.i to i64*
  %75 = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value.i.i.i.i.i to i64*
  %76 = load i64, i64* %74, align 8
  store i64 %76, i64* %75, align 8
  call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %70, i1 zeroext false) #38
  store i8 0, i8* %m_type2.i.i.i.i.i, align 8, !tbaa !145
  %77 = bitcast %"struct.std::_Rb_tree_node_base"** %m_value3.i.i.i.i.i to %"class.std::map"**
  store %"class.std::map"* null, %"class.std::map"** %77, align 8, !tbaa.struct !179
  call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %71, i1 zeroext true) #38
  %78 = load %"class.nlohmann::json_v3_11_1::basic_json"*, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_finish.i.i109, align 8, !tbaa !178
  %incdec.ptr.i.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %78, i64 1
  store %"class.nlohmann::json_v3_11_1::basic_json"* %incdec.ptr.i.i, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_finish.i.i109, align 8, !tbaa !178
  br label %_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE9push_backEOSD_.exit

if.else.i.i:                                      ; preds = %for.body68
  call void @_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE17_M_realloc_insertIJSD_EEEvN9__gnu_cxx17__normal_iteratorIPSD_SF_EEDpOT_(%"class.std::vector.27"* nonnull dereferenceable(24) %stack, %"class.nlohmann::json_v3_11_1::basic_json"* %71, %"class.nlohmann::json_v3_11_1::basic_json"* nonnull align 8 dereferenceable(16) %70) #38
  br label %_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE9push_backEOSD_.exit

_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE9push_backEOSD_.exit: ; preds = %if.else.i.i, %if.then.i.i
  %call.i = call %"struct.std::_Rb_tree_node_base"* @_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base(%"struct.std::_Rb_tree_node_base"* %__begin059.sroa.0.0222) #39
  %cmp.i.not = icmp eq %"struct.std::_Rb_tree_node_base"* %call.i, %_M_header.i.i
  br i1 %cmp.i.not, label %for.cond.cleanup67.loopexit, label %for.body68, !llvm.loop !303

if.end79:                                         ; preds = %for.cond.cleanup67, %_ZSt8_DestroyIPN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEEEvT_SG_.exit, %_ZSt14__copy_move_a1ILb1EPN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESt20back_insert_iteratorIS4_ISE_SaISE_EEEET1_T0_SL_SK_.exit, %while.body
  call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %current_item, i1 zeroext false) #38
  %79 = load i8, i8* %35, align 8, !tbaa !145
  call void @_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE10json_value7destroyENS0_6detail7value_tE(%"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* nonnull dereferenceable(8) %m_value.i, i8 zeroext %79) #38
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %35) #38
  %80 = load %"class.nlohmann::json_v3_11_1::basic_json"*, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_start.i.i, align 8, !tbaa !60
  %81 = load %"class.nlohmann::json_v3_11_1::basic_json"*, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_finish.i.i109, align 8, !tbaa !60
  %cmp.i.i = icmp eq %"class.nlohmann::json_v3_11_1::basic_json"* %80, %81
  br i1 %cmp.i.i, label %_ZSt8_DestroyIPN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESE_EvT_SG_RSaIT0_E.exit, label %while.body, !llvm.loop !304

_ZSt8_DestroyIPN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESE_EvT_SG_RSaIT0_E.exit: ; preds = %if.end79, %if.end
  %.lcssa = phi %"class.nlohmann::json_v3_11_1::basic_json"* [ %33, %if.end ], [ %80, %if.end79 ]
  %tobool.not.i.i.i = icmp eq %"class.nlohmann::json_v3_11_1::basic_json"* %.lcssa, null
  br i1 %tobool.not.i.i.i, label %_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EED2Ev.exit, label %if.then.i.i.i

if.then.i.i.i:                                    ; preds = %_ZSt8_DestroyIPN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESE_EvT_SG_RSaIT0_E.exit
  %82 = getelementptr %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %.lcssa, i64 0, i32 0
  call void @_ZdlPv(i8* %82) #41
  br label %_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EED2Ev.exit

_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EED2Ev.exit: ; preds = %if.then.i.i.i, %_ZSt8_DestroyIPN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESE_EvT_SG_RSaIT0_E.exit
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %2) #38
  br label %if.end80

if.end80:                                         ; preds = %_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EED2Ev.exit, %entry
  switch i8 %t, label %sw.epilog [
    i8 1, label %sw.bb
    i8 2, label %sw.bb83
    i8 3, label %sw.bb87
    i8 8, label %sw.bb90
  ]

sw.bb:                                            ; preds = %if.end80
  %object81 = getelementptr inbounds %"union.nlohmann::json_v3_11_1::basic_json<>::json_value", %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %this, i64 0, i32 0
  %83 = load %"class.std::map"*, %"class.std::map"** %object81, align 8, !tbaa !21
  %_M_t.i.i = getelementptr inbounds %"class.std::map", %"class.std::map"* %83, i64 0, i32 0
  %84 = getelementptr inbounds %"class.std::map", %"class.std::map"* %83, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %_M_parent.i.i.i185 = getelementptr inbounds i8, i8* %84, i64 16
  %85 = bitcast i8* %_M_parent.i.i.i185 to %"struct.std::_Rb_tree_node"**
  %86 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %85, align 8, !tbaa !302
  call void @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS5_blmdSaNS9_14adl_serializerESC_IhSaIhEEEEESt10_Select1stISH_ESt4lessIvESaISH_EE8_M_eraseEPSt13_Rb_tree_nodeISH_E(%"class.std::_Rb_tree"* nonnull dereferenceable(48) %_M_t.i.i, %"struct.std::_Rb_tree_node"* %86) #38
  %87 = load %"class.std::map"*, %"class.std::map"** %object81, align 8, !tbaa !21
  %88 = getelementptr %"class.std::map", %"class.std::map"* %87, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  br label %sw.epilog.sink.split

sw.bb83:                                          ; preds = %if.end80
  %array85 = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %this to %"class.std::vector.27"**
  %89 = load %"class.std::vector.27"*, %"class.std::vector.27"** %array85, align 8, !tbaa !21
  %_M_start.i.i147 = getelementptr inbounds %"class.std::vector.27", %"class.std::vector.27"* %89, i64 0, i32 0, i32 0, i32 0, i32 0
  %90 = load %"class.nlohmann::json_v3_11_1::basic_json"*, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_start.i.i147, align 8, !tbaa !298
  %_M_finish.i.i148 = getelementptr inbounds %"class.std::vector.27", %"class.std::vector.27"* %89, i64 0, i32 0, i32 0, i32 0, i32 1
  %91 = load %"class.nlohmann::json_v3_11_1::basic_json"*, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_finish.i.i148, align 8, !tbaa !178
  %cmp.not.i186217 = icmp eq %"class.nlohmann::json_v3_11_1::basic_json"* %90, %91
  br i1 %cmp.not.i186217, label %_ZNSt12_Destroy_auxILb0EE9__destroyIPN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS3_14adl_serializerES6_IhSaIhEEEEEEvT_SI_.exit, label %for.body.i

for.body.i:                                       ; preds = %for.body.i, %sw.bb83
  %__first.addr.0.i218 = phi %"class.nlohmann::json_v3_11_1::basic_json"* [ %incdec.ptr.i189, %for.body.i ], [ %90, %sw.bb83 ]
  call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %__first.addr.0.i218, i1 zeroext false) #38
  %m_value.i.i187 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %__first.addr.0.i218, i64 0, i32 1
  %m_type.i.i188 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %__first.addr.0.i218, i64 0, i32 0
  %92 = load i8, i8* %m_type.i.i188, align 8, !tbaa !145
  call void @_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE10json_value7destroyENS0_6detail7value_tE(%"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* nonnull dereferenceable(8) %m_value.i.i187, i8 zeroext %92) #38
  %incdec.ptr.i189 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %__first.addr.0.i218, i64 1
  %cmp.not.i186 = icmp eq %"class.nlohmann::json_v3_11_1::basic_json"* %incdec.ptr.i189, %91
  br i1 %cmp.not.i186, label %_ZNSt12_Destroy_auxILb0EE9__destroyIPN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS3_14adl_serializerES6_IhSaIhEEEEEEvT_SI_.exit.loopexit, label %for.body.i, !llvm.loop !301

_ZNSt12_Destroy_auxILb0EE9__destroyIPN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS3_14adl_serializerES6_IhSaIhEEEEEEvT_SI_.exit.loopexit: ; preds = %for.body.i
  %.pre249 = load %"class.nlohmann::json_v3_11_1::basic_json"*, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_start.i.i147, align 8, !tbaa !298
  br label %_ZNSt12_Destroy_auxILb0EE9__destroyIPN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS3_14adl_serializerES6_IhSaIhEEEEEEvT_SI_.exit

_ZNSt12_Destroy_auxILb0EE9__destroyIPN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS3_14adl_serializerES6_IhSaIhEEEEEEvT_SI_.exit: ; preds = %_ZNSt12_Destroy_auxILb0EE9__destroyIPN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS3_14adl_serializerES6_IhSaIhEEEEEEvT_SI_.exit.loopexit, %sw.bb83
  %93 = phi %"class.nlohmann::json_v3_11_1::basic_json"* [ %.pre249, %_ZNSt12_Destroy_auxILb0EE9__destroyIPN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS3_14adl_serializerES6_IhSaIhEEEEEEvT_SI_.exit.loopexit ], [ %90, %sw.bb83 ]
  %tobool.not.i.i.i.i = icmp eq %"class.nlohmann::json_v3_11_1::basic_json"* %93, null
  br i1 %tobool.not.i.i.i.i, label %_ZNSt15__new_allocatorISt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS2_14adl_serializerES0_IhSaIhEEEESaISE_EEE7destroyISG_EEvPT_.exit, label %if.then.i.i.i.i149

if.then.i.i.i.i149:                               ; preds = %_ZNSt12_Destroy_auxILb0EE9__destroyIPN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS3_14adl_serializerES6_IhSaIhEEEEEEvT_SI_.exit
  %94 = getelementptr %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %93, i64 0, i32 0
  call void @_ZdlPv(i8* %94) #41
  br label %_ZNSt15__new_allocatorISt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS2_14adl_serializerES0_IhSaIhEEEESaISE_EEE7destroyISG_EEvPT_.exit

_ZNSt15__new_allocatorISt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS2_14adl_serializerES0_IhSaIhEEEESaISE_EEE7destroyISG_EEvPT_.exit: ; preds = %if.then.i.i.i.i149, %_ZNSt12_Destroy_auxILb0EE9__destroyIPN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS3_14adl_serializerES6_IhSaIhEEEEEEvT_SI_.exit
  %95 = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %this to i8**
  %96 = load i8*, i8** %95, align 8, !tbaa !21
  br label %sw.epilog.sink.split

sw.bb87:                                          ; preds = %if.end80
  %string = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %this to %"class.std::__cxx11::basic_string"**
  %97 = load %"class.std::__cxx11::basic_string"*, %"class.std::__cxx11::basic_string"** %string, align 8, !tbaa !21
  %_M_p.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %97, i64 0, i32 0, i32 0
  %98 = load i8*, i8** %_M_p.i.i.i.i.i.i, align 8, !tbaa !17
  %99 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %97, i64 0, i32 2
  %arraydecay.i.i.i.i.i.i = bitcast %union.anon* %99 to i8*
  %cmp.i.i.i.i.i = icmp eq i8* %98, %arraydecay.i.i.i.i.i.i
  br i1 %cmp.i.i.i.i.i, label %sw.bb87._ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7destroyIS5_EEvRS6_PT_.exit_crit_edge, label %if.then.i.i.i.i

sw.bb87._ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7destroyIS5_EEvRS6_PT_.exit_crit_edge: ; preds = %sw.bb87
  %100 = bitcast %"class.std::__cxx11::basic_string"* %97 to i8*
  br label %sw.epilog.sink.split

if.then.i.i.i.i:                                  ; preds = %sw.bb87
  call void @_ZdlPv(i8* %98) #41
  %.phi.trans.insert247 = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %this to i8**
  %.pre248 = load i8*, i8** %.phi.trans.insert247, align 8, !tbaa !21
  br label %sw.epilog.sink.split

sw.bb90:                                          ; preds = %if.end80
  %binary = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %this to %"class.nlohmann::json_v3_11_1::byte_container_with_subtype"**
  %101 = load %"class.nlohmann::json_v3_11_1::byte_container_with_subtype"*, %"class.nlohmann::json_v3_11_1::byte_container_with_subtype"** %binary, align 8, !tbaa !21
  %_M_start.i.i.i.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::byte_container_with_subtype", %"class.nlohmann::json_v3_11_1::byte_container_with_subtype"* %101, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %102 = load i8*, i8** %_M_start.i.i.i.i, align 8, !tbaa !305
  %tobool.not.i.i.i.i.i = icmp eq i8* %102, null
  br i1 %tobool.not.i.i.i.i.i, label %sw.bb90._ZNSt16allocator_traitsISaIN8nlohmann12json_v3_11_127byte_container_with_subtypeISt6vectorIhSaIhEEEEEE7destroyIS6_EEvRS7_PT_.exit_crit_edge, label %if.then.i.i.i.i.i

sw.bb90._ZNSt16allocator_traitsISaIN8nlohmann12json_v3_11_127byte_container_with_subtypeISt6vectorIhSaIhEEEEEE7destroyIS6_EEvRS7_PT_.exit_crit_edge: ; preds = %sw.bb90
  %103 = bitcast %"class.nlohmann::json_v3_11_1::byte_container_with_subtype"* %101 to i8*
  br label %sw.epilog.sink.split

if.then.i.i.i.i.i:                                ; preds = %sw.bb90
  call void @_ZdlPv(i8* nonnull %102) #41
  %.phi.trans.insert = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %this to i8**
  %.pre246 = load i8*, i8** %.phi.trans.insert, align 8, !tbaa !21
  br label %sw.epilog.sink.split

sw.epilog.sink.split:                             ; preds = %if.then.i.i.i.i.i, %sw.bb90._ZNSt16allocator_traitsISaIN8nlohmann12json_v3_11_127byte_container_with_subtypeISt6vectorIhSaIhEEEEEE7destroyIS6_EEvRS7_PT_.exit_crit_edge, %if.then.i.i.i.i, %sw.bb87._ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7destroyIS5_EEvRS6_PT_.exit_crit_edge, %_ZNSt15__new_allocatorISt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS2_14adl_serializerES0_IhSaIhEEEESaISE_EEE7destroyISG_EEvPT_.exit, %sw.bb
  %.sink = phi i8* [ %96, %_ZNSt15__new_allocatorISt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS2_14adl_serializerES0_IhSaIhEEEESaISE_EEE7destroyISG_EEvPT_.exit ], [ %88, %sw.bb ], [ %100, %sw.bb87._ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7destroyIS5_EEvRS6_PT_.exit_crit_edge ], [ %.pre248, %if.then.i.i.i.i ], [ %103, %sw.bb90._ZNSt16allocator_traitsISaIN8nlohmann12json_v3_11_127byte_container_with_subtypeISt6vectorIhSaIhEEEEEE7destroyIS6_EEvRS7_PT_.exit_crit_edge ], [ %.pre246, %if.then.i.i.i.i.i ]
  call void @_ZdlPv(i8* %.sink) #41
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.epilog.sink.split, %if.end80
  ret void
}

; Function Attrs: noreturn nounwind
declare dso_local void @__assert_fail(i8*, i8*, i32, i8*) local_unnamed_addr #28

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local void @_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE7reserveEm(%"class.std::vector.27"* nonnull dereferenceable(24) %this, i64 %__n) local_unnamed_addr #0 comdat align 2 {
entry:
  %cmp = icmp ugt i64 %__n, 576460752303423487
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.40, i64 0, i64 0)) #40
  unreachable

if.end:                                           ; preds = %entry
  %_M_end_of_storage.i = getelementptr inbounds %"class.std::vector.27", %"class.std::vector.27"* %this, i64 0, i32 0, i32 0, i32 0, i32 2
  %0 = load %"class.nlohmann::json_v3_11_1::basic_json"*, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_end_of_storage.i, align 8, !tbaa !176
  %_M_start.i = getelementptr inbounds %"class.std::vector.27", %"class.std::vector.27"* %this, i64 0, i32 0, i32 0, i32 0, i32 0
  %1 = load %"class.nlohmann::json_v3_11_1::basic_json"*, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_start.i, align 8, !tbaa !298
  %sub.ptr.lhs.cast.i = ptrtoint %"class.nlohmann::json_v3_11_1::basic_json"* %0 to i64
  %sub.ptr.rhs.cast.i = ptrtoint %"class.nlohmann::json_v3_11_1::basic_json"* %1 to i64
  %sub.ptr.sub.i = sub i64 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i
  %sub.ptr.div.i = ashr exact i64 %sub.ptr.sub.i, 4
  %cmp3 = icmp ult i64 %sub.ptr.div.i, %__n
  br i1 %cmp3, label %_ZNSt12_Vector_baseIN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESaISE_EE11_M_allocateEm.exit, label %if.end24

_ZNSt12_Vector_baseIN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESaISE_EE11_M_allocateEm.exit: ; preds = %if.end
  %_M_finish.i = getelementptr inbounds %"class.std::vector.27", %"class.std::vector.27"* %this, i64 0, i32 0, i32 0, i32 0, i32 1
  %2 = load %"class.nlohmann::json_v3_11_1::basic_json"*, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_finish.i, align 8, !tbaa !178
  %sub.ptr.lhs.cast.i33 = ptrtoint %"class.nlohmann::json_v3_11_1::basic_json"* %2 to i64
  %sub.ptr.sub.i35 = sub i64 %sub.ptr.lhs.cast.i33, %sub.ptr.rhs.cast.i
  %sub.ptr.div.i36 = ashr exact i64 %sub.ptr.sub.i35, 4
  %mul.i.i.i = shl nuw nsw i64 %__n, 4
  %call5.i.i.i = tail call noalias nonnull i8* @_Znwm(i64 %mul.i.i.i) #43
  %3 = bitcast i8* %call5.i.i.i to %"class.nlohmann::json_v3_11_1::basic_json"*
  %cmp.not.i3738 = icmp eq %"class.nlohmann::json_v3_11_1::basic_json"* %1, %2
  br i1 %cmp.not.i3738, label %_ZSt14__relocate_a_1IPN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESF_SaISE_EET0_T_SI_SH_RT1_.exit, label %for.body.i

for.body.i:                                       ; preds = %for.body.i, %_ZNSt12_Vector_baseIN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESaISE_EE11_M_allocateEm.exit
  %__cur.0.i40 = phi %"class.nlohmann::json_v3_11_1::basic_json"* [ %incdec.ptr2.i, %for.body.i ], [ %3, %_ZNSt12_Vector_baseIN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESaISE_EE11_M_allocateEm.exit ]
  %__first.addr.0.i39 = phi %"class.nlohmann::json_v3_11_1::basic_json"* [ %incdec.ptr.i, %for.body.i ], [ %1, %_ZNSt12_Vector_baseIN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESaISE_EE11_M_allocateEm.exit ]
  tail call void @llvm.experimental.noalias.scope.decl(metadata !307) #38
  tail call void @llvm.experimental.noalias.scope.decl(metadata !310) #38
  %m_type.i.i.i.i.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %__cur.0.i40, i64 0, i32 0
  %m_type2.i.i.i.i.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %__first.addr.0.i39, i64 0, i32 0
  %4 = load i8, i8* %m_type2.i.i.i.i.i, align 8, !tbaa !148, !alias.scope !310, !noalias !307
  store i8 %4, i8* %m_type.i.i.i.i.i, align 8, !tbaa !145, !alias.scope !307, !noalias !310
  %m_value.i.i.i.i.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %__cur.0.i40, i64 0, i32 1
  %m_value3.i.i.i.i.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %__first.addr.0.i39, i64 0, i32 1
  %5 = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value3.i.i.i.i.i to i64*
  %6 = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value.i.i.i.i.i to i64*
  %7 = load i64, i64* %5, align 8, !alias.scope !310, !noalias !307
  store i64 %7, i64* %6, align 8, !alias.scope !307, !noalias !310
  tail call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %__first.addr.0.i39, i1 zeroext false) #38, !noalias !307
  store i8 0, i8* %m_type2.i.i.i.i.i, align 8, !tbaa !145, !alias.scope !310, !noalias !307
  %ref.tmp.sroa.0.0..sroa_idx.i.i.i.i.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %__first.addr.0.i39, i64 0, i32 1, i32 0
  store %"class.std::map"* null, %"class.std::map"** %ref.tmp.sroa.0.0..sroa_idx.i.i.i.i.i, align 8, !tbaa.struct !179, !alias.scope !310, !noalias !307
  tail call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %__cur.0.i40, i1 zeroext true) #38
  tail call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %__first.addr.0.i39, i1 zeroext false) #38
  %8 = load i8, i8* %m_type2.i.i.i.i.i, align 8, !tbaa !145
  tail call void @_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE10json_value7destroyENS0_6detail7value_tE(%"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* nonnull dereferenceable(8) %m_value3.i.i.i.i.i, i8 zeroext %8) #38
  %incdec.ptr.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %__first.addr.0.i39, i64 1
  %incdec.ptr2.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %__cur.0.i40, i64 1
  %cmp.not.i37 = icmp eq %"class.nlohmann::json_v3_11_1::basic_json"* %incdec.ptr.i, %2
  br i1 %cmp.not.i37, label %_ZSt14__relocate_a_1IPN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESF_SaISE_EET0_T_SI_SH_RT1_.exit.loopexit, label %for.body.i, !llvm.loop !312

_ZSt14__relocate_a_1IPN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESF_SaISE_EET0_T_SI_SH_RT1_.exit.loopexit: ; preds = %for.body.i
  %.pre = load %"class.nlohmann::json_v3_11_1::basic_json"*, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_start.i, align 8, !tbaa !298
  br label %_ZSt14__relocate_a_1IPN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESF_SaISE_EET0_T_SI_SH_RT1_.exit

_ZSt14__relocate_a_1IPN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESF_SaISE_EET0_T_SI_SH_RT1_.exit: ; preds = %_ZSt14__relocate_a_1IPN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESF_SaISE_EET0_T_SI_SH_RT1_.exit.loopexit, %_ZNSt12_Vector_baseIN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESaISE_EE11_M_allocateEm.exit
  %9 = phi %"class.nlohmann::json_v3_11_1::basic_json"* [ %.pre, %_ZSt14__relocate_a_1IPN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESF_SaISE_EET0_T_SI_SH_RT1_.exit.loopexit ], [ %1, %_ZNSt12_Vector_baseIN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESaISE_EE11_M_allocateEm.exit ]
  %tobool.not.i = icmp eq %"class.nlohmann::json_v3_11_1::basic_json"* %9, null
  br i1 %tobool.not.i, label %_ZNSt12_Vector_baseIN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESaISE_EE13_M_deallocateEPSE_m.exit, label %if.then.i

if.then.i:                                        ; preds = %_ZSt14__relocate_a_1IPN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESF_SaISE_EET0_T_SI_SH_RT1_.exit
  %10 = getelementptr %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %9, i64 0, i32 0
  tail call void @_ZdlPv(i8* %10) #41
  br label %_ZNSt12_Vector_baseIN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESaISE_EE13_M_deallocateEPSE_m.exit

_ZNSt12_Vector_baseIN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESaISE_EE13_M_deallocateEPSE_m.exit: ; preds = %if.then.i, %_ZSt14__relocate_a_1IPN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESF_SaISE_EET0_T_SI_SH_RT1_.exit
  %11 = bitcast %"class.std::vector.27"* %this to i8**
  store i8* %call5.i.i.i, i8** %11, align 8, !tbaa !298
  %add.ptr = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %3, i64 %sub.ptr.div.i36
  store %"class.nlohmann::json_v3_11_1::basic_json"* %add.ptr, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_finish.i, align 8, !tbaa !178
  %add.ptr21 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %3, i64 %__n
  store %"class.nlohmann::json_v3_11_1::basic_json"* %add.ptr21, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_end_of_storage.i, align 8, !tbaa !176
  br label %if.end24

if.end24:                                         ; preds = %_ZNSt12_Vector_baseIN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESaISE_EE13_M_deallocateEPSE_m.exit, %if.end
  ret void
}

; Function Attrs: noreturn
declare dso_local void @_ZSt28__throw_bad_array_new_lengthv() local_unnamed_addr #23

; Function Attrs: noreturn
declare dso_local void @_ZSt17__throw_bad_allocv() local_unnamed_addr #23

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local void @_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE17_M_realloc_insertIJSD_EEEvN9__gnu_cxx17__normal_iteratorIPSD_SF_EEDpOT_(%"class.std::vector.27"* nonnull dereferenceable(24) %this, %"class.nlohmann::json_v3_11_1::basic_json"* %__position.coerce, %"class.nlohmann::json_v3_11_1::basic_json"* nonnull align 8 dereferenceable(16) %__args) local_unnamed_addr #0 comdat align 2 {
entry:
  %_M_finish.i26.i = getelementptr inbounds %"class.std::vector.27", %"class.std::vector.27"* %this, i64 0, i32 0, i32 0, i32 0, i32 1
  %0 = load %"class.nlohmann::json_v3_11_1::basic_json"*, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_finish.i26.i, align 8, !tbaa !178
  %_M_start.i27.i = getelementptr inbounds %"class.std::vector.27", %"class.std::vector.27"* %this, i64 0, i32 0, i32 0, i32 0, i32 0
  %1 = load %"class.nlohmann::json_v3_11_1::basic_json"*, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_start.i27.i, align 8, !tbaa !298
  %sub.ptr.lhs.cast.i28.i = ptrtoint %"class.nlohmann::json_v3_11_1::basic_json"* %0 to i64
  %sub.ptr.rhs.cast.i29.i = ptrtoint %"class.nlohmann::json_v3_11_1::basic_json"* %1 to i64
  %sub.ptr.sub.i30.i = sub i64 %sub.ptr.lhs.cast.i28.i, %sub.ptr.rhs.cast.i29.i
  %sub.ptr.div.i31.i = ashr exact i64 %sub.ptr.sub.i30.i, 4
  %cmp.i = icmp eq i64 %sub.ptr.sub.i30.i, 9223372036854775792
  br i1 %cmp.i, label %if.then.i, label %_ZNKSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE12_M_check_lenEmPKc.exit

if.then.i:                                        ; preds = %entry
  tail call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.41, i64 0, i64 0)) #40
  unreachable

_ZNKSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE12_M_check_lenEmPKc.exit: ; preds = %entry
  %cmp.i.i = icmp eq i64 %sub.ptr.sub.i30.i, 0
  %.sroa.speculated.i = select i1 %cmp.i.i, i64 1, i64 %sub.ptr.div.i31.i
  %add.i = add nsw i64 %.sroa.speculated.i, %sub.ptr.div.i31.i
  %cmp7.i = icmp ult i64 %add.i, %sub.ptr.div.i31.i
  %cmp9.i = icmp ugt i64 %add.i, 576460752303423487
  %or.cond.i = or i1 %cmp7.i, %cmp9.i
  %cond.i = select i1 %or.cond.i, i64 576460752303423487, i64 %add.i
  %sub.ptr.lhs.cast.i = ptrtoint %"class.nlohmann::json_v3_11_1::basic_json"* %__position.coerce to i64
  %sub.ptr.sub.i = sub i64 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i29.i
  %sub.ptr.div.i = ashr exact i64 %sub.ptr.sub.i, 4
  %cmp.not.i = icmp eq i64 %cond.i, 0
  br i1 %cmp.not.i, label %_ZNSt12_Vector_baseIN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESaISE_EE11_M_allocateEm.exit, label %_ZNSt16allocator_traitsISaIN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEEEE8allocateERSF_m.exit.i

_ZNSt16allocator_traitsISaIN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEEEE8allocateERSF_m.exit.i: ; preds = %_ZNKSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE12_M_check_lenEmPKc.exit
  %mul.i.i.i = shl nuw nsw i64 %cond.i, 4
  %call5.i.i.i = tail call noalias nonnull i8* @_Znwm(i64 %mul.i.i.i) #43
  %2 = bitcast i8* %call5.i.i.i to %"class.nlohmann::json_v3_11_1::basic_json"*
  br label %_ZNSt12_Vector_baseIN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESaISE_EE11_M_allocateEm.exit

_ZNSt12_Vector_baseIN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESaISE_EE11_M_allocateEm.exit: ; preds = %_ZNSt16allocator_traitsISaIN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEEEE8allocateERSF_m.exit.i, %_ZNKSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE12_M_check_lenEmPKc.exit
  %cond.i38 = phi %"class.nlohmann::json_v3_11_1::basic_json"* [ %2, %_ZNSt16allocator_traitsISaIN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEEEE8allocateERSF_m.exit.i ], [ null, %_ZNKSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE12_M_check_lenEmPKc.exit ]
  %add.ptr = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %cond.i38, i64 %sub.ptr.div.i
  %m_type.i.i.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %add.ptr, i64 0, i32 0
  %m_type2.i.i.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %__args, i64 0, i32 0
  %3 = load i8, i8* %m_type2.i.i.i, align 8, !tbaa !148
  store i8 %3, i8* %m_type.i.i.i, align 8, !tbaa !145
  %m_value.i.i.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %cond.i38, i64 %sub.ptr.div.i, i32 1
  %m_value3.i.i.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %__args, i64 0, i32 1
  %4 = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value3.i.i.i to i64*
  %5 = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value.i.i.i to i64*
  %6 = load i64, i64* %4, align 8
  store i64 %6, i64* %5, align 8
  tail call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %__args, i1 zeroext false) #38
  store i8 0, i8* %m_type2.i.i.i, align 8, !tbaa !145
  %ref.tmp.sroa.0.0..sroa_idx.i.i.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %__args, i64 0, i32 1, i32 0
  store %"class.std::map"* null, %"class.std::map"** %ref.tmp.sroa.0.0..sroa_idx.i.i.i, align 8, !tbaa.struct !179
  tail call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %add.ptr, i1 zeroext true) #38
  %cmp.not.i.i4465 = icmp eq %"class.nlohmann::json_v3_11_1::basic_json"* %1, %__position.coerce
  br i1 %cmp.not.i.i4465, label %for.cond.i.i.preheader, label %for.body.i.i53

for.cond.i.i.preheader:                           ; preds = %for.body.i.i53, %_ZNSt12_Vector_baseIN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESaISE_EE11_M_allocateEm.exit
  %__cur.0.i.i43.lcssa = phi %"class.nlohmann::json_v3_11_1::basic_json"* [ %cond.i38, %_ZNSt12_Vector_baseIN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESaISE_EE11_M_allocateEm.exit ], [ %incdec.ptr2.i.i52, %for.body.i.i53 ]
  %__cur.0.i.i60 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %__cur.0.i.i43.lcssa, i64 1
  %cmp.not.i.i61 = icmp eq %"class.nlohmann::json_v3_11_1::basic_json"* %0, %__position.coerce
  br i1 %cmp.not.i.i61, label %_ZSt12__relocate_aIPN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESF_SaISE_EET0_T_SI_SH_RT1_.exit, label %for.body.i.i

for.body.i.i53:                                   ; preds = %for.body.i.i53, %_ZNSt12_Vector_baseIN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESaISE_EE11_M_allocateEm.exit
  %__cur.0.i.i4367 = phi %"class.nlohmann::json_v3_11_1::basic_json"* [ %incdec.ptr2.i.i52, %for.body.i.i53 ], [ %cond.i38, %_ZNSt12_Vector_baseIN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESaISE_EE11_M_allocateEm.exit ]
  %__first.addr.0.i.i4266 = phi %"class.nlohmann::json_v3_11_1::basic_json"* [ %incdec.ptr.i.i51, %for.body.i.i53 ], [ %1, %_ZNSt12_Vector_baseIN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESaISE_EE11_M_allocateEm.exit ]
  tail call void @llvm.experimental.noalias.scope.decl(metadata !313) #38
  tail call void @llvm.experimental.noalias.scope.decl(metadata !316) #38
  %m_type.i.i.i.i.i46 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %__cur.0.i.i4367, i64 0, i32 0
  %m_type2.i.i.i.i.i47 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %__first.addr.0.i.i4266, i64 0, i32 0
  %7 = load i8, i8* %m_type2.i.i.i.i.i47, align 8, !tbaa !148, !alias.scope !316, !noalias !313
  store i8 %7, i8* %m_type.i.i.i.i.i46, align 8, !tbaa !145, !alias.scope !313, !noalias !316
  %m_value.i.i.i.i.i48 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %__cur.0.i.i4367, i64 0, i32 1
  %m_value3.i.i.i.i.i49 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %__first.addr.0.i.i4266, i64 0, i32 1
  %8 = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value3.i.i.i.i.i49 to i64*
  %9 = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value.i.i.i.i.i48 to i64*
  %10 = load i64, i64* %8, align 8, !alias.scope !316, !noalias !313
  store i64 %10, i64* %9, align 8, !alias.scope !313, !noalias !316
  tail call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %__first.addr.0.i.i4266, i1 zeroext false) #38, !noalias !313
  store i8 0, i8* %m_type2.i.i.i.i.i47, align 8, !tbaa !145, !alias.scope !316, !noalias !313
  %ref.tmp.sroa.0.0..sroa_idx.i.i.i.i.i50 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %__first.addr.0.i.i4266, i64 0, i32 1, i32 0
  store %"class.std::map"* null, %"class.std::map"** %ref.tmp.sroa.0.0..sroa_idx.i.i.i.i.i50, align 8, !tbaa.struct !179, !alias.scope !316, !noalias !313
  tail call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %__cur.0.i.i4367, i1 zeroext true) #38
  tail call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %__first.addr.0.i.i4266, i1 zeroext false) #38
  %11 = load i8, i8* %m_type2.i.i.i.i.i47, align 8, !tbaa !145
  tail call void @_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE10json_value7destroyENS0_6detail7value_tE(%"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* nonnull dereferenceable(8) %m_value3.i.i.i.i.i49, i8 zeroext %11) #38
  %incdec.ptr.i.i51 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %__first.addr.0.i.i4266, i64 1
  %incdec.ptr2.i.i52 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %__cur.0.i.i4367, i64 1
  %cmp.not.i.i44 = icmp eq %"class.nlohmann::json_v3_11_1::basic_json"* %incdec.ptr.i.i51, %__position.coerce
  br i1 %cmp.not.i.i44, label %for.cond.i.i.preheader, label %for.body.i.i53, !llvm.loop !312

for.body.i.i:                                     ; preds = %for.body.i.i, %for.cond.i.i.preheader
  %__cur.0.i.i64 = phi %"class.nlohmann::json_v3_11_1::basic_json"* [ %__cur.0.i.i, %for.body.i.i ], [ %__cur.0.i.i60, %for.cond.i.i.preheader ]
  %__cur.0.i.i43.pn63 = phi %"class.nlohmann::json_v3_11_1::basic_json"* [ %__cur.0.i.i64, %for.body.i.i ], [ %__cur.0.i.i43.lcssa, %for.cond.i.i.preheader ]
  %__first.addr.0.i.i62 = phi %"class.nlohmann::json_v3_11_1::basic_json"* [ %incdec.ptr.i.i, %for.body.i.i ], [ %__position.coerce, %for.cond.i.i.preheader ]
  tail call void @llvm.experimental.noalias.scope.decl(metadata !318) #38
  tail call void @llvm.experimental.noalias.scope.decl(metadata !321) #38
  %m_type.i.i.i.i.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %__cur.0.i.i64, i64 0, i32 0
  %m_type2.i.i.i.i.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %__first.addr.0.i.i62, i64 0, i32 0
  %12 = load i8, i8* %m_type2.i.i.i.i.i, align 8, !tbaa !148, !alias.scope !321, !noalias !318
  store i8 %12, i8* %m_type.i.i.i.i.i, align 8, !tbaa !145, !alias.scope !318, !noalias !321
  %m_value.i.i.i.i.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %__cur.0.i.i43.pn63, i64 1, i32 1
  %m_value3.i.i.i.i.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %__first.addr.0.i.i62, i64 0, i32 1
  %13 = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value3.i.i.i.i.i to i64*
  %14 = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value.i.i.i.i.i to i64*
  %15 = load i64, i64* %13, align 8, !alias.scope !321, !noalias !318
  store i64 %15, i64* %14, align 8, !alias.scope !318, !noalias !321
  tail call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %__first.addr.0.i.i62, i1 zeroext false) #38, !noalias !318
  store i8 0, i8* %m_type2.i.i.i.i.i, align 8, !tbaa !145, !alias.scope !321, !noalias !318
  %ref.tmp.sroa.0.0..sroa_idx.i.i.i.i.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %__first.addr.0.i.i62, i64 0, i32 1, i32 0
  store %"class.std::map"* null, %"class.std::map"** %ref.tmp.sroa.0.0..sroa_idx.i.i.i.i.i, align 8, !tbaa.struct !179, !alias.scope !321, !noalias !318
  tail call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %__cur.0.i.i64, i1 zeroext true) #38
  tail call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %__first.addr.0.i.i62, i1 zeroext false) #38
  %16 = load i8, i8* %m_type2.i.i.i.i.i, align 8, !tbaa !145
  tail call void @_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE10json_value7destroyENS0_6detail7value_tE(%"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* nonnull dereferenceable(8) %m_value3.i.i.i.i.i, i8 zeroext %16) #38
  %incdec.ptr.i.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %__first.addr.0.i.i62, i64 1
  %__cur.0.i.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %__cur.0.i.i64, i64 1
  %cmp.not.i.i = icmp eq %"class.nlohmann::json_v3_11_1::basic_json"* %incdec.ptr.i.i, %0
  br i1 %cmp.not.i.i, label %_ZSt12__relocate_aIPN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESF_SaISE_EET0_T_SI_SH_RT1_.exit, label %for.body.i.i, !llvm.loop !312

_ZSt12__relocate_aIPN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESF_SaISE_EET0_T_SI_SH_RT1_.exit: ; preds = %for.body.i.i, %for.cond.i.i.preheader
  %__cur.0.i.i.lcssa = phi %"class.nlohmann::json_v3_11_1::basic_json"* [ %__cur.0.i.i60, %for.cond.i.i.preheader ], [ %__cur.0.i.i, %for.body.i.i ]
  %tobool.not.i = icmp eq %"class.nlohmann::json_v3_11_1::basic_json"* %1, null
  br i1 %tobool.not.i, label %_ZNSt12_Vector_baseIN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESaISE_EE13_M_deallocateEPSE_m.exit, label %if.then.i40

if.then.i40:                                      ; preds = %_ZSt12__relocate_aIPN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESF_SaISE_EET0_T_SI_SH_RT1_.exit
  %17 = getelementptr %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %1, i64 0, i32 0
  tail call void @_ZdlPv(i8* %17) #41
  br label %_ZNSt12_Vector_baseIN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESaISE_EE13_M_deallocateEPSE_m.exit

_ZNSt12_Vector_baseIN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESaISE_EE13_M_deallocateEPSE_m.exit: ; preds = %if.then.i40, %_ZSt12__relocate_aIPN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESF_SaISE_EET0_T_SI_SH_RT1_.exit
  %_M_end_of_storage = getelementptr inbounds %"class.std::vector.27", %"class.std::vector.27"* %this, i64 0, i32 0, i32 0, i32 0, i32 2
  store %"class.nlohmann::json_v3_11_1::basic_json"* %cond.i38, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_start.i27.i, align 8, !tbaa !298
  store %"class.nlohmann::json_v3_11_1::basic_json"* %__cur.0.i.i.lcssa, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_finish.i26.i, align 8, !tbaa !178
  %add.ptr20 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %cond.i38, i64 %cond.i
  store %"class.nlohmann::json_v3_11_1::basic_json"* %add.ptr20, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_end_of_storage, align 8, !tbaa !176
  ret void
}

; Function Attrs: nounwind readonly willreturn
declare dso_local %"struct.std::_Rb_tree_node_base"* @_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base(%"struct.std::_Rb_tree_node_base"*) local_unnamed_addr #29

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local void @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS5_blmdSaNS9_14adl_serializerESC_IhSaIhEEEEESt10_Select1stISH_ESt4lessIvESaISH_EE8_M_eraseEPSt13_Rb_tree_nodeISH_E(%"class.std::_Rb_tree"* nonnull dereferenceable(48) %this, %"struct.std::_Rb_tree_node"* %__x) local_unnamed_addr #0 comdat align 2 {
entry:
  %cmp.not7 = icmp eq %"struct.std::_Rb_tree_node"* %__x, null
  br i1 %cmp.not7, label %while.end, label %while.body

while.body:                                       ; preds = %_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS7_blmdSaNSA_14adl_serializerESD_IhSaIhEEEEEEE7destroyISI_EEvPT_.exit, %entry
  %__x.addr.08 = phi %"struct.std::_Rb_tree_node"* [ %3, %_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS7_blmdSaNSA_14adl_serializerESD_IhSaIhEEEEEEE7destroyISI_EEvPT_.exit ], [ %__x, %entry ]
  %_M_right.i = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %__x.addr.08, i64 0, i32 0, i32 3
  %0 = bitcast %"struct.std::_Rb_tree_node_base"** %_M_right.i to %"struct.std::_Rb_tree_node"**
  %1 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %0, align 8, !tbaa !323
  tail call void @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS5_blmdSaNS9_14adl_serializerESC_IhSaIhEEEEESt10_Select1stISH_ESt4lessIvESaISH_EE8_M_eraseEPSt13_Rb_tree_nodeISH_E(%"class.std::_Rb_tree"* nonnull dereferenceable(48) %this, %"struct.std::_Rb_tree_node"* %1)
  %_M_left.i = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %__x.addr.08, i64 0, i32 0, i32 2
  %2 = bitcast %"struct.std::_Rb_tree_node_base"** %_M_left.i to %"struct.std::_Rb_tree_node"**
  %3 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %2, align 8, !tbaa !324
  %_M_storage.i.i = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %__x.addr.08, i64 0, i32 1
  %second.i.i = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %__x.addr.08, i64 0, i32 1, i32 0, i64 32
  %4 = bitcast i8* %second.i.i to %"class.nlohmann::json_v3_11_1::basic_json"*
  tail call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %4, i1 zeroext false) #38
  %m_value.i.i = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %__x.addr.08, i64 0, i32 1, i32 0, i64 40
  %5 = bitcast i8* %m_value.i.i to %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"*
  %6 = load i8, i8* %second.i.i, align 8, !tbaa !145
  tail call void @_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE10json_value7destroyENS0_6detail7value_tE(%"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* nonnull dereferenceable(8) %5, i8 zeroext %6) #38
  %_M_p.i.i.i.i.i.i = bitcast %"struct.__gnu_cxx::__aligned_membuf"* %_M_storage.i.i to i8**
  %7 = load i8*, i8** %_M_p.i.i.i.i.i.i, align 8, !tbaa !17
  %8 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %__x.addr.08, i64 0, i32 1, i32 0, i64 16
  %cmp.i.i.i.i.i = icmp eq i8* %7, %8
  br i1 %cmp.i.i.i.i.i, label %_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS7_blmdSaNSA_14adl_serializerESD_IhSaIhEEEEEEE7destroyISI_EEvPT_.exit, label %if.then.i.i.i.i

if.then.i.i.i.i:                                  ; preds = %while.body
  tail call void @_ZdlPv(i8* %7) #41
  br label %_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS7_blmdSaNSA_14adl_serializerESD_IhSaIhEEEEEEE7destroyISI_EEvPT_.exit

_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS7_blmdSaNSA_14adl_serializerESD_IhSaIhEEEEEEE7destroyISI_EEvPT_.exit: ; preds = %if.then.i.i.i.i, %while.body
  %9 = bitcast %"struct.std::_Rb_tree_node"* %__x.addr.08 to i8*
  tail call void @_ZdlPv(i8* %9) #41
  %cmp.not = icmp eq %"struct.std::_Rb_tree_node"* %3, null
  br i1 %cmp.not, label %while.end, label %while.body, !llvm.loop !325

while.end:                                        ; preds = %_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS7_blmdSaNSA_14adl_serializerESD_IhSaIhEEEEEEE7destroyISI_EEvPT_.exit, %entry
  ret void
}

; Function Attrs: noreturn
declare dso_local void @_ZSt24__throw_out_of_range_fmtPKcz(i8*, ...) local_unnamed_addr #23

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_(%"class.std::vector"* nonnull dereferenceable(24) %this, %"class.std::__cxx11::basic_string"* %__position.coerce, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %__args) local_unnamed_addr #0 comdat align 2 {
entry:
  %_M_finish.i26.i = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %this, i64 0, i32 0, i32 0, i32 0, i32 1
  %0 = load %"class.std::__cxx11::basic_string"*, %"class.std::__cxx11::basic_string"** %_M_finish.i26.i, align 8, !tbaa !32
  %_M_start.i27.i = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %this, i64 0, i32 0, i32 0, i32 0, i32 0
  %1 = load %"class.std::__cxx11::basic_string"*, %"class.std::__cxx11::basic_string"** %_M_start.i27.i, align 8, !tbaa !81
  %sub.ptr.lhs.cast.i28.i = ptrtoint %"class.std::__cxx11::basic_string"* %0 to i64
  %sub.ptr.rhs.cast.i29.i = ptrtoint %"class.std::__cxx11::basic_string"* %1 to i64
  %sub.ptr.sub.i30.i = sub i64 %sub.ptr.lhs.cast.i28.i, %sub.ptr.rhs.cast.i29.i
  %sub.ptr.div.i31.i = ashr exact i64 %sub.ptr.sub.i30.i, 5
  %cmp.i = icmp eq i64 %sub.ptr.sub.i30.i, 9223372036854775776
  br i1 %cmp.i, label %if.then.i, label %_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEmPKc.exit

if.then.i:                                        ; preds = %entry
  tail call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.41, i64 0, i64 0)) #40
  unreachable

_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEmPKc.exit: ; preds = %entry
  %cmp.i.i = icmp eq i64 %sub.ptr.sub.i30.i, 0
  %.sroa.speculated.i = select i1 %cmp.i.i, i64 1, i64 %sub.ptr.div.i31.i
  %add.i = add nsw i64 %.sroa.speculated.i, %sub.ptr.div.i31.i
  %cmp7.i = icmp ult i64 %add.i, %sub.ptr.div.i31.i
  %cmp9.i = icmp ugt i64 %add.i, 288230376151711743
  %or.cond.i = or i1 %cmp7.i, %cmp9.i
  %cond.i = select i1 %or.cond.i, i64 288230376151711743, i64 %add.i
  %sub.ptr.lhs.cast.i = ptrtoint %"class.std::__cxx11::basic_string"* %__position.coerce to i64
  %sub.ptr.sub.i = sub i64 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i29.i
  %sub.ptr.div.i = ashr exact i64 %sub.ptr.sub.i, 5
  %cmp.not.i = icmp eq i64 %cond.i, 0
  br i1 %cmp.not.i, label %_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEm.exit, label %_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_m.exit.i

_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_m.exit.i: ; preds = %_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEmPKc.exit
  %mul.i.i.i = shl nuw nsw i64 %cond.i, 5
  %call5.i.i.i = tail call noalias nonnull i8* @_Znwm(i64 %mul.i.i.i) #43
  %2 = bitcast i8* %call5.i.i.i to %"class.std::__cxx11::basic_string"*
  br label %_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEm.exit

_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEm.exit: ; preds = %_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_m.exit.i, %_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEmPKc.exit
  %cond.i68 = phi %"class.std::__cxx11::basic_string"* [ %2, %_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_m.exit.i ], [ null, %_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEmPKc.exit ]
  %add.ptr = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %cond.i68, i64 %sub.ptr.div.i
  %3 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %cond.i68, i64 %sub.ptr.div.i, i32 2
  %arraydecay.i.i.i.i = bitcast %union.anon* %3 to i8*
  %4 = bitcast %"class.std::__cxx11::basic_string"* %add.ptr to %union.anon**
  store %union.anon* %3, %union.anon** %4, align 8, !tbaa !14
  %_M_p.i.i26.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__args, i64 0, i32 0, i32 0
  %5 = load i8*, i8** %_M_p.i.i26.i.i.i, align 8, !tbaa !17
  %6 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__args, i64 0, i32 2
  %arraydecay.i.i.i.i.i = bitcast %union.anon* %6 to i8*
  %cmp.i27.i.i.i = icmp eq i8* %5, %arraydecay.i.i.i.i.i
  br i1 %cmp.i27.i.i.i, label %if.then.i.i.i, label %if.else.i.i.i

if.then.i.i.i:                                    ; preds = %_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEm.exit
  %_M_string_length.i25.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__args, i64 0, i32 1
  %7 = load i64, i64* %_M_string_length.i25.i.i.i, align 8, !tbaa !19
  %add.i.i.i = add i64 %7, 1
  %cmp.i.i.i.i = icmp eq i64 %add.i.i.i, 0
  br i1 %cmp.i.i.i.i, label %_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_.exit, label %if.end.i.i.i.i

if.end.i.i.i.i:                                   ; preds = %if.then.i.i.i
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %arraydecay.i.i.i.i, i8* nonnull align 8 %5, i64 %add.i.i.i, i1 false) #38
  br label %_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_.exit

if.else.i.i.i:                                    ; preds = %_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEm.exit
  %_M_p.i23.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %add.ptr, i64 0, i32 0, i32 0
  store i8* %5, i8** %_M_p.i23.i.i.i, align 8, !tbaa !17
  %_M_allocated_capacity.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__args, i64 0, i32 2, i32 0
  %8 = load i64, i64* %_M_allocated_capacity.i.i.i, align 8, !tbaa !21
  %_M_allocated_capacity.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %cond.i68, i64 %sub.ptr.div.i, i32 2, i32 0
  store i64 %8, i64* %_M_allocated_capacity.i.i.i.i, align 8, !tbaa !21
  %_M_string_length.i22.i.i.i.phi.trans.insert = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__args, i64 0, i32 1
  %.pre = load i64, i64* %_M_string_length.i22.i.i.i.phi.trans.insert, align 8, !tbaa !19
  br label %_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_.exit

_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_.exit: ; preds = %if.else.i.i.i, %if.end.i.i.i.i, %if.then.i.i.i
  %9 = phi i64 [ -1, %if.then.i.i.i ], [ %7, %if.end.i.i.i.i ], [ %.pre, %if.else.i.i.i ]
  %_M_string_length.i22.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__args, i64 0, i32 1
  %_M_string_length.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %cond.i68, i64 %sub.ptr.div.i, i32 1
  store i64 %9, i64* %_M_string_length.i.i.i.i, align 8, !tbaa !19
  %10 = bitcast %"class.std::__cxx11::basic_string"* %__args to %union.anon**
  store %union.anon* %6, %union.anon** %10, align 8, !tbaa !17
  store i64 0, i64* %_M_string_length.i22.i.i.i, align 8, !tbaa !19
  store i8 0, i8* %arraydecay.i.i.i.i.i, align 8, !tbaa !21
  %cmp.not8.i.i.i.i39 = icmp eq %"class.std::__cxx11::basic_string"* %1, %__position.coerce
  br i1 %cmp.not8.i.i.i.i39, label %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_.exit65, label %for.body.i.i.i.i46

for.body.i.i.i.i46:                               ; preds = %_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i63, %_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_.exit
  %__cur.011.i.i.i.i40 = phi %"class.std::__cxx11::basic_string"* [ %incdec.ptr2.i.i.i.i61, %_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i63 ], [ %cond.i68, %_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_.exit ]
  %__first.addr.09.i.i.i.i41 = phi %"class.std::__cxx11::basic_string"* [ %incdec.ptr.i.i.i.i60, %_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i63 ], [ %1, %_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_.exit ]
  tail call void @llvm.experimental.noalias.scope.decl(metadata !326) #38
  tail call void @llvm.experimental.noalias.scope.decl(metadata !329) #38
  %11 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__cur.011.i.i.i.i40, i64 0, i32 2
  %arraydecay.i.i.i.i.i.i.i.i.i42 = bitcast %union.anon* %11 to i8*
  %12 = bitcast %"class.std::__cxx11::basic_string"* %__cur.011.i.i.i.i40 to %union.anon**
  store %union.anon* %11, %union.anon** %12, align 8, !tbaa !14, !alias.scope !326, !noalias !329
  %_M_p.i.i26.i.i.i.i.i.i.i.i43 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__first.addr.09.i.i.i.i41, i64 0, i32 0, i32 0
  %13 = load i8*, i8** %_M_p.i.i26.i.i.i.i.i.i.i.i43, align 8, !tbaa !17, !alias.scope !329, !noalias !326
  %14 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__first.addr.09.i.i.i.i41, i64 0, i32 2
  %arraydecay.i.i.i.i.i.i.i.i.i.i44 = bitcast %union.anon* %14 to i8*
  %cmp.i27.i.i.i.i.i.i.i.i45 = icmp eq i8* %13, %arraydecay.i.i.i.i.i.i.i.i.i.i44
  br i1 %cmp.i27.i.i.i.i.i.i.i.i45, label %if.then.i.i.i.i.i.i.i.i50, label %if.else.i.i.i.i.i.i.i.i57

if.then.i.i.i.i.i.i.i.i50:                        ; preds = %for.body.i.i.i.i46
  %_M_string_length.i25.i.i.i.i.i.i.i.i47 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__first.addr.09.i.i.i.i41, i64 0, i32 1
  %15 = load i64, i64* %_M_string_length.i25.i.i.i.i.i.i.i.i47, align 8, !tbaa !19, !alias.scope !329, !noalias !326
  %add.i.i.i.i.i.i.i.i48 = add i64 %15, 1
  %cmp.i.i.i.i.i.i.i.i.i49 = icmp eq i64 %add.i.i.i.i.i.i.i.i48, 0
  br i1 %cmp.i.i.i.i.i.i.i.i.i49, label %_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i63, label %if.end.i.i.i.i.i.i.i.i.i51

if.end.i.i.i.i.i.i.i.i.i51:                       ; preds = %if.then.i.i.i.i.i.i.i.i50
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %arraydecay.i.i.i.i.i.i.i.i.i42, i8* nonnull align 8 %13, i64 %add.i.i.i.i.i.i.i.i48, i1 false) #38
  br label %_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i63

if.else.i.i.i.i.i.i.i.i57:                        ; preds = %for.body.i.i.i.i46
  %_M_p.i23.i.i.i.i.i.i.i.i52 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__cur.011.i.i.i.i40, i64 0, i32 0, i32 0
  store i8* %13, i8** %_M_p.i23.i.i.i.i.i.i.i.i52, align 8, !tbaa !17, !alias.scope !326, !noalias !329
  %_M_allocated_capacity.i.i.i.i.i.i.i.i53 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__first.addr.09.i.i.i.i41, i64 0, i32 2, i32 0
  %16 = load i64, i64* %_M_allocated_capacity.i.i.i.i.i.i.i.i53, align 8, !tbaa !21, !alias.scope !329, !noalias !326
  %_M_allocated_capacity.i.i.i.i.i.i.i.i.i54 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__cur.011.i.i.i.i40, i64 0, i32 2, i32 0
  store i64 %16, i64* %_M_allocated_capacity.i.i.i.i.i.i.i.i.i54, align 8, !tbaa !21, !alias.scope !326, !noalias !329
  %_M_string_length.i22.i.i.i.phi.trans.insert.i.i.i.i.i55 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__first.addr.09.i.i.i.i41, i64 0, i32 1
  %.pre.i.i.i.i.i56 = load i64, i64* %_M_string_length.i22.i.i.i.phi.trans.insert.i.i.i.i.i55, align 8, !tbaa !19, !alias.scope !329, !noalias !326
  br label %_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i63

_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i63: ; preds = %if.else.i.i.i.i.i.i.i.i57, %if.end.i.i.i.i.i.i.i.i.i51, %if.then.i.i.i.i.i.i.i.i50
  %17 = phi i64 [ -1, %if.then.i.i.i.i.i.i.i.i50 ], [ %15, %if.end.i.i.i.i.i.i.i.i.i51 ], [ %.pre.i.i.i.i.i56, %if.else.i.i.i.i.i.i.i.i57 ]
  %_M_string_length.i22.i.i.i.i.i.i.i.i58 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__first.addr.09.i.i.i.i41, i64 0, i32 1
  %_M_string_length.i.i.i.i.i.i.i.i.i59 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__cur.011.i.i.i.i40, i64 0, i32 1
  store i64 %17, i64* %_M_string_length.i.i.i.i.i.i.i.i.i59, align 8, !tbaa !19, !alias.scope !326, !noalias !329
  %18 = bitcast %"class.std::__cxx11::basic_string"* %__first.addr.09.i.i.i.i41 to %union.anon**
  store %union.anon* %14, %union.anon** %18, align 8, !tbaa !17, !alias.scope !329, !noalias !326
  store i64 0, i64* %_M_string_length.i22.i.i.i.i.i.i.i.i58, align 8, !tbaa !19, !alias.scope !329, !noalias !326
  store i8 0, i8* %arraydecay.i.i.i.i.i.i.i.i.i.i44, align 8, !tbaa !21, !alias.scope !329, !noalias !326
  %incdec.ptr.i.i.i.i60 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__first.addr.09.i.i.i.i41, i64 1
  %incdec.ptr2.i.i.i.i61 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__cur.011.i.i.i.i40, i64 1
  %cmp.not.i.i.i.i62 = icmp eq %"class.std::__cxx11::basic_string"* %incdec.ptr.i.i.i.i60, %__position.coerce
  br i1 %cmp.not.i.i.i.i62, label %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_.exit65, label %for.body.i.i.i.i46, !llvm.loop !331

_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_.exit65: ; preds = %_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i63, %_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_.exit
  %__cur.0.lcssa.i.i.i.i64 = phi %"class.std::__cxx11::basic_string"* [ %cond.i68, %_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_.exit ], [ %incdec.ptr2.i.i.i.i61, %_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i63 ]
  %incdec.ptr = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__cur.0.lcssa.i.i.i.i64, i64 1
  %cmp.not8.i.i.i.i = icmp eq %"class.std::__cxx11::basic_string"* %0, %__position.coerce
  br i1 %cmp.not8.i.i.i.i, label %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_.exit, label %for.body.i.i.i.i

for.body.i.i.i.i:                                 ; preds = %_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i, %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_.exit65
  %__cur.011.i.i.i.i = phi %"class.std::__cxx11::basic_string"* [ %incdec.ptr2.i.i.i.i, %_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i ], [ %incdec.ptr, %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_.exit65 ]
  %__first.addr.09.i.i.i.i = phi %"class.std::__cxx11::basic_string"* [ %incdec.ptr.i.i.i.i, %_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i ], [ %__position.coerce, %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_.exit65 ]
  tail call void @llvm.experimental.noalias.scope.decl(metadata !332) #38
  tail call void @llvm.experimental.noalias.scope.decl(metadata !335) #38
  %19 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__cur.011.i.i.i.i, i64 0, i32 2
  %arraydecay.i.i.i.i.i.i.i.i.i = bitcast %union.anon* %19 to i8*
  %20 = bitcast %"class.std::__cxx11::basic_string"* %__cur.011.i.i.i.i to %union.anon**
  store %union.anon* %19, %union.anon** %20, align 8, !tbaa !14, !alias.scope !332, !noalias !335
  %_M_p.i.i26.i.i.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__first.addr.09.i.i.i.i, i64 0, i32 0, i32 0
  %21 = load i8*, i8** %_M_p.i.i26.i.i.i.i.i.i.i.i, align 8, !tbaa !17, !alias.scope !335, !noalias !332
  %22 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__first.addr.09.i.i.i.i, i64 0, i32 2
  %arraydecay.i.i.i.i.i.i.i.i.i.i = bitcast %union.anon* %22 to i8*
  %cmp.i27.i.i.i.i.i.i.i.i = icmp eq i8* %21, %arraydecay.i.i.i.i.i.i.i.i.i.i
  br i1 %cmp.i27.i.i.i.i.i.i.i.i, label %if.then.i.i.i.i.i.i.i.i, label %if.else.i.i.i.i.i.i.i.i

if.then.i.i.i.i.i.i.i.i:                          ; preds = %for.body.i.i.i.i
  %_M_string_length.i25.i.i.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__first.addr.09.i.i.i.i, i64 0, i32 1
  %23 = load i64, i64* %_M_string_length.i25.i.i.i.i.i.i.i.i, align 8, !tbaa !19, !alias.scope !335, !noalias !332
  %add.i.i.i.i.i.i.i.i = add i64 %23, 1
  %cmp.i.i.i.i.i.i.i.i.i = icmp eq i64 %add.i.i.i.i.i.i.i.i, 0
  br i1 %cmp.i.i.i.i.i.i.i.i.i, label %_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i, label %if.end.i.i.i.i.i.i.i.i.i

if.end.i.i.i.i.i.i.i.i.i:                         ; preds = %if.then.i.i.i.i.i.i.i.i
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %arraydecay.i.i.i.i.i.i.i.i.i, i8* nonnull align 8 %21, i64 %add.i.i.i.i.i.i.i.i, i1 false) #38
  br label %_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i

if.else.i.i.i.i.i.i.i.i:                          ; preds = %for.body.i.i.i.i
  %_M_p.i23.i.i.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__cur.011.i.i.i.i, i64 0, i32 0, i32 0
  store i8* %21, i8** %_M_p.i23.i.i.i.i.i.i.i.i, align 8, !tbaa !17, !alias.scope !332, !noalias !335
  %_M_allocated_capacity.i.i.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__first.addr.09.i.i.i.i, i64 0, i32 2, i32 0
  %24 = load i64, i64* %_M_allocated_capacity.i.i.i.i.i.i.i.i, align 8, !tbaa !21, !alias.scope !335, !noalias !332
  %_M_allocated_capacity.i.i.i.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__cur.011.i.i.i.i, i64 0, i32 2, i32 0
  store i64 %24, i64* %_M_allocated_capacity.i.i.i.i.i.i.i.i.i, align 8, !tbaa !21, !alias.scope !332, !noalias !335
  %_M_string_length.i22.i.i.i.phi.trans.insert.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__first.addr.09.i.i.i.i, i64 0, i32 1
  %.pre.i.i.i.i.i = load i64, i64* %_M_string_length.i22.i.i.i.phi.trans.insert.i.i.i.i.i, align 8, !tbaa !19, !alias.scope !335, !noalias !332
  br label %_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i

_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i: ; preds = %if.else.i.i.i.i.i.i.i.i, %if.end.i.i.i.i.i.i.i.i.i, %if.then.i.i.i.i.i.i.i.i
  %25 = phi i64 [ -1, %if.then.i.i.i.i.i.i.i.i ], [ %23, %if.end.i.i.i.i.i.i.i.i.i ], [ %.pre.i.i.i.i.i, %if.else.i.i.i.i.i.i.i.i ]
  %_M_string_length.i22.i.i.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__first.addr.09.i.i.i.i, i64 0, i32 1
  %_M_string_length.i.i.i.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__cur.011.i.i.i.i, i64 0, i32 1
  store i64 %25, i64* %_M_string_length.i.i.i.i.i.i.i.i.i, align 8, !tbaa !19, !alias.scope !332, !noalias !335
  %26 = bitcast %"class.std::__cxx11::basic_string"* %__first.addr.09.i.i.i.i to %union.anon**
  store %union.anon* %22, %union.anon** %26, align 8, !tbaa !17, !alias.scope !335, !noalias !332
  store i64 0, i64* %_M_string_length.i22.i.i.i.i.i.i.i.i, align 8, !tbaa !19, !alias.scope !335, !noalias !332
  store i8 0, i8* %arraydecay.i.i.i.i.i.i.i.i.i.i, align 8, !tbaa !21, !alias.scope !335, !noalias !332
  %incdec.ptr.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__first.addr.09.i.i.i.i, i64 1
  %incdec.ptr2.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__cur.011.i.i.i.i, i64 1
  %cmp.not.i.i.i.i = icmp eq %"class.std::__cxx11::basic_string"* %incdec.ptr.i.i.i.i, %0
  br i1 %cmp.not.i.i.i.i, label %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_.exit, label %for.body.i.i.i.i, !llvm.loop !331

_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_.exit: ; preds = %_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i, %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_.exit65
  %__cur.0.lcssa.i.i.i.i = phi %"class.std::__cxx11::basic_string"* [ %incdec.ptr, %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_.exit65 ], [ %incdec.ptr2.i.i.i.i, %_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i ]
  %tobool.not.i = icmp eq %"class.std::__cxx11::basic_string"* %1, null
  br i1 %tobool.not.i, label %_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_m.exit, label %if.then.i38

if.then.i38:                                      ; preds = %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_.exit
  %27 = bitcast %"class.std::__cxx11::basic_string"* %1 to i8*
  tail call void @_ZdlPv(i8* %27) #41
  br label %_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_m.exit

_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_m.exit: ; preds = %if.then.i38, %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_.exit
  %_M_end_of_storage = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %this, i64 0, i32 0, i32 0, i32 0, i32 2
  store %"class.std::__cxx11::basic_string"* %cond.i68, %"class.std::__cxx11::basic_string"** %_M_start.i27.i, align 8, !tbaa !81
  store %"class.std::__cxx11::basic_string"* %__cur.0.lcssa.i.i.i.i, %"class.std::__cxx11::basic_string"** %_M_finish.i26.i, align 8, !tbaa !32
  %add.ptr20 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %cond.i68, i64 %cond.i
  store %"class.std::__cxx11::basic_string"* %add.ptr20, %"class.std::__cxx11::basic_string"** %_M_end_of_storage, align 8, !tbaa !34
  ret void
}

; Function Attrs: nounwind
declare dso_local i64 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12find_last_ofEPKcmm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32), i8*, i64, i64) local_unnamed_addr #6

; Function Attrs: nounwind
declare dso_local i64 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5rfindEcm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32), i8 signext, i64) local_unnamed_addr #6

declare dso_local void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* nonnull dereferenceable(264), i32) local_unnamed_addr #3

declare dso_local %"class.std::basic_filebuf"* @_ZNSt13basic_filebufIcSt11char_traitsIcEE5closeEv(%"class.std::basic_filebuf"* nonnull dereferenceable(240)) local_unnamed_addr #3

; Function Attrs: nounwind
declare dso_local void @_ZNSt12__basic_fileIcED1Ev(%"class.std::__basic_file"* nonnull dereferenceable(9)) unnamed_addr #6

; Function Attrs: nounwind
declare dso_local void @_ZNSt6localeD1Ev(%"class.std::locale"* nonnull dereferenceable(8)) unnamed_addr #6

; Function Attrs: nounwind
declare dso_local void @_ZNSt8ios_baseD2Ev(%"class.std::ios_base"* nonnull dereferenceable(216)) unnamed_addr #6

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_(%"class.std::vector"* nonnull dereferenceable(24) %this, %"class.std::__cxx11::basic_string"* %__position.coerce, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %__args) local_unnamed_addr #0 comdat align 2 {
entry:
  %__dnew.i.i.i.i = alloca i64, align 8
  %_M_finish.i26.i = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %this, i64 0, i32 0, i32 0, i32 0, i32 1
  %0 = load %"class.std::__cxx11::basic_string"*, %"class.std::__cxx11::basic_string"** %_M_finish.i26.i, align 8, !tbaa !32
  %_M_start.i27.i = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %this, i64 0, i32 0, i32 0, i32 0, i32 0
  %1 = load %"class.std::__cxx11::basic_string"*, %"class.std::__cxx11::basic_string"** %_M_start.i27.i, align 8, !tbaa !81
  %sub.ptr.lhs.cast.i28.i = ptrtoint %"class.std::__cxx11::basic_string"* %0 to i64
  %sub.ptr.rhs.cast.i29.i = ptrtoint %"class.std::__cxx11::basic_string"* %1 to i64
  %sub.ptr.sub.i30.i = sub i64 %sub.ptr.lhs.cast.i28.i, %sub.ptr.rhs.cast.i29.i
  %sub.ptr.div.i31.i = ashr exact i64 %sub.ptr.sub.i30.i, 5
  %cmp.i = icmp eq i64 %sub.ptr.sub.i30.i, 9223372036854775776
  br i1 %cmp.i, label %if.then.i, label %_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEmPKc.exit

if.then.i:                                        ; preds = %entry
  tail call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.41, i64 0, i64 0)) #40
  unreachable

_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEmPKc.exit: ; preds = %entry
  %cmp.i.i = icmp eq i64 %sub.ptr.sub.i30.i, 0
  %.sroa.speculated.i = select i1 %cmp.i.i, i64 1, i64 %sub.ptr.div.i31.i
  %add.i = add nsw i64 %.sroa.speculated.i, %sub.ptr.div.i31.i
  %cmp7.i = icmp ult i64 %add.i, %sub.ptr.div.i31.i
  %cmp9.i = icmp ugt i64 %add.i, 288230376151711743
  %or.cond.i = or i1 %cmp7.i, %cmp9.i
  %cond.i = select i1 %or.cond.i, i64 288230376151711743, i64 %add.i
  %sub.ptr.lhs.cast.i = ptrtoint %"class.std::__cxx11::basic_string"* %__position.coerce to i64
  %sub.ptr.sub.i = sub i64 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i29.i
  %sub.ptr.div.i = ashr exact i64 %sub.ptr.sub.i, 5
  %cmp.not.i = icmp eq i64 %cond.i, 0
  br i1 %cmp.not.i, label %_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEm.exit, label %_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_m.exit.i

_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_m.exit.i: ; preds = %_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEmPKc.exit
  %mul.i.i.i = shl nuw nsw i64 %cond.i, 5
  %call5.i.i.i = tail call noalias nonnull i8* @_Znwm(i64 %mul.i.i.i) #43
  %2 = bitcast i8* %call5.i.i.i to %"class.std::__cxx11::basic_string"*
  br label %_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEm.exit

_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEm.exit: ; preds = %_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_m.exit.i, %_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEmPKc.exit
  %cond.i67 = phi %"class.std::__cxx11::basic_string"* [ %2, %_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_m.exit.i ], [ null, %_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEmPKc.exit ]
  %add.ptr = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %cond.i67, i64 %sub.ptr.div.i
  %3 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %cond.i67, i64 %sub.ptr.div.i, i32 2
  %4 = bitcast %"class.std::__cxx11::basic_string"* %add.ptr to %union.anon**
  store %union.anon* %3, %union.anon** %4, align 8, !tbaa !14
  %_M_p.i9.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__args, i64 0, i32 0, i32 0
  %5 = load i8*, i8** %_M_p.i9.i.i.i, align 8, !tbaa !17
  %_M_string_length.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__args, i64 0, i32 1
  %6 = load i64, i64* %_M_string_length.i.i.i.i, align 8, !tbaa !19
  %7 = bitcast i64* %__dnew.i.i.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #38
  store i64 %6, i64* %__dnew.i.i.i.i, align 8, !tbaa !20
  %cmp.i.i.i.i = icmp ugt i64 %6, 15
  br i1 %cmp.i.i.i.i, label %if.then.i.i.i.i, label %entry.if.end_crit_edge.i.i.i.i

entry.if.end_crit_edge.i.i.i.i:                   ; preds = %_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEm.exit
  %8 = bitcast %union.anon* %3 to i8*
  br label %if.end.i.i.i.i

if.then.i.i.i.i:                                  ; preds = %_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEm.exit
  %call2.i.i.i.i = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %add.ptr, i64* nonnull align 8 dereferenceable(8) %__dnew.i.i.i.i, i64 0) #38
  %_M_p.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %add.ptr, i64 0, i32 0, i32 0
  store i8* %call2.i.i.i.i, i8** %_M_p.i.i.i.i.i, align 8, !tbaa !17
  %9 = load i64, i64* %__dnew.i.i.i.i, align 8, !tbaa !20
  %_M_allocated_capacity.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %cond.i67, i64 %sub.ptr.div.i, i32 2, i32 0
  store i64 %9, i64* %_M_allocated_capacity.i.i.i.i.i, align 8, !tbaa !21
  br label %if.end.i.i.i.i

if.end.i.i.i.i:                                   ; preds = %if.then.i.i.i.i, %entry.if.end_crit_edge.i.i.i.i
  %10 = phi i8* [ %8, %entry.if.end_crit_edge.i.i.i.i ], [ %call2.i.i.i.i, %if.then.i.i.i.i ]
  switch i64 %6, label %if.end.i.i.i.i.i.i.i [
    i64 1, label %if.then.i.i7.i.i.i.i
    i64 0, label %_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_.exit
  ]

if.then.i.i7.i.i.i.i:                             ; preds = %if.end.i.i.i.i
  %11 = load i8, i8* %5, align 1, !tbaa !21
  store i8 %11, i8* %10, align 1, !tbaa !21
  br label %_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_.exit

if.end.i.i.i.i.i.i.i:                             ; preds = %if.end.i.i.i.i
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %10, i8* align 1 %5, i64 %6, i1 false) #38
  br label %_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_.exit

_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_.exit: ; preds = %if.end.i.i.i.i.i.i.i, %if.then.i.i7.i.i.i.i, %if.end.i.i.i.i
  %_M_p.i8.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %add.ptr, i64 0, i32 0, i32 0
  %12 = load i64, i64* %__dnew.i.i.i.i, align 8, !tbaa !20
  %_M_string_length.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %cond.i67, i64 %sub.ptr.div.i, i32 1
  store i64 %12, i64* %_M_string_length.i.i.i.i.i.i, align 8, !tbaa !19
  %13 = load i8*, i8** %_M_p.i8.i.i.i.i, align 8, !tbaa !17
  %arrayidx.i.i.i.i.i = getelementptr inbounds i8, i8* %13, i64 %12
  store i8 0, i8* %arrayidx.i.i.i.i.i, align 1, !tbaa !21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #38
  %cmp.not8.i.i.i.i39 = icmp eq %"class.std::__cxx11::basic_string"* %1, %__position.coerce
  br i1 %cmp.not8.i.i.i.i39, label %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_.exit65, label %for.body.i.i.i.i46

for.body.i.i.i.i46:                               ; preds = %_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i63, %_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_.exit
  %__cur.011.i.i.i.i40 = phi %"class.std::__cxx11::basic_string"* [ %incdec.ptr2.i.i.i.i61, %_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i63 ], [ %cond.i67, %_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_.exit ]
  %__first.addr.09.i.i.i.i41 = phi %"class.std::__cxx11::basic_string"* [ %incdec.ptr.i.i.i.i60, %_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i63 ], [ %1, %_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_.exit ]
  call void @llvm.experimental.noalias.scope.decl(metadata !337) #38
  call void @llvm.experimental.noalias.scope.decl(metadata !340) #38
  %14 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__cur.011.i.i.i.i40, i64 0, i32 2
  %arraydecay.i.i.i.i.i.i.i.i.i42 = bitcast %union.anon* %14 to i8*
  %15 = bitcast %"class.std::__cxx11::basic_string"* %__cur.011.i.i.i.i40 to %union.anon**
  store %union.anon* %14, %union.anon** %15, align 8, !tbaa !14, !alias.scope !337, !noalias !340
  %_M_p.i.i26.i.i.i.i.i.i.i.i43 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__first.addr.09.i.i.i.i41, i64 0, i32 0, i32 0
  %16 = load i8*, i8** %_M_p.i.i26.i.i.i.i.i.i.i.i43, align 8, !tbaa !17, !alias.scope !340, !noalias !337
  %17 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__first.addr.09.i.i.i.i41, i64 0, i32 2
  %arraydecay.i.i.i.i.i.i.i.i.i.i44 = bitcast %union.anon* %17 to i8*
  %cmp.i27.i.i.i.i.i.i.i.i45 = icmp eq i8* %16, %arraydecay.i.i.i.i.i.i.i.i.i.i44
  br i1 %cmp.i27.i.i.i.i.i.i.i.i45, label %if.then.i.i.i.i.i.i.i.i50, label %if.else.i.i.i.i.i.i.i.i57

if.then.i.i.i.i.i.i.i.i50:                        ; preds = %for.body.i.i.i.i46
  %_M_string_length.i25.i.i.i.i.i.i.i.i47 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__first.addr.09.i.i.i.i41, i64 0, i32 1
  %18 = load i64, i64* %_M_string_length.i25.i.i.i.i.i.i.i.i47, align 8, !tbaa !19, !alias.scope !340, !noalias !337
  %add.i.i.i.i.i.i.i.i48 = add i64 %18, 1
  %cmp.i.i.i.i.i.i.i.i.i49 = icmp eq i64 %add.i.i.i.i.i.i.i.i48, 0
  br i1 %cmp.i.i.i.i.i.i.i.i.i49, label %_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i63, label %if.end.i.i.i.i.i.i.i.i.i51

if.end.i.i.i.i.i.i.i.i.i51:                       ; preds = %if.then.i.i.i.i.i.i.i.i50
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %arraydecay.i.i.i.i.i.i.i.i.i42, i8* nonnull align 8 %16, i64 %add.i.i.i.i.i.i.i.i48, i1 false) #38
  br label %_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i63

if.else.i.i.i.i.i.i.i.i57:                        ; preds = %for.body.i.i.i.i46
  %_M_p.i23.i.i.i.i.i.i.i.i52 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__cur.011.i.i.i.i40, i64 0, i32 0, i32 0
  store i8* %16, i8** %_M_p.i23.i.i.i.i.i.i.i.i52, align 8, !tbaa !17, !alias.scope !337, !noalias !340
  %_M_allocated_capacity.i.i.i.i.i.i.i.i53 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__first.addr.09.i.i.i.i41, i64 0, i32 2, i32 0
  %19 = load i64, i64* %_M_allocated_capacity.i.i.i.i.i.i.i.i53, align 8, !tbaa !21, !alias.scope !340, !noalias !337
  %_M_allocated_capacity.i.i.i.i.i.i.i.i.i54 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__cur.011.i.i.i.i40, i64 0, i32 2, i32 0
  store i64 %19, i64* %_M_allocated_capacity.i.i.i.i.i.i.i.i.i54, align 8, !tbaa !21, !alias.scope !337, !noalias !340
  %_M_string_length.i22.i.i.i.phi.trans.insert.i.i.i.i.i55 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__first.addr.09.i.i.i.i41, i64 0, i32 1
  %.pre.i.i.i.i.i56 = load i64, i64* %_M_string_length.i22.i.i.i.phi.trans.insert.i.i.i.i.i55, align 8, !tbaa !19, !alias.scope !340, !noalias !337
  br label %_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i63

_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i63: ; preds = %if.else.i.i.i.i.i.i.i.i57, %if.end.i.i.i.i.i.i.i.i.i51, %if.then.i.i.i.i.i.i.i.i50
  %20 = phi i64 [ -1, %if.then.i.i.i.i.i.i.i.i50 ], [ %18, %if.end.i.i.i.i.i.i.i.i.i51 ], [ %.pre.i.i.i.i.i56, %if.else.i.i.i.i.i.i.i.i57 ]
  %_M_string_length.i22.i.i.i.i.i.i.i.i58 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__first.addr.09.i.i.i.i41, i64 0, i32 1
  %_M_string_length.i.i.i.i.i.i.i.i.i59 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__cur.011.i.i.i.i40, i64 0, i32 1
  store i64 %20, i64* %_M_string_length.i.i.i.i.i.i.i.i.i59, align 8, !tbaa !19, !alias.scope !337, !noalias !340
  %21 = bitcast %"class.std::__cxx11::basic_string"* %__first.addr.09.i.i.i.i41 to %union.anon**
  store %union.anon* %17, %union.anon** %21, align 8, !tbaa !17, !alias.scope !340, !noalias !337
  store i64 0, i64* %_M_string_length.i22.i.i.i.i.i.i.i.i58, align 8, !tbaa !19, !alias.scope !340, !noalias !337
  store i8 0, i8* %arraydecay.i.i.i.i.i.i.i.i.i.i44, align 8, !tbaa !21, !alias.scope !340, !noalias !337
  %incdec.ptr.i.i.i.i60 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__first.addr.09.i.i.i.i41, i64 1
  %incdec.ptr2.i.i.i.i61 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__cur.011.i.i.i.i40, i64 1
  %cmp.not.i.i.i.i62 = icmp eq %"class.std::__cxx11::basic_string"* %incdec.ptr.i.i.i.i60, %__position.coerce
  br i1 %cmp.not.i.i.i.i62, label %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_.exit65, label %for.body.i.i.i.i46, !llvm.loop !331

_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_.exit65: ; preds = %_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i63, %_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_.exit
  %__cur.0.lcssa.i.i.i.i64 = phi %"class.std::__cxx11::basic_string"* [ %cond.i67, %_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_.exit ], [ %incdec.ptr2.i.i.i.i61, %_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i63 ]
  %incdec.ptr = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__cur.0.lcssa.i.i.i.i64, i64 1
  %cmp.not8.i.i.i.i = icmp eq %"class.std::__cxx11::basic_string"* %0, %__position.coerce
  br i1 %cmp.not8.i.i.i.i, label %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_.exit, label %for.body.i.i.i.i

for.body.i.i.i.i:                                 ; preds = %_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i, %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_.exit65
  %__cur.011.i.i.i.i = phi %"class.std::__cxx11::basic_string"* [ %incdec.ptr2.i.i.i.i, %_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i ], [ %incdec.ptr, %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_.exit65 ]
  %__first.addr.09.i.i.i.i = phi %"class.std::__cxx11::basic_string"* [ %incdec.ptr.i.i.i.i, %_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i ], [ %__position.coerce, %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_.exit65 ]
  call void @llvm.experimental.noalias.scope.decl(metadata !342) #38
  call void @llvm.experimental.noalias.scope.decl(metadata !345) #38
  %22 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__cur.011.i.i.i.i, i64 0, i32 2
  %arraydecay.i.i.i.i.i.i.i.i.i = bitcast %union.anon* %22 to i8*
  %23 = bitcast %"class.std::__cxx11::basic_string"* %__cur.011.i.i.i.i to %union.anon**
  store %union.anon* %22, %union.anon** %23, align 8, !tbaa !14, !alias.scope !342, !noalias !345
  %_M_p.i.i26.i.i.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__first.addr.09.i.i.i.i, i64 0, i32 0, i32 0
  %24 = load i8*, i8** %_M_p.i.i26.i.i.i.i.i.i.i.i, align 8, !tbaa !17, !alias.scope !345, !noalias !342
  %25 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__first.addr.09.i.i.i.i, i64 0, i32 2
  %arraydecay.i.i.i.i.i.i.i.i.i.i = bitcast %union.anon* %25 to i8*
  %cmp.i27.i.i.i.i.i.i.i.i = icmp eq i8* %24, %arraydecay.i.i.i.i.i.i.i.i.i.i
  br i1 %cmp.i27.i.i.i.i.i.i.i.i, label %if.then.i.i.i.i.i.i.i.i, label %if.else.i.i.i.i.i.i.i.i

if.then.i.i.i.i.i.i.i.i:                          ; preds = %for.body.i.i.i.i
  %_M_string_length.i25.i.i.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__first.addr.09.i.i.i.i, i64 0, i32 1
  %26 = load i64, i64* %_M_string_length.i25.i.i.i.i.i.i.i.i, align 8, !tbaa !19, !alias.scope !345, !noalias !342
  %add.i.i.i.i.i.i.i.i = add i64 %26, 1
  %cmp.i.i.i.i.i.i.i.i.i = icmp eq i64 %add.i.i.i.i.i.i.i.i, 0
  br i1 %cmp.i.i.i.i.i.i.i.i.i, label %_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i, label %if.end.i.i.i.i.i.i.i.i.i

if.end.i.i.i.i.i.i.i.i.i:                         ; preds = %if.then.i.i.i.i.i.i.i.i
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %arraydecay.i.i.i.i.i.i.i.i.i, i8* nonnull align 8 %24, i64 %add.i.i.i.i.i.i.i.i, i1 false) #38
  br label %_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i

if.else.i.i.i.i.i.i.i.i:                          ; preds = %for.body.i.i.i.i
  %_M_p.i23.i.i.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__cur.011.i.i.i.i, i64 0, i32 0, i32 0
  store i8* %24, i8** %_M_p.i23.i.i.i.i.i.i.i.i, align 8, !tbaa !17, !alias.scope !342, !noalias !345
  %_M_allocated_capacity.i.i.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__first.addr.09.i.i.i.i, i64 0, i32 2, i32 0
  %27 = load i64, i64* %_M_allocated_capacity.i.i.i.i.i.i.i.i, align 8, !tbaa !21, !alias.scope !345, !noalias !342
  %_M_allocated_capacity.i.i.i.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__cur.011.i.i.i.i, i64 0, i32 2, i32 0
  store i64 %27, i64* %_M_allocated_capacity.i.i.i.i.i.i.i.i.i, align 8, !tbaa !21, !alias.scope !342, !noalias !345
  %_M_string_length.i22.i.i.i.phi.trans.insert.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__first.addr.09.i.i.i.i, i64 0, i32 1
  %.pre.i.i.i.i.i = load i64, i64* %_M_string_length.i22.i.i.i.phi.trans.insert.i.i.i.i.i, align 8, !tbaa !19, !alias.scope !345, !noalias !342
  br label %_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i

_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i: ; preds = %if.else.i.i.i.i.i.i.i.i, %if.end.i.i.i.i.i.i.i.i.i, %if.then.i.i.i.i.i.i.i.i
  %28 = phi i64 [ -1, %if.then.i.i.i.i.i.i.i.i ], [ %26, %if.end.i.i.i.i.i.i.i.i.i ], [ %.pre.i.i.i.i.i, %if.else.i.i.i.i.i.i.i.i ]
  %_M_string_length.i22.i.i.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__first.addr.09.i.i.i.i, i64 0, i32 1
  %_M_string_length.i.i.i.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__cur.011.i.i.i.i, i64 0, i32 1
  store i64 %28, i64* %_M_string_length.i.i.i.i.i.i.i.i.i, align 8, !tbaa !19, !alias.scope !342, !noalias !345
  %29 = bitcast %"class.std::__cxx11::basic_string"* %__first.addr.09.i.i.i.i to %union.anon**
  store %union.anon* %25, %union.anon** %29, align 8, !tbaa !17, !alias.scope !345, !noalias !342
  store i64 0, i64* %_M_string_length.i22.i.i.i.i.i.i.i.i, align 8, !tbaa !19, !alias.scope !345, !noalias !342
  store i8 0, i8* %arraydecay.i.i.i.i.i.i.i.i.i.i, align 8, !tbaa !21, !alias.scope !345, !noalias !342
  %incdec.ptr.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__first.addr.09.i.i.i.i, i64 1
  %incdec.ptr2.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__cur.011.i.i.i.i, i64 1
  %cmp.not.i.i.i.i = icmp eq %"class.std::__cxx11::basic_string"* %incdec.ptr.i.i.i.i, %0
  br i1 %cmp.not.i.i.i.i, label %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_.exit, label %for.body.i.i.i.i, !llvm.loop !331

_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_.exit: ; preds = %_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i, %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_.exit65
  %__cur.0.lcssa.i.i.i.i = phi %"class.std::__cxx11::basic_string"* [ %incdec.ptr, %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_.exit65 ], [ %incdec.ptr2.i.i.i.i, %_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i ]
  %tobool.not.i = icmp eq %"class.std::__cxx11::basic_string"* %1, null
  br i1 %tobool.not.i, label %_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_m.exit, label %if.then.i38

if.then.i38:                                      ; preds = %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_.exit
  %30 = bitcast %"class.std::__cxx11::basic_string"* %1 to i8*
  call void @_ZdlPv(i8* %30) #41
  br label %_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_m.exit

_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_m.exit: ; preds = %if.then.i38, %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_.exit
  %_M_end_of_storage = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %this, i64 0, i32 0, i32 0, i32 0, i32 2
  store %"class.std::__cxx11::basic_string"* %cond.i67, %"class.std::__cxx11::basic_string"** %_M_start.i27.i, align 8, !tbaa !81
  store %"class.std::__cxx11::basic_string"* %__cur.0.lcssa.i.i.i.i, %"class.std::__cxx11::basic_string"** %_M_finish.i26.i, align 8, !tbaa !32
  %add.ptr20 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %cond.i67, i64 %cond.i
  store %"class.std::__cxx11::basic_string"* %add.ptr20, %"class.std::__cxx11::basic_string"** %_M_end_of_storage, align 8, !tbaa !34
  ret void
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local void @_ZNSt6vectorI11LightMatrixIdESaIS1_EE17_M_realloc_insertIJiiEEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_(%"class.std::vector.8"* nonnull dereferenceable(24) %this, %class.LightMatrix* %__position.coerce, i32* nonnull align 4 dereferenceable(4) %__args, i32* nonnull align 4 dereferenceable(4) %__args1) local_unnamed_addr #0 comdat align 2 {
entry:
  %_M_finish.i26.i = getelementptr inbounds %"class.std::vector.8", %"class.std::vector.8"* %this, i64 0, i32 0, i32 0, i32 0, i32 1
  %0 = load %class.LightMatrix*, %class.LightMatrix** %_M_finish.i26.i, align 8, !tbaa !65
  %_M_start.i27.i = getelementptr inbounds %"class.std::vector.8", %"class.std::vector.8"* %this, i64 0, i32 0, i32 0, i32 0, i32 0
  %1 = load %class.LightMatrix*, %class.LightMatrix** %_M_start.i27.i, align 8, !tbaa !143
  %sub.ptr.lhs.cast.i28.i = ptrtoint %class.LightMatrix* %0 to i64
  %sub.ptr.rhs.cast.i29.i = ptrtoint %class.LightMatrix* %1 to i64
  %sub.ptr.sub.i30.i = sub i64 %sub.ptr.lhs.cast.i28.i, %sub.ptr.rhs.cast.i29.i
  %sub.ptr.div.i31.i = sdiv exact i64 %sub.ptr.sub.i30.i, 24
  %2 = icmp eq i64 %sub.ptr.sub.i30.i, 9223372036854775800
  br i1 %2, label %if.then.i, label %_ZNKSt6vectorI11LightMatrixIdESaIS1_EE12_M_check_lenEmPKc.exit

if.then.i:                                        ; preds = %entry
  tail call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.41, i64 0, i64 0)) #40
  unreachable

_ZNKSt6vectorI11LightMatrixIdESaIS1_EE12_M_check_lenEmPKc.exit: ; preds = %entry
  %3 = icmp eq i64 %sub.ptr.sub.i30.i, 0
  %.sroa.speculated.i = select i1 %3, i64 1, i64 %sub.ptr.div.i31.i
  %add.i = add nsw i64 %.sroa.speculated.i, %sub.ptr.div.i31.i
  %cmp7.i = icmp ult i64 %add.i, %sub.ptr.div.i31.i
  %cmp9.i = icmp ugt i64 %add.i, 384307168202282325
  %or.cond.i = or i1 %cmp7.i, %cmp9.i
  %cond.i = select i1 %or.cond.i, i64 384307168202282325, i64 %add.i
  %sub.ptr.lhs.cast.i = ptrtoint %class.LightMatrix* %__position.coerce to i64
  %sub.ptr.sub.i = sub i64 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i29.i
  %sub.ptr.div.i = sdiv exact i64 %sub.ptr.sub.i, 24
  %mul.i.i.i = mul nuw nsw i64 %cond.i, 24
  %call5.i.i.i = tail call noalias nonnull i8* @_Znwm(i64 %mul.i.i.i) #43
  %4 = bitcast i8* %call5.i.i.i to %class.LightMatrix*
  %5 = load i32, i32* %__args, align 4, !tbaa !59
  %6 = load i32, i32* %__args1, align 4, !tbaa !59
  %is_data_owner_.i.i.i = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %4, i64 %sub.ptr.div.i, i32 0
  store i8 1, i8* %is_data_owner_.i.i.i, align 8, !tbaa !68
  %nrows_.i.i.i = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %4, i64 %sub.ptr.div.i, i32 1
  store i32 %5, i32* %nrows_.i.i.i, align 4, !tbaa !71
  %ncols_.i.i.i = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %4, i64 %sub.ptr.div.i, i32 2
  store i32 %6, i32* %ncols_.i.i.i, align 8, !tbaa !72
  %mul.i.i.i46 = mul nsw i32 %6, %5
  %conv.i.i.i = sext i32 %mul.i.i.i46 to i64
  %7 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %conv.i.i.i, i64 8) #38
  %8 = extractvalue { i64, i1 } %7, 1
  %9 = extractvalue { i64, i1 } %7, 0
  %10 = select i1 %8, i64 -1, i64 %9
  %call.i.i.i = tail call noalias nonnull i8* @_Znam(i64 %10) #43
  %data_.i.i.i = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %4, i64 %sub.ptr.div.i, i32 3
  %11 = bitcast double** %data_.i.i.i to i8**
  store i8* %call.i.i.i, i8** %11, align 8, !tbaa !73
  %cmp.not7.i.i.i.i.i49 = icmp eq %class.LightMatrix* %1, %__position.coerce
  br i1 %cmp.not7.i.i.i.i.i49, label %_ZSt34__uninitialized_move_if_noexcept_aIP11LightMatrixIdES2_SaIS1_EET0_T_S5_S4_RT1_.exit80, label %for.body.i.i.i.i.i59

for.body.i.i.i.i.i59:                             ; preds = %_ZSt10_ConstructI11LightMatrixIdEJRKS1_EEvPT_DpOT0_.exit.i.i.i.i.i78, %_ZNKSt6vectorI11LightMatrixIdESaIS1_EE12_M_check_lenEmPKc.exit
  %__cur.011.i.i.i.i.i50 = phi %class.LightMatrix* [ %incdec.ptr1.i.i.i.i.i76, %_ZSt10_ConstructI11LightMatrixIdEJRKS1_EEvPT_DpOT0_.exit.i.i.i.i.i78 ], [ %4, %_ZNKSt6vectorI11LightMatrixIdESaIS1_EE12_M_check_lenEmPKc.exit ]
  %__first.addr.08.i.i.i.i.i51 = phi %class.LightMatrix* [ %incdec.ptr.i.i.i.i.i75, %_ZSt10_ConstructI11LightMatrixIdEJRKS1_EEvPT_DpOT0_.exit.i.i.i.i.i78 ], [ %1, %_ZNKSt6vectorI11LightMatrixIdESaIS1_EE12_M_check_lenEmPKc.exit ]
  %nrows_.i.i.i.i.i.i.i52 = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %__cur.011.i.i.i.i.i50, i64 0, i32 1
  store i32 0, i32* %nrows_.i.i.i.i.i.i.i52, align 4, !tbaa !71
  %ncols_.i.i.i.i.i.i.i53 = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %__cur.011.i.i.i.i.i50, i64 0, i32 2
  store i32 0, i32* %ncols_.i.i.i.i.i.i.i53, align 8, !tbaa !72
  %data_.i.i.i.i.i.i.i54 = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %__cur.011.i.i.i.i.i50, i64 0, i32 3
  store double* null, double** %data_.i.i.i.i.i.i.i54, align 8, !tbaa !73
  %nrows_2.i.i.i.i.i.i.i55 = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %__first.addr.08.i.i.i.i.i51, i64 0, i32 1
  %12 = load i32, i32* %nrows_2.i.i.i.i.i.i.i55, align 4, !tbaa !71
  %ncols_3.i.i.i.i.i.i.i56 = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %__first.addr.08.i.i.i.i.i51, i64 0, i32 2
  %13 = load i32, i32* %ncols_3.i.i.i.i.i.i.i56, align 8, !tbaa !72
  %mul2.i.i.i.i.i.i.i.i57 = mul i32 %13, %12
  %cmp.not.i.i.i.i.i.i.i.i58 = icmp eq i32 %mul2.i.i.i.i.i.i.i.i57, 0
  br i1 %cmp.not.i.i.i.i.i.i.i.i58, label %_ZN11LightMatrixIdE6resizeEii.exit.thread.i.i.i.i.i.i.i63, label %if.end.i.i.i.i.i.i.i.i61

if.end.i.i.i.i.i.i.i.i61:                         ; preds = %for.body.i.i.i.i.i59
  %cmp5.i.i.i.i.i.i.i.i60 = icmp sgt i32 %mul2.i.i.i.i.i.i.i.i57, 0
  br i1 %cmp5.i.i.i.i.i.i.i.i60, label %for.body.lr.ph.i.i.i.i.i.i.i67, label %if.else.i.i.i.i.i.i.i.i62

if.else.i.i.i.i.i.i.i.i62:                        ; preds = %if.end.i.i.i.i.i.i.i.i61
  store double* null, double** %data_.i.i.i.i.i.i.i54, align 8, !tbaa !73
  br label %_ZN11LightMatrixIdE6resizeEii.exit.thread.i.i.i.i.i.i.i63

_ZN11LightMatrixIdE6resizeEii.exit.thread.i.i.i.i.i.i.i63: ; preds = %if.else.i.i.i.i.i.i.i.i62, %for.body.i.i.i.i.i59
  store i32 %13, i32* %ncols_.i.i.i.i.i.i.i53, align 8, !tbaa !72
  store i32 %12, i32* %nrows_.i.i.i.i.i.i.i52, align 4, !tbaa !71
  br label %_ZSt10_ConstructI11LightMatrixIdEJRKS1_EEvPT_DpOT0_.exit.i.i.i.i.i78

for.body.lr.ph.i.i.i.i.i.i.i67:                   ; preds = %if.end.i.i.i.i.i.i.i.i61
  %conv20.i.i.i.i.i.i.i.i64 = zext i32 %mul2.i.i.i.i.i.i.i.i57 to i64
  %14 = shl nuw nsw i64 %conv20.i.i.i.i.i.i.i.i64, 3
  %call.i.i.i.i.i.i.i.i65 = tail call noalias nonnull i8* @_Znam(i64 %14) #43
  %15 = bitcast double** %data_.i.i.i.i.i.i.i54 to i8**
  store i8* %call.i.i.i.i.i.i.i.i65, i8** %15, align 8, !tbaa !73
  %16 = bitcast i8* %call.i.i.i.i.i.i.i.i65 to double*
  store i32 %13, i32* %ncols_.i.i.i.i.i.i.i53, align 8, !tbaa !72
  store i32 %12, i32* %nrows_.i.i.i.i.i.i.i52, align 4, !tbaa !71
  %data_4.i.i.i.i.i.i.i66 = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %__first.addr.08.i.i.i.i.i51, i64 0, i32 3
  %17 = load double*, double** %data_4.i.i.i.i.i.i.i66, align 8, !tbaa !73
  br label %for.body.i.i.i.i.i.i.i73

for.body.i.i.i.i.i.i.i73:                         ; preds = %for.body.i.i.i.i.i.i.i73, %for.body.lr.ph.i.i.i.i.i.i.i67
  %indvars.iv.i.i.i.i.i.i.i68 = phi i64 [ 0, %for.body.lr.ph.i.i.i.i.i.i.i67 ], [ %indvars.iv.next.i.i.i.i.i.i.i71, %for.body.i.i.i.i.i.i.i73 ]
  %arrayidx.i.i.i.i.i.i.i69 = getelementptr inbounds double, double* %17, i64 %indvars.iv.i.i.i.i.i.i.i68
  %18 = load double, double* %arrayidx.i.i.i.i.i.i.i69, align 8, !tbaa !75
  %arrayidx7.i.i.i.i.i.i.i70 = getelementptr inbounds double, double* %16, i64 %indvars.iv.i.i.i.i.i.i.i68
  store double %18, double* %arrayidx7.i.i.i.i.i.i.i70, align 8, !tbaa !75
  %indvars.iv.next.i.i.i.i.i.i.i71 = add nuw nsw i64 %indvars.iv.i.i.i.i.i.i.i68, 1
  %exitcond.not.i.i.i.i.i.i.i72 = icmp eq i64 %indvars.iv.next.i.i.i.i.i.i.i71, %conv20.i.i.i.i.i.i.i.i64
  br i1 %exitcond.not.i.i.i.i.i.i.i72, label %_ZSt10_ConstructI11LightMatrixIdEJRKS1_EEvPT_DpOT0_.exit.i.i.i.i.i78, label %for.body.i.i.i.i.i.i.i73, !llvm.loop !347

_ZSt10_ConstructI11LightMatrixIdEJRKS1_EEvPT_DpOT0_.exit.i.i.i.i.i78: ; preds = %for.body.i.i.i.i.i.i.i73, %_ZN11LightMatrixIdE6resizeEii.exit.thread.i.i.i.i.i.i.i63
  %is_data_owner_.i.i.i.i.i.i.i74 = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %__cur.011.i.i.i.i.i50, i64 0, i32 0
  store i8 1, i8* %is_data_owner_.i.i.i.i.i.i.i74, align 8, !tbaa !68
  %incdec.ptr.i.i.i.i.i75 = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %__first.addr.08.i.i.i.i.i51, i64 1
  %incdec.ptr1.i.i.i.i.i76 = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %__cur.011.i.i.i.i.i50, i64 1
  %cmp.not.i.i.i.i.i77 = icmp eq %class.LightMatrix* %incdec.ptr.i.i.i.i.i75, %__position.coerce
  br i1 %cmp.not.i.i.i.i.i77, label %_ZSt34__uninitialized_move_if_noexcept_aIP11LightMatrixIdES2_SaIS1_EET0_T_S5_S4_RT1_.exit80, label %for.body.i.i.i.i.i59, !llvm.loop !348

_ZSt34__uninitialized_move_if_noexcept_aIP11LightMatrixIdES2_SaIS1_EET0_T_S5_S4_RT1_.exit80: ; preds = %_ZSt10_ConstructI11LightMatrixIdEJRKS1_EEvPT_DpOT0_.exit.i.i.i.i.i78, %_ZNKSt6vectorI11LightMatrixIdESaIS1_EE12_M_check_lenEmPKc.exit
  %__cur.0.lcssa.i.i.i.i.i79 = phi %class.LightMatrix* [ %4, %_ZNKSt6vectorI11LightMatrixIdESaIS1_EE12_M_check_lenEmPKc.exit ], [ %incdec.ptr1.i.i.i.i.i76, %_ZSt10_ConstructI11LightMatrixIdEJRKS1_EEvPT_DpOT0_.exit.i.i.i.i.i78 ]
  %incdec.ptr = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %__cur.0.lcssa.i.i.i.i.i79, i64 1
  %cmp.not7.i.i.i.i.i = icmp eq %class.LightMatrix* %0, %__position.coerce
  br i1 %cmp.not7.i.i.i.i.i, label %_ZSt34__uninitialized_move_if_noexcept_aIP11LightMatrixIdES2_SaIS1_EET0_T_S5_S4_RT1_.exit, label %for.body.i.i.i.i.i

for.body.i.i.i.i.i:                               ; preds = %_ZSt10_ConstructI11LightMatrixIdEJRKS1_EEvPT_DpOT0_.exit.i.i.i.i.i, %_ZSt34__uninitialized_move_if_noexcept_aIP11LightMatrixIdES2_SaIS1_EET0_T_S5_S4_RT1_.exit80
  %__cur.011.i.i.i.i.i = phi %class.LightMatrix* [ %incdec.ptr1.i.i.i.i.i, %_ZSt10_ConstructI11LightMatrixIdEJRKS1_EEvPT_DpOT0_.exit.i.i.i.i.i ], [ %incdec.ptr, %_ZSt34__uninitialized_move_if_noexcept_aIP11LightMatrixIdES2_SaIS1_EET0_T_S5_S4_RT1_.exit80 ]
  %__first.addr.08.i.i.i.i.i = phi %class.LightMatrix* [ %incdec.ptr.i.i.i.i.i, %_ZSt10_ConstructI11LightMatrixIdEJRKS1_EEvPT_DpOT0_.exit.i.i.i.i.i ], [ %__position.coerce, %_ZSt34__uninitialized_move_if_noexcept_aIP11LightMatrixIdES2_SaIS1_EET0_T_S5_S4_RT1_.exit80 ]
  %nrows_.i.i.i.i.i.i.i = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %__cur.011.i.i.i.i.i, i64 0, i32 1
  store i32 0, i32* %nrows_.i.i.i.i.i.i.i, align 4, !tbaa !71
  %ncols_.i.i.i.i.i.i.i = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %__cur.011.i.i.i.i.i, i64 0, i32 2
  store i32 0, i32* %ncols_.i.i.i.i.i.i.i, align 8, !tbaa !72
  %data_.i.i.i.i.i.i.i = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %__cur.011.i.i.i.i.i, i64 0, i32 3
  store double* null, double** %data_.i.i.i.i.i.i.i, align 8, !tbaa !73
  %nrows_2.i.i.i.i.i.i.i = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %__first.addr.08.i.i.i.i.i, i64 0, i32 1
  %19 = load i32, i32* %nrows_2.i.i.i.i.i.i.i, align 4, !tbaa !71
  %ncols_3.i.i.i.i.i.i.i = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %__first.addr.08.i.i.i.i.i, i64 0, i32 2
  %20 = load i32, i32* %ncols_3.i.i.i.i.i.i.i, align 8, !tbaa !72
  %mul2.i.i.i.i.i.i.i.i = mul i32 %20, %19
  %cmp.not.i.i.i.i.i.i.i.i = icmp eq i32 %mul2.i.i.i.i.i.i.i.i, 0
  br i1 %cmp.not.i.i.i.i.i.i.i.i, label %_ZN11LightMatrixIdE6resizeEii.exit.thread.i.i.i.i.i.i.i, label %if.end.i.i.i.i.i.i.i.i

if.end.i.i.i.i.i.i.i.i:                           ; preds = %for.body.i.i.i.i.i
  %cmp5.i.i.i.i.i.i.i.i = icmp sgt i32 %mul2.i.i.i.i.i.i.i.i, 0
  br i1 %cmp5.i.i.i.i.i.i.i.i, label %for.body.lr.ph.i.i.i.i.i.i.i, label %if.else.i.i.i.i.i.i.i.i

if.else.i.i.i.i.i.i.i.i:                          ; preds = %if.end.i.i.i.i.i.i.i.i
  store double* null, double** %data_.i.i.i.i.i.i.i, align 8, !tbaa !73
  br label %_ZN11LightMatrixIdE6resizeEii.exit.thread.i.i.i.i.i.i.i

_ZN11LightMatrixIdE6resizeEii.exit.thread.i.i.i.i.i.i.i: ; preds = %if.else.i.i.i.i.i.i.i.i, %for.body.i.i.i.i.i
  store i32 %20, i32* %ncols_.i.i.i.i.i.i.i, align 8, !tbaa !72
  store i32 %19, i32* %nrows_.i.i.i.i.i.i.i, align 4, !tbaa !71
  br label %_ZSt10_ConstructI11LightMatrixIdEJRKS1_EEvPT_DpOT0_.exit.i.i.i.i.i

for.body.lr.ph.i.i.i.i.i.i.i:                     ; preds = %if.end.i.i.i.i.i.i.i.i
  %conv20.i.i.i.i.i.i.i.i = zext i32 %mul2.i.i.i.i.i.i.i.i to i64
  %21 = shl nuw nsw i64 %conv20.i.i.i.i.i.i.i.i, 3
  %call.i.i.i.i.i.i.i.i = tail call noalias nonnull i8* @_Znam(i64 %21) #43
  %22 = bitcast double** %data_.i.i.i.i.i.i.i to i8**
  store i8* %call.i.i.i.i.i.i.i.i, i8** %22, align 8, !tbaa !73
  %23 = bitcast i8* %call.i.i.i.i.i.i.i.i to double*
  store i32 %20, i32* %ncols_.i.i.i.i.i.i.i, align 8, !tbaa !72
  store i32 %19, i32* %nrows_.i.i.i.i.i.i.i, align 4, !tbaa !71
  %data_4.i.i.i.i.i.i.i = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %__first.addr.08.i.i.i.i.i, i64 0, i32 3
  %24 = load double*, double** %data_4.i.i.i.i.i.i.i, align 8, !tbaa !73
  br label %for.body.i.i.i.i.i.i.i

for.body.i.i.i.i.i.i.i:                           ; preds = %for.body.i.i.i.i.i.i.i, %for.body.lr.ph.i.i.i.i.i.i.i
  %indvars.iv.i.i.i.i.i.i.i = phi i64 [ 0, %for.body.lr.ph.i.i.i.i.i.i.i ], [ %indvars.iv.next.i.i.i.i.i.i.i, %for.body.i.i.i.i.i.i.i ]
  %arrayidx.i.i.i.i.i.i.i = getelementptr inbounds double, double* %24, i64 %indvars.iv.i.i.i.i.i.i.i
  %25 = load double, double* %arrayidx.i.i.i.i.i.i.i, align 8, !tbaa !75
  %arrayidx7.i.i.i.i.i.i.i = getelementptr inbounds double, double* %23, i64 %indvars.iv.i.i.i.i.i.i.i
  store double %25, double* %arrayidx7.i.i.i.i.i.i.i, align 8, !tbaa !75
  %indvars.iv.next.i.i.i.i.i.i.i = add nuw nsw i64 %indvars.iv.i.i.i.i.i.i.i, 1
  %exitcond.not.i.i.i.i.i.i.i = icmp eq i64 %indvars.iv.next.i.i.i.i.i.i.i, %conv20.i.i.i.i.i.i.i.i
  br i1 %exitcond.not.i.i.i.i.i.i.i, label %_ZSt10_ConstructI11LightMatrixIdEJRKS1_EEvPT_DpOT0_.exit.i.i.i.i.i, label %for.body.i.i.i.i.i.i.i, !llvm.loop !347

_ZSt10_ConstructI11LightMatrixIdEJRKS1_EEvPT_DpOT0_.exit.i.i.i.i.i: ; preds = %for.body.i.i.i.i.i.i.i, %_ZN11LightMatrixIdE6resizeEii.exit.thread.i.i.i.i.i.i.i
  %is_data_owner_.i.i.i.i.i.i.i = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %__cur.011.i.i.i.i.i, i64 0, i32 0
  store i8 1, i8* %is_data_owner_.i.i.i.i.i.i.i, align 8, !tbaa !68
  %incdec.ptr.i.i.i.i.i = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %__first.addr.08.i.i.i.i.i, i64 1
  %incdec.ptr1.i.i.i.i.i = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %__cur.011.i.i.i.i.i, i64 1
  %cmp.not.i.i.i.i.i47 = icmp eq %class.LightMatrix* %incdec.ptr.i.i.i.i.i, %0
  br i1 %cmp.not.i.i.i.i.i47, label %_ZSt34__uninitialized_move_if_noexcept_aIP11LightMatrixIdES2_SaIS1_EET0_T_S5_S4_RT1_.exit, label %for.body.i.i.i.i.i, !llvm.loop !348

_ZSt34__uninitialized_move_if_noexcept_aIP11LightMatrixIdES2_SaIS1_EET0_T_S5_S4_RT1_.exit: ; preds = %_ZSt10_ConstructI11LightMatrixIdEJRKS1_EEvPT_DpOT0_.exit.i.i.i.i.i, %_ZSt34__uninitialized_move_if_noexcept_aIP11LightMatrixIdES2_SaIS1_EET0_T_S5_S4_RT1_.exit80
  %__cur.0.lcssa.i.i.i.i.i = phi %class.LightMatrix* [ %incdec.ptr, %_ZSt34__uninitialized_move_if_noexcept_aIP11LightMatrixIdES2_SaIS1_EET0_T_S5_S4_RT1_.exit80 ], [ %incdec.ptr1.i.i.i.i.i, %_ZSt10_ConstructI11LightMatrixIdEJRKS1_EEvPT_DpOT0_.exit.i.i.i.i.i ]
  %cmp.not3.i.i.i = icmp eq %class.LightMatrix* %1, %0
  br i1 %cmp.not3.i.i.i, label %_ZSt8_DestroyIP11LightMatrixIdES1_EvT_S3_RSaIT0_E.exit, label %for.body.i.i.i

for.body.i.i.i:                                   ; preds = %_ZSt8_DestroyI11LightMatrixIdEEvPT_.exit.i.i.i, %_ZSt34__uninitialized_move_if_noexcept_aIP11LightMatrixIdES2_SaIS1_EET0_T_S5_S4_RT1_.exit
  %__first.addr.04.i.i.i = phi %class.LightMatrix* [ %incdec.ptr.i.i.i, %_ZSt8_DestroyI11LightMatrixIdEEvPT_.exit.i.i.i ], [ %1, %_ZSt34__uninitialized_move_if_noexcept_aIP11LightMatrixIdES2_SaIS1_EET0_T_S5_S4_RT1_.exit ]
  %is_data_owner_.i.i.i.i.i = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %__first.addr.04.i.i.i, i64 0, i32 0
  %26 = load i8, i8* %is_data_owner_.i.i.i.i.i, align 8, !tbaa !68, !range !90
  %tobool.not.i.i.i.i.i = icmp eq i8 %26, 0
  br i1 %tobool.not.i.i.i.i.i, label %_ZSt8_DestroyI11LightMatrixIdEEvPT_.exit.i.i.i, label %land.lhs.true.i.i.i.i.i

land.lhs.true.i.i.i.i.i:                          ; preds = %for.body.i.i.i
  %data_.i.i.i.i.i = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %__first.addr.04.i.i.i, i64 0, i32 3
  %27 = load double*, double** %data_.i.i.i.i.i, align 8, !tbaa !73
  %cmp.not.i.i.i.i.i = icmp eq double* %27, null
  br i1 %cmp.not.i.i.i.i.i, label %_ZSt8_DestroyI11LightMatrixIdEEvPT_.exit.i.i.i, label %delete.notnull.i.i.i.i.i

delete.notnull.i.i.i.i.i:                         ; preds = %land.lhs.true.i.i.i.i.i
  %28 = bitcast double* %27 to i8*
  tail call void @_ZdaPv(i8* %28) #41
  br label %_ZSt8_DestroyI11LightMatrixIdEEvPT_.exit.i.i.i

_ZSt8_DestroyI11LightMatrixIdEEvPT_.exit.i.i.i:   ; preds = %delete.notnull.i.i.i.i.i, %land.lhs.true.i.i.i.i.i, %for.body.i.i.i
  %incdec.ptr.i.i.i = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %__first.addr.04.i.i.i, i64 1
  %cmp.not.i.i.i = icmp eq %class.LightMatrix* %incdec.ptr.i.i.i, %0
  br i1 %cmp.not.i.i.i, label %_ZSt8_DestroyIP11LightMatrixIdES1_EvT_S3_RSaIT0_E.exit, label %for.body.i.i.i, !llvm.loop !296

_ZSt8_DestroyIP11LightMatrixIdES1_EvT_S3_RSaIT0_E.exit: ; preds = %_ZSt8_DestroyI11LightMatrixIdEEvPT_.exit.i.i.i, %_ZSt34__uninitialized_move_if_noexcept_aIP11LightMatrixIdES2_SaIS1_EET0_T_S5_S4_RT1_.exit
  %tobool.not.i = icmp eq %class.LightMatrix* %1, null
  br i1 %tobool.not.i, label %_ZNSt12_Vector_baseI11LightMatrixIdESaIS1_EE13_M_deallocateEPS1_m.exit, label %if.then.i44

if.then.i44:                                      ; preds = %_ZSt8_DestroyIP11LightMatrixIdES1_EvT_S3_RSaIT0_E.exit
  %29 = getelementptr %class.LightMatrix, %class.LightMatrix* %1, i64 0, i32 0
  tail call void @_ZdlPv(i8* %29) #41
  br label %_ZNSt12_Vector_baseI11LightMatrixIdESaIS1_EE13_M_deallocateEPS1_m.exit

_ZNSt12_Vector_baseI11LightMatrixIdESaIS1_EE13_M_deallocateEPS1_m.exit: ; preds = %if.then.i44, %_ZSt8_DestroyIP11LightMatrixIdES1_EvT_S3_RSaIT0_E.exit
  %_M_end_of_storage = getelementptr inbounds %"class.std::vector.8", %"class.std::vector.8"* %this, i64 0, i32 0, i32 0, i32 0, i32 2
  %30 = bitcast %"class.std::vector.8"* %this to i8**
  store i8* %call5.i.i.i, i8** %30, align 8, !tbaa !143
  store %class.LightMatrix* %__cur.0.lcssa.i.i.i.i.i, %class.LightMatrix** %_M_finish.i26.i, align 8, !tbaa !65
  %add.ptr24 = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %4, i64 %cond.i
  store %class.LightMatrix* %add.ptr24, %class.LightMatrix** %_M_end_of_storage, align 8, !tbaa !67
  ret void
}

; Function Attrs: noreturn
declare dso_local void @_ZSt16__throw_bad_castv() local_unnamed_addr #23

declare dso_local void @_ZNKSt5ctypeIcE13_M_widen_initEv(%"class.std::ctype"* nonnull dereferenceable(570)) local_unnamed_addr #3

declare dso_local nonnull align 8 dereferenceable(240) %"class.std::basic_filebuf"* @_ZNSt13basic_filebufIcSt11char_traitsIcEEaSEOS2_(%"class.std::basic_filebuf"* nonnull dereferenceable(240), %"class.std::basic_filebuf"* nonnull align 8 dereferenceable(240)) local_unnamed_addr #3

; Function Attrs: nounwind
declare dso_local void @_ZNSt8ios_base7_M_swapERS_(%"class.std::ios_base"* nonnull dereferenceable(216), %"class.std::ios_base"* nonnull align 8 dereferenceable(216)) local_unnamed_addr #6

declare dso_local void @_ZNSt9basic_iosIcSt11char_traitsIcEE15_M_cache_localeERKSt6locale(%"class.std::basic_ios"* nonnull dereferenceable(264), %"class.std::locale"* nonnull align 8 dereferenceable(8)) local_unnamed_addr #3

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local void @_ZNSt6vectorI8TriangleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_(%"class.std::vector.13"* nonnull dereferenceable(24) %this, %struct.Triangle* %__position.coerce, %struct.Triangle* nonnull align 4 dereferenceable(12) %__args) local_unnamed_addr #0 comdat align 2 {
entry:
  %_M_finish.i26.i = getelementptr inbounds %"class.std::vector.13", %"class.std::vector.13"* %this, i64 0, i32 0, i32 0, i32 0, i32 1
  %0 = load %struct.Triangle*, %struct.Triangle** %_M_finish.i26.i, align 8, !tbaa !105
  %_M_start.i27.i = getelementptr inbounds %"class.std::vector.13", %"class.std::vector.13"* %this, i64 0, i32 0, i32 0, i32 0, i32 0
  %1 = load %struct.Triangle*, %struct.Triangle** %_M_start.i27.i, align 8, !tbaa !142
  %sub.ptr.lhs.cast.i28.i = ptrtoint %struct.Triangle* %0 to i64
  %sub.ptr.rhs.cast.i29.i = ptrtoint %struct.Triangle* %1 to i64
  %sub.ptr.sub.i30.i = sub i64 %sub.ptr.lhs.cast.i28.i, %sub.ptr.rhs.cast.i29.i
  %sub.ptr.div.i31.i = sdiv exact i64 %sub.ptr.sub.i30.i, 12
  %2 = icmp eq i64 %sub.ptr.sub.i30.i, 9223372036854775800
  br i1 %2, label %if.then.i, label %_ZNKSt6vectorI8TriangleSaIS0_EE12_M_check_lenEmPKc.exit

if.then.i:                                        ; preds = %entry
  tail call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.41, i64 0, i64 0)) #40
  unreachable

_ZNKSt6vectorI8TriangleSaIS0_EE12_M_check_lenEmPKc.exit: ; preds = %entry
  %3 = icmp eq i64 %sub.ptr.sub.i30.i, 0
  %.sroa.speculated.i = select i1 %3, i64 1, i64 %sub.ptr.div.i31.i
  %add.i = add nsw i64 %.sroa.speculated.i, %sub.ptr.div.i31.i
  %cmp7.i = icmp ult i64 %add.i, %sub.ptr.div.i31.i
  %cmp9.i = icmp ugt i64 %add.i, 768614336404564650
  %or.cond.i = or i1 %cmp7.i, %cmp9.i
  %cond.i = select i1 %or.cond.i, i64 768614336404564650, i64 %add.i
  %sub.ptr.lhs.cast.i = ptrtoint %struct.Triangle* %__position.coerce to i64
  %sub.ptr.sub.i = sub i64 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i29.i
  %sub.ptr.div.i = sdiv exact i64 %sub.ptr.sub.i, 12
  %cmp.not.i = icmp eq i64 %cond.i, 0
  br i1 %cmp.not.i, label %_ZNSt12_Vector_baseI8TriangleSaIS0_EE11_M_allocateEm.exit, label %_ZNSt16allocator_traitsISaI8TriangleEE8allocateERS1_m.exit.i

_ZNSt16allocator_traitsISaI8TriangleEE8allocateERS1_m.exit.i: ; preds = %_ZNKSt6vectorI8TriangleSaIS0_EE12_M_check_lenEmPKc.exit
  %mul.i.i.i = mul nuw nsw i64 %cond.i, 12
  %call5.i.i.i = tail call noalias nonnull i8* @_Znwm(i64 %mul.i.i.i) #43
  %4 = bitcast i8* %call5.i.i.i to %struct.Triangle*
  br label %_ZNSt12_Vector_baseI8TriangleSaIS0_EE11_M_allocateEm.exit

_ZNSt12_Vector_baseI8TriangleSaIS0_EE11_M_allocateEm.exit: ; preds = %_ZNSt16allocator_traitsISaI8TriangleEE8allocateERS1_m.exit.i, %_ZNKSt6vectorI8TriangleSaIS0_EE12_M_check_lenEmPKc.exit
  %cond.i48 = phi %struct.Triangle* [ %4, %_ZNSt16allocator_traitsISaI8TriangleEE8allocateERS1_m.exit.i ], [ null, %_ZNKSt6vectorI8TriangleSaIS0_EE12_M_check_lenEmPKc.exit ]
  %add.ptr = getelementptr inbounds %struct.Triangle, %struct.Triangle* %cond.i48, i64 %sub.ptr.div.i
  %5 = bitcast %struct.Triangle* %add.ptr to i8*
  %6 = bitcast %struct.Triangle* %__args to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(12) %5, i8* nonnull align 4 dereferenceable(12) %6, i64 12, i1 false) #38, !tbaa.struct !108
  %cmp.i.i.i.i42 = icmp sgt i64 %sub.ptr.sub.i, 0
  br i1 %cmp.i.i.i.i42, label %if.then.i.i.i.i43, label %_ZNSt6vectorI8TriangleSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_.exit46

if.then.i.i.i.i43:                                ; preds = %_ZNSt12_Vector_baseI8TriangleSaIS0_EE11_M_allocateEm.exit
  %7 = bitcast %struct.Triangle* %cond.i48 to i8*
  %8 = bitcast %struct.Triangle* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %7, i8* align 4 %8, i64 %sub.ptr.sub.i, i1 false) #38
  br label %_ZNSt6vectorI8TriangleSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_.exit46

_ZNSt6vectorI8TriangleSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_.exit46: ; preds = %if.then.i.i.i.i43, %_ZNSt12_Vector_baseI8TriangleSaIS0_EE11_M_allocateEm.exit
  %incdec.ptr = getelementptr inbounds %struct.Triangle, %struct.Triangle* %add.ptr, i64 1
  %sub.ptr.sub.i.i.i.i = sub i64 %sub.ptr.lhs.cast.i28.i, %sub.ptr.lhs.cast.i
  %cmp.i.i.i.i = icmp sgt i64 %sub.ptr.sub.i.i.i.i, 0
  br i1 %cmp.i.i.i.i, label %if.then.i.i.i.i, label %_ZNSt6vectorI8TriangleSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_.exit

if.then.i.i.i.i:                                  ; preds = %_ZNSt6vectorI8TriangleSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_.exit46
  %9 = bitcast %struct.Triangle* %incdec.ptr to i8*
  %10 = bitcast %struct.Triangle* %__position.coerce to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %9, i8* align 4 %10, i64 %sub.ptr.sub.i.i.i.i, i1 false) #38
  br label %_ZNSt6vectorI8TriangleSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_.exit

_ZNSt6vectorI8TriangleSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_.exit: ; preds = %if.then.i.i.i.i, %_ZNSt6vectorI8TriangleSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_.exit46
  %tobool.not.i = icmp eq %struct.Triangle* %1, null
  br i1 %tobool.not.i, label %_ZNSt12_Vector_baseI8TriangleSaIS0_EE13_M_deallocateEPS0_m.exit, label %if.then.i38

if.then.i38:                                      ; preds = %_ZNSt6vectorI8TriangleSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_.exit
  %11 = bitcast %struct.Triangle* %1 to i8*
  tail call void @_ZdlPv(i8* %11) #41
  br label %_ZNSt12_Vector_baseI8TriangleSaIS0_EE13_M_deallocateEPS0_m.exit

_ZNSt12_Vector_baseI8TriangleSaIS0_EE13_M_deallocateEPS0_m.exit: ; preds = %if.then.i38, %_ZNSt6vectorI8TriangleSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_.exit
  %_M_end_of_storage = getelementptr inbounds %"class.std::vector.13", %"class.std::vector.13"* %this, i64 0, i32 0, i32 0, i32 0, i32 2
  %sub.ptr.div.i.i.i.i = sdiv exact i64 %sub.ptr.sub.i.i.i.i, 12
  %add.ptr.i.i.i.i = getelementptr inbounds %struct.Triangle, %struct.Triangle* %incdec.ptr, i64 %sub.ptr.div.i.i.i.i
  store %struct.Triangle* %cond.i48, %struct.Triangle** %_M_start.i27.i, align 8, !tbaa !142
  store %struct.Triangle* %add.ptr.i.i.i.i, %struct.Triangle** %_M_finish.i26.i, align 8, !tbaa !105
  %add.ptr20 = getelementptr inbounds %struct.Triangle, %struct.Triangle* %cond.i48, i64 %cond.i
  store %struct.Triangle* %add.ptr20, %struct.Triangle** %_M_end_of_storage, align 8, !tbaa !107
  ret void
}

; Function Attrs: nounwind uwtable mustprogress
define linkonce_odr dso_local void @_ZNSt6vectorIiSaIiEE17_M_default_appendEm(%"class.std::vector.3"* nonnull dereferenceable(24) %this, i64 %__n) local_unnamed_addr #5 comdat align 2 {
entry:
  %cmp.not = icmp eq i64 %__n, 0
  br i1 %cmp.not, label %if.end45, label %if.then

if.then:                                          ; preds = %entry
  %_M_finish.i = getelementptr inbounds %"class.std::vector.3", %"class.std::vector.3"* %this, i64 0, i32 0, i32 0, i32 0, i32 1
  %0 = load i32*, i32** %_M_finish.i, align 8, !tbaa !61
  %_M_start.i = getelementptr inbounds %"class.std::vector.3", %"class.std::vector.3"* %this, i64 0, i32 0, i32 0, i32 0, i32 0
  %1 = load i32*, i32** %_M_start.i, align 8, !tbaa !64
  %sub.ptr.lhs.cast.i = ptrtoint i32* %0 to i64
  %sub.ptr.rhs.cast.i = ptrtoint i32* %1 to i64
  %sub.ptr.sub.i = sub i64 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i
  %2 = lshr exact i64 %sub.ptr.sub.i, 2
  %_M_end_of_storage = getelementptr inbounds %"class.std::vector.3", %"class.std::vector.3"* %this, i64 0, i32 0, i32 0, i32 0, i32 2
  %3 = load i32*, i32** %_M_end_of_storage, align 8, !tbaa !63
  %sub.ptr.lhs.cast = ptrtoint i32* %3 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.lhs.cast.i
  %sub.ptr.div = ashr exact i64 %sub.ptr.sub, 2
  %cmp4 = icmp sgt i64 %sub.ptr.sub.i, -1
  tail call void @llvm.assume(i1 %cmp4)
  %sub = xor i64 %2, 2305843009213693951
  %cmp6 = icmp ule i64 %sub.ptr.div, %sub
  tail call void @llvm.assume(i1 %cmp6)
  %cmp8.not = icmp ult i64 %sub.ptr.div, %__n
  br i1 %cmp8.not, label %if.else, label %if.then.i.i.i68

if.then.i.i.i68:                                  ; preds = %if.then
  store i32 0, i32* %0, align 4, !tbaa !59
  %incdec.ptr.i.i.i66 = getelementptr inbounds i32, i32* %0, i64 1
  %cmp.i.i.i.i.i67 = icmp eq i64 %__n, 1
  br i1 %cmp.i.i.i.i.i67, label %_ZSt27__uninitialized_default_n_aIPimiET_S1_T0_RSaIT1_E.exit73, label %if.end.i.i.i.i.i71

if.end.i.i.i.i.i71:                               ; preds = %if.then.i.i.i68
  %incdec.ptr8.i.i.i69 = bitcast i32* %incdec.ptr.i.i.i66 to i8*
  %4 = shl nsw i64 %__n, 2
  %5 = add i64 %4, -4
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %incdec.ptr8.i.i.i69, i8 0, i64 %5, i1 false) #38
  %add.ptr.i.i.i.i.i70 = getelementptr inbounds i32, i32* %0, i64 %__n
  br label %_ZSt27__uninitialized_default_n_aIPimiET_S1_T0_RSaIT1_E.exit73

_ZSt27__uninitialized_default_n_aIPimiET_S1_T0_RSaIT1_E.exit73: ; preds = %if.end.i.i.i.i.i71, %if.then.i.i.i68
  %__first.addr.0.i.i.i72 = phi i32* [ %incdec.ptr.i.i.i66, %if.then.i.i.i68 ], [ %add.ptr.i.i.i.i.i70, %if.end.i.i.i.i.i71 ]
  store i32* %__first.addr.0.i.i.i72, i32** %_M_finish.i, align 8, !tbaa !61
  br label %if.end45

if.else:                                          ; preds = %if.then
  %cmp.i = icmp ult i64 %sub, %__n
  br i1 %cmp.i, label %if.then.i74, label %_ZNKSt6vectorIiSaIiEE12_M_check_lenEmPKc.exit

if.then.i74:                                      ; preds = %if.else
  tail call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.45, i64 0, i64 0)) #40
  unreachable

_ZNKSt6vectorIiSaIiEE12_M_check_lenEmPKc.exit:    ; preds = %if.else
  %cmp.i.i = icmp ult i64 %2, %__n
  %.sroa.speculated.i = select i1 %cmp.i.i, i64 %__n, i64 %2
  %add.i = add i64 %.sroa.speculated.i, %2
  %cmp7.i = icmp ult i64 %add.i, %2
  %cmp9.i = icmp ugt i64 %add.i, 2305843009213693951
  %or.cond.i = or i1 %cmp7.i, %cmp9.i
  %cond.i75 = select i1 %or.cond.i, i64 2305843009213693951, i64 %add.i
  %cmp.not.i = icmp eq i64 %cond.i75, 0
  br i1 %cmp.not.i, label %if.then.i.i.i, label %cond.true.i

cond.true.i:                                      ; preds = %_ZNKSt6vectorIiSaIiEE12_M_check_lenEmPKc.exit
  %cmp.i.i.i = icmp ugt i64 %cond.i75, 2305843009213693951
  br i1 %cmp.i.i.i, label %if.then.i.i.i64, label %_ZNSt16allocator_traitsISaIiEE8allocateERS0_m.exit.i, !prof !211

if.then.i.i.i64:                                  ; preds = %cond.true.i
  %cmp2.i.i.i = icmp ugt i64 %cond.i75, 4611686018427387903
  br i1 %cmp2.i.i.i, label %if.then3.i.i.i, label %if.end.i.i.i

if.then3.i.i.i:                                   ; preds = %if.then.i.i.i64
  tail call void @_ZSt28__throw_bad_array_new_lengthv() #40
  unreachable

if.end.i.i.i:                                     ; preds = %if.then.i.i.i64
  tail call void @_ZSt17__throw_bad_allocv() #40
  unreachable

_ZNSt16allocator_traitsISaIiEE8allocateERS0_m.exit.i: ; preds = %cond.true.i
  %mul.i.i.i = shl nuw nsw i64 %cond.i75, 2
  %call5.i.i.i = tail call noalias nonnull i8* @_Znwm(i64 %mul.i.i.i) #43
  %6 = bitcast i8* %call5.i.i.i to i32*
  br label %if.then.i.i.i

if.then.i.i.i:                                    ; preds = %_ZNSt16allocator_traitsISaIiEE8allocateERS0_m.exit.i, %_ZNKSt6vectorIiSaIiEE12_M_check_lenEmPKc.exit
  %cond.i = phi i32* [ %6, %_ZNSt16allocator_traitsISaIiEE8allocateERS0_m.exit.i ], [ null, %_ZNKSt6vectorIiSaIiEE12_M_check_lenEmPKc.exit ]
  %add.ptr = getelementptr inbounds i32, i32* %cond.i, i64 %2
  store i32 0, i32* %add.ptr, align 4, !tbaa !59
  %cmp.i.i.i.i.i = icmp eq i64 %__n, 1
  br i1 %cmp.i.i.i.i.i, label %_ZSt27__uninitialized_default_n_aIPimiET_S1_T0_RSaIT1_E.exit, label %if.end.i.i.i.i.i

if.end.i.i.i.i.i:                                 ; preds = %if.then.i.i.i
  %incdec.ptr.i.i.i = getelementptr inbounds i32, i32* %add.ptr, i64 1
  %incdec.ptr8.i.i.i = bitcast i32* %incdec.ptr.i.i.i to i8*
  %7 = shl nsw i64 %__n, 2
  %8 = add i64 %7, -4
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %incdec.ptr8.i.i.i, i8 0, i64 %8, i1 false) #38
  br label %_ZSt27__uninitialized_default_n_aIPimiET_S1_T0_RSaIT1_E.exit

_ZSt27__uninitialized_default_n_aIPimiET_S1_T0_RSaIT1_E.exit: ; preds = %if.end.i.i.i.i.i, %if.then.i.i.i
  %cmp.i.i.i.i = icmp sgt i64 %sub.ptr.sub.i, 0
  br i1 %cmp.i.i.i.i, label %if.then.i.i.i.i, label %_ZNSt6vectorIiSaIiEE11_S_relocateEPiS2_S2_RS0_.exit

if.then.i.i.i.i:                                  ; preds = %_ZSt27__uninitialized_default_n_aIPimiET_S1_T0_RSaIT1_E.exit
  %9 = bitcast i32* %cond.i to i8*
  %10 = bitcast i32* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %9, i8* align 4 %10, i64 %sub.ptr.sub.i, i1 false) #38
  br label %_ZNSt6vectorIiSaIiEE11_S_relocateEPiS2_S2_RS0_.exit

_ZNSt6vectorIiSaIiEE11_S_relocateEPiS2_S2_RS0_.exit: ; preds = %if.then.i.i.i.i, %_ZSt27__uninitialized_default_n_aIPimiET_S1_T0_RSaIT1_E.exit
  %tobool.not.i = icmp eq i32* %1, null
  br i1 %tobool.not.i, label %_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPim.exit, label %if.then.i

if.then.i:                                        ; preds = %_ZNSt6vectorIiSaIiEE11_S_relocateEPiS2_S2_RS0_.exit
  %11 = bitcast i32* %1 to i8*
  tail call void @_ZdlPv(i8* %11) #41
  br label %_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPim.exit

_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPim.exit: ; preds = %if.then.i, %_ZNSt6vectorIiSaIiEE11_S_relocateEPiS2_S2_RS0_.exit
  store i32* %cond.i, i32** %_M_start.i, align 8, !tbaa !64
  %add.ptr38 = getelementptr inbounds i32, i32* %add.ptr, i64 %__n
  store i32* %add.ptr38, i32** %_M_finish.i, align 8, !tbaa !61
  %add.ptr41 = getelementptr inbounds i32, i32* %cond.i, i64 %cond.i75
  store i32* %add.ptr41, i32** %_M_end_of_storage, align 8, !tbaa !63
  br label %if.end45

if.end45:                                         ; preds = %_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPim.exit, %_ZSt27__uninitialized_default_n_aIPimiET_S1_T0_RSaIT1_E.exit73, %entry
  ret void
}

declare dso_local nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSi10_M_extractIdEERSiRT_(%"class.std::basic_istream"* nonnull dereferenceable(16), double* nonnull align 8 dereferenceable(8)) local_unnamed_addr #3

; Function Attrs: nounwind uwtable mustprogress
define linkonce_odr dso_local void @_ZNSt6vectorIdSaIdEE17_M_default_appendEm(%"class.std::vector.19"* nonnull dereferenceable(24) %this, i64 %__n) local_unnamed_addr #5 comdat align 2 {
entry:
  %cmp.not = icmp eq i64 %__n, 0
  br i1 %cmp.not, label %if.end45, label %if.then

if.then:                                          ; preds = %entry
  %_M_finish.i = getelementptr inbounds %"class.std::vector.19", %"class.std::vector.19"* %this, i64 0, i32 0, i32 0, i32 0, i32 1
  %0 = load double*, double** %_M_finish.i, align 8, !tbaa !119
  %_M_start.i = getelementptr inbounds %"class.std::vector.19", %"class.std::vector.19"* %this, i64 0, i32 0, i32 0, i32 0, i32 0
  %1 = load double*, double** %_M_start.i, align 8, !tbaa !121
  %sub.ptr.lhs.cast.i = ptrtoint double* %0 to i64
  %sub.ptr.rhs.cast.i = ptrtoint double* %1 to i64
  %sub.ptr.sub.i = sub i64 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i
  %2 = lshr exact i64 %sub.ptr.sub.i, 3
  %_M_end_of_storage = getelementptr inbounds %"class.std::vector.19", %"class.std::vector.19"* %this, i64 0, i32 0, i32 0, i32 0, i32 2
  %3 = load double*, double** %_M_end_of_storage, align 8, !tbaa !159
  %sub.ptr.lhs.cast = ptrtoint double* %3 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.lhs.cast.i
  %sub.ptr.div = ashr exact i64 %sub.ptr.sub, 3
  %cmp4 = icmp sgt i64 %sub.ptr.sub.i, -1
  tail call void @llvm.assume(i1 %cmp4)
  %sub = xor i64 %2, 1152921504606846975
  %cmp6 = icmp ule i64 %sub.ptr.div, %sub
  tail call void @llvm.assume(i1 %cmp6)
  %cmp8.not = icmp ult i64 %sub.ptr.div, %__n
  br i1 %cmp8.not, label %if.else, label %if.then.i.i.i68

if.then.i.i.i68:                                  ; preds = %if.then
  store double 0.000000e+00, double* %0, align 8, !tbaa !75
  %incdec.ptr.i.i.i66 = getelementptr inbounds double, double* %0, i64 1
  %cmp.i.i.i.i.i67 = icmp eq i64 %__n, 1
  br i1 %cmp.i.i.i.i.i67, label %_ZSt27__uninitialized_default_n_aIPdmdET_S1_T0_RSaIT1_E.exit73, label %if.end.i.i.i.i.i71

if.end.i.i.i.i.i71:                               ; preds = %if.then.i.i.i68
  %incdec.ptr8.i.i.i69 = bitcast double* %incdec.ptr.i.i.i66 to i8*
  %4 = shl nsw i64 %__n, 3
  %5 = add i64 %4, -8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %incdec.ptr8.i.i.i69, i8 0, i64 %5, i1 false) #38
  %add.ptr.i.i.i.i.i70 = getelementptr inbounds double, double* %0, i64 %__n
  br label %_ZSt27__uninitialized_default_n_aIPdmdET_S1_T0_RSaIT1_E.exit73

_ZSt27__uninitialized_default_n_aIPdmdET_S1_T0_RSaIT1_E.exit73: ; preds = %if.end.i.i.i.i.i71, %if.then.i.i.i68
  %__first.addr.0.i.i.i72 = phi double* [ %incdec.ptr.i.i.i66, %if.then.i.i.i68 ], [ %add.ptr.i.i.i.i.i70, %if.end.i.i.i.i.i71 ]
  store double* %__first.addr.0.i.i.i72, double** %_M_finish.i, align 8, !tbaa !119
  br label %if.end45

if.else:                                          ; preds = %if.then
  %cmp.i = icmp ult i64 %sub, %__n
  br i1 %cmp.i, label %if.then.i74, label %_ZNKSt6vectorIdSaIdEE12_M_check_lenEmPKc.exit

if.then.i74:                                      ; preds = %if.else
  tail call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.45, i64 0, i64 0)) #40
  unreachable

_ZNKSt6vectorIdSaIdEE12_M_check_lenEmPKc.exit:    ; preds = %if.else
  %cmp.i.i = icmp ult i64 %2, %__n
  %.sroa.speculated.i = select i1 %cmp.i.i, i64 %__n, i64 %2
  %add.i = add i64 %.sroa.speculated.i, %2
  %cmp7.i = icmp ult i64 %add.i, %2
  %cmp9.i = icmp ugt i64 %add.i, 1152921504606846975
  %or.cond.i = or i1 %cmp7.i, %cmp9.i
  %cond.i75 = select i1 %or.cond.i, i64 1152921504606846975, i64 %add.i
  %cmp.not.i = icmp eq i64 %cond.i75, 0
  br i1 %cmp.not.i, label %if.then.i.i.i, label %cond.true.i

cond.true.i:                                      ; preds = %_ZNKSt6vectorIdSaIdEE12_M_check_lenEmPKc.exit
  %cmp.i.i.i = icmp ugt i64 %cond.i75, 1152921504606846975
  br i1 %cmp.i.i.i, label %if.then.i.i.i64, label %_ZNSt16allocator_traitsISaIdEE8allocateERS0_m.exit.i, !prof !211

if.then.i.i.i64:                                  ; preds = %cond.true.i
  %cmp2.i.i.i = icmp ugt i64 %cond.i75, 2305843009213693951
  br i1 %cmp2.i.i.i, label %if.then3.i.i.i, label %if.end.i.i.i

if.then3.i.i.i:                                   ; preds = %if.then.i.i.i64
  tail call void @_ZSt28__throw_bad_array_new_lengthv() #40
  unreachable

if.end.i.i.i:                                     ; preds = %if.then.i.i.i64
  tail call void @_ZSt17__throw_bad_allocv() #40
  unreachable

_ZNSt16allocator_traitsISaIdEE8allocateERS0_m.exit.i: ; preds = %cond.true.i
  %mul.i.i.i = shl nuw nsw i64 %cond.i75, 3
  %call5.i.i.i = tail call noalias nonnull i8* @_Znwm(i64 %mul.i.i.i) #43
  %6 = bitcast i8* %call5.i.i.i to double*
  br label %if.then.i.i.i

if.then.i.i.i:                                    ; preds = %_ZNSt16allocator_traitsISaIdEE8allocateERS0_m.exit.i, %_ZNKSt6vectorIdSaIdEE12_M_check_lenEmPKc.exit
  %cond.i = phi double* [ %6, %_ZNSt16allocator_traitsISaIdEE8allocateERS0_m.exit.i ], [ null, %_ZNKSt6vectorIdSaIdEE12_M_check_lenEmPKc.exit ]
  %add.ptr = getelementptr inbounds double, double* %cond.i, i64 %2
  store double 0.000000e+00, double* %add.ptr, align 8, !tbaa !75
  %cmp.i.i.i.i.i = icmp eq i64 %__n, 1
  br i1 %cmp.i.i.i.i.i, label %_ZSt27__uninitialized_default_n_aIPdmdET_S1_T0_RSaIT1_E.exit, label %if.end.i.i.i.i.i

if.end.i.i.i.i.i:                                 ; preds = %if.then.i.i.i
  %incdec.ptr.i.i.i = getelementptr inbounds double, double* %add.ptr, i64 1
  %incdec.ptr8.i.i.i = bitcast double* %incdec.ptr.i.i.i to i8*
  %7 = shl nsw i64 %__n, 3
  %8 = add i64 %7, -8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %incdec.ptr8.i.i.i, i8 0, i64 %8, i1 false) #38
  br label %_ZSt27__uninitialized_default_n_aIPdmdET_S1_T0_RSaIT1_E.exit

_ZSt27__uninitialized_default_n_aIPdmdET_S1_T0_RSaIT1_E.exit: ; preds = %if.end.i.i.i.i.i, %if.then.i.i.i
  %cmp.i.i.i.i = icmp sgt i64 %sub.ptr.sub.i, 0
  br i1 %cmp.i.i.i.i, label %if.then.i.i.i.i, label %_ZNSt6vectorIdSaIdEE11_S_relocateEPdS2_S2_RS0_.exit

if.then.i.i.i.i:                                  ; preds = %_ZSt27__uninitialized_default_n_aIPdmdET_S1_T0_RSaIT1_E.exit
  %9 = bitcast double* %cond.i to i8*
  %10 = bitcast double* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 %sub.ptr.sub.i, i1 false) #38
  br label %_ZNSt6vectorIdSaIdEE11_S_relocateEPdS2_S2_RS0_.exit

_ZNSt6vectorIdSaIdEE11_S_relocateEPdS2_S2_RS0_.exit: ; preds = %if.then.i.i.i.i, %_ZSt27__uninitialized_default_n_aIPdmdET_S1_T0_RSaIT1_E.exit
  %tobool.not.i = icmp eq double* %1, null
  br i1 %tobool.not.i, label %_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdm.exit, label %if.then.i

if.then.i:                                        ; preds = %_ZNSt6vectorIdSaIdEE11_S_relocateEPdS2_S2_RS0_.exit
  %11 = bitcast double* %1 to i8*
  tail call void @_ZdlPv(i8* %11) #41
  br label %_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdm.exit

_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdm.exit: ; preds = %if.then.i, %_ZNSt6vectorIdSaIdEE11_S_relocateEPdS2_S2_RS0_.exit
  store double* %cond.i, double** %_M_start.i, align 8, !tbaa !121
  %add.ptr38 = getelementptr inbounds double, double* %add.ptr, i64 %__n
  store double* %add.ptr38, double** %_M_finish.i, align 8, !tbaa !119
  %add.ptr41 = getelementptr inbounds double, double* %cond.i, i64 %cond.i75
  store double* %add.ptr41, double** %_M_end_of_storage, align 8, !tbaa !159
  br label %if.end45

if.end45:                                         ; preds = %_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdm.exit, %_ZSt27__uninitialized_default_n_aIPdmdET_S1_T0_RSaIT1_E.exit73, %entry
  ret void
}

; Function Attrs: noreturn nounwind
declare dso_local void @abort() local_unnamed_addr #28

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local { %"struct.std::_Rb_tree_node_base"*, i8 } @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS5_blmdSaNS9_14adl_serializerESC_IhSaIhEEEEESt10_Select1stISH_ESt4lessIvESaISH_EE17_M_emplace_uniqueIJS5_DnEEES6_ISt17_Rb_tree_iteratorISH_EbEDpOT_(%"class.std::_Rb_tree"* nonnull dereferenceable(48) %this, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %__args, i8** nonnull align 8 dereferenceable(8) %__args1) local_unnamed_addr #0 comdat align 2 {
entry:
  %call5.i.i.i.i.i = tail call noalias nonnull dereferenceable(80) i8* @_Znwm(i64 80) #43
  %_M_storage.i.i.i.i16 = getelementptr inbounds i8, i8* %call5.i.i.i.i.i, i64 32
  %0 = getelementptr inbounds i8, i8* %call5.i.i.i.i.i, i64 48
  %1 = bitcast i8* %_M_storage.i.i.i.i16 to i8**
  store i8* %0, i8** %1, align 8, !tbaa !14
  %_M_p.i.i26.i.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__args, i64 0, i32 0, i32 0
  %2 = load i8*, i8** %_M_p.i.i26.i.i.i.i.i.i.i, align 8, !tbaa !17
  %3 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__args, i64 0, i32 2
  %arraydecay.i.i.i.i.i.i.i.i.i = bitcast %union.anon* %3 to i8*
  %cmp.i27.i.i.i.i.i.i.i = icmp eq i8* %2, %arraydecay.i.i.i.i.i.i.i.i.i
  br i1 %cmp.i27.i.i.i.i.i.i.i, label %if.then.i.i.i.i.i.i.i, label %if.else.i.i.i.i.i.i.i

if.then.i.i.i.i.i.i.i:                            ; preds = %entry
  %_M_string_length.i25.i.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__args, i64 0, i32 1
  %4 = load i64, i64* %_M_string_length.i25.i.i.i.i.i.i.i, align 8, !tbaa !19
  %add.i.i.i.i.i.i.i = add i64 %4, 1
  %cmp.i.i.i.i.i.i.i.i = icmp eq i64 %add.i.i.i.i.i.i.i, 0
  br i1 %cmp.i.i.i.i.i.i.i.i, label %_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS5_blmdSaNS9_14adl_serializerESC_IhSaIhEEEEESt10_Select1stISH_ESt4lessIvESaISH_EE10_Auto_nodeC2IJS5_DnEEERSN_DpOT_.exit, label %if.end.i.i.i.i.i.i.i.i

if.end.i.i.i.i.i.i.i.i:                           ; preds = %if.then.i.i.i.i.i.i.i
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %0, i8* nonnull align 8 %2, i64 %add.i.i.i.i.i.i.i, i1 false) #38
  br label %_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS5_blmdSaNS9_14adl_serializerESC_IhSaIhEEEEESt10_Select1stISH_ESt4lessIvESaISH_EE10_Auto_nodeC2IJS5_DnEEERSN_DpOT_.exit

if.else.i.i.i.i.i.i.i:                            ; preds = %entry
  store i8* %2, i8** %1, align 8, !tbaa !17
  %_M_allocated_capacity.i.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__args, i64 0, i32 2, i32 0
  %5 = load i64, i64* %_M_allocated_capacity.i.i.i.i.i.i.i, align 8, !tbaa !21
  %6 = bitcast i8* %0 to i64*
  store i64 %5, i64* %6, align 8, !tbaa !21
  %_M_string_length.i22.i.i.i.i.i.phi.trans.insert.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__args, i64 0, i32 1
  %.pre.i.i = load i64, i64* %_M_string_length.i22.i.i.i.i.i.phi.trans.insert.i.i, align 8, !tbaa !19
  br label %_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS5_blmdSaNS9_14adl_serializerESC_IhSaIhEEEEESt10_Select1stISH_ESt4lessIvESaISH_EE10_Auto_nodeC2IJS5_DnEEERSN_DpOT_.exit

_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS5_blmdSaNS9_14adl_serializerESC_IhSaIhEEEEESt10_Select1stISH_ESt4lessIvESaISH_EE10_Auto_nodeC2IJS5_DnEEERSN_DpOT_.exit: ; preds = %if.else.i.i.i.i.i.i.i, %if.end.i.i.i.i.i.i.i.i, %if.then.i.i.i.i.i.i.i
  %7 = phi i64 [ -1, %if.then.i.i.i.i.i.i.i ], [ %4, %if.end.i.i.i.i.i.i.i.i ], [ %.pre.i.i, %if.else.i.i.i.i.i.i.i ]
  %_M_string_length.i22.i.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__args, i64 0, i32 1
  %8 = getelementptr inbounds i8, i8* %call5.i.i.i.i.i, i64 40
  %9 = bitcast i8* %8 to i64*
  store i64 %7, i64* %9, align 8, !tbaa !19
  %10 = bitcast %"class.std::__cxx11::basic_string"* %__args to %union.anon**
  store %union.anon* %3, %union.anon** %10, align 8, !tbaa !17
  store i64 0, i64* %_M_string_length.i22.i.i.i.i.i.i.i, align 8, !tbaa !19
  store i8 0, i8* %arraydecay.i.i.i.i.i.i.i.i.i, align 8, !tbaa !21
  %11 = getelementptr inbounds i8, i8* %call5.i.i.i.i.i, i64 64
  %12 = bitcast i8* %11 to %"class.nlohmann::json_v3_11_1::basic_json"*
  store i8 0, i8* %11, align 8, !tbaa !145
  %13 = getelementptr inbounds i8, i8* %call5.i.i.i.i.i, i64 72
  %14 = bitcast i8* %13 to %"class.std::map"**
  store %"class.std::map"* null, %"class.std::map"** %14, align 8, !tbaa !21
  tail call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %12, i1 zeroext true) #38
  tail call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %12, i1 zeroext true) #38
  %first.i.i.i = bitcast i8* %_M_storage.i.i.i.i16 to %"class.std::__cxx11::basic_string"*
  %call6 = tail call { %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"* } @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS5_blmdSaNS9_14adl_serializerESC_IhSaIhEEEEESt10_Select1stISH_ESt4lessIvESaISH_EE24_M_get_insert_unique_posERS7_(%"class.std::_Rb_tree"* nonnull dereferenceable(48) %this, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %first.i.i.i)
  %15 = extractvalue { %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"* } %call6, 0
  %16 = extractvalue { %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"* } %call6, 1
  %tobool.not = icmp eq %"struct.std::_Rb_tree_node_base"* %16, null
  br i1 %tobool.not, label %if.then.i, label %if.then

if.then:                                          ; preds = %_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS5_blmdSaNS9_14adl_serializerESC_IhSaIhEEEEESt10_Select1stISH_ESt4lessIvESaISH_EE10_Auto_nodeC2IJS5_DnEEERSN_DpOT_.exit
  %cmp.not.i.i = icmp eq %"struct.std::_Rb_tree_node_base"* %15, null
  br i1 %cmp.not.i.i, label %lor.lhs.false.i.i, label %cleanup.thread

lor.lhs.false.i.i:                                ; preds = %if.then
  %17 = getelementptr inbounds %"class.std::_Rb_tree", %"class.std::_Rb_tree"* %this, i64 0, i32 0, i32 0, i32 0, i32 0
  %add.ptr.i.i.i = getelementptr inbounds i8, i8* %17, i64 8
  %_M_header.i.i.i = bitcast i8* %add.ptr.i.i.i to %"struct.std::_Rb_tree_node_base"*
  %cmp2.i.i = icmp eq %"struct.std::_Rb_tree_node_base"* %16, %_M_header.i.i.i
  br i1 %cmp2.i.i, label %cleanup.thread, label %lor.rhs.i.i

lor.rhs.i.i:                                      ; preds = %lor.lhs.false.i.i
  %18 = load i64, i64* %9, align 8, !tbaa !19
  %_M_string_length.i14.i.i.i.i.i.i = getelementptr inbounds %"struct.std::_Rb_tree_node_base", %"struct.std::_Rb_tree_node_base"* %16, i64 1, i32 1
  %19 = bitcast %"struct.std::_Rb_tree_node_base"** %_M_string_length.i14.i.i.i.i.i.i to i64*
  %20 = load i64, i64* %19, align 8, !tbaa !19
  %cmp.i15.i.i.i.i.i.i = icmp ugt i64 %18, %20
  %.sroa.speculated.i.i.i.i.i.i = select i1 %cmp.i15.i.i.i.i.i.i, i64 %20, i64 %18
  %cmp.i13.i.i.i.i.i.i = icmp eq i64 %.sroa.speculated.i.i.i.i.i.i, 0
  br i1 %cmp.i13.i.i.i.i.i.i, label %if.then.i.i.i.i.i.i, label %_ZNSt11char_traitsIcE7compareEPKcS2_m.exit.i.i.i.i.i.i

_ZNSt11char_traitsIcE7compareEPKcS2_m.exit.i.i.i.i.i.i: ; preds = %lor.rhs.i.i
  %_M_storage.i.i.i.i.i = getelementptr inbounds %"struct.std::_Rb_tree_node_base", %"struct.std::_Rb_tree_node_base"* %16, i64 1
  %_M_p.i.i.i.i.i.i.i.i = bitcast %"struct.std::_Rb_tree_node_base"* %_M_storage.i.i.i.i.i to i8**
  %21 = load i8*, i8** %_M_p.i.i.i.i.i.i.i.i, align 8, !tbaa !17
  %22 = load i8*, i8** %1, align 8, !tbaa !17
  %call.i.i.i.i.i.i.i = tail call i32 @memcmp(i8* %22, i8* %21, i64 %.sroa.speculated.i.i.i.i.i.i) #38
  %tobool.not.i.i.i.i.i.i = icmp eq i32 %call.i.i.i.i.i.i.i, 0
  br i1 %tobool.not.i.i.i.i.i.i, label %if.then.i.i.i.i.i.i, label %_ZNKSt4lessIvEclIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_EEDTltclsr3stdE7forwardIT_Efp_Eclsr3stdE7forwardIT0_Efp0_EEOSA_OSB_.exit.i.i

if.then.i.i.i.i.i.i:                              ; preds = %_ZNSt11char_traitsIcE7compareEPKcS2_m.exit.i.i.i.i.i.i, %lor.rhs.i.i
  %sub.i.i.i.i.i.i.i = sub i64 %18, %20
  %cmp.i.i.i.i.i.i.i = icmp sgt i64 %sub.i.i.i.i.i.i.i, 2147483647
  br i1 %cmp.i.i.i.i.i.i.i, label %_ZNKSt4lessIvEclIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_EEDTltclsr3stdE7forwardIT_Efp_Eclsr3stdE7forwardIT0_Efp0_EEOSA_OSB_.exit.i.i, label %if.else.i.i.i.i.i.i.i23

if.else.i.i.i.i.i.i.i23:                          ; preds = %if.then.i.i.i.i.i.i
  %23 = icmp sgt i64 %sub.i.i.i.i.i.i.i, -2147483648
  %spec.select7.i.i.i.i.i.i.i = select i1 %23, i64 %sub.i.i.i.i.i.i.i, i64 -2147483648
  %24 = trunc i64 %spec.select7.i.i.i.i.i.i.i to i32
  br label %_ZNKSt4lessIvEclIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_EEDTltclsr3stdE7forwardIT_Efp_Eclsr3stdE7forwardIT0_Efp0_EEOSA_OSB_.exit.i.i

_ZNKSt4lessIvEclIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_EEDTltclsr3stdE7forwardIT_Efp_Eclsr3stdE7forwardIT0_Efp0_EEOSA_OSB_.exit.i.i: ; preds = %if.else.i.i.i.i.i.i.i23, %if.then.i.i.i.i.i.i, %_ZNSt11char_traitsIcE7compareEPKcS2_m.exit.i.i.i.i.i.i
  %__r.0.i.i.i.i.i.i = phi i32 [ %call.i.i.i.i.i.i.i, %_ZNSt11char_traitsIcE7compareEPKcS2_m.exit.i.i.i.i.i.i ], [ %24, %if.else.i.i.i.i.i.i.i23 ], [ 2147483647, %if.then.i.i.i.i.i.i ]
  %cmp.i.i.i.i.i = icmp slt i32 %__r.0.i.i.i.i.i.i, 0
  br label %cleanup.thread

cleanup.thread:                                   ; preds = %_ZNKSt4lessIvEclIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_EEDTltclsr3stdE7forwardIT_Efp_Eclsr3stdE7forwardIT0_Efp0_EEOSA_OSB_.exit.i.i, %lor.lhs.false.i.i, %if.then
  %25 = phi i1 [ true, %lor.lhs.false.i.i ], [ %cmp.i.i.i.i.i, %_ZNKSt4lessIvEclIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_EEDTltclsr3stdE7forwardIT_Efp_Eclsr3stdE7forwardIT0_Efp0_EEOSA_OSB_.exit.i.i ], [ true, %if.then ]
  %26 = bitcast i8* %call5.i.i.i.i.i to %"struct.std::_Rb_tree_node_base"*
  %27 = getelementptr inbounds %"class.std::_Rb_tree", %"class.std::_Rb_tree"* %this, i64 0, i32 0, i32 0, i32 0, i32 0
  %add.ptr.i.i = getelementptr inbounds i8, i8* %27, i64 8
  %_M_header.i.i = bitcast i8* %add.ptr.i.i to %"struct.std::_Rb_tree_node_base"*
  tail call void @_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_(i1 zeroext %25, %"struct.std::_Rb_tree_node_base"* nonnull %26, %"struct.std::_Rb_tree_node_base"* nonnull %16, %"struct.std::_Rb_tree_node_base"* nonnull align 8 dereferenceable(32) %_M_header.i.i) #38
  %_M_node_count.i.i = getelementptr inbounds i8, i8* %27, i64 40
  %28 = bitcast i8* %_M_node_count.i.i to i64*
  %29 = load i64, i64* %28, align 8, !tbaa !171
  %inc.i.i = add i64 %29, 1
  store i64 %inc.i.i, i64* %28, align 8, !tbaa !171
  br label %_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS5_blmdSaNS9_14adl_serializerESC_IhSaIhEEEEESt10_Select1stISH_ESt4lessIvESaISH_EE10_Auto_nodeD2Ev.exit

if.then.i:                                        ; preds = %_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS5_blmdSaNS9_14adl_serializerESC_IhSaIhEEEEESt10_Select1stISH_ESt4lessIvESaISH_EE10_Auto_nodeC2IJS5_DnEEERSN_DpOT_.exit
  tail call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %12, i1 zeroext false) #38
  %30 = bitcast i8* %13 to %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"*
  %31 = load i8, i8* %11, align 8, !tbaa !145
  tail call void @_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE10json_value7destroyENS0_6detail7value_tE(%"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* nonnull dereferenceable(8) %30, i8 zeroext %31) #38
  %32 = load i8*, i8** %1, align 8, !tbaa !17
  %cmp.i.i.i.i.i.i = icmp eq i8* %32, %0
  br i1 %cmp.i.i.i.i.i.i, label %_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS5_blmdSaNS9_14adl_serializerESC_IhSaIhEEEEESt10_Select1stISH_ESt4lessIvESaISH_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISH_E.exit.i, label %if.then.i.i.i.i.i

if.then.i.i.i.i.i:                                ; preds = %if.then.i
  tail call void @_ZdlPv(i8* %32) #41
  br label %_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS5_blmdSaNS9_14adl_serializerESC_IhSaIhEEEEESt10_Select1stISH_ESt4lessIvESaISH_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISH_E.exit.i

_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS5_blmdSaNS9_14adl_serializerESC_IhSaIhEEEEESt10_Select1stISH_ESt4lessIvESaISH_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISH_E.exit.i: ; preds = %if.then.i.i.i.i.i, %if.then.i
  tail call void @_ZdlPv(i8* nonnull %call5.i.i.i.i.i) #41
  br label %_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS5_blmdSaNS9_14adl_serializerESC_IhSaIhEEEEESt10_Select1stISH_ESt4lessIvESaISH_EE10_Auto_nodeD2Ev.exit

_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS5_blmdSaNS9_14adl_serializerESC_IhSaIhEEEEESt10_Select1stISH_ESt4lessIvESaISH_EE10_Auto_nodeD2Ev.exit: ; preds = %_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS5_blmdSaNS9_14adl_serializerESC_IhSaIhEEEEESt10_Select1stISH_ESt4lessIvESaISH_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISH_E.exit.i, %cleanup.thread
  %retval.sroa.3.037 = phi i8 [ 1, %cleanup.thread ], [ 0, %_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS5_blmdSaNS9_14adl_serializerESC_IhSaIhEEEEESt10_Select1stISH_ESt4lessIvESaISH_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISH_E.exit.i ]
  %retval.sroa.0.036 = phi %"struct.std::_Rb_tree_node_base"* [ %26, %cleanup.thread ], [ %15, %_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS5_blmdSaNS9_14adl_serializerESC_IhSaIhEEEEESt10_Select1stISH_ESt4lessIvESaISH_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISH_E.exit.i ]
  %.fca.0.insert = insertvalue { %"struct.std::_Rb_tree_node_base"*, i8 } undef, %"struct.std::_Rb_tree_node_base"* %retval.sroa.0.036, 0
  %.fca.1.insert = insertvalue { %"struct.std::_Rb_tree_node_base"*, i8 } %.fca.0.insert, i8 %retval.sroa.3.037, 1
  ret { %"struct.std::_Rb_tree_node_base"*, i8 } %.fca.1.insert
}

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local { %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"* } @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS5_blmdSaNS9_14adl_serializerESC_IhSaIhEEEEESt10_Select1stISH_ESt4lessIvESaISH_EE24_M_get_insert_unique_posERS7_(%"class.std::_Rb_tree"* nonnull dereferenceable(48) %this, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %__k) local_unnamed_addr #0 comdat align 2 {
entry:
  %0 = getelementptr inbounds %"class.std::_Rb_tree", %"class.std::_Rb_tree"* %this, i64 0, i32 0, i32 0, i32 0, i32 0
  %_M_parent.i.i = getelementptr inbounds i8, i8* %0, i64 16
  %1 = bitcast i8* %_M_parent.i.i to %"struct.std::_Rb_tree_node"**
  %add.ptr.i = getelementptr inbounds i8, i8* %0, i64 8
  %_M_header.i = bitcast i8* %add.ptr.i to %"struct.std::_Rb_tree_node_base"*
  %__x.073 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %1, align 8, !tbaa !60
  %cmp.not74 = icmp eq %"struct.std::_Rb_tree_node"* %__x.073, null
  br i1 %cmp.not74, label %if.then, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %entry
  %_M_string_length.i.i.i.i.i33 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__k, i64 0, i32 1
  %2 = load i64, i64* %_M_string_length.i.i.i.i.i33, align 8, !tbaa !19
  %_M_p.i.i.i.i.i39 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__k, i64 0, i32 0, i32 0
  %3 = load i8*, i8** %_M_p.i.i.i.i.i39, align 8
  br label %while.body

while.body:                                       ; preds = %while.body.backedge, %while.body.lr.ph
  %__x.075 = phi %"struct.std::_Rb_tree_node"* [ %__x.073, %while.body.lr.ph ], [ %__x.075.be, %while.body.backedge ]
  %_M_string_length.i14.i.i.i.i34 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %__x.075, i64 0, i32 1, i32 0, i64 8
  %4 = bitcast i8* %_M_string_length.i14.i.i.i.i34 to i64*
  %5 = load i64, i64* %4, align 8, !tbaa !19
  %cmp.i15.i.i.i.i35 = icmp ugt i64 %2, %5
  %.sroa.speculated.i.i.i.i36 = select i1 %cmp.i15.i.i.i.i35, i64 %5, i64 %2
  %cmp.i13.i.i.i.i37 = icmp eq i64 %.sroa.speculated.i.i.i.i36, 0
  br i1 %cmp.i13.i.i.i.i37, label %if.then.i.i.i.i45, label %_ZNSt11char_traitsIcE7compareEPKcS2_m.exit.i.i.i.i42

_ZNSt11char_traitsIcE7compareEPKcS2_m.exit.i.i.i.i42: ; preds = %while.body
  %_M_storage.i.i = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %__x.075, i64 0, i32 1
  %_M_p.i.i.i.i.i.i38 = bitcast %"struct.__gnu_cxx::__aligned_membuf"* %_M_storage.i.i to i8**
  %6 = load i8*, i8** %_M_p.i.i.i.i.i.i38, align 8, !tbaa !17
  %call.i.i.i.i.i40 = tail call i32 @memcmp(i8* %3, i8* %6, i64 %.sroa.speculated.i.i.i.i36) #38
  %tobool.not.i.i.i.i41 = icmp eq i32 %call.i.i.i.i.i40, 0
  br i1 %tobool.not.i.i.i.i41, label %if.then.i.i.i.i45, label %_ZNKSt4lessIvEclIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_EEDTltclsr3stdE7forwardIT_Efp_Eclsr3stdE7forwardIT0_Efp0_EEOSA_OSB_.exit50

if.then.i.i.i.i45:                                ; preds = %_ZNSt11char_traitsIcE7compareEPKcS2_m.exit.i.i.i.i42, %while.body
  %sub.i.i.i.i.i43 = sub i64 %2, %5
  %cmp.i.i.i.i.i44 = icmp sgt i64 %sub.i.i.i.i.i43, 2147483647
  br i1 %cmp.i.i.i.i.i44, label %cond.end.thread, label %if.else.i.i.i.i.i47

if.else.i.i.i.i.i47:                              ; preds = %if.then.i.i.i.i45
  %7 = icmp sgt i64 %sub.i.i.i.i.i43, -2147483648
  %spec.select7.i.i.i.i.i46 = select i1 %7, i64 %sub.i.i.i.i.i43, i64 -2147483648
  %8 = trunc i64 %spec.select7.i.i.i.i.i46 to i32
  br label %_ZNKSt4lessIvEclIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_EEDTltclsr3stdE7forwardIT_Efp_Eclsr3stdE7forwardIT0_Efp0_EEOSA_OSB_.exit50

_ZNKSt4lessIvEclIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_EEDTltclsr3stdE7forwardIT_Efp_Eclsr3stdE7forwardIT0_Efp0_EEOSA_OSB_.exit50: ; preds = %if.else.i.i.i.i.i47, %_ZNSt11char_traitsIcE7compareEPKcS2_m.exit.i.i.i.i42
  %__r.0.i.i.i.i48 = phi i32 [ %call.i.i.i.i.i40, %_ZNSt11char_traitsIcE7compareEPKcS2_m.exit.i.i.i.i42 ], [ %8, %if.else.i.i.i.i.i47 ]
  %cmp.i.i.i49 = icmp slt i32 %__r.0.i.i.i.i48, 0
  br i1 %cmp.i.i.i49, label %cond.end, label %cond.end.thread

cond.end:                                         ; preds = %_ZNKSt4lessIvEclIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_EEDTltclsr3stdE7forwardIT_Efp_Eclsr3stdE7forwardIT0_Efp0_EEOSA_OSB_.exit50
  %_M_left.i32 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %__x.075, i64 0, i32 0, i32 2
  %cond.in = bitcast %"struct.std::_Rb_tree_node_base"** %_M_left.i32 to %"struct.std::_Rb_tree_node"**
  %__x.0 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %cond.in, align 8, !tbaa !60
  %cmp.not = icmp eq %"struct.std::_Rb_tree_node"* %__x.0, null
  br i1 %cmp.not, label %while.end, label %while.body.backedge

while.body.backedge:                              ; preds = %cond.end.thread, %cond.end
  %__x.075.be = phi %"struct.std::_Rb_tree_node"* [ %__x.0, %cond.end ], [ %__x.087, %cond.end.thread ]
  br label %while.body, !llvm.loop !349

cond.end.thread:                                  ; preds = %_ZNKSt4lessIvEclIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_EEDTltclsr3stdE7forwardIT_Efp_Eclsr3stdE7forwardIT0_Efp0_EEOSA_OSB_.exit50, %if.then.i.i.i.i45
  %_M_right.i = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %__x.075, i64 0, i32 0, i32 3
  %cond.in86 = bitcast %"struct.std::_Rb_tree_node_base"** %_M_right.i to %"struct.std::_Rb_tree_node"**
  %__x.087 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %cond.in86, align 8, !tbaa !60
  %cmp.not88 = icmp eq %"struct.std::_Rb_tree_node"* %__x.087, null
  br i1 %cmp.not88, label %while.end.thread90, label %while.body.backedge

while.end.thread90:                               ; preds = %cond.end.thread
  %__x.075.lcssa2 = phi %"struct.std::_Rb_tree_node"* [ %__x.075, %cond.end.thread ]
  %9 = getelementptr %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %__x.075.lcssa2, i64 0, i32 0
  br label %if.end12

while.end:                                        ; preds = %cond.end
  %__x.075.lcssa = phi %"struct.std::_Rb_tree_node"* [ %__x.075, %cond.end ]
  %10 = getelementptr %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %__x.075.lcssa, i64 0, i32 0
  br label %if.then

if.then:                                          ; preds = %while.end, %entry
  %__y.0.lcssa83 = phi %"struct.std::_Rb_tree_node_base"* [ %10, %while.end ], [ %_M_header.i, %entry ]
  %_M_left.i = getelementptr inbounds i8, i8* %0, i64 24
  %11 = bitcast i8* %_M_left.i to %"struct.std::_Rb_tree_node_base"**
  %12 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %11, align 8, !tbaa !166
  %cmp.i = icmp eq %"struct.std::_Rb_tree_node_base"* %__y.0.lcssa83, %12
  br i1 %cmp.i, label %cleanup, label %if.else

if.else:                                          ; preds = %if.then
  %call.i = tail call %"struct.std::_Rb_tree_node_base"* @_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base(%"struct.std::_Rb_tree_node_base"* nonnull %__y.0.lcssa83) #39
  br label %if.end12

if.end12:                                         ; preds = %if.else, %while.end.thread90
  %__y.0.lcssa82 = phi %"struct.std::_Rb_tree_node_base"* [ %__y.0.lcssa83, %if.else ], [ %9, %while.end.thread90 ]
  %__j.sroa.0.0 = phi %"struct.std::_Rb_tree_node_base"* [ %call.i, %if.else ], [ %9, %while.end.thread90 ]
  %_M_string_length.i.i.i.i.i = getelementptr inbounds %"struct.std::_Rb_tree_node_base", %"struct.std::_Rb_tree_node_base"* %__j.sroa.0.0, i64 1, i32 1
  %13 = bitcast %"struct.std::_Rb_tree_node_base"** %_M_string_length.i.i.i.i.i to i64*
  %14 = load i64, i64* %13, align 8, !tbaa !19
  %_M_string_length.i14.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__k, i64 0, i32 1
  %15 = load i64, i64* %_M_string_length.i14.i.i.i.i, align 8, !tbaa !19
  %cmp.i15.i.i.i.i = icmp ugt i64 %14, %15
  %.sroa.speculated.i.i.i.i = select i1 %cmp.i15.i.i.i.i, i64 %15, i64 %14
  %cmp.i13.i.i.i.i = icmp eq i64 %.sroa.speculated.i.i.i.i, 0
  br i1 %cmp.i13.i.i.i.i, label %if.then.i.i.i.i, label %_ZNSt11char_traitsIcE7compareEPKcS2_m.exit.i.i.i.i

_ZNSt11char_traitsIcE7compareEPKcS2_m.exit.i.i.i.i: ; preds = %if.end12
  %_M_storage.i.i.i = getelementptr inbounds %"struct.std::_Rb_tree_node_base", %"struct.std::_Rb_tree_node_base"* %__j.sroa.0.0, i64 1
  %_M_p.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__k, i64 0, i32 0, i32 0
  %16 = load i8*, i8** %_M_p.i.i.i.i.i.i, align 8, !tbaa !17
  %_M_p.i.i.i.i.i = bitcast %"struct.std::_Rb_tree_node_base"* %_M_storage.i.i.i to i8**
  %17 = load i8*, i8** %_M_p.i.i.i.i.i, align 8, !tbaa !17
  %call.i.i.i.i.i = tail call i32 @memcmp(i8* %17, i8* %16, i64 %.sroa.speculated.i.i.i.i) #38
  %tobool.not.i.i.i.i = icmp eq i32 %call.i.i.i.i.i, 0
  br i1 %tobool.not.i.i.i.i, label %if.then.i.i.i.i, label %_ZNKSt4lessIvEclIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_EEDTltclsr3stdE7forwardIT_Efp_Eclsr3stdE7forwardIT0_Efp0_EEOSA_OSB_.exit

if.then.i.i.i.i:                                  ; preds = %_ZNSt11char_traitsIcE7compareEPKcS2_m.exit.i.i.i.i, %if.end12
  %sub.i.i.i.i.i = sub i64 %14, %15
  %cmp.i.i.i.i.i = icmp sgt i64 %sub.i.i.i.i.i, 2147483647
  br i1 %cmp.i.i.i.i.i, label %cleanup, label %if.else.i.i.i.i.i

if.else.i.i.i.i.i:                                ; preds = %if.then.i.i.i.i
  %18 = icmp sgt i64 %sub.i.i.i.i.i, -2147483648
  %spec.select7.i.i.i.i.i = select i1 %18, i64 %sub.i.i.i.i.i, i64 -2147483648
  %19 = trunc i64 %spec.select7.i.i.i.i.i to i32
  br label %_ZNKSt4lessIvEclIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_EEDTltclsr3stdE7forwardIT_Efp_Eclsr3stdE7forwardIT0_Efp0_EEOSA_OSB_.exit

_ZNKSt4lessIvEclIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_EEDTltclsr3stdE7forwardIT_Efp_Eclsr3stdE7forwardIT0_Efp0_EEOSA_OSB_.exit: ; preds = %if.else.i.i.i.i.i, %_ZNSt11char_traitsIcE7compareEPKcS2_m.exit.i.i.i.i
  %__r.0.i.i.i.i = phi i32 [ %call.i.i.i.i.i, %_ZNSt11char_traitsIcE7compareEPKcS2_m.exit.i.i.i.i ], [ %19, %if.else.i.i.i.i.i ]
  %cmp.i.i.i = icmp slt i32 %__r.0.i.i.i.i, 0
  %spec.select = select i1 %cmp.i.i.i, %"struct.std::_Rb_tree_node_base"* null, %"struct.std::_Rb_tree_node_base"* %__j.sroa.0.0
  %spec.select72 = select i1 %cmp.i.i.i, %"struct.std::_Rb_tree_node_base"* %__y.0.lcssa82, %"struct.std::_Rb_tree_node_base"* null
  br label %cleanup

cleanup:                                          ; preds = %_ZNKSt4lessIvEclIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_EEDTltclsr3stdE7forwardIT_Efp_Eclsr3stdE7forwardIT0_Efp0_EEOSA_OSB_.exit, %if.then.i.i.i.i, %if.then
  %retval.sroa.0.0 = phi %"struct.std::_Rb_tree_node_base"* [ %__j.sroa.0.0, %if.then.i.i.i.i ], [ %spec.select, %_ZNKSt4lessIvEclIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_EEDTltclsr3stdE7forwardIT_Efp_Eclsr3stdE7forwardIT0_Efp0_EEOSA_OSB_.exit ], [ null, %if.then ]
  %retval.sroa.4.0 = phi %"struct.std::_Rb_tree_node_base"* [ null, %if.then.i.i.i.i ], [ %spec.select72, %_ZNKSt4lessIvEclIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_EEDTltclsr3stdE7forwardIT_Efp_Eclsr3stdE7forwardIT0_Efp0_EEOSA_OSB_.exit ], [ %__y.0.lcssa83, %if.then ]
  %.fca.0.insert = insertvalue { %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"* } undef, %"struct.std::_Rb_tree_node_base"* %retval.sroa.0.0, 0
  %.fca.1.insert = insertvalue { %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"* } %.fca.0.insert, %"struct.std::_Rb_tree_node_base"* %retval.sroa.4.0, 1
  ret { %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"* } %.fca.1.insert
}

; Function Attrs: argmemonly nofree norecurse nosync nounwind readonly willreturn
declare dso_local i32 @memcmp(i8* nocapture writeonly, i8* nocapture writeonly, i64) local_unnamed_addr #30

; Function Attrs: nounwind readonly willreturn
declare dso_local %"struct.std::_Rb_tree_node_base"* @_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base(%"struct.std::_Rb_tree_node_base"*) local_unnamed_addr #29

; Function Attrs: nounwind
declare dso_local void @_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_(i1 zeroext, %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"* nonnull align 8 dereferenceable(32)) local_unnamed_addr #6

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local void @_ZN8nlohmann12json_v3_11_16detail20external_constructorILNS1_7value_tE3EE9constructINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES8_IhSaIhEEEEEEvRT_RKNSJ_8string_tE(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull align 8 dereferenceable(16) %j, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %s) local_unnamed_addr #0 comdat align 2 {
entry:
  %__dnew.i.i.i.i.i.i = alloca i64, align 8
  %m_value = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %j, i64 0, i32 1
  %m_type = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %j, i64 0, i32 0
  %0 = load i8, i8* %m_type, align 8, !tbaa !145
  tail call void @_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE10json_value7destroyENS0_6detail7value_tE(%"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* nonnull dereferenceable(8) %m_value, i8 zeroext %0)
  store i8 3, i8* %m_type, align 8, !tbaa !145
  %call5.i.i.i.i = tail call noalias nonnull dereferenceable(32) i8* @_Znwm(i64 32) #43
  %1 = getelementptr inbounds i8, i8* %call5.i.i.i.i, i64 16
  %2 = bitcast i8* %call5.i.i.i.i to i8**
  store i8* %1, i8** %2, align 8, !tbaa !14
  %_M_p.i9.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %s, i64 0, i32 0, i32 0
  %3 = load i8*, i8** %_M_p.i9.i.i.i.i.i, align 8, !tbaa !17
  %_M_string_length.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %s, i64 0, i32 1
  %4 = load i64, i64* %_M_string_length.i.i.i.i.i.i, align 8, !tbaa !19
  %5 = bitcast i64* %__dnew.i.i.i.i.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #38
  store i64 %4, i64* %__dnew.i.i.i.i.i.i, align 8, !tbaa !20
  %cmp.i.i.i.i.i.i = icmp ugt i64 %4, 15
  br i1 %cmp.i.i.i.i.i.i, label %if.then.i.i.i.i.i.i, label %if.end.i.i.i.i.i.i

if.then.i.i.i.i.i.i:                              ; preds = %entry
  %6 = bitcast i8* %call5.i.i.i.i to %"class.std::__cxx11::basic_string"*
  %call2.i.i.i.i.i.i = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %6, i64* nonnull align 8 dereferenceable(8) %__dnew.i.i.i.i.i.i, i64 0) #38
  store i8* %call2.i.i.i.i.i.i, i8** %2, align 8, !tbaa !17
  %7 = load i64, i64* %__dnew.i.i.i.i.i.i, align 8, !tbaa !20
  %8 = bitcast i8* %1 to i64*
  store i64 %7, i64* %8, align 8, !tbaa !21
  br label %if.end.i.i.i.i.i.i

if.end.i.i.i.i.i.i:                               ; preds = %if.then.i.i.i.i.i.i, %entry
  %9 = phi i8* [ %call2.i.i.i.i.i.i, %if.then.i.i.i.i.i.i ], [ %1, %entry ]
  switch i64 %4, label %if.end.i.i.i.i.i.i.i.i.i [
    i64 1, label %if.then.i.i7.i.i.i.i.i.i
    i64 0, label %_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE10json_valueC2ERKS9_.exit
  ]

if.then.i.i7.i.i.i.i.i.i:                         ; preds = %if.end.i.i.i.i.i.i
  %10 = load i8, i8* %3, align 1, !tbaa !21
  store i8 %10, i8* %9, align 1, !tbaa !21
  br label %_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE10json_valueC2ERKS9_.exit

if.end.i.i.i.i.i.i.i.i.i:                         ; preds = %if.end.i.i.i.i.i.i
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %9, i8* align 1 %3, i64 %4, i1 false) #38
  br label %_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE10json_valueC2ERKS9_.exit

_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE10json_valueC2ERKS9_.exit: ; preds = %if.end.i.i.i.i.i.i.i.i.i, %if.then.i.i7.i.i.i.i.i.i, %if.end.i.i.i.i.i.i
  %11 = load i64, i64* %__dnew.i.i.i.i.i.i, align 8, !tbaa !20
  %_M_string_length.i.i.i.i.i.i.i.i = getelementptr inbounds i8, i8* %call5.i.i.i.i, i64 8
  %12 = bitcast i8* %_M_string_length.i.i.i.i.i.i.i.i to i64*
  store i64 %11, i64* %12, align 8, !tbaa !19
  %13 = load i8*, i8** %2, align 8, !tbaa !17
  %arrayidx.i.i.i.i.i.i.i = getelementptr inbounds i8, i8* %13, i64 %11
  store i8 0, i8* %arrayidx.i.i.i.i.i.i.i, align 1, !tbaa !21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #38
  %14 = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value to i64*
  %15 = ptrtoint i8* %call5.i.i.i.i to i64
  store i64 %15, i64* %14, align 8
  call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %j, i1 zeroext true) #38
  ret void
}

declare dso_local void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32), i64) local_unnamed_addr #3

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local void @_ZN8nlohmann12json_v3_11_16detail20external_constructorILNS1_7value_tE3EE9constructINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES8_IhSaIhEEEEA16_cLi0EEEvRT_RKT0_(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull align 8 dereferenceable(16) %j, [16 x i8]* nonnull align 1 dereferenceable(16) %str) local_unnamed_addr #0 comdat align 2 {
entry:
  %__dnew.i.i.i.i.i = alloca i64, align 8
  %m_value = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %j, i64 0, i32 1
  %m_type = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %j, i64 0, i32 0
  %0 = load i8, i8* %m_type, align 8, !tbaa !145
  tail call void @_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE10json_value7destroyENS0_6detail7value_tE(%"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* nonnull dereferenceable(8) %m_value, i8 zeroext %0)
  store i8 3, i8* %m_type, align 8, !tbaa !145
  %call5.i.i.i = tail call noalias nonnull dereferenceable(32) i8* @_Znwm(i64 32) #43
  %arraydecay.i.i.i = getelementptr inbounds [16 x i8], [16 x i8]* %str, i64 0, i64 0
  %1 = getelementptr inbounds i8, i8* %call5.i.i.i, i64 16
  %2 = bitcast i8* %call5.i.i.i to i8**
  store i8* %1, i8** %2, align 8, !tbaa !14
  %call.i.i.i.i.i = tail call i64 @strlen(i8* nonnull dereferenceable(1) %arraydecay.i.i.i) #38
  %3 = bitcast i64* %__dnew.i.i.i.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %3) #38
  store i64 %call.i.i.i.i.i, i64* %__dnew.i.i.i.i.i, align 8, !tbaa !20
  %cmp.i.i.i.i.i = icmp ugt i64 %call.i.i.i.i.i, 15
  br i1 %cmp.i.i.i.i.i, label %if.then.i.i.i.i.i, label %if.end.i.i.i.i.i

if.then.i.i.i.i.i:                                ; preds = %entry
  %4 = bitcast i8* %call5.i.i.i to %"class.std::__cxx11::basic_string"*
  %call2.i.i.i.i.i = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %4, i64* nonnull align 8 dereferenceable(8) %__dnew.i.i.i.i.i, i64 0) #38
  store i8* %call2.i.i.i.i.i, i8** %2, align 8, !tbaa !17
  %5 = load i64, i64* %__dnew.i.i.i.i.i, align 8, !tbaa !20
  %6 = bitcast i8* %1 to i64*
  store i64 %5, i64* %6, align 8, !tbaa !21
  br label %if.end.i.i.i.i.i

if.end.i.i.i.i.i:                                 ; preds = %if.then.i.i.i.i.i, %entry
  %7 = phi i8* [ %call2.i.i.i.i.i, %if.then.i.i.i.i.i ], [ %1, %entry ]
  switch i64 %call.i.i.i.i.i, label %if.end.i.i.i.i.i.i.i.i [
    i64 1, label %if.then.i.i7.i.i.i.i.i
    i64 0, label %_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE6createIS9_JRA16_KcEEEPT_DpOT0_.exit
  ]

if.then.i.i7.i.i.i.i.i:                           ; preds = %if.end.i.i.i.i.i
  %8 = load i8, i8* %arraydecay.i.i.i, align 1, !tbaa !21
  store i8 %8, i8* %7, align 1, !tbaa !21
  br label %_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE6createIS9_JRA16_KcEEEPT_DpOT0_.exit

if.end.i.i.i.i.i.i.i.i:                           ; preds = %if.end.i.i.i.i.i
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %7, i8* nonnull align 1 %arraydecay.i.i.i, i64 %call.i.i.i.i.i, i1 false) #38
  br label %_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE6createIS9_JRA16_KcEEEPT_DpOT0_.exit

_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE6createIS9_JRA16_KcEEEPT_DpOT0_.exit: ; preds = %if.end.i.i.i.i.i.i.i.i, %if.then.i.i7.i.i.i.i.i, %if.end.i.i.i.i.i
  %9 = load i64, i64* %__dnew.i.i.i.i.i, align 8, !tbaa !20
  %_M_string_length.i.i.i.i.i.i.i = getelementptr inbounds i8, i8* %call5.i.i.i, i64 8
  %10 = bitcast i8* %_M_string_length.i.i.i.i.i.i.i to i64*
  store i64 %9, i64* %10, align 8, !tbaa !19
  %11 = load i8*, i8** %2, align 8, !tbaa !17
  %arrayidx.i.i.i.i.i.i = getelementptr inbounds i8, i8* %11, i64 %9
  store i8 0, i8* %arrayidx.i.i.i.i.i.i, align 1, !tbaa !21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %3) #38
  %12 = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value to i8**
  store i8* %call5.i.i.i, i8** %12, align 8, !tbaa !21
  call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %j, i1 zeroext true) #38
  ret void
}

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local void @_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE17_M_realloc_insertIJRKSD_EEEvN9__gnu_cxx17__normal_iteratorIPSD_SF_EEDpOT_(%"class.std::vector.27"* nonnull dereferenceable(24) %this, %"class.nlohmann::json_v3_11_1::basic_json"* %__position.coerce, %"class.nlohmann::json_v3_11_1::basic_json"* nonnull align 8 dereferenceable(16) %__args) local_unnamed_addr #0 comdat align 2 {
entry:
  %_M_finish.i26.i = getelementptr inbounds %"class.std::vector.27", %"class.std::vector.27"* %this, i64 0, i32 0, i32 0, i32 0, i32 1
  %0 = load %"class.nlohmann::json_v3_11_1::basic_json"*, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_finish.i26.i, align 8, !tbaa !178
  %_M_start.i27.i = getelementptr inbounds %"class.std::vector.27", %"class.std::vector.27"* %this, i64 0, i32 0, i32 0, i32 0, i32 0
  %1 = load %"class.nlohmann::json_v3_11_1::basic_json"*, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_start.i27.i, align 8, !tbaa !298
  %sub.ptr.lhs.cast.i28.i = ptrtoint %"class.nlohmann::json_v3_11_1::basic_json"* %0 to i64
  %sub.ptr.rhs.cast.i29.i = ptrtoint %"class.nlohmann::json_v3_11_1::basic_json"* %1 to i64
  %sub.ptr.sub.i30.i = sub i64 %sub.ptr.lhs.cast.i28.i, %sub.ptr.rhs.cast.i29.i
  %sub.ptr.div.i31.i = ashr exact i64 %sub.ptr.sub.i30.i, 4
  %cmp.i = icmp eq i64 %sub.ptr.sub.i30.i, 9223372036854775792
  br i1 %cmp.i, label %if.then.i, label %_ZNKSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE12_M_check_lenEmPKc.exit

if.then.i:                                        ; preds = %entry
  tail call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.41, i64 0, i64 0)) #40
  unreachable

_ZNKSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE12_M_check_lenEmPKc.exit: ; preds = %entry
  %cmp.i.i = icmp eq i64 %sub.ptr.sub.i30.i, 0
  %.sroa.speculated.i = select i1 %cmp.i.i, i64 1, i64 %sub.ptr.div.i31.i
  %add.i = add nsw i64 %.sroa.speculated.i, %sub.ptr.div.i31.i
  %cmp7.i = icmp ult i64 %add.i, %sub.ptr.div.i31.i
  %cmp9.i = icmp ugt i64 %add.i, 576460752303423487
  %or.cond.i = or i1 %cmp7.i, %cmp9.i
  %cond.i = select i1 %or.cond.i, i64 576460752303423487, i64 %add.i
  %sub.ptr.lhs.cast.i = ptrtoint %"class.nlohmann::json_v3_11_1::basic_json"* %__position.coerce to i64
  %sub.ptr.sub.i = sub i64 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i29.i
  %sub.ptr.div.i = ashr exact i64 %sub.ptr.sub.i, 4
  %cmp.not.i = icmp eq i64 %cond.i, 0
  br i1 %cmp.not.i, label %_ZNSt12_Vector_baseIN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESaISE_EE11_M_allocateEm.exit, label %_ZNSt16allocator_traitsISaIN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEEEE8allocateERSF_m.exit.i

_ZNSt16allocator_traitsISaIN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEEEE8allocateERSF_m.exit.i: ; preds = %_ZNKSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE12_M_check_lenEmPKc.exit
  %mul.i.i.i = shl nuw nsw i64 %cond.i, 4
  %call5.i.i.i = tail call noalias nonnull i8* @_Znwm(i64 %mul.i.i.i) #43
  %2 = bitcast i8* %call5.i.i.i to %"class.nlohmann::json_v3_11_1::basic_json"*
  br label %_ZNSt12_Vector_baseIN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESaISE_EE11_M_allocateEm.exit

_ZNSt12_Vector_baseIN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESaISE_EE11_M_allocateEm.exit: ; preds = %_ZNSt16allocator_traitsISaIN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEEEE8allocateERSF_m.exit.i, %_ZNKSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE12_M_check_lenEmPKc.exit
  %cond.i39 = phi %"class.nlohmann::json_v3_11_1::basic_json"* [ %2, %_ZNSt16allocator_traitsISaIN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEEEE8allocateERSF_m.exit.i ], [ null, %_ZNKSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE12_M_check_lenEmPKc.exit ]
  %add.ptr = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %cond.i39, i64 %sub.ptr.div.i
  tail call void @_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEEC2ERKSD_(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %add.ptr, %"class.nlohmann::json_v3_11_1::basic_json"* nonnull align 8 dereferenceable(16) %__args) #38
  %cmp.not.i.i1.i40 = icmp eq %"class.nlohmann::json_v3_11_1::basic_json"* %1, %__position.coerce
  br i1 %cmp.not.i.i1.i40, label %_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE11_S_relocateEPSD_SG_SG_RSE_.exit53, label %for.body.i.i.i51

for.body.i.i.i51:                                 ; preds = %for.body.i.i.i51, %_ZNSt12_Vector_baseIN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESaISE_EE11_M_allocateEm.exit
  %__cur.0.i.i3.i41 = phi %"class.nlohmann::json_v3_11_1::basic_json"* [ %incdec.ptr2.i.i.i49, %for.body.i.i.i51 ], [ %cond.i39, %_ZNSt12_Vector_baseIN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESaISE_EE11_M_allocateEm.exit ]
  %__first.addr.0.i.i2.i42 = phi %"class.nlohmann::json_v3_11_1::basic_json"* [ %incdec.ptr.i.i.i48, %for.body.i.i.i51 ], [ %1, %_ZNSt12_Vector_baseIN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESaISE_EE11_M_allocateEm.exit ]
  tail call void @llvm.experimental.noalias.scope.decl(metadata !350) #38
  tail call void @llvm.experimental.noalias.scope.decl(metadata !353) #38
  %m_type.i.i.i.i.i43 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %__cur.0.i.i3.i41, i64 0, i32 0
  %m_type2.i.i.i.i.i44 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %__first.addr.0.i.i2.i42, i64 0, i32 0
  %3 = load i8, i8* %m_type2.i.i.i.i.i44, align 8, !tbaa !148, !alias.scope !353, !noalias !350
  store i8 %3, i8* %m_type.i.i.i.i.i43, align 8, !tbaa !145, !alias.scope !350, !noalias !353
  %m_value.i.i.i.i.i45 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %__cur.0.i.i3.i41, i64 0, i32 1
  %m_value3.i.i.i.i.i46 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %__first.addr.0.i.i2.i42, i64 0, i32 1
  %4 = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value3.i.i.i.i.i46 to i64*
  %5 = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value.i.i.i.i.i45 to i64*
  %6 = load i64, i64* %4, align 8, !alias.scope !353, !noalias !350
  store i64 %6, i64* %5, align 8, !alias.scope !350, !noalias !353
  tail call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %__first.addr.0.i.i2.i42, i1 zeroext false) #38, !noalias !350
  store i8 0, i8* %m_type2.i.i.i.i.i44, align 8, !tbaa !145, !alias.scope !353, !noalias !350
  %ref.tmp.sroa.0.0..sroa_idx.i.i.i.i.i47 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %__first.addr.0.i.i2.i42, i64 0, i32 1, i32 0
  store %"class.std::map"* null, %"class.std::map"** %ref.tmp.sroa.0.0..sroa_idx.i.i.i.i.i47, align 8, !tbaa.struct !179, !alias.scope !353, !noalias !350
  tail call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %__cur.0.i.i3.i41, i1 zeroext true) #38
  tail call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %__first.addr.0.i.i2.i42, i1 zeroext false) #38
  %7 = load i8, i8* %m_type2.i.i.i.i.i44, align 8, !tbaa !145, !alias.scope !353, !noalias !350
  tail call void @_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE10json_value7destroyENS0_6detail7value_tE(%"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* nonnull dereferenceable(8) %m_value3.i.i.i.i.i46, i8 zeroext %7) #38
  %incdec.ptr.i.i.i48 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %__first.addr.0.i.i2.i42, i64 1
  %incdec.ptr2.i.i.i49 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %__cur.0.i.i3.i41, i64 1
  %cmp.not.i.i.i50 = icmp eq %"class.nlohmann::json_v3_11_1::basic_json"* %incdec.ptr.i.i.i48, %__position.coerce
  br i1 %cmp.not.i.i.i50, label %_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE11_S_relocateEPSD_SG_SG_RSE_.exit53, label %for.body.i.i.i51, !llvm.loop !312

_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE11_S_relocateEPSD_SG_SG_RSE_.exit53: ; preds = %for.body.i.i.i51, %_ZNSt12_Vector_baseIN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESaISE_EE11_M_allocateEm.exit
  %__cur.0.i.i.lcssa.i52 = phi %"class.nlohmann::json_v3_11_1::basic_json"* [ %cond.i39, %_ZNSt12_Vector_baseIN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESaISE_EE11_M_allocateEm.exit ], [ %incdec.ptr2.i.i.i49, %for.body.i.i.i51 ]
  %incdec.ptr = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %__cur.0.i.i.lcssa.i52, i64 1
  %cmp.not.i.i1.i = icmp eq %"class.nlohmann::json_v3_11_1::basic_json"* %0, %__position.coerce
  br i1 %cmp.not.i.i1.i, label %_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE11_S_relocateEPSD_SG_SG_RSE_.exit, label %for.body.i.i.i

for.body.i.i.i:                                   ; preds = %for.body.i.i.i, %_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE11_S_relocateEPSD_SG_SG_RSE_.exit53
  %__cur.0.i.i3.i = phi %"class.nlohmann::json_v3_11_1::basic_json"* [ %incdec.ptr2.i.i.i, %for.body.i.i.i ], [ %incdec.ptr, %_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE11_S_relocateEPSD_SG_SG_RSE_.exit53 ]
  %__first.addr.0.i.i2.i = phi %"class.nlohmann::json_v3_11_1::basic_json"* [ %incdec.ptr.i.i.i, %for.body.i.i.i ], [ %__position.coerce, %_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE11_S_relocateEPSD_SG_SG_RSE_.exit53 ]
  tail call void @llvm.experimental.noalias.scope.decl(metadata !355) #38
  tail call void @llvm.experimental.noalias.scope.decl(metadata !358) #38
  %m_type.i.i.i.i.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %__cur.0.i.i3.i, i64 0, i32 0
  %m_type2.i.i.i.i.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %__first.addr.0.i.i2.i, i64 0, i32 0
  %8 = load i8, i8* %m_type2.i.i.i.i.i, align 8, !tbaa !148, !alias.scope !358, !noalias !355
  store i8 %8, i8* %m_type.i.i.i.i.i, align 8, !tbaa !145, !alias.scope !355, !noalias !358
  %m_value.i.i.i.i.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %__cur.0.i.i3.i, i64 0, i32 1
  %m_value3.i.i.i.i.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %__first.addr.0.i.i2.i, i64 0, i32 1
  %9 = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value3.i.i.i.i.i to i64*
  %10 = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value.i.i.i.i.i to i64*
  %11 = load i64, i64* %9, align 8, !alias.scope !358, !noalias !355
  store i64 %11, i64* %10, align 8, !alias.scope !355, !noalias !358
  tail call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %__first.addr.0.i.i2.i, i1 zeroext false) #38, !noalias !355
  store i8 0, i8* %m_type2.i.i.i.i.i, align 8, !tbaa !145, !alias.scope !358, !noalias !355
  %ref.tmp.sroa.0.0..sroa_idx.i.i.i.i.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %__first.addr.0.i.i2.i, i64 0, i32 1, i32 0
  store %"class.std::map"* null, %"class.std::map"** %ref.tmp.sroa.0.0..sroa_idx.i.i.i.i.i, align 8, !tbaa.struct !179, !alias.scope !358, !noalias !355
  tail call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %__cur.0.i.i3.i, i1 zeroext true) #38
  tail call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %__first.addr.0.i.i2.i, i1 zeroext false) #38
  %12 = load i8, i8* %m_type2.i.i.i.i.i, align 8, !tbaa !145, !alias.scope !358, !noalias !355
  tail call void @_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE10json_value7destroyENS0_6detail7value_tE(%"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* nonnull dereferenceable(8) %m_value3.i.i.i.i.i, i8 zeroext %12) #38
  %incdec.ptr.i.i.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %__first.addr.0.i.i2.i, i64 1
  %incdec.ptr2.i.i.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %__cur.0.i.i3.i, i64 1
  %cmp.not.i.i.i = icmp eq %"class.nlohmann::json_v3_11_1::basic_json"* %incdec.ptr.i.i.i, %0
  br i1 %cmp.not.i.i.i, label %_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE11_S_relocateEPSD_SG_SG_RSE_.exit, label %for.body.i.i.i, !llvm.loop !312

_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE11_S_relocateEPSD_SG_SG_RSE_.exit: ; preds = %for.body.i.i.i, %_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE11_S_relocateEPSD_SG_SG_RSE_.exit53
  %__cur.0.i.i.lcssa.i = phi %"class.nlohmann::json_v3_11_1::basic_json"* [ %incdec.ptr, %_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE11_S_relocateEPSD_SG_SG_RSE_.exit53 ], [ %incdec.ptr2.i.i.i, %for.body.i.i.i ]
  %tobool.not.i = icmp eq %"class.nlohmann::json_v3_11_1::basic_json"* %1, null
  br i1 %tobool.not.i, label %_ZNSt12_Vector_baseIN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESaISE_EE13_M_deallocateEPSE_m.exit, label %if.then.i38

if.then.i38:                                      ; preds = %_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE11_S_relocateEPSD_SG_SG_RSE_.exit
  %13 = getelementptr %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %1, i64 0, i32 0
  tail call void @_ZdlPv(i8* %13) #41
  br label %_ZNSt12_Vector_baseIN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESaISE_EE13_M_deallocateEPSE_m.exit

_ZNSt12_Vector_baseIN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESaISE_EE13_M_deallocateEPSE_m.exit: ; preds = %if.then.i38, %_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EE11_S_relocateEPSD_SG_SG_RSE_.exit
  %_M_end_of_storage = getelementptr inbounds %"class.std::vector.27", %"class.std::vector.27"* %this, i64 0, i32 0, i32 0, i32 0, i32 2
  store %"class.nlohmann::json_v3_11_1::basic_json"* %cond.i39, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_start.i27.i, align 8, !tbaa !298
  store %"class.nlohmann::json_v3_11_1::basic_json"* %__cur.0.i.i.lcssa.i, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_finish.i26.i, align 8, !tbaa !178
  %add.ptr20 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %cond.i39, i64 %cond.i
  store %"class.nlohmann::json_v3_11_1::basic_json"* %add.ptr20, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_end_of_storage, align 8, !tbaa !176
  ret void
}

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local void @_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEEC2ERKSD_(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %this, %"class.nlohmann::json_v3_11_1::basic_json"* nonnull align 8 dereferenceable(16) %other) unnamed_addr #0 comdat align 2 {
entry:
  %__dnew.i.i.i.i.i.i = alloca i64, align 8
  %m_type = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %this, i64 0, i32 0
  %m_type2 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %other, i64 0, i32 0
  %0 = load i8, i8* %m_type2, align 8, !tbaa !145
  store i8 %0, i8* %m_type, align 8, !tbaa !145
  %m_value = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %this, i64 0, i32 1
  %1 = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value to i64*
  store i64 0, i64* %1, align 8
  tail call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %other, i1 zeroext true) #38
  %2 = load i8, i8* %m_type, align 8, !tbaa !145
  switch i8 %2, label %sw.epilog [
    i8 1, label %sw.bb
    i8 2, label %sw.bb6
    i8 3, label %sw.bb10
    i8 4, label %sw.bb14
    i8 5, label %sw.bb18
    i8 6, label %sw.bb22
    i8 7, label %sw.bb26
    i8 8, label %sw.bb30
  ]

sw.bb:                                            ; preds = %entry
  %object = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %other, i64 0, i32 1, i32 0
  %3 = load %"class.std::map"*, %"class.std::map"** %object, align 8, !tbaa !21
  %call.i = tail call nonnull %"class.std::map"* @_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE6createIS2_IS9_SD_St4lessIvESaISt4pairIKS9_SD_EEEJRKSL_EEEPT_DpOT0_(%"class.std::map"* nonnull align 8 dereferenceable(48) %3) #38
  %4 = ptrtoint %"class.std::map"* %call.i to i64
  br label %sw.epilog.sink.split

sw.bb6:                                           ; preds = %entry
  %m_value8 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %other, i64 0, i32 1
  %array = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value8 to %"class.std::vector.27"**
  %5 = load %"class.std::vector.27"*, %"class.std::vector.27"** %array, align 8, !tbaa !21
  %call5.i.i.i.i45 = tail call noalias nonnull dereferenceable(24) i8* @_Znwm(i64 24) #43
  %_M_finish.i.i = getelementptr inbounds %"class.std::vector.27", %"class.std::vector.27"* %5, i64 0, i32 0, i32 0, i32 0, i32 1
  %6 = load %"class.nlohmann::json_v3_11_1::basic_json"*, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_finish.i.i, align 8, !tbaa !178
  %_M_start.i.i = getelementptr inbounds %"class.std::vector.27", %"class.std::vector.27"* %5, i64 0, i32 0, i32 0, i32 0, i32 0
  %7 = load %"class.nlohmann::json_v3_11_1::basic_json"*, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_start.i.i, align 8, !tbaa !298
  %sub.ptr.lhs.cast.i.i = ptrtoint %"class.nlohmann::json_v3_11_1::basic_json"* %6 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint %"class.nlohmann::json_v3_11_1::basic_json"* %7 to i64
  %sub.ptr.sub.i.i = sub i64 %sub.ptr.lhs.cast.i.i, %sub.ptr.rhs.cast.i.i
  %sub.ptr.div.i.i = ashr exact i64 %sub.ptr.sub.i.i, 4
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %call5.i.i.i.i45, i8 0, i64 24, i1 false) #38
  %cmp.not.i.i.i.i = icmp eq i64 %sub.ptr.sub.i.i, 0
  br i1 %cmp.not.i.i.i.i, label %_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EEC2ERKSF_.exit, label %cond.true.i.i.i.i

cond.true.i.i.i.i:                                ; preds = %sw.bb6
  %cmp.i.i.i.i.i.i46 = icmp ugt i64 %sub.ptr.div.i.i, 576460752303423487
  br i1 %cmp.i.i.i.i.i.i46, label %if.then3.i.i.i.i.i.i, label %_ZNSt16allocator_traitsISaIN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEEEE8allocateERSF_m.exit.i.i.i.i, !prof !211

if.then3.i.i.i.i.i.i:                             ; preds = %cond.true.i.i.i.i
  tail call void @_ZSt28__throw_bad_array_new_lengthv() #40
  unreachable

_ZNSt16allocator_traitsISaIN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEEEE8allocateERSF_m.exit.i.i.i.i: ; preds = %cond.true.i.i.i.i
  %call5.i.i.i.i.i.i = tail call noalias nonnull i8* @_Znwm(i64 %sub.ptr.sub.i.i) #43
  %8 = bitcast i8* %call5.i.i.i.i.i.i to %"class.nlohmann::json_v3_11_1::basic_json"*
  br label %_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EEC2ERKSF_.exit

_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EEC2ERKSF_.exit: ; preds = %_ZNSt16allocator_traitsISaIN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEEEE8allocateERSF_m.exit.i.i.i.i, %sw.bb6
  %cond.i.i.i.i = phi %"class.nlohmann::json_v3_11_1::basic_json"* [ %8, %_ZNSt16allocator_traitsISaIN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEEEE8allocateERSF_m.exit.i.i.i.i ], [ null, %sw.bb6 ]
  %_M_start.i.i.i = bitcast i8* %call5.i.i.i.i45 to %"class.nlohmann::json_v3_11_1::basic_json"**
  store %"class.nlohmann::json_v3_11_1::basic_json"* %cond.i.i.i.i, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_start.i.i.i, align 8, !tbaa !298
  %_M_finish.i.i.i = getelementptr inbounds i8, i8* %call5.i.i.i.i45, i64 8
  %9 = bitcast i8* %_M_finish.i.i.i to %"class.nlohmann::json_v3_11_1::basic_json"**
  store %"class.nlohmann::json_v3_11_1::basic_json"* %cond.i.i.i.i, %"class.nlohmann::json_v3_11_1::basic_json"** %9, align 8, !tbaa !178
  %add.ptr.i.i.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %cond.i.i.i.i, i64 %sub.ptr.div.i.i
  %_M_end_of_storage.i.i.i = getelementptr inbounds i8, i8* %call5.i.i.i.i45, i64 16
  %10 = bitcast i8* %_M_end_of_storage.i.i.i to %"class.nlohmann::json_v3_11_1::basic_json"**
  store %"class.nlohmann::json_v3_11_1::basic_json"* %add.ptr.i.i.i, %"class.nlohmann::json_v3_11_1::basic_json"** %10, align 8, !tbaa !176
  %11 = load %"class.nlohmann::json_v3_11_1::basic_json"*, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_start.i.i, align 8, !tbaa !60
  %12 = load %"class.nlohmann::json_v3_11_1::basic_json"*, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_finish.i.i, align 8, !tbaa !60
  %cmp.i.i.not71 = icmp eq %"class.nlohmann::json_v3_11_1::basic_json"* %11, %12
  br i1 %cmp.i.i.not71, label %_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE10json_valueC2ERKS3_ISD_SaISD_EE.exit, label %for.body.i

for.body.i:                                       ; preds = %for.body.i, %_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EEC2ERKSF_.exit
  %__cur.0.i73 = phi %"class.nlohmann::json_v3_11_1::basic_json"* [ %incdec.ptr.i, %for.body.i ], [ %cond.i.i.i.i, %_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EEC2ERKSF_.exit ]
  %__first.i.sroa.0.072 = phi %"class.nlohmann::json_v3_11_1::basic_json"* [ %incdec.ptr.i.i, %for.body.i ], [ %11, %_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EEC2ERKSF_.exit ]
  tail call void @_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEEC2ERKSD_(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %__cur.0.i73, %"class.nlohmann::json_v3_11_1::basic_json"* nonnull align 8 dereferenceable(16) %__first.i.sroa.0.072) #38
  %incdec.ptr.i.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %__first.i.sroa.0.072, i64 1
  %incdec.ptr.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %__cur.0.i73, i64 1
  %cmp.i.i.not = icmp eq %"class.nlohmann::json_v3_11_1::basic_json"* %incdec.ptr.i.i, %12
  br i1 %cmp.i.i.not, label %_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE10json_valueC2ERKS3_ISD_SaISD_EE.exit, label %for.body.i, !llvm.loop !360

_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE10json_valueC2ERKS3_ISD_SaISD_EE.exit: ; preds = %for.body.i, %_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EEC2ERKSF_.exit
  %__cur.0.i.lcssa = phi %"class.nlohmann::json_v3_11_1::basic_json"* [ %cond.i.i.i.i, %_ZNSt6vectorIN8nlohmann12json_v3_11_110basic_jsonISt3mapS_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES_IhSaIhEEEESaISD_EEC2ERKSF_.exit ], [ %incdec.ptr.i, %for.body.i ]
  store %"class.nlohmann::json_v3_11_1::basic_json"* %__cur.0.i.lcssa, %"class.nlohmann::json_v3_11_1::basic_json"** %9, align 8, !tbaa !178
  %13 = ptrtoint i8* %call5.i.i.i.i45 to i64
  br label %sw.epilog.sink.split

sw.bb10:                                          ; preds = %entry
  %m_value12 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %other, i64 0, i32 1
  %string = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value12 to %"class.std::__cxx11::basic_string"**
  %14 = load %"class.std::__cxx11::basic_string"*, %"class.std::__cxx11::basic_string"** %string, align 8, !tbaa !21
  %call5.i.i.i.i44 = tail call noalias nonnull dereferenceable(32) i8* @_Znwm(i64 32) #43
  %15 = getelementptr inbounds i8, i8* %call5.i.i.i.i44, i64 16
  %16 = bitcast i8* %call5.i.i.i.i44 to i8**
  store i8* %15, i8** %16, align 8, !tbaa !14
  %_M_p.i9.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %14, i64 0, i32 0, i32 0
  %17 = load i8*, i8** %_M_p.i9.i.i.i.i.i, align 8, !tbaa !17
  %_M_string_length.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %14, i64 0, i32 1
  %18 = load i64, i64* %_M_string_length.i.i.i.i.i.i, align 8, !tbaa !19
  %19 = bitcast i64* %__dnew.i.i.i.i.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #38
  store i64 %18, i64* %__dnew.i.i.i.i.i.i, align 8, !tbaa !20
  %cmp.i.i.i.i.i.i = icmp ugt i64 %18, 15
  br i1 %cmp.i.i.i.i.i.i, label %if.then.i.i.i.i.i.i, label %if.end.i.i.i.i.i.i

if.then.i.i.i.i.i.i:                              ; preds = %sw.bb10
  %20 = bitcast i8* %call5.i.i.i.i44 to %"class.std::__cxx11::basic_string"*
  %call2.i.i.i.i.i.i = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %20, i64* nonnull align 8 dereferenceable(8) %__dnew.i.i.i.i.i.i, i64 0) #38
  store i8* %call2.i.i.i.i.i.i, i8** %16, align 8, !tbaa !17
  %21 = load i64, i64* %__dnew.i.i.i.i.i.i, align 8, !tbaa !20
  %22 = bitcast i8* %15 to i64*
  store i64 %21, i64* %22, align 8, !tbaa !21
  br label %if.end.i.i.i.i.i.i

if.end.i.i.i.i.i.i:                               ; preds = %if.then.i.i.i.i.i.i, %sw.bb10
  %23 = phi i8* [ %call2.i.i.i.i.i.i, %if.then.i.i.i.i.i.i ], [ %15, %sw.bb10 ]
  switch i64 %18, label %if.end.i.i.i.i.i.i.i.i.i [
    i64 1, label %if.then.i.i7.i.i.i.i.i.i
    i64 0, label %_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE10json_valueC2ERKS9_.exit
  ]

if.then.i.i7.i.i.i.i.i.i:                         ; preds = %if.end.i.i.i.i.i.i
  %24 = load i8, i8* %17, align 1, !tbaa !21
  store i8 %24, i8* %23, align 1, !tbaa !21
  br label %_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE10json_valueC2ERKS9_.exit

if.end.i.i.i.i.i.i.i.i.i:                         ; preds = %if.end.i.i.i.i.i.i
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %23, i8* align 1 %17, i64 %18, i1 false) #38
  br label %_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE10json_valueC2ERKS9_.exit

_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE10json_valueC2ERKS9_.exit: ; preds = %if.end.i.i.i.i.i.i.i.i.i, %if.then.i.i7.i.i.i.i.i.i, %if.end.i.i.i.i.i.i
  %25 = load i64, i64* %__dnew.i.i.i.i.i.i, align 8, !tbaa !20
  %_M_string_length.i.i.i.i.i.i.i.i = getelementptr inbounds i8, i8* %call5.i.i.i.i44, i64 8
  %26 = bitcast i8* %_M_string_length.i.i.i.i.i.i.i.i to i64*
  store i64 %25, i64* %26, align 8, !tbaa !19
  %27 = load i8*, i8** %16, align 8, !tbaa !17
  %arrayidx.i.i.i.i.i.i.i = getelementptr inbounds i8, i8* %27, i64 %25
  store i8 0, i8* %arrayidx.i.i.i.i.i.i.i, align 1, !tbaa !21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #38
  %28 = ptrtoint i8* %call5.i.i.i.i44 to i64
  br label %sw.epilog.sink.split

sw.bb14:                                          ; preds = %entry
  %m_value16 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %other, i64 0, i32 1
  %boolean = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value16 to i8*
  %29 = load i8, i8* %boolean, align 8, !tbaa !21, !range !90
  %ref.tmp15.sroa.0.0.insert.ext = zext i8 %29 to i64
  br label %sw.epilog.sink.split

sw.bb18:                                          ; preds = %entry
  %m_value20 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %other, i64 0, i32 1
  %number_integer = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value20 to i64*
  %30 = load i64, i64* %number_integer, align 8, !tbaa !21
  br label %sw.epilog.sink.split

sw.bb22:                                          ; preds = %entry
  %m_value24 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %other, i64 0, i32 1
  %number_unsigned = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value24 to i64*
  %31 = load i64, i64* %number_unsigned, align 8, !tbaa !21
  br label %sw.epilog.sink.split

sw.bb26:                                          ; preds = %entry
  %m_value28 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %other, i64 0, i32 1
  %32 = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value28 to i64*
  %33 = load i64, i64* %32, align 8, !tbaa !21
  br label %sw.epilog.sink.split

sw.bb30:                                          ; preds = %entry
  %m_value32 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %other, i64 0, i32 1
  %binary = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value32 to %"class.nlohmann::json_v3_11_1::byte_container_with_subtype"**
  %34 = load %"class.nlohmann::json_v3_11_1::byte_container_with_subtype"*, %"class.nlohmann::json_v3_11_1::byte_container_with_subtype"** %binary, align 8, !tbaa !21
  %call5.i.i.i.i = tail call noalias nonnull dereferenceable(40) i8* @_Znwm(i64 40) #43
  %_M_finish.i.i.i.i.i.i.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::byte_container_with_subtype", %"class.nlohmann::json_v3_11_1::byte_container_with_subtype"* %34, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %35 = load i8*, i8** %_M_finish.i.i.i.i.i.i.i, align 8, !tbaa !361
  %_M_start.i.i.i.i.i.i.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::byte_container_with_subtype", %"class.nlohmann::json_v3_11_1::byte_container_with_subtype"* %34, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %36 = load i8*, i8** %_M_start.i.i.i.i.i.i.i, align 8, !tbaa !305
  %sub.ptr.lhs.cast.i.i.i.i.i.i.i = ptrtoint i8* %35 to i64
  %sub.ptr.rhs.cast.i.i.i.i.i.i.i = ptrtoint i8* %36 to i64
  %sub.ptr.sub.i.i.i.i.i.i.i = sub i64 %sub.ptr.lhs.cast.i.i.i.i.i.i.i, %sub.ptr.rhs.cast.i.i.i.i.i.i.i
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %call5.i.i.i.i, i8 0, i64 24, i1 false) #38
  %cmp.not.i.i.i.i.i.i.i.i.i = icmp eq i64 %sub.ptr.sub.i.i.i.i.i.i.i, 0
  br i1 %cmp.not.i.i.i.i.i.i.i.i.i, label %_ZNSt12_Vector_baseIhSaIhEEC2EmRKS0_.exit.i.i.i.i.thread.i.i, label %cond.true.i.i.i.i.i.i.i.i.i

_ZNSt12_Vector_baseIhSaIhEEC2EmRKS0_.exit.i.i.i.i.thread.i.i: ; preds = %sw.bb30
  %_M_start.i.i.i.i.i.i14.i.i = bitcast i8* %call5.i.i.i.i to i8**
  store i8* null, i8** %_M_start.i.i.i.i.i.i14.i.i, align 8, !tbaa !305
  %_M_end_of_storage.i.i.i.i.i.i17.i.i = getelementptr inbounds i8, i8* %call5.i.i.i.i, i64 16
  %37 = bitcast i8* %_M_end_of_storage.i.i.i.i.i.i17.i.i to i8**
  store i8* null, i8** %37, align 8, !tbaa !362
  br label %_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE10json_valueC2ERKNS0_27byte_container_with_subtypeISC_EE.exit

cond.true.i.i.i.i.i.i.i.i.i:                      ; preds = %sw.bb30
  %cmp.i.i.i.i.i.i.i.i.i.i.i = icmp slt i64 %sub.ptr.sub.i.i.i.i.i.i.i, 0
  br i1 %cmp.i.i.i.i.i.i.i.i.i.i.i, label %if.end.i.i.i.i.i.i.i.i.i.i.i, label %if.then.i.i.i.i.i.i.i.i.i.i.i.i.i.i, !prof !211

if.end.i.i.i.i.i.i.i.i.i.i.i:                     ; preds = %cond.true.i.i.i.i.i.i.i.i.i
  tail call void @_ZSt17__throw_bad_allocv() #40
  unreachable

if.then.i.i.i.i.i.i.i.i.i.i.i.i.i.i:              ; preds = %cond.true.i.i.i.i.i.i.i.i.i
  %call5.i.i.i.i.i.i.i.i.i.i.i = tail call noalias nonnull i8* @_Znwm(i64 %sub.ptr.sub.i.i.i.i.i.i.i) #43
  %_M_start.i.i.i.i.i.i.i.i = bitcast i8* %call5.i.i.i.i to i8**
  store i8* %call5.i.i.i.i.i.i.i.i.i.i.i, i8** %_M_start.i.i.i.i.i.i.i.i, align 8, !tbaa !305
  %add.ptr.i.i.i.i.i.i.i.i = getelementptr inbounds i8, i8* %call5.i.i.i.i.i.i.i.i.i.i.i, i64 %sub.ptr.sub.i.i.i.i.i.i.i
  %_M_end_of_storage.i.i.i.i.i.i.i.i = getelementptr inbounds i8, i8* %call5.i.i.i.i, i64 16
  %38 = bitcast i8* %_M_end_of_storage.i.i.i.i.i.i.i.i to i8**
  store i8* %add.ptr.i.i.i.i.i.i.i.i, i8** %38, align 8, !tbaa !362
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 1 %call5.i.i.i.i.i.i.i.i.i.i.i, i8* align 1 %36, i64 %sub.ptr.sub.i.i.i.i.i.i.i, i1 false) #38
  br label %_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE10json_valueC2ERKNS0_27byte_container_with_subtypeISC_EE.exit

_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE10json_valueC2ERKNS0_27byte_container_with_subtypeISC_EE.exit: ; preds = %if.then.i.i.i.i.i.i.i.i.i.i.i.i.i.i, %_ZNSt12_Vector_baseIhSaIhEEC2EmRKS0_.exit.i.i.i.i.thread.i.i
  %add.ptr.i.i.i.i.i.i18.i.i = phi i8* [ null, %_ZNSt12_Vector_baseIhSaIhEEC2EmRKS0_.exit.i.i.i.i.thread.i.i ], [ %add.ptr.i.i.i.i.i.i.i.i, %if.then.i.i.i.i.i.i.i.i.i.i.i.i.i.i ]
  %.in.i.i = getelementptr inbounds i8, i8* %call5.i.i.i.i, i64 8
  %39 = bitcast i8* %.in.i.i to i8**
  store i8* %add.ptr.i.i.i.i.i.i18.i.i, i8** %39, align 8, !tbaa !361
  %m_subtype.i.i.i.i.i = getelementptr inbounds i8, i8* %call5.i.i.i.i, i64 24
  %m_subtype2.i.i.i.i.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::byte_container_with_subtype", %"class.nlohmann::json_v3_11_1::byte_container_with_subtype"* %34, i64 0, i32 1
  %40 = bitcast i64* %m_subtype2.i.i.i.i.i to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(9) %m_subtype.i.i.i.i.i, i8* nonnull align 8 dereferenceable(9) %40, i64 9, i1 false) #38
  %41 = ptrtoint i8* %call5.i.i.i.i to i64
  br label %sw.epilog.sink.split

sw.epilog.sink.split:                             ; preds = %_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE10json_valueC2ERKNS0_27byte_container_with_subtypeISC_EE.exit, %sw.bb26, %sw.bb22, %sw.bb18, %sw.bb14, %_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE10json_valueC2ERKS9_.exit, %_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE10json_valueC2ERKS3_ISD_SaISD_EE.exit, %sw.bb
  %.sink = phi i64 [ %41, %_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE10json_valueC2ERKNS0_27byte_container_with_subtypeISC_EE.exit ], [ %33, %sw.bb26 ], [ %31, %sw.bb22 ], [ %30, %sw.bb18 ], [ %ref.tmp15.sroa.0.0.insert.ext, %sw.bb14 ], [ %28, %_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE10json_valueC2ERKS9_.exit ], [ %13, %_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE10json_valueC2ERKS3_ISD_SaISD_EE.exit ], [ %4, %sw.bb ]
  store i64 %.sink, i64* %1, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.epilog.sink.split, %entry
  call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %this, i1 zeroext true) #38
  ret void
}

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local nonnull %"class.std::map"* @_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE6createIS2_IS9_SD_St4lessIvESaISt4pairIKS9_SD_EEEJRKSL_EEEPT_DpOT0_(%"class.std::map"* nonnull align 8 dereferenceable(48) %args) local_unnamed_addr #0 comdat align 2 {
entry:
  %__an.i.i.i.i.i = alloca %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, nlohmann::json_v3_11_1::basic_json<>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, nlohmann::json_v3_11_1::basic_json<>>>, std::less<>>::_Alloc_node", align 8
  %call5.i.i = tail call noalias nonnull dereferenceable(48) i8* @_Znwm(i64 48) #43
  %0 = getelementptr inbounds i8, i8* %call5.i.i, i64 8
  %_M_color.i.i.i.i.i.i = bitcast i8* %0 to i32*
  store i32 0, i32* %_M_color.i.i.i.i.i.i, align 8, !tbaa !363
  %_M_parent.i.i.i.i.i.i.i = getelementptr inbounds i8, i8* %call5.i.i, i64 16
  %1 = bitcast i8* %_M_parent.i.i.i.i.i.i.i to %"struct.std::_Rb_tree_node_base"**
  store %"struct.std::_Rb_tree_node_base"* null, %"struct.std::_Rb_tree_node_base"** %1, align 8, !tbaa !302
  %_M_left.i.i.i.i.i.i.i = getelementptr inbounds i8, i8* %call5.i.i, i64 24
  %2 = bitcast i8* %_M_left.i.i.i.i.i.i.i to i8**
  store i8* %0, i8** %2, align 8, !tbaa !166
  %_M_right.i.i.i.i.i.i.i = getelementptr inbounds i8, i8* %call5.i.i, i64 32
  %3 = bitcast i8* %_M_right.i.i.i.i.i.i.i to i8**
  store i8* %0, i8** %3, align 8, !tbaa !170
  %_M_node_count.i.i.i.i.i.i.i = getelementptr inbounds i8, i8* %call5.i.i, i64 40
  %4 = bitcast i8* %_M_node_count.i.i.i.i.i.i.i to i64*
  store i64 0, i64* %4, align 8, !tbaa !171
  %5 = getelementptr inbounds %"class.std::map", %"class.std::map"* %args, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %_M_parent.i7.i.i.i.i = getelementptr inbounds i8, i8* %5, i64 16
  %6 = bitcast i8* %_M_parent.i7.i.i.i.i to %"struct.std::_Rb_tree_node_base"**
  %7 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %6, align 8, !tbaa !302
  %cmp.not.i.i.i.i = icmp eq %"struct.std::_Rb_tree_node_base"* %7, null
  br i1 %cmp.not.i.i.i.i, label %_ZNSt10unique_ptrISt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN8nlohmann12json_v3_11_110basic_jsonIS0_St6vectorS6_blmdSaNS8_14adl_serializerESA_IhSaIhEEEESt4lessIvESaISt4pairIKS6_SE_EEEZNSE_6createISL_JRKSL_EEEPT_DpOT0_EUlPSL_E_ED2Ev.exit, label %if.then.i.i.i.i

if.then.i.i.i.i:                                  ; preds = %entry
  %8 = bitcast %"struct.std::_Rb_tree_node_base"* %7 to %"struct.std::_Rb_tree_node"*
  %_M_t.i.i.i = bitcast i8* %call5.i.i to %"class.std::_Rb_tree"*
  %9 = bitcast %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, nlohmann::json_v3_11_1::basic_json<>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, nlohmann::json_v3_11_1::basic_json<>>>, std::less<>>::_Alloc_node"* %__an.i.i.i.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #38
  %10 = bitcast %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, nlohmann::json_v3_11_1::basic_json<>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, nlohmann::json_v3_11_1::basic_json<>>>, std::less<>>::_Alloc_node"* %__an.i.i.i.i.i to i8**
  store i8* %call5.i.i, i8** %10, align 8, !tbaa !60
  %_M_header.i.i.i.i.i.i.i = bitcast i8* %0 to %"struct.std::_Rb_tree_node_base"*
  %call3.i.i.i.i.i.i = call %"struct.std::_Rb_tree_node"* @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS5_blmdSaNS9_14adl_serializerESC_IhSaIhEEEEESt10_Select1stISH_ESt4lessIvESaISH_EE7_M_copyILb0ENSN_11_Alloc_nodeEEEPSt13_Rb_tree_nodeISH_ESS_PSt18_Rb_tree_node_baseRT0_(%"class.std::_Rb_tree"* nonnull dereferenceable(48) %_M_t.i.i.i, %"struct.std::_Rb_tree_node"* nonnull %8, %"struct.std::_Rb_tree_node_base"* nonnull %_M_header.i.i.i.i.i.i.i, %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, nlohmann::json_v3_11_1::basic_json<>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, nlohmann::json_v3_11_1::basic_json<>>>, std::less<>>::_Alloc_node"* nonnull align 8 dereferenceable(8) %__an.i.i.i.i.i) #38
  %11 = getelementptr %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %call3.i.i.i.i.i.i, i64 0, i32 0
  br label %while.cond.i.i.i.i.i.i.i.i

while.cond.i.i.i.i.i.i.i.i:                       ; preds = %while.cond.i.i.i.i.i.i.i.i, %if.then.i.i.i.i
  %__x.addr.0.i.i.i.i.i.i.i.i = phi %"struct.std::_Rb_tree_node_base"* [ %11, %if.then.i.i.i.i ], [ %12, %while.cond.i.i.i.i.i.i.i.i ]
  %_M_left.i.i.i.i.i.i.i.i = getelementptr inbounds %"struct.std::_Rb_tree_node_base", %"struct.std::_Rb_tree_node_base"* %__x.addr.0.i.i.i.i.i.i.i.i, i64 0, i32 2
  %12 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %_M_left.i.i.i.i.i.i.i.i, align 8, !tbaa !324
  %cmp.not.i.i.i.i.i.i.i.i = icmp eq %"struct.std::_Rb_tree_node_base"* %12, null
  br i1 %cmp.not.i.i.i.i.i.i.i.i, label %_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS5_blmdSaNS9_14adl_serializerESC_IhSaIhEEEEESt10_Select1stISH_ESt4lessIvESaISH_EE10_S_minimumEPSt18_Rb_tree_node_base.exit.i.i.i.i.i.i, label %while.cond.i.i.i.i.i.i.i.i, !llvm.loop !364

_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS5_blmdSaNS9_14adl_serializerESC_IhSaIhEEEEESt10_Select1stISH_ESt4lessIvESaISH_EE10_S_minimumEPSt18_Rb_tree_node_base.exit.i.i.i.i.i.i: ; preds = %while.cond.i.i.i.i.i.i.i.i
  %__x.addr.0.i.i.i.i.i.i.i.i.lcssa = phi %"struct.std::_Rb_tree_node_base"* [ %__x.addr.0.i.i.i.i.i.i.i.i, %while.cond.i.i.i.i.i.i.i.i ]
  %13 = bitcast i8* %_M_left.i.i.i.i.i.i.i to %"struct.std::_Rb_tree_node_base"**
  store %"struct.std::_Rb_tree_node_base"* %__x.addr.0.i.i.i.i.i.i.i.i.lcssa, %"struct.std::_Rb_tree_node_base"** %13, align 8, !tbaa !60
  br label %while.cond.i.i17.i.i.i.i.i.i

while.cond.i.i17.i.i.i.i.i.i:                     ; preds = %while.cond.i.i17.i.i.i.i.i.i, %_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS5_blmdSaNS9_14adl_serializerESC_IhSaIhEEEEESt10_Select1stISH_ESt4lessIvESaISH_EE10_S_minimumEPSt18_Rb_tree_node_base.exit.i.i.i.i.i.i
  %__x.addr.0.i.i15.i.i.i.i.i.i = phi %"struct.std::_Rb_tree_node_base"* [ %11, %_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS5_blmdSaNS9_14adl_serializerESC_IhSaIhEEEEESt10_Select1stISH_ESt4lessIvESaISH_EE10_S_minimumEPSt18_Rb_tree_node_base.exit.i.i.i.i.i.i ], [ %14, %while.cond.i.i17.i.i.i.i.i.i ]
  %_M_right.i.i.i.i.i.i.i.i = getelementptr inbounds %"struct.std::_Rb_tree_node_base", %"struct.std::_Rb_tree_node_base"* %__x.addr.0.i.i15.i.i.i.i.i.i, i64 0, i32 3
  %14 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %_M_right.i.i.i.i.i.i.i.i, align 8, !tbaa !323
  %cmp.not.i.i16.i.i.i.i.i.i = icmp eq %"struct.std::_Rb_tree_node_base"* %14, null
  br i1 %cmp.not.i.i16.i.i.i.i.i.i, label %_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS5_blmdSaNS9_14adl_serializerESC_IhSaIhEEEEESt10_Select1stISH_ESt4lessIvESaISH_EE7_M_copyERKSN_.exit.i.i.i.i, label %while.cond.i.i17.i.i.i.i.i.i, !llvm.loop !365

_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS5_blmdSaNS9_14adl_serializerESC_IhSaIhEEEEESt10_Select1stISH_ESt4lessIvESaISH_EE7_M_copyERKSN_.exit.i.i.i.i: ; preds = %while.cond.i.i17.i.i.i.i.i.i
  %__x.addr.0.i.i15.i.i.i.i.i.i.lcssa = phi %"struct.std::_Rb_tree_node_base"* [ %__x.addr.0.i.i15.i.i.i.i.i.i, %while.cond.i.i17.i.i.i.i.i.i ]
  %15 = bitcast i8* %_M_right.i.i.i.i.i.i.i to %"struct.std::_Rb_tree_node_base"**
  store %"struct.std::_Rb_tree_node_base"* %__x.addr.0.i.i15.i.i.i.i.i.i.lcssa, %"struct.std::_Rb_tree_node_base"** %15, align 8, !tbaa !60
  %_M_node_count.i.i.i.i.i.i = getelementptr inbounds i8, i8* %5, i64 40
  %16 = bitcast i8* %_M_node_count.i.i.i.i.i.i to i64*
  %17 = load i64, i64* %16, align 8, !tbaa !171
  store i64 %17, i64* %4, align 8, !tbaa !171
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #38
  store %"struct.std::_Rb_tree_node_base"* %11, %"struct.std::_Rb_tree_node_base"** %1, align 8, !tbaa !60
  br label %_ZNSt10unique_ptrISt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN8nlohmann12json_v3_11_110basic_jsonIS0_St6vectorS6_blmdSaNS8_14adl_serializerESA_IhSaIhEEEESt4lessIvESaISt4pairIKS6_SE_EEEZNSE_6createISL_JRKSL_EEEPT_DpOT0_EUlPSL_E_ED2Ev.exit

_ZNSt10unique_ptrISt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN8nlohmann12json_v3_11_110basic_jsonIS0_St6vectorS6_blmdSaNS8_14adl_serializerESA_IhSaIhEEEESt4lessIvESaISt4pairIKS6_SE_EEEZNSE_6createISL_JRKSL_EEEPT_DpOT0_EUlPSL_E_ED2Ev.exit: ; preds = %_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS5_blmdSaNS9_14adl_serializerESC_IhSaIhEEEEESt10_Select1stISH_ESt4lessIvESaISH_EE7_M_copyERKSN_.exit.i.i.i.i, %entry
  %18 = bitcast i8* %call5.i.i to %"class.std::map"*
  ret %"class.std::map"* %18
}

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local %"struct.std::_Rb_tree_node"* @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS5_blmdSaNS9_14adl_serializerESC_IhSaIhEEEEESt10_Select1stISH_ESt4lessIvESaISH_EE7_M_copyILb0ENSN_11_Alloc_nodeEEEPSt13_Rb_tree_nodeISH_ESS_PSt18_Rb_tree_node_baseRT0_(%"class.std::_Rb_tree"* nonnull dereferenceable(48) %this, %"struct.std::_Rb_tree_node"* %__x, %"struct.std::_Rb_tree_node_base"* %__p, %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, nlohmann::json_v3_11_1::basic_json<>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, nlohmann::json_v3_11_1::basic_json<>>>, std::less<>>::_Alloc_node"* nonnull align 8 dereferenceable(8) %__node_gen) local_unnamed_addr #0 comdat align 2 {
entry:
  %__dnew.i.i.i.i.i52 = alloca i64, align 8
  %__dnew.i.i.i.i.i = alloca i64, align 8
  %_M_storage.i.i43 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %__x, i64 0, i32 1
  %call5.i.i.i.i.i50 = tail call noalias nonnull dereferenceable(80) i8* @_Znwm(i64 80) #43
  %_M_storage.i.i53 = getelementptr inbounds i8, i8* %call5.i.i.i.i.i50, i64 32
  %0 = getelementptr inbounds i8, i8* %call5.i.i.i.i.i50, i64 48
  %1 = bitcast i8* %_M_storage.i.i53 to i8**
  store i8* %0, i8** %1, align 8, !tbaa !14
  %_M_p.i9.i.i.i.i56 = bitcast %"struct.__gnu_cxx::__aligned_membuf"* %_M_storage.i.i43 to i8**
  %2 = load i8*, i8** %_M_p.i9.i.i.i.i56, align 8, !tbaa !17
  %_M_string_length.i.i.i.i.i57 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %__x, i64 0, i32 1, i32 0, i64 8
  %3 = bitcast i8* %_M_string_length.i.i.i.i.i57 to i64*
  %4 = load i64, i64* %3, align 8, !tbaa !19
  %5 = bitcast i64* %__dnew.i.i.i.i.i52 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #38
  store i64 %4, i64* %__dnew.i.i.i.i.i52, align 8, !tbaa !20
  %cmp.i.i.i.i.i58 = icmp ugt i64 %4, 15
  br i1 %cmp.i.i.i.i.i58, label %if.then.i.i.i.i.i63, label %if.end.i.i.i.i.i64

if.then.i.i.i.i.i63:                              ; preds = %entry
  %first.i.i.i54 = bitcast i8* %_M_storage.i.i53 to %"class.std::__cxx11::basic_string"*
  %call2.i.i.i.i.i60 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %first.i.i.i54, i64* nonnull align 8 dereferenceable(8) %__dnew.i.i.i.i.i52, i64 0) #38
  store i8* %call2.i.i.i.i.i60, i8** %1, align 8, !tbaa !17
  %6 = load i64, i64* %__dnew.i.i.i.i.i52, align 8, !tbaa !20
  %7 = bitcast i8* %0 to i64*
  store i64 %6, i64* %7, align 8, !tbaa !21
  br label %if.end.i.i.i.i.i64

if.end.i.i.i.i.i64:                               ; preds = %if.then.i.i.i.i.i63, %entry
  %8 = phi i8* [ %call2.i.i.i.i.i60, %if.then.i.i.i.i.i63 ], [ %0, %entry ]
  switch i64 %4, label %if.end.i.i.i.i.i.i.i.i66 [
    i64 1, label %if.then.i.i7.i.i.i.i.i65
    i64 0, label %_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS5_blmdSaNS9_14adl_serializerESC_IhSaIhEEEEESt10_Select1stISH_ESt4lessIvESaISH_EE17_M_construct_nodeIJRKSH_EEEvPSt13_Rb_tree_nodeISH_EDpOT_.exit72
  ]

if.then.i.i7.i.i.i.i.i65:                         ; preds = %if.end.i.i.i.i.i64
  %9 = load i8, i8* %2, align 1, !tbaa !21
  store i8 %9, i8* %8, align 1, !tbaa !21
  br label %_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS5_blmdSaNS9_14adl_serializerESC_IhSaIhEEEEESt10_Select1stISH_ESt4lessIvESaISH_EE17_M_construct_nodeIJRKSH_EEEvPSt13_Rb_tree_nodeISH_EDpOT_.exit72

if.end.i.i.i.i.i.i.i.i66:                         ; preds = %if.end.i.i.i.i.i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %8, i8* align 1 %2, i64 %4, i1 false) #38
  br label %_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS5_blmdSaNS9_14adl_serializerESC_IhSaIhEEEEESt10_Select1stISH_ESt4lessIvESaISH_EE17_M_construct_nodeIJRKSH_EEEvPSt13_Rb_tree_nodeISH_EDpOT_.exit72

_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS5_blmdSaNS9_14adl_serializerESC_IhSaIhEEEEESt10_Select1stISH_ESt4lessIvESaISH_EE17_M_construct_nodeIJRKSH_EEEvPSt13_Rb_tree_nodeISH_EDpOT_.exit72: ; preds = %if.end.i.i.i.i.i.i.i.i66, %if.then.i.i7.i.i.i.i.i65, %if.end.i.i.i.i.i64
  %10 = load i64, i64* %__dnew.i.i.i.i.i52, align 8, !tbaa !20
  %_M_string_length.i.i.i.i.i.i.i68 = getelementptr inbounds i8, i8* %call5.i.i.i.i.i50, i64 40
  %11 = bitcast i8* %_M_string_length.i.i.i.i.i.i.i68 to i64*
  store i64 %10, i64* %11, align 8, !tbaa !19
  %12 = load i8*, i8** %1, align 8, !tbaa !17
  %arrayidx.i.i.i.i.i.i69 = getelementptr inbounds i8, i8* %12, i64 %10
  store i8 0, i8* %arrayidx.i.i.i.i.i.i69, align 1, !tbaa !21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #38
  %second.i.i.i70 = getelementptr inbounds i8, i8* %call5.i.i.i.i.i50, i64 64
  %13 = bitcast i8* %second.i.i.i70 to %"class.nlohmann::json_v3_11_1::basic_json"*
  %second3.i.i.i71 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %__x, i64 0, i32 1, i32 0, i64 32
  %14 = bitcast i8* %second3.i.i.i71 to %"class.nlohmann::json_v3_11_1::basic_json"*
  call void @_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEEC2ERKSD_(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %13, %"class.nlohmann::json_v3_11_1::basic_json"* nonnull align 8 dereferenceable(16) %14) #38
  %_M_color.i45 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %__x, i64 0, i32 0, i32 0
  %15 = load i32, i32* %_M_color.i45, align 8, !tbaa !366
  %_M_color4.i46 = bitcast i8* %call5.i.i.i.i.i50 to i32*
  store i32 %15, i32* %_M_color4.i46, align 8, !tbaa !366
  %_M_left.i47 = getelementptr inbounds i8, i8* %call5.i.i.i.i.i50, i64 16
  %16 = bitcast i8* %call5.i.i.i.i.i50 to %"struct.std::_Rb_tree_node_base"*
  %_M_parent = getelementptr inbounds i8, i8* %call5.i.i.i.i.i50, i64 8
  %17 = bitcast i8* %_M_parent to %"struct.std::_Rb_tree_node_base"**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %_M_left.i47, i8 0, i64 16, i1 false)
  store %"struct.std::_Rb_tree_node_base"* %__p, %"struct.std::_Rb_tree_node_base"** %17, align 8, !tbaa !367
  %_M_right = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %__x, i64 0, i32 0, i32 3
  %18 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %_M_right, align 8, !tbaa !323
  %tobool.not = icmp eq %"struct.std::_Rb_tree_node_base"* %18, null
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS5_blmdSaNS9_14adl_serializerESC_IhSaIhEEEEESt10_Select1stISH_ESt4lessIvESaISH_EE17_M_construct_nodeIJRKSH_EEEvPSt13_Rb_tree_nodeISH_EDpOT_.exit72
  %19 = bitcast %"struct.std::_Rb_tree_node_base"* %18 to %"struct.std::_Rb_tree_node"*
  %_M_right.i48 = getelementptr inbounds i8, i8* %call5.i.i.i.i.i50, i64 24
  %20 = bitcast i8* %_M_right.i48 to %"struct.std::_Rb_tree_node_base"**
  %call3 = call %"struct.std::_Rb_tree_node"* @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS5_blmdSaNS9_14adl_serializerESC_IhSaIhEEEEESt10_Select1stISH_ESt4lessIvESaISH_EE7_M_copyILb0ENSN_11_Alloc_nodeEEEPSt13_Rb_tree_nodeISH_ESS_PSt18_Rb_tree_node_baseRT0_(%"class.std::_Rb_tree"* nonnull dereferenceable(48) %this, %"struct.std::_Rb_tree_node"* nonnull %19, %"struct.std::_Rb_tree_node_base"* nonnull %16, %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, nlohmann::json_v3_11_1::basic_json<>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, nlohmann::json_v3_11_1::basic_json<>>>, std::less<>>::_Alloc_node"* nonnull align 8 dereferenceable(8) %__node_gen)
  %21 = getelementptr %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %call3, i64 0, i32 0
  store %"struct.std::_Rb_tree_node_base"* %21, %"struct.std::_Rb_tree_node_base"** %20, align 8, !tbaa !323
  br label %if.end

if.end:                                           ; preds = %if.then, %_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS5_blmdSaNS9_14adl_serializerESC_IhSaIhEEEEESt10_Select1stISH_ESt4lessIvESaISH_EE17_M_construct_nodeIJRKSH_EEEvPSt13_Rb_tree_nodeISH_EDpOT_.exit72
  %__x.addr.0.in.in73 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %__x, i64 0, i32 0, i32 2
  %__x.addr.0.in74 = bitcast %"struct.std::_Rb_tree_node_base"** %__x.addr.0.in.in73 to %"struct.std::_Rb_tree_node"**
  %__x.addr.075 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %__x.addr.0.in74, align 8, !tbaa !324
  %cmp.not76 = icmp eq %"struct.std::_Rb_tree_node"* %__x.addr.075, null
  br i1 %cmp.not76, label %while.end, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %if.end
  %22 = bitcast i64* %__dnew.i.i.i.i.i to i8*
  br label %while.body

while.body:                                       ; preds = %if.end14, %while.body.lr.ph
  %__x.addr.078 = phi %"struct.std::_Rb_tree_node"* [ %__x.addr.075, %while.body.lr.ph ], [ %__x.addr.0, %if.end14 ]
  %__p.addr.077 = phi %"struct.std::_Rb_tree_node_base"* [ %16, %while.body.lr.ph ], [ %38, %if.end14 ]
  %_M_storage.i.i = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %__x.addr.078, i64 0, i32 1
  %call5.i.i.i.i.i = call noalias nonnull dereferenceable(80) i8* @_Znwm(i64 80) #43
  %_M_storage.i.i51 = getelementptr inbounds i8, i8* %call5.i.i.i.i.i, i64 32
  %23 = getelementptr inbounds i8, i8* %call5.i.i.i.i.i, i64 48
  %24 = bitcast i8* %_M_storage.i.i51 to i8**
  store i8* %23, i8** %24, align 8, !tbaa !14
  %_M_p.i9.i.i.i.i = bitcast %"struct.__gnu_cxx::__aligned_membuf"* %_M_storage.i.i to i8**
  %25 = load i8*, i8** %_M_p.i9.i.i.i.i, align 8, !tbaa !17
  %_M_string_length.i.i.i.i.i = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %__x.addr.078, i64 0, i32 1, i32 0, i64 8
  %26 = bitcast i8* %_M_string_length.i.i.i.i.i to i64*
  %27 = load i64, i64* %26, align 8, !tbaa !19
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22) #38
  store i64 %27, i64* %__dnew.i.i.i.i.i, align 8, !tbaa !20
  %cmp.i.i.i.i.i = icmp ugt i64 %27, 15
  br i1 %cmp.i.i.i.i.i, label %if.then.i.i.i.i.i, label %if.end.i.i.i.i.i

if.then.i.i.i.i.i:                                ; preds = %while.body
  %first.i.i.i = bitcast i8* %_M_storage.i.i51 to %"class.std::__cxx11::basic_string"*
  %call2.i.i.i.i.i = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %first.i.i.i, i64* nonnull align 8 dereferenceable(8) %__dnew.i.i.i.i.i, i64 0) #38
  store i8* %call2.i.i.i.i.i, i8** %24, align 8, !tbaa !17
  %28 = load i64, i64* %__dnew.i.i.i.i.i, align 8, !tbaa !20
  %29 = bitcast i8* %23 to i64*
  store i64 %28, i64* %29, align 8, !tbaa !21
  br label %if.end.i.i.i.i.i

if.end.i.i.i.i.i:                                 ; preds = %if.then.i.i.i.i.i, %while.body
  %30 = phi i8* [ %call2.i.i.i.i.i, %if.then.i.i.i.i.i ], [ %23, %while.body ]
  switch i64 %27, label %if.end.i.i.i.i.i.i.i.i [
    i64 1, label %if.then.i.i7.i.i.i.i.i
    i64 0, label %_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS5_blmdSaNS9_14adl_serializerESC_IhSaIhEEEEESt10_Select1stISH_ESt4lessIvESaISH_EE17_M_construct_nodeIJRKSH_EEEvPSt13_Rb_tree_nodeISH_EDpOT_.exit
  ]

if.then.i.i7.i.i.i.i.i:                           ; preds = %if.end.i.i.i.i.i
  %31 = load i8, i8* %25, align 1, !tbaa !21
  store i8 %31, i8* %30, align 1, !tbaa !21
  br label %_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS5_blmdSaNS9_14adl_serializerESC_IhSaIhEEEEESt10_Select1stISH_ESt4lessIvESaISH_EE17_M_construct_nodeIJRKSH_EEEvPSt13_Rb_tree_nodeISH_EDpOT_.exit

if.end.i.i.i.i.i.i.i.i:                           ; preds = %if.end.i.i.i.i.i
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %30, i8* align 1 %25, i64 %27, i1 false) #38
  br label %_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS5_blmdSaNS9_14adl_serializerESC_IhSaIhEEEEESt10_Select1stISH_ESt4lessIvESaISH_EE17_M_construct_nodeIJRKSH_EEEvPSt13_Rb_tree_nodeISH_EDpOT_.exit

_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS5_blmdSaNS9_14adl_serializerESC_IhSaIhEEEEESt10_Select1stISH_ESt4lessIvESaISH_EE17_M_construct_nodeIJRKSH_EEEvPSt13_Rb_tree_nodeISH_EDpOT_.exit: ; preds = %if.end.i.i.i.i.i.i.i.i, %if.then.i.i7.i.i.i.i.i, %if.end.i.i.i.i.i
  %32 = load i64, i64* %__dnew.i.i.i.i.i, align 8, !tbaa !20
  %_M_string_length.i.i.i.i.i.i.i = getelementptr inbounds i8, i8* %call5.i.i.i.i.i, i64 40
  %33 = bitcast i8* %_M_string_length.i.i.i.i.i.i.i to i64*
  store i64 %32, i64* %33, align 8, !tbaa !19
  %34 = load i8*, i8** %24, align 8, !tbaa !17
  %arrayidx.i.i.i.i.i.i = getelementptr inbounds i8, i8* %34, i64 %32
  store i8 0, i8* %arrayidx.i.i.i.i.i.i, align 1, !tbaa !21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22) #38
  %second.i.i.i = getelementptr inbounds i8, i8* %call5.i.i.i.i.i, i64 64
  %35 = bitcast i8* %second.i.i.i to %"class.nlohmann::json_v3_11_1::basic_json"*
  %second3.i.i.i = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %__x.addr.078, i64 0, i32 1, i32 0, i64 32
  %36 = bitcast i8* %second3.i.i.i to %"class.nlohmann::json_v3_11_1::basic_json"*
  call void @_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEEC2ERKSD_(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %35, %"class.nlohmann::json_v3_11_1::basic_json"* nonnull align 8 dereferenceable(16) %36) #38
  %_M_color.i = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %__x.addr.078, i64 0, i32 0, i32 0
  %37 = load i32, i32* %_M_color.i, align 8, !tbaa !366
  %_M_color4.i = bitcast i8* %call5.i.i.i.i.i to i32*
  store i32 %37, i32* %_M_color4.i, align 8, !tbaa !366
  %_M_left.i41 = getelementptr inbounds i8, i8* %call5.i.i.i.i.i, i64 16
  %38 = bitcast i8* %call5.i.i.i.i.i to %"struct.std::_Rb_tree_node_base"*
  %_M_left = getelementptr inbounds %"struct.std::_Rb_tree_node_base", %"struct.std::_Rb_tree_node_base"* %__p.addr.077, i64 0, i32 2
  %39 = bitcast %"struct.std::_Rb_tree_node_base"** %_M_left to i8**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %_M_left.i41, i8 0, i64 16, i1 false)
  store i8* %call5.i.i.i.i.i, i8** %39, align 8, !tbaa !324
  %_M_parent7 = getelementptr inbounds i8, i8* %call5.i.i.i.i.i, i64 8
  %40 = bitcast i8* %_M_parent7 to %"struct.std::_Rb_tree_node_base"**
  store %"struct.std::_Rb_tree_node_base"* %__p.addr.077, %"struct.std::_Rb_tree_node_base"** %40, align 8, !tbaa !367
  %_M_right8 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %__x.addr.078, i64 0, i32 0, i32 3
  %41 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %_M_right8, align 8, !tbaa !323
  %tobool9.not = icmp eq %"struct.std::_Rb_tree_node_base"* %41, null
  br i1 %tobool9.not, label %if.end14, label %if.then10

if.then10:                                        ; preds = %_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS5_blmdSaNS9_14adl_serializerESC_IhSaIhEEEEESt10_Select1stISH_ESt4lessIvESaISH_EE17_M_construct_nodeIJRKSH_EEEvPSt13_Rb_tree_nodeISH_EDpOT_.exit
  %42 = bitcast %"struct.std::_Rb_tree_node_base"* %41 to %"struct.std::_Rb_tree_node"*
  %_M_right.i42 = getelementptr inbounds i8, i8* %call5.i.i.i.i.i, i64 24
  %43 = bitcast i8* %_M_right.i42 to %"struct.std::_Rb_tree_node_base"**
  %call12 = call %"struct.std::_Rb_tree_node"* @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS5_blmdSaNS9_14adl_serializerESC_IhSaIhEEEEESt10_Select1stISH_ESt4lessIvESaISH_EE7_M_copyILb0ENSN_11_Alloc_nodeEEEPSt13_Rb_tree_nodeISH_ESS_PSt18_Rb_tree_node_baseRT0_(%"class.std::_Rb_tree"* nonnull dereferenceable(48) %this, %"struct.std::_Rb_tree_node"* nonnull %42, %"struct.std::_Rb_tree_node_base"* nonnull %38, %"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, nlohmann::json_v3_11_1::basic_json<>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, nlohmann::json_v3_11_1::basic_json<>>>, std::less<>>::_Alloc_node"* nonnull align 8 dereferenceable(8) %__node_gen)
  %44 = getelementptr %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %call12, i64 0, i32 0
  store %"struct.std::_Rb_tree_node_base"* %44, %"struct.std::_Rb_tree_node_base"** %43, align 8, !tbaa !323
  br label %if.end14

if.end14:                                         ; preds = %if.then10, %_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS5_blmdSaNS9_14adl_serializerESC_IhSaIhEEEEESt10_Select1stISH_ESt4lessIvESaISH_EE17_M_construct_nodeIJRKSH_EEEvPSt13_Rb_tree_nodeISH_EDpOT_.exit
  %__x.addr.0.in.in = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %__x.addr.078, i64 0, i32 0, i32 2
  %__x.addr.0.in = bitcast %"struct.std::_Rb_tree_node_base"** %__x.addr.0.in.in to %"struct.std::_Rb_tree_node"**
  %__x.addr.0 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %__x.addr.0.in, align 8, !tbaa !324
  %cmp.not = icmp eq %"struct.std::_Rb_tree_node"* %__x.addr.0, null
  br i1 %cmp.not, label %while.end, label %while.body, !llvm.loop !368

while.end:                                        ; preds = %if.end14, %if.end
  %45 = bitcast i8* %call5.i.i.i.i.i50 to %"struct.std::_Rb_tree_node"*
  ret %"struct.std::_Rb_tree_node"* %45
}

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local void @_ZN8nlohmann12json_v3_11_16detail20external_constructorILNS1_7value_tE3EE9constructINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES8_IhSaIhEEEEA8_cLi0EEEvRT_RKT0_(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull align 8 dereferenceable(16) %j, [8 x i8]* nonnull align 1 dereferenceable(8) %str) local_unnamed_addr #0 comdat align 2 {
entry:
  %__dnew.i.i.i.i.i = alloca i64, align 8
  %m_value = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %j, i64 0, i32 1
  %m_type = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %j, i64 0, i32 0
  %0 = load i8, i8* %m_type, align 8, !tbaa !145
  tail call void @_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE10json_value7destroyENS0_6detail7value_tE(%"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* nonnull dereferenceable(8) %m_value, i8 zeroext %0)
  store i8 3, i8* %m_type, align 8, !tbaa !145
  %call5.i.i.i = tail call noalias nonnull dereferenceable(32) i8* @_Znwm(i64 32) #43
  %arraydecay.i.i.i = getelementptr inbounds [8 x i8], [8 x i8]* %str, i64 0, i64 0
  %1 = getelementptr inbounds i8, i8* %call5.i.i.i, i64 16
  %2 = bitcast i8* %call5.i.i.i to i8**
  store i8* %1, i8** %2, align 8, !tbaa !14
  %call.i.i.i.i.i = tail call i64 @strlen(i8* nonnull dereferenceable(1) %arraydecay.i.i.i) #38
  %3 = bitcast i64* %__dnew.i.i.i.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %3) #38
  store i64 %call.i.i.i.i.i, i64* %__dnew.i.i.i.i.i, align 8, !tbaa !20
  %cmp.i.i.i.i.i = icmp ugt i64 %call.i.i.i.i.i, 15
  br i1 %cmp.i.i.i.i.i, label %if.then.i.i.i.i.i, label %if.end.i.i.i.i.i

if.then.i.i.i.i.i:                                ; preds = %entry
  %4 = bitcast i8* %call5.i.i.i to %"class.std::__cxx11::basic_string"*
  %call2.i.i.i.i.i = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %4, i64* nonnull align 8 dereferenceable(8) %__dnew.i.i.i.i.i, i64 0) #38
  store i8* %call2.i.i.i.i.i, i8** %2, align 8, !tbaa !17
  %5 = load i64, i64* %__dnew.i.i.i.i.i, align 8, !tbaa !20
  %6 = bitcast i8* %1 to i64*
  store i64 %5, i64* %6, align 8, !tbaa !21
  br label %if.end.i.i.i.i.i

if.end.i.i.i.i.i:                                 ; preds = %if.then.i.i.i.i.i, %entry
  %7 = phi i8* [ %call2.i.i.i.i.i, %if.then.i.i.i.i.i ], [ %1, %entry ]
  switch i64 %call.i.i.i.i.i, label %if.end.i.i.i.i.i.i.i.i [
    i64 1, label %if.then.i.i7.i.i.i.i.i
    i64 0, label %_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE6createIS9_JRA8_KcEEEPT_DpOT0_.exit
  ]

if.then.i.i7.i.i.i.i.i:                           ; preds = %if.end.i.i.i.i.i
  %8 = load i8, i8* %arraydecay.i.i.i, align 1, !tbaa !21
  store i8 %8, i8* %7, align 1, !tbaa !21
  br label %_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE6createIS9_JRA8_KcEEEPT_DpOT0_.exit

if.end.i.i.i.i.i.i.i.i:                           ; preds = %if.end.i.i.i.i.i
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %7, i8* nonnull align 1 %arraydecay.i.i.i, i64 %call.i.i.i.i.i, i1 false) #38
  br label %_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE6createIS9_JRA8_KcEEEPT_DpOT0_.exit

_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE6createIS9_JRA8_KcEEEPT_DpOT0_.exit: ; preds = %if.end.i.i.i.i.i.i.i.i, %if.then.i.i7.i.i.i.i.i, %if.end.i.i.i.i.i
  %9 = load i64, i64* %__dnew.i.i.i.i.i, align 8, !tbaa !20
  %_M_string_length.i.i.i.i.i.i.i = getelementptr inbounds i8, i8* %call5.i.i.i, i64 8
  %10 = bitcast i8* %_M_string_length.i.i.i.i.i.i.i to i64*
  store i64 %9, i64* %10, align 8, !tbaa !19
  %11 = load i8*, i8** %2, align 8, !tbaa !17
  %arrayidx.i.i.i.i.i.i = getelementptr inbounds i8, i8* %11, i64 %9
  store i8 0, i8* %arrayidx.i.i.i.i.i.i, align 1, !tbaa !21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %3) #38
  %12 = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value to i8**
  store i8* %call5.i.i.i, i8** %12, align 8, !tbaa !21
  call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %j, i1 zeroext true) #38
  ret void
}

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local void @_ZN8nlohmann12json_v3_11_16detail20external_constructorILNS1_7value_tE3EE9constructINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES8_IhSaIhEEEEA12_cLi0EEEvRT_RKT0_(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull align 8 dereferenceable(16) %j, [12 x i8]* nonnull align 1 dereferenceable(12) %str) local_unnamed_addr #0 comdat align 2 {
entry:
  %__dnew.i.i.i.i.i = alloca i64, align 8
  %m_value = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %j, i64 0, i32 1
  %m_type = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %j, i64 0, i32 0
  %0 = load i8, i8* %m_type, align 8, !tbaa !145
  tail call void @_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE10json_value7destroyENS0_6detail7value_tE(%"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* nonnull dereferenceable(8) %m_value, i8 zeroext %0)
  store i8 3, i8* %m_type, align 8, !tbaa !145
  %call5.i.i.i = tail call noalias nonnull dereferenceable(32) i8* @_Znwm(i64 32) #43
  %arraydecay.i.i.i = getelementptr inbounds [12 x i8], [12 x i8]* %str, i64 0, i64 0
  %1 = getelementptr inbounds i8, i8* %call5.i.i.i, i64 16
  %2 = bitcast i8* %call5.i.i.i to i8**
  store i8* %1, i8** %2, align 8, !tbaa !14
  %call.i.i.i.i.i = tail call i64 @strlen(i8* nonnull dereferenceable(1) %arraydecay.i.i.i) #38
  %3 = bitcast i64* %__dnew.i.i.i.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %3) #38
  store i64 %call.i.i.i.i.i, i64* %__dnew.i.i.i.i.i, align 8, !tbaa !20
  %cmp.i.i.i.i.i = icmp ugt i64 %call.i.i.i.i.i, 15
  br i1 %cmp.i.i.i.i.i, label %if.then.i.i.i.i.i, label %if.end.i.i.i.i.i

if.then.i.i.i.i.i:                                ; preds = %entry
  %4 = bitcast i8* %call5.i.i.i to %"class.std::__cxx11::basic_string"*
  %call2.i.i.i.i.i = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %4, i64* nonnull align 8 dereferenceable(8) %__dnew.i.i.i.i.i, i64 0) #38
  store i8* %call2.i.i.i.i.i, i8** %2, align 8, !tbaa !17
  %5 = load i64, i64* %__dnew.i.i.i.i.i, align 8, !tbaa !20
  %6 = bitcast i8* %1 to i64*
  store i64 %5, i64* %6, align 8, !tbaa !21
  br label %if.end.i.i.i.i.i

if.end.i.i.i.i.i:                                 ; preds = %if.then.i.i.i.i.i, %entry
  %7 = phi i8* [ %call2.i.i.i.i.i, %if.then.i.i.i.i.i ], [ %1, %entry ]
  switch i64 %call.i.i.i.i.i, label %if.end.i.i.i.i.i.i.i.i [
    i64 1, label %if.then.i.i7.i.i.i.i.i
    i64 0, label %_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE6createIS9_JRA12_KcEEEPT_DpOT0_.exit
  ]

if.then.i.i7.i.i.i.i.i:                           ; preds = %if.end.i.i.i.i.i
  %8 = load i8, i8* %arraydecay.i.i.i, align 1, !tbaa !21
  store i8 %8, i8* %7, align 1, !tbaa !21
  br label %_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE6createIS9_JRA12_KcEEEPT_DpOT0_.exit

if.end.i.i.i.i.i.i.i.i:                           ; preds = %if.end.i.i.i.i.i
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %7, i8* nonnull align 1 %arraydecay.i.i.i, i64 %call.i.i.i.i.i, i1 false) #38
  br label %_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE6createIS9_JRA12_KcEEEPT_DpOT0_.exit

_ZN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE6createIS9_JRA12_KcEEEPT_DpOT0_.exit: ; preds = %if.end.i.i.i.i.i.i.i.i, %if.then.i.i7.i.i.i.i.i, %if.end.i.i.i.i.i
  %9 = load i64, i64* %__dnew.i.i.i.i.i, align 8, !tbaa !20
  %_M_string_length.i.i.i.i.i.i.i = getelementptr inbounds i8, i8* %call5.i.i.i, i64 8
  %10 = bitcast i8* %_M_string_length.i.i.i.i.i.i.i to i64*
  store i64 %9, i64* %10, align 8, !tbaa !19
  %11 = load i8*, i8** %2, align 8, !tbaa !17
  %arrayidx.i.i.i.i.i.i = getelementptr inbounds i8, i8* %11, i64 %9
  store i8 0, i8* %arrayidx.i.i.i.i.i.i, align 1, !tbaa !21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %3) #38
  %12 = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value to i8**
  store i8* %call5.i.i.i, i8** %12, align 8, !tbaa !21
  call void @_ZNK8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEE16assert_invariantEb(%"class.nlohmann::json_v3_11_1::basic_json"* nonnull dereferenceable(16) %j, i1 zeroext true) #38
  ret void
}

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local void @_ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE4dumpERKSF_bbjj(%"class.nlohmann::json_v3_11_1::detail::serializer"* nonnull dereferenceable(644) %this, %"class.nlohmann::json_v3_11_1::basic_json"* nonnull align 8 dereferenceable(16) %val, i1 zeroext %pretty_print, i1 zeroext %ensure_ascii, i32 %indent_step, i32 %current_indent) local_unnamed_addr #0 comdat align 2 {
entry:
  %m_type = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %val, i64 0, i32 0
  %0 = load i8, i8* %m_type, align 8, !tbaa !145
  switch i8 %0, label %sw.default [
    i8 1, label %sw.bb
    i8 2, label %sw.bb185
    i8 3, label %sw.bb330
    i8 8, label %sw.bb341
    i8 4, label %sw.bb511
    i8 5, label %sw.bb525
    i8 6, label %sw.bb527
    i8 7, label %sw.bb529
    i8 9, label %sw.bb531
    i8 0, label %sw.bb536
  ]

sw.bb:                                            ; preds = %entry
  %object = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %val, i64 0, i32 1, i32 0
  %1 = load %"class.std::map"*, %"class.std::map"** %object, align 8, !tbaa !21
  %2 = getelementptr inbounds %"class.std::map", %"class.std::map"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %_M_node_count.i.i = getelementptr inbounds i8, i8* %2, i64 40
  %3 = bitcast i8* %_M_node_count.i.i to i64*
  %4 = load i64, i64* %3, align 8, !tbaa !171
  %cmp.i.i = icmp eq i64 %4, 0
  %_M_ptr.i.i.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %this, i64 0, i32 0, i32 0, i32 0
  %5 = load %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"** %_M_ptr.i.i.i, align 8, !tbaa !194
  br i1 %cmp.i.i, label %if.then, label %if.end

if.then:                                          ; preds = %sw.bb
  %6 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %5 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)***
  %vtable = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*** %6, align 8, !tbaa !50
  %vfn = getelementptr inbounds void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vtable, i64 1
  %7 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vfn, align 8
  tail call void %7(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %5, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.49, i64 0, i64 0), i64 2) #38
  br label %return

if.end:                                           ; preds = %sw.bb
  br i1 %pretty_print, label %if.then4, label %if.else

if.then4:                                         ; preds = %if.end
  %8 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %5 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)***
  %vtable7 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*** %8, align 8, !tbaa !50
  %vfn8 = getelementptr inbounds void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vtable7, i64 1
  %9 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vfn8, align 8
  tail call void %9(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %5, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.50, i64 0, i64 0), i64 2) #38
  %add = add i32 %current_indent, %indent_step
  %indent_string = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %this, i64 0, i32 8
  %_M_string_length.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %this, i64 0, i32 8, i32 1
  %10 = load i64, i64* %_M_string_length.i, align 8, !tbaa !19
  %conv = zext i32 %add to i64
  %cmp = icmp ult i64 %10, %conv
  br i1 %cmp, label %if.then13, label %if.end17, !prof !211

if.then13:                                        ; preds = %if.then4
  %mul = shl i64 %10, 1
  tail call void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6resizeEmc(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %indent_string, i64 %mul, i8 signext 32) #38
  br label %if.end17

if.end17:                                         ; preds = %if.then13, %if.then4
  %11 = load %"class.std::map"*, %"class.std::map"** %object, align 8, !tbaa !21
  %12 = getelementptr inbounds %"class.std::map", %"class.std::map"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %_M_left.i.i = getelementptr inbounds i8, i8* %12, i64 24
  %13 = bitcast i8* %_M_left.i.i to %"struct.std::_Rb_tree_node_base"**
  %14 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %13, align 8, !tbaa !166
  %_M_node_count.i.i628831 = getelementptr inbounds i8, i8* %12, i64 40
  %15 = bitcast i8* %_M_node_count.i.i628831 to i64*
  %16 = load i64, i64* %15, align 8, !tbaa !171
  %cmp24833.not = icmp eq i64 %16, 1
  br i1 %cmp24833.not, label %for.cond.cleanup, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.end17
  %_M_p.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %indent_string, i64 0, i32 0, i32 0
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.end17
  %i.sroa.0.0.lcssa = phi %"struct.std::_Rb_tree_node_base"* [ %14, %if.end17 ], [ %call.i, %for.body ]
  %17 = phi %"class.std::map"* [ %11, %if.end17 ], [ %33, %for.body ]
  %18 = getelementptr inbounds %"class.std::map", %"class.std::map"* %17, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %add.ptr.i.i = getelementptr inbounds i8, i8* %18, i64 8
  %_M_header.i.i = bitcast i8* %add.ptr.i.i to %"struct.std::_Rb_tree_node_base"*
  %cmp.i.not = icmp eq %"struct.std::_Rb_tree_node_base"* %i.sroa.0.0.lcssa, %_M_header.i.i
  br i1 %cmp.i.not, label %cond.false, label %_ZSt4nextISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS7_blmdSaNSA_14adl_serializerESD_IhSaIhEEEEEEET_SK_NSt15iterator_traitsISK_E15difference_typeE.exit

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %cnt.0835 = phi i64 [ 0, %for.body.lr.ph ], [ %inc, %for.body ]
  %i.sroa.0.0834 = phi %"struct.std::_Rb_tree_node_base"* [ %14, %for.body.lr.ph ], [ %call.i, %for.body ]
  %19 = load %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"** %_M_ptr.i.i.i, align 8, !tbaa !194
  %20 = load i8*, i8** %_M_p.i.i, align 8, !tbaa !17
  %21 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %19 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)***
  %vtable30 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*** %21, align 8, !tbaa !50
  %vfn31 = getelementptr inbounds void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vtable30, i64 1
  %22 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vfn31, align 8
  tail call void %22(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %19, i8* %20, i64 %conv) #38
  %23 = load %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"** %_M_ptr.i.i.i, align 8, !tbaa !194
  %24 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %23 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)***
  %vtable34 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)*** %24, align 8, !tbaa !50
  %25 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)** %vtable34, align 8
  tail call void %25(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %23, i8 signext 34) #38
  %_M_storage.i.i = getelementptr inbounds %"struct.std::_Rb_tree_node_base", %"struct.std::_Rb_tree_node_base"* %i.sroa.0.0834, i64 1
  %first = bitcast %"struct.std::_Rb_tree_node_base"* %_M_storage.i.i to %"class.std::__cxx11::basic_string"*
  tail call void @_ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE12dump_escapedERKSB_b(%"class.nlohmann::json_v3_11_1::detail::serializer"* nonnull dereferenceable(644) %this, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %first, i1 zeroext %ensure_ascii)
  %26 = load %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"** %_M_ptr.i.i.i, align 8, !tbaa !194
  %27 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %26 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)***
  %vtable40 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*** %27, align 8, !tbaa !50
  %vfn41 = getelementptr inbounds void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vtable40, i64 1
  %28 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vfn41, align 8
  tail call void %28(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %26, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.51, i64 0, i64 0), i64 3) #38
  %second = getelementptr inbounds %"struct.std::_Rb_tree_node_base", %"struct.std::_Rb_tree_node_base"* %i.sroa.0.0834, i64 2
  %29 = bitcast %"struct.std::_Rb_tree_node_base"* %second to %"class.nlohmann::json_v3_11_1::basic_json"*
  tail call void @_ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE4dumpERKSF_bbjj(%"class.nlohmann::json_v3_11_1::detail::serializer"* nonnull dereferenceable(644) %this, %"class.nlohmann::json_v3_11_1::basic_json"* nonnull align 8 dereferenceable(16) %29, i1 zeroext true, i1 zeroext %ensure_ascii, i32 %indent_step, i32 %add)
  %30 = load %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"** %_M_ptr.i.i.i, align 8, !tbaa !194
  %31 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %30 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)***
  %vtable46 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*** %31, align 8, !tbaa !50
  %vfn47 = getelementptr inbounds void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vtable46, i64 1
  %32 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vfn47, align 8
  tail call void %32(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %30, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.52, i64 0, i64 0), i64 2) #38
  %inc = add nuw i64 %cnt.0835, 1
  %call.i = tail call %"struct.std::_Rb_tree_node_base"* @_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base(%"struct.std::_Rb_tree_node_base"* %i.sroa.0.0834) #39
  %33 = load %"class.std::map"*, %"class.std::map"** %object, align 8, !tbaa !21
  %34 = getelementptr inbounds %"class.std::map", %"class.std::map"* %33, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %_M_node_count.i.i628 = getelementptr inbounds i8, i8* %34, i64 40
  %35 = bitcast i8* %_M_node_count.i.i628 to i64*
  %36 = load i64, i64* %35, align 8, !tbaa !171
  %sub = add i64 %36, -1
  %cmp24 = icmp ult i64 %inc, %sub
  br i1 %cmp24, label %for.body, label %for.cond.cleanup, !llvm.loop !369

cond.false:                                       ; preds = %for.cond.cleanup
  tail call void @__assert_fail(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.53, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.36, i64 0, i64 0), i32 17662, i8* getelementptr inbounds ([192 x i8], [192 x i8]* @__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE4dumpERKSF_bbjj, i64 0, i64 0)) #40
  unreachable

_ZSt4nextISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS7_blmdSaNSA_14adl_serializerESD_IhSaIhEEEEEEET_SK_NSt15iterator_traitsISK_E15difference_typeE.exit: ; preds = %for.cond.cleanup
  %call.i.i.i.i = tail call %"struct.std::_Rb_tree_node_base"* @_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base(%"struct.std::_Rb_tree_node_base"* %i.sroa.0.0.lcssa) #39
  %cmp.i652 = icmp eq %"struct.std::_Rb_tree_node_base"* %call.i.i.i.i, %_M_header.i.i
  br i1 %cmp.i652, label %cond.end66, label %cond.false65

cond.false65:                                     ; preds = %_ZSt4nextISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS7_blmdSaNSA_14adl_serializerESD_IhSaIhEEEEEEET_SK_NSt15iterator_traitsISK_E15difference_typeE.exit
  tail call void @__assert_fail(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.54, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.36, i64 0, i64 0), i32 17663, i8* getelementptr inbounds ([192 x i8], [192 x i8]* @__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE4dumpERKSF_bbjj, i64 0, i64 0)) #40
  unreachable

cond.end66:                                       ; preds = %_ZSt4nextISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS7_blmdSaNSA_14adl_serializerESD_IhSaIhEEEEEEET_SK_NSt15iterator_traitsISK_E15difference_typeE.exit
  %37 = load %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"** %_M_ptr.i.i.i, align 8, !tbaa !194
  %_M_p.i.i656 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %indent_string, i64 0, i32 0, i32 0
  %38 = load i8*, i8** %_M_p.i.i656, align 8, !tbaa !17
  %39 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %37 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)***
  %vtable72 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*** %39, align 8, !tbaa !50
  %vfn73 = getelementptr inbounds void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vtable72, i64 1
  %40 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vfn73, align 8
  tail call void %40(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %37, i8* %38, i64 %conv) #38
  %41 = load %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"** %_M_ptr.i.i.i, align 8, !tbaa !194
  %42 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %41 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)***
  %vtable76 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)*** %42, align 8, !tbaa !50
  %43 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)** %vtable76, align 8
  tail call void %43(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %41, i8 signext 34) #38
  %_M_storage.i.i661 = getelementptr inbounds %"struct.std::_Rb_tree_node_base", %"struct.std::_Rb_tree_node_base"* %i.sroa.0.0.lcssa, i64 1
  %first79 = bitcast %"struct.std::_Rb_tree_node_base"* %_M_storage.i.i661 to %"class.std::__cxx11::basic_string"*
  tail call void @_ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE12dump_escapedERKSB_b(%"class.nlohmann::json_v3_11_1::detail::serializer"* nonnull dereferenceable(644) %this, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %first79, i1 zeroext %ensure_ascii)
  %44 = load %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"** %_M_ptr.i.i.i, align 8, !tbaa !194
  %45 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %44 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)***
  %vtable83 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*** %45, align 8, !tbaa !50
  %vfn84 = getelementptr inbounds void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vtable83, i64 1
  %46 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vfn84, align 8
  tail call void %46(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %44, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.51, i64 0, i64 0), i64 3) #38
  %second86 = getelementptr inbounds %"struct.std::_Rb_tree_node_base", %"struct.std::_Rb_tree_node_base"* %i.sroa.0.0.lcssa, i64 2
  %47 = bitcast %"struct.std::_Rb_tree_node_base"* %second86 to %"class.nlohmann::json_v3_11_1::basic_json"*
  tail call void @_ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE4dumpERKSF_bbjj(%"class.nlohmann::json_v3_11_1::detail::serializer"* nonnull dereferenceable(644) %this, %"class.nlohmann::json_v3_11_1::basic_json"* nonnull align 8 dereferenceable(16) %47, i1 zeroext true, i1 zeroext %ensure_ascii, i32 %indent_step, i32 %add)
  %48 = load %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"** %_M_ptr.i.i.i, align 8, !tbaa !194
  %49 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %48 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)***
  %vtable90 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)*** %49, align 8, !tbaa !50
  %50 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)** %vtable90, align 8
  tail call void %50(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %48, i8 signext 10) #38
  %51 = load %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"** %_M_ptr.i.i.i, align 8, !tbaa !194
  %52 = load i8*, i8** %_M_p.i.i656, align 8, !tbaa !17
  %conv96 = zext i32 %current_indent to i64
  %53 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %51 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)***
  %vtable97 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*** %53, align 8, !tbaa !50
  %vfn98 = getelementptr inbounds void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vtable97, i64 1
  %54 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vfn98, align 8
  tail call void %54(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %51, i8* %52, i64 %conv96) #38
  %55 = load %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"** %_M_ptr.i.i.i, align 8, !tbaa !194
  %56 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %55 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)***
  %vtable101 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)*** %56, align 8, !tbaa !50
  %57 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)** %vtable101, align 8
  tail call void %57(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %55, i8 signext 125) #38
  ret void

if.else:                                          ; preds = %if.end
  %58 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %5 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)***
  %vtable105 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)*** %58, align 8, !tbaa !50
  %59 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)** %vtable105, align 8
  tail call void %59(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %5, i8 signext 123) #38
  %60 = load %"class.std::map"*, %"class.std::map"** %object, align 8, !tbaa !21
  %61 = getelementptr inbounds %"class.std::map", %"class.std::map"* %60, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %_M_left.i.i700 = getelementptr inbounds i8, i8* %61, i64 24
  %62 = bitcast i8* %_M_left.i.i700 to %"struct.std::_Rb_tree_node_base"**
  %63 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %62, align 8, !tbaa !166
  %_M_node_count.i.i705837 = getelementptr inbounds i8, i8* %61, i64 40
  %64 = bitcast i8* %_M_node_count.i.i705837 to i64*
  %65 = load i64, i64* %64, align 8, !tbaa !171
  %cmp118839.not = icmp eq i64 %65, 1
  br i1 %cmp118839.not, label %for.cond.cleanup119, label %for.body120

for.cond.cleanup119:                              ; preds = %for.body120, %if.else
  %i107.sroa.0.0.lcssa = phi %"struct.std::_Rb_tree_node_base"* [ %63, %if.else ], [ %call.i737, %for.body120 ]
  %66 = phi %"class.std::map"* [ %60, %if.else ], [ %78, %for.body120 ]
  %67 = getelementptr inbounds %"class.std::map", %"class.std::map"* %66, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %add.ptr.i.i707 = getelementptr inbounds i8, i8* %67, i64 8
  %_M_header.i.i708 = bitcast i8* %add.ptr.i.i707 to %"struct.std::_Rb_tree_node_base"*
  %cmp.i712.not = icmp eq %"struct.std::_Rb_tree_node_base"* %i107.sroa.0.0.lcssa, %_M_header.i.i708
  br i1 %cmp.i712.not, label %cond.false150, label %_ZSt4nextISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS7_blmdSaNSA_14adl_serializerESD_IhSaIhEEEEEEET_SK_NSt15iterator_traitsISK_E15difference_typeE.exit743

for.body120:                                      ; preds = %for.body120, %if.else
  %cnt112.0841 = phi i64 [ %inc140, %for.body120 ], [ 0, %if.else ]
  %i107.sroa.0.0840 = phi %"struct.std::_Rb_tree_node_base"* [ %call.i737, %for.body120 ], [ %63, %if.else ]
  %68 = load %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"** %_M_ptr.i.i.i, align 8, !tbaa !194
  %69 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %68 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)***
  %vtable123 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)*** %69, align 8, !tbaa !50
  %70 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)** %vtable123, align 8
  tail call void %70(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %68, i8 signext 34) #38
  %_M_storage.i.i715 = getelementptr inbounds %"struct.std::_Rb_tree_node_base", %"struct.std::_Rb_tree_node_base"* %i107.sroa.0.0840, i64 1
  %first126 = bitcast %"struct.std::_Rb_tree_node_base"* %_M_storage.i.i715 to %"class.std::__cxx11::basic_string"*
  tail call void @_ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE12dump_escapedERKSB_b(%"class.nlohmann::json_v3_11_1::detail::serializer"* nonnull dereferenceable(644) %this, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %first126, i1 zeroext %ensure_ascii)
  %71 = load %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"** %_M_ptr.i.i.i, align 8, !tbaa !194
  %72 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %71 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)***
  %vtable130 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*** %72, align 8, !tbaa !50
  %vfn131 = getelementptr inbounds void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vtable130, i64 1
  %73 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vfn131, align 8
  tail call void %73(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %71, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0), i64 2) #38
  %second133 = getelementptr inbounds %"struct.std::_Rb_tree_node_base", %"struct.std::_Rb_tree_node_base"* %i107.sroa.0.0840, i64 2
  %74 = bitcast %"struct.std::_Rb_tree_node_base"* %second133 to %"class.nlohmann::json_v3_11_1::basic_json"*
  tail call void @_ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE4dumpERKSF_bbjj(%"class.nlohmann::json_v3_11_1::detail::serializer"* nonnull dereferenceable(644) %this, %"class.nlohmann::json_v3_11_1::basic_json"* nonnull align 8 dereferenceable(16) %74, i1 zeroext false, i1 zeroext %ensure_ascii, i32 %indent_step, i32 %current_indent)
  %75 = load %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"** %_M_ptr.i.i.i, align 8, !tbaa !194
  %76 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %75 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)***
  %vtable137 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)*** %76, align 8, !tbaa !50
  %77 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)** %vtable137, align 8
  tail call void %77(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %75, i8 signext 44) #38
  %inc140 = add nuw i64 %cnt112.0841, 1
  %call.i737 = tail call %"struct.std::_Rb_tree_node_base"* @_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base(%"struct.std::_Rb_tree_node_base"* %i107.sroa.0.0840) #39
  %78 = load %"class.std::map"*, %"class.std::map"** %object, align 8, !tbaa !21
  %79 = getelementptr inbounds %"class.std::map", %"class.std::map"* %78, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %_M_node_count.i.i705 = getelementptr inbounds i8, i8* %79, i64 40
  %80 = bitcast i8* %_M_node_count.i.i705 to i64*
  %81 = load i64, i64* %80, align 8, !tbaa !171
  %sub117 = add i64 %81, -1
  %cmp118 = icmp ult i64 %inc140, %sub117
  br i1 %cmp118, label %for.body120, label %for.cond.cleanup119, !llvm.loop !370

cond.false150:                                    ; preds = %for.cond.cleanup119
  tail call void @__assert_fail(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.53, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.36, i64 0, i64 0), i32 17688, i8* getelementptr inbounds ([192 x i8], [192 x i8]* @__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE4dumpERKSF_bbjj, i64 0, i64 0)) #40
  unreachable

_ZSt4nextISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS7_blmdSaNSA_14adl_serializerESD_IhSaIhEEEEEEET_SK_NSt15iterator_traitsISK_E15difference_typeE.exit743: ; preds = %for.cond.cleanup119
  %call.i.i.i.i740 = tail call %"struct.std::_Rb_tree_node_base"* @_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base(%"struct.std::_Rb_tree_node_base"* %i107.sroa.0.0.lcssa) #39
  %cmp.i749 = icmp eq %"struct.std::_Rb_tree_node_base"* %call.i.i.i.i740, %_M_header.i.i708
  br i1 %cmp.i749, label %cond.end165, label %cond.false164

cond.false164:                                    ; preds = %_ZSt4nextISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS7_blmdSaNSA_14adl_serializerESD_IhSaIhEEEEEEET_SK_NSt15iterator_traitsISK_E15difference_typeE.exit743
  tail call void @__assert_fail(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.54, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.36, i64 0, i64 0), i32 17689, i8* getelementptr inbounds ([192 x i8], [192 x i8]* @__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE4dumpERKSF_bbjj, i64 0, i64 0)) #40
  unreachable

cond.end165:                                      ; preds = %_ZSt4nextISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorS7_blmdSaNSA_14adl_serializerESD_IhSaIhEEEEEEET_SK_NSt15iterator_traitsISK_E15difference_typeE.exit743
  %82 = load %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"** %_M_ptr.i.i.i, align 8, !tbaa !194
  %83 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %82 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)***
  %vtable168 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)*** %83, align 8, !tbaa !50
  %84 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)** %vtable168, align 8
  tail call void %84(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %82, i8 signext 34) #38
  %_M_storage.i.i754 = getelementptr inbounds %"struct.std::_Rb_tree_node_base", %"struct.std::_Rb_tree_node_base"* %i107.sroa.0.0.lcssa, i64 1
  %first171 = bitcast %"struct.std::_Rb_tree_node_base"* %_M_storage.i.i754 to %"class.std::__cxx11::basic_string"*
  tail call void @_ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE12dump_escapedERKSB_b(%"class.nlohmann::json_v3_11_1::detail::serializer"* nonnull dereferenceable(644) %this, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %first171, i1 zeroext %ensure_ascii)
  %85 = load %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"** %_M_ptr.i.i.i, align 8, !tbaa !194
  %86 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %85 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)***
  %vtable175 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*** %86, align 8, !tbaa !50
  %vfn176 = getelementptr inbounds void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vtable175, i64 1
  %87 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vfn176, align 8
  tail call void %87(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %85, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0), i64 2) #38
  %second178 = getelementptr inbounds %"struct.std::_Rb_tree_node_base", %"struct.std::_Rb_tree_node_base"* %i107.sroa.0.0.lcssa, i64 2
  %88 = bitcast %"struct.std::_Rb_tree_node_base"* %second178 to %"class.nlohmann::json_v3_11_1::basic_json"*
  tail call void @_ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE4dumpERKSF_bbjj(%"class.nlohmann::json_v3_11_1::detail::serializer"* nonnull dereferenceable(644) %this, %"class.nlohmann::json_v3_11_1::basic_json"* nonnull align 8 dereferenceable(16) %88, i1 zeroext false, i1 zeroext %ensure_ascii, i32 %indent_step, i32 %current_indent)
  %89 = load %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"** %_M_ptr.i.i.i, align 8, !tbaa !194
  %90 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %89 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)***
  %vtable182 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)*** %90, align 8, !tbaa !50
  %91 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)** %vtable182, align 8
  tail call void %91(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %89, i8 signext 125) #38
  ret void

sw.bb185:                                         ; preds = %entry
  %m_value186 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %val, i64 0, i32 1
  %array = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value186 to %"class.std::vector.27"**
  %92 = load %"class.std::vector.27"*, %"class.std::vector.27"** %array, align 8, !tbaa !21
  %_M_start.i.i768 = getelementptr inbounds %"class.std::vector.27", %"class.std::vector.27"* %92, i64 0, i32 0, i32 0, i32 0, i32 0
  %93 = load %"class.nlohmann::json_v3_11_1::basic_json"*, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_start.i.i768, align 8, !tbaa !60
  %_M_finish.i.i769 = getelementptr inbounds %"class.std::vector.27", %"class.std::vector.27"* %92, i64 0, i32 0, i32 0, i32 0, i32 1
  %94 = load %"class.nlohmann::json_v3_11_1::basic_json"*, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_finish.i.i769, align 8, !tbaa !60
  %cmp.i.i770 = icmp eq %"class.nlohmann::json_v3_11_1::basic_json"* %93, %94
  %_M_ptr.i.i.i772 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %this, i64 0, i32 0, i32 0, i32 0
  %95 = load %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"** %_M_ptr.i.i.i772, align 8, !tbaa !194
  br i1 %cmp.i.i770, label %if.then188, label %if.end193

if.then188:                                       ; preds = %sw.bb185
  %96 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %95 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)***
  %vtable191 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*** %96, align 8, !tbaa !50
  %vfn192 = getelementptr inbounds void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vtable191, i64 1
  %97 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vfn192, align 8
  tail call void %97(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %95, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i64 0, i64 0), i64 2) #38
  br label %return

if.end193:                                        ; preds = %sw.bb185
  br i1 %pretty_print, label %if.then195, label %if.else283

if.then195:                                       ; preds = %if.end193
  %98 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %95 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)***
  %vtable198 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*** %98, align 8, !tbaa !50
  %vfn199 = getelementptr inbounds void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vtable198, i64 1
  %99 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vfn199, align 8
  tail call void %99(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %95, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.57, i64 0, i64 0), i64 2) #38
  %add201 = add i32 %current_indent, %indent_step
  %indent_string202 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %this, i64 0, i32 8
  %_M_string_length.i786 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %this, i64 0, i32 8, i32 1
  %100 = load i64, i64* %_M_string_length.i786, align 8, !tbaa !19
  %conv204 = zext i32 %add201 to i64
  %cmp205 = icmp ult i64 %100, %conv204
  br i1 %cmp205, label %if.then211, label %if.end216, !prof !211

if.then211:                                       ; preds = %if.then195
  %mul215 = shl i64 %100, 1
  tail call void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6resizeEmc(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %indent_string202, i64 %mul215, i8 signext 32) #38
  br label %if.end216

if.end216:                                        ; preds = %if.then211, %if.then195
  %101 = load %"class.std::vector.27"*, %"class.std::vector.27"** %array, align 8, !tbaa !21
  %_M_start.i784 = getelementptr inbounds %"class.std::vector.27", %"class.std::vector.27"* %101, i64 0, i32 0, i32 0, i32 0, i32 0
  %102 = load %"class.nlohmann::json_v3_11_1::basic_json"*, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_start.i784, align 8, !tbaa !60
  %_M_finish.i783844 = getelementptr inbounds %"class.std::vector.27", %"class.std::vector.27"* %101, i64 0, i32 0, i32 0, i32 0, i32 1
  %103 = load %"class.nlohmann::json_v3_11_1::basic_json"*, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_finish.i783844, align 8, !tbaa !60
  %add.ptr.i782845 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %103, i64 -1
  %cmp.i780.not846 = icmp eq %"class.nlohmann::json_v3_11_1::basic_json"* %102, %add.ptr.i782845
  br i1 %cmp.i780.not846, label %for.cond.cleanup232, label %for.body233.lr.ph

for.body233.lr.ph:                                ; preds = %if.end216
  %_M_p.i.i773 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %indent_string202, i64 0, i32 0, i32 0
  br label %for.body233

for.cond.cleanup232.loopexit:                     ; preds = %for.body233
  %.lcssa8 = phi %"class.std::vector.27"* [ %112, %for.body233 ]
  %.lcssa7 = phi %"class.nlohmann::json_v3_11_1::basic_json"* [ %113, %for.body233 ]
  %_M_start.i.i775.phi.trans.insert = getelementptr inbounds %"class.std::vector.27", %"class.std::vector.27"* %.lcssa8, i64 0, i32 0, i32 0, i32 0, i32 0
  %.pre875 = load %"class.nlohmann::json_v3_11_1::basic_json"*, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_start.i.i775.phi.trans.insert, align 8, !tbaa !60
  br label %for.cond.cleanup232

for.cond.cleanup232:                              ; preds = %for.cond.cleanup232.loopexit, %if.end216
  %104 = phi %"class.nlohmann::json_v3_11_1::basic_json"* [ %102, %if.end216 ], [ %.pre875, %for.cond.cleanup232.loopexit ]
  %.lcssa827 = phi %"class.nlohmann::json_v3_11_1::basic_json"* [ %103, %if.end216 ], [ %.lcssa7, %for.cond.cleanup232.loopexit ]
  %cmp.i.i777 = icmp eq %"class.nlohmann::json_v3_11_1::basic_json"* %104, %.lcssa827
  br i1 %cmp.i.i777, label %cond.false255, label %cond.end256

for.body233:                                      ; preds = %for.body233, %for.body233.lr.ph
  %i217.sroa.0.0847 = phi %"class.nlohmann::json_v3_11_1::basic_json"* [ %102, %for.body233.lr.ph ], [ %incdec.ptr.i763, %for.body233 ]
  %105 = load %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"** %_M_ptr.i.i.i772, align 8, !tbaa !194
  %106 = load i8*, i8** %_M_p.i.i773, align 8, !tbaa !17
  %107 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %105 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)***
  %vtable239 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*** %107, align 8, !tbaa !50
  %vfn240 = getelementptr inbounds void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vtable239, i64 1
  %108 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vfn240, align 8
  tail call void %108(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %105, i8* %106, i64 %conv204) #38
  tail call void @_ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE4dumpERKSF_bbjj(%"class.nlohmann::json_v3_11_1::detail::serializer"* nonnull dereferenceable(644) %this, %"class.nlohmann::json_v3_11_1::basic_json"* nonnull align 8 dereferenceable(16) %i217.sroa.0.0847, i1 zeroext true, i1 zeroext %ensure_ascii, i32 %indent_step, i32 %add201)
  %109 = load %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"** %_M_ptr.i.i.i772, align 8, !tbaa !194
  %110 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %109 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)***
  %vtable245 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*** %110, align 8, !tbaa !50
  %vfn246 = getelementptr inbounds void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vtable245, i64 1
  %111 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vfn246, align 8
  tail call void %111(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %109, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.52, i64 0, i64 0), i64 2) #38
  %incdec.ptr.i763 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %i217.sroa.0.0847, i64 1
  %112 = load %"class.std::vector.27"*, %"class.std::vector.27"** %array, align 8, !tbaa !21
  %_M_finish.i783 = getelementptr inbounds %"class.std::vector.27", %"class.std::vector.27"* %112, i64 0, i32 0, i32 0, i32 0, i32 1
  %113 = load %"class.nlohmann::json_v3_11_1::basic_json"*, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_finish.i783, align 8, !tbaa !60
  %add.ptr.i782 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %113, i64 -1
  %cmp.i780.not = icmp eq %"class.nlohmann::json_v3_11_1::basic_json"* %incdec.ptr.i763, %add.ptr.i782
  br i1 %cmp.i780.not, label %for.cond.cleanup232.loopexit, label %for.body233, !llvm.loop !371

cond.false255:                                    ; preds = %for.cond.cleanup232
  tail call void @__assert_fail(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.58, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.36, i64 0, i64 0), i32 17725, i8* getelementptr inbounds ([192 x i8], [192 x i8]* @__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE4dumpERKSF_bbjj, i64 0, i64 0)) #40
  unreachable

cond.end256:                                      ; preds = %for.cond.cleanup232
  %114 = load %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"** %_M_ptr.i.i.i772, align 8, !tbaa !194
  %_M_p.i.i760 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %indent_string202, i64 0, i32 0, i32 0
  %115 = load i8*, i8** %_M_p.i.i760, align 8, !tbaa !17
  %116 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %114 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)***
  %vtable262 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*** %116, align 8, !tbaa !50
  %vfn263 = getelementptr inbounds void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vtable262, i64 1
  %117 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vfn263, align 8
  tail call void %117(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %114, i8* %115, i64 %conv204) #38
  %118 = load %"class.std::vector.27"*, %"class.std::vector.27"** %array, align 8, !tbaa !21
  %_M_finish.i.i757 = getelementptr inbounds %"class.std::vector.27", %"class.std::vector.27"* %118, i64 0, i32 0, i32 0, i32 0, i32 1
  %119 = load %"class.nlohmann::json_v3_11_1::basic_json"*, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_finish.i.i757, align 8, !tbaa !60
  %add.ptr.i.i758 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %119, i64 -1
  tail call void @_ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE4dumpERKSF_bbjj(%"class.nlohmann::json_v3_11_1::detail::serializer"* nonnull dereferenceable(644) %this, %"class.nlohmann::json_v3_11_1::basic_json"* nonnull align 8 dereferenceable(16) %add.ptr.i.i758, i1 zeroext true, i1 zeroext %ensure_ascii, i32 %indent_step, i32 %add201)
  %120 = load %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"** %_M_ptr.i.i.i772, align 8, !tbaa !194
  %121 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %120 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)***
  %vtable270 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)*** %121, align 8, !tbaa !50
  %122 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)** %vtable270, align 8
  tail call void %122(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %120, i8 signext 10) #38
  %123 = load %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"** %_M_ptr.i.i.i772, align 8, !tbaa !194
  %124 = load i8*, i8** %_M_p.i.i760, align 8, !tbaa !17
  %conv276 = zext i32 %current_indent to i64
  %125 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %123 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)***
  %vtable277 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*** %125, align 8, !tbaa !50
  %vfn278 = getelementptr inbounds void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vtable277, i64 1
  %126 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vfn278, align 8
  tail call void %126(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %123, i8* %124, i64 %conv276) #38
  %127 = load %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"** %_M_ptr.i.i.i772, align 8, !tbaa !194
  %128 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %127 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)***
  %vtable281 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)*** %128, align 8, !tbaa !50
  %129 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)** %vtable281, align 8
  tail call void %129(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %127, i8 signext 93) #38
  ret void

if.else283:                                       ; preds = %if.end193
  %130 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %95 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)***
  %vtable286 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)*** %130, align 8, !tbaa !50
  %131 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)** %vtable286, align 8
  tail call void %131(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %95, i8 signext 91) #38
  %132 = load %"class.std::vector.27"*, %"class.std::vector.27"** %array, align 8, !tbaa !21
  %_M_start.i735 = getelementptr inbounds %"class.std::vector.27", %"class.std::vector.27"* %132, i64 0, i32 0, i32 0, i32 0, i32 0
  %133 = load %"class.nlohmann::json_v3_11_1::basic_json"*, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_start.i735, align 8, !tbaa !60
  %_M_finish.i734850 = getelementptr inbounds %"class.std::vector.27", %"class.std::vector.27"* %132, i64 0, i32 0, i32 0, i32 0, i32 1
  %134 = load %"class.nlohmann::json_v3_11_1::basic_json"*, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_finish.i734850, align 8, !tbaa !60
  %add.ptr.i733851 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %134, i64 -1
  %cmp.i731.not852 = icmp eq %"class.nlohmann::json_v3_11_1::basic_json"* %133, %add.ptr.i733851
  br i1 %cmp.i731.not852, label %for.cond.cleanup303, label %for.body304

for.cond.cleanup303.loopexit:                     ; preds = %for.body304
  %incdec.ptr.i721.lcssa = phi %"class.nlohmann::json_v3_11_1::basic_json"* [ %incdec.ptr.i721, %for.body304 ]
  %.lcssa10 = phi %"class.std::vector.27"* [ %139, %for.body304 ]
  %.lcssa9 = phi %"class.nlohmann::json_v3_11_1::basic_json"* [ %140, %for.body304 ]
  %_M_start.i.i726.phi.trans.insert = getelementptr inbounds %"class.std::vector.27", %"class.std::vector.27"* %.lcssa10, i64 0, i32 0, i32 0, i32 0, i32 0
  %.pre = load %"class.nlohmann::json_v3_11_1::basic_json"*, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_start.i.i726.phi.trans.insert, align 8, !tbaa !60
  br label %for.cond.cleanup303

for.cond.cleanup303:                              ; preds = %for.cond.cleanup303.loopexit, %if.else283
  %135 = phi %"class.nlohmann::json_v3_11_1::basic_json"* [ %133, %if.else283 ], [ %.pre, %for.cond.cleanup303.loopexit ]
  %.lcssa829 = phi %"class.nlohmann::json_v3_11_1::basic_json"* [ %134, %if.else283 ], [ %.lcssa9, %for.cond.cleanup303.loopexit ]
  %add.ptr.i733.lcssa = phi %"class.nlohmann::json_v3_11_1::basic_json"* [ %133, %if.else283 ], [ %incdec.ptr.i721.lcssa, %for.cond.cleanup303.loopexit ]
  %cmp.i.i728 = icmp eq %"class.nlohmann::json_v3_11_1::basic_json"* %135, %.lcssa829
  br i1 %cmp.i.i728, label %cond.false319, label %cond.end320

for.body304:                                      ; preds = %for.body304, %if.else283
  %i288.sroa.0.0853 = phi %"class.nlohmann::json_v3_11_1::basic_json"* [ %incdec.ptr.i721, %for.body304 ], [ %133, %if.else283 ]
  tail call void @_ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE4dumpERKSF_bbjj(%"class.nlohmann::json_v3_11_1::detail::serializer"* nonnull dereferenceable(644) %this, %"class.nlohmann::json_v3_11_1::basic_json"* nonnull align 8 dereferenceable(16) %i288.sroa.0.0853, i1 zeroext false, i1 zeroext %ensure_ascii, i32 %indent_step, i32 %current_indent)
  %136 = load %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"** %_M_ptr.i.i.i772, align 8, !tbaa !194
  %137 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %136 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)***
  %vtable309 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)*** %137, align 8, !tbaa !50
  %138 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)** %vtable309, align 8
  tail call void %138(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %136, i8 signext 44) #38
  %incdec.ptr.i721 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %i288.sroa.0.0853, i64 1
  %139 = load %"class.std::vector.27"*, %"class.std::vector.27"** %array, align 8, !tbaa !21
  %_M_finish.i734 = getelementptr inbounds %"class.std::vector.27", %"class.std::vector.27"* %139, i64 0, i32 0, i32 0, i32 0, i32 1
  %140 = load %"class.nlohmann::json_v3_11_1::basic_json"*, %"class.nlohmann::json_v3_11_1::basic_json"** %_M_finish.i734, align 8, !tbaa !60
  %add.ptr.i733 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %140, i64 -1
  %cmp.i731.not = icmp eq %"class.nlohmann::json_v3_11_1::basic_json"* %incdec.ptr.i721, %add.ptr.i733
  br i1 %cmp.i731.not, label %for.cond.cleanup303.loopexit, label %for.body304, !llvm.loop !372

cond.false319:                                    ; preds = %for.cond.cleanup303
  tail call void @__assert_fail(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.58, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.36, i64 0, i64 0), i32 17744, i8* getelementptr inbounds ([192 x i8], [192 x i8]* @__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE4dumpERKSF_bbjj, i64 0, i64 0)) #40
  unreachable

cond.end320:                                      ; preds = %for.cond.cleanup303
  tail call void @_ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE4dumpERKSF_bbjj(%"class.nlohmann::json_v3_11_1::detail::serializer"* nonnull dereferenceable(644) %this, %"class.nlohmann::json_v3_11_1::basic_json"* nonnull align 8 dereferenceable(16) %add.ptr.i733.lcssa, i1 zeroext false, i1 zeroext %ensure_ascii, i32 %indent_step, i32 %current_indent)
  %141 = load %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"** %_M_ptr.i.i.i772, align 8, !tbaa !194
  %142 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %141 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)***
  %vtable327 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)*** %142, align 8, !tbaa !50
  %143 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)** %vtable327, align 8
  tail call void %143(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %141, i8 signext 93) #38
  ret void

sw.bb330:                                         ; preds = %entry
  %_M_ptr.i.i.i714 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %this, i64 0, i32 0, i32 0, i32 0
  %144 = load %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"** %_M_ptr.i.i.i714, align 8, !tbaa !194
  %145 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %144 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)***
  %vtable333 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)*** %145, align 8, !tbaa !50
  %146 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)** %vtable333, align 8
  tail call void %146(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %144, i8 signext 34) #38
  %m_value335 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %val, i64 0, i32 1
  %string = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value335 to %"class.std::__cxx11::basic_string"**
  %147 = load %"class.std::__cxx11::basic_string"*, %"class.std::__cxx11::basic_string"** %string, align 8, !tbaa !21
  tail call void @_ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE12dump_escapedERKSB_b(%"class.nlohmann::json_v3_11_1::detail::serializer"* nonnull dereferenceable(644) %this, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %147, i1 zeroext %ensure_ascii)
  %148 = load %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"** %_M_ptr.i.i.i714, align 8, !tbaa !194
  %149 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %148 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)***
  %vtable339 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)*** %149, align 8, !tbaa !50
  %150 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)** %vtable339, align 8
  tail call void %150(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %148, i8 signext 34) #38
  br label %return

sw.bb341:                                         ; preds = %entry
  %_M_ptr.i.i.i706 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %this, i64 0, i32 0, i32 0, i32 0
  %151 = load %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"** %_M_ptr.i.i.i706, align 8, !tbaa !194
  %152 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %151 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)***
  %vtable346 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*** %152, align 8, !tbaa !50
  %vfn347 = getelementptr inbounds void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vtable346, i64 1
  %153 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vfn347, align 8
  br i1 %pretty_print, label %if.then343, label %if.else451

if.then343:                                       ; preds = %sw.bb341
  tail call void %153(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %151, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.50, i64 0, i64 0), i64 2) #38
  %add349 = add i32 %current_indent, %indent_step
  %indent_string350 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %this, i64 0, i32 8
  %_M_string_length.i704 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %this, i64 0, i32 8, i32 1
  %154 = load i64, i64* %_M_string_length.i704, align 8, !tbaa !19
  %conv352 = zext i32 %add349 to i64
  %cmp353 = icmp ult i64 %154, %conv352
  br i1 %cmp353, label %if.then359, label %if.end364, !prof !211

if.then359:                                       ; preds = %if.then343
  %mul363 = shl i64 %154, 1
  tail call void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6resizeEmc(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %indent_string350, i64 %mul363, i8 signext 32) #38
  br label %if.end364

if.end364:                                        ; preds = %if.then359, %if.then343
  %155 = load %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"** %_M_ptr.i.i.i706, align 8, !tbaa !194
  %_M_p.i.i701 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %indent_string350, i64 0, i32 0, i32 0
  %156 = load i8*, i8** %_M_p.i.i701, align 8, !tbaa !17
  %157 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %155 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)***
  %vtable370 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*** %157, align 8, !tbaa !50
  %vfn371 = getelementptr inbounds void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vtable370, i64 1
  %158 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vfn371, align 8
  tail call void %158(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %155, i8* %156, i64 %conv352) #38
  %159 = load %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"** %_M_ptr.i.i.i706, align 8, !tbaa !194
  %160 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %159 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)***
  %vtable374 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*** %160, align 8, !tbaa !50
  %vfn375 = getelementptr inbounds void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vtable374, i64 1
  %161 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vfn375, align 8
  tail call void %161(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %159, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.59, i64 0, i64 0), i64 10) #38
  %m_value376 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %val, i64 0, i32 1
  %binary = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value376 to %"class.nlohmann::json_v3_11_1::byte_container_with_subtype"**
  %162 = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value376 to %"class.std::vector.32"**
  %163 = load %"class.std::vector.32"*, %"class.std::vector.32"** %162, align 8, !tbaa !21
  %_M_start.i.i695 = getelementptr inbounds %"class.std::vector.32", %"class.std::vector.32"* %163, i64 0, i32 0, i32 0, i32 0, i32 0
  %164 = load i8*, i8** %_M_start.i.i695, align 8, !tbaa !60
  %_M_finish.i.i696 = getelementptr inbounds %"class.std::vector.32", %"class.std::vector.32"* %163, i64 0, i32 0, i32 0, i32 0, i32 1
  %165 = load i8*, i8** %_M_finish.i.i696, align 8, !tbaa !60
  %cmp.i.i697 = icmp eq i8* %164, %165
  br i1 %cmp.i.i697, label %if.end407, label %for.cond384.preheader

for.cond384.preheader:                            ; preds = %if.end364
  %add.ptr.i692858 = getelementptr inbounds i8, i8* %165, i64 -1
  %cmp.i690.not859 = icmp eq i8* %164, %add.ptr.i692858
  br i1 %cmp.i690.not859, label %for.cond.cleanup394, label %for.body395

for.cond.cleanup394:                              ; preds = %for.body395, %for.cond384.preheader
  %add.ptr.i692.lcssa = phi i8* [ %164, %for.cond384.preheader ], [ %incdec.ptr.i680, %for.body395 ]
  %166 = load i8, i8* %add.ptr.i692.lcssa, align 1, !tbaa !21
  tail call void @_ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE12dump_integerIhLi0EEEvT_(%"class.nlohmann::json_v3_11_1::detail::serializer"* nonnull dereferenceable(644) %this, i8 zeroext %166)
  br label %if.end407

for.body395:                                      ; preds = %for.body395, %for.cond384.preheader
  %i379.sroa.0.0860 = phi i8* [ %incdec.ptr.i680, %for.body395 ], [ %164, %for.cond384.preheader ]
  %167 = load i8, i8* %i379.sroa.0.0860, align 1, !tbaa !21
  tail call void @_ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE12dump_integerIhLi0EEEvT_(%"class.nlohmann::json_v3_11_1::detail::serializer"* nonnull dereferenceable(644) %this, i8 zeroext %167)
  %168 = load %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"** %_M_ptr.i.i.i706, align 8, !tbaa !194
  %169 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %168 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)***
  %vtable399 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*** %169, align 8, !tbaa !50
  %vfn400 = getelementptr inbounds void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vtable399, i64 1
  %170 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vfn400, align 8
  tail call void %170(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %168, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.60, i64 0, i64 0), i64 2) #38
  %incdec.ptr.i680 = getelementptr inbounds i8, i8* %i379.sroa.0.0860, i64 1
  %171 = load %"class.std::vector.32"*, %"class.std::vector.32"** %162, align 8, !tbaa !21
  %_M_finish.i693 = getelementptr inbounds %"class.std::vector.32", %"class.std::vector.32"* %171, i64 0, i32 0, i32 0, i32 0, i32 1
  %172 = load i8*, i8** %_M_finish.i693, align 8, !tbaa !60
  %add.ptr.i692 = getelementptr inbounds i8, i8* %172, i64 -1
  %cmp.i690.not = icmp eq i8* %incdec.ptr.i680, %add.ptr.i692
  br i1 %cmp.i690.not, label %for.cond.cleanup394, label %for.body395, !llvm.loop !373

if.end407:                                        ; preds = %for.cond.cleanup394, %if.end364
  %173 = load %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"** %_M_ptr.i.i.i706, align 8, !tbaa !194
  %174 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %173 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)***
  %vtable410 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*** %174, align 8, !tbaa !50
  %vfn411 = getelementptr inbounds void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vtable410, i64 1
  %175 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vfn411, align 8
  tail call void %175(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %173, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.61, i64 0, i64 0), i64 3) #38
  %176 = load %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"** %_M_ptr.i.i.i706, align 8, !tbaa !194
  %177 = load i8*, i8** %_M_p.i.i701, align 8, !tbaa !17
  %178 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %176 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)***
  %vtable417 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*** %178, align 8, !tbaa !50
  %vfn418 = getelementptr inbounds void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vtable417, i64 1
  %179 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vfn418, align 8
  tail call void %179(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %176, i8* %177, i64 %conv352) #38
  %180 = load %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"** %_M_ptr.i.i.i706, align 8, !tbaa !194
  %181 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %180 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)***
  %vtable421 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*** %181, align 8, !tbaa !50
  %vfn422 = getelementptr inbounds void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vtable421, i64 1
  %182 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vfn422, align 8
  tail call void %182(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %180, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.62, i64 0, i64 0), i64 11) #38
  %183 = load %"class.nlohmann::json_v3_11_1::byte_container_with_subtype"*, %"class.nlohmann::json_v3_11_1::byte_container_with_subtype"** %binary, align 8, !tbaa !21
  %m_has_subtype.i670 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::byte_container_with_subtype", %"class.nlohmann::json_v3_11_1::byte_container_with_subtype"* %183, i64 0, i32 2
  %184 = load i8, i8* %m_has_subtype.i670, align 8, !tbaa !374, !range !90
  %tobool.i671.not = icmp eq i8 %184, 0
  br i1 %tobool.i671.not, label %if.else430, label %_ZNK8nlohmann12json_v3_11_127byte_container_with_subtypeISt6vectorIhSaIhEEE7subtypeEv.exit669

_ZNK8nlohmann12json_v3_11_127byte_container_with_subtypeISt6vectorIhSaIhEEE7subtypeEv.exit669: ; preds = %if.end407
  %m_subtype.i666 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::byte_container_with_subtype", %"class.nlohmann::json_v3_11_1::byte_container_with_subtype"* %183, i64 0, i32 1
  %185 = load i64, i64* %m_subtype.i666, align 8, !tbaa !376
  tail call void @_ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE12dump_integerImLi0EEEvT_(%"class.nlohmann::json_v3_11_1::detail::serializer"* nonnull dereferenceable(644) %this, i64 %185)
  br label %if.end435

if.else430:                                       ; preds = %if.end407
  %186 = load %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"** %_M_ptr.i.i.i706, align 8, !tbaa !194
  %187 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %186 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)***
  %vtable433 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*** %187, align 8, !tbaa !50
  %vfn434 = getelementptr inbounds void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vtable433, i64 1
  %188 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vfn434, align 8
  tail call void %188(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %186, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.63, i64 0, i64 0), i64 4) #38
  br label %if.end435

if.end435:                                        ; preds = %if.else430, %_ZNK8nlohmann12json_v3_11_127byte_container_with_subtypeISt6vectorIhSaIhEEE7subtypeEv.exit669
  %189 = load %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"** %_M_ptr.i.i.i706, align 8, !tbaa !194
  %190 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %189 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)***
  %vtable438 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)*** %190, align 8, !tbaa !50
  %191 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)** %vtable438, align 8
  tail call void %191(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %189, i8 signext 10) #38
  %192 = load %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"** %_M_ptr.i.i.i706, align 8, !tbaa !194
  %193 = load i8*, i8** %_M_p.i.i701, align 8, !tbaa !17
  %conv444 = zext i32 %current_indent to i64
  %194 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %192 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)***
  %vtable445 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*** %194, align 8, !tbaa !50
  %vfn446 = getelementptr inbounds void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vtable445, i64 1
  %195 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vfn446, align 8
  tail call void %195(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %192, i8* %193, i64 %conv444) #38
  %196 = load %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"** %_M_ptr.i.i.i706, align 8, !tbaa !194
  %197 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %196 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)***
  %vtable449 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)*** %197, align 8, !tbaa !50
  %198 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)** %vtable449, align 8
  tail call void %198(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %196, i8 signext 125) #38
  br label %return

if.else451:                                       ; preds = %sw.bb341
  tail call void %153(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %151, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.64, i64 0, i64 0), i64 10) #38
  %m_value456 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %val, i64 0, i32 1
  %binary457 = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value456 to %"class.nlohmann::json_v3_11_1::byte_container_with_subtype"**
  %199 = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value456 to %"class.std::vector.32"**
  %200 = load %"class.std::vector.32"*, %"class.std::vector.32"** %199, align 8, !tbaa !21
  %_M_start.i.i = getelementptr inbounds %"class.std::vector.32", %"class.std::vector.32"* %200, i64 0, i32 0, i32 0, i32 0, i32 0
  %201 = load i8*, i8** %_M_start.i.i, align 8, !tbaa !60
  %_M_finish.i.i648 = getelementptr inbounds %"class.std::vector.32", %"class.std::vector.32"* %200, i64 0, i32 0, i32 0, i32 0, i32 1
  %202 = load i8*, i8** %_M_finish.i.i648, align 8, !tbaa !60
  %cmp.i.i649 = icmp eq i8* %201, %202
  br i1 %cmp.i.i649, label %if.end488, label %for.cond465.preheader

for.cond465.preheader:                            ; preds = %if.else451
  %add.ptr.i863 = getelementptr inbounds i8, i8* %202, i64 -1
  %cmp.i646.not864 = icmp eq i8* %201, %add.ptr.i863
  br i1 %cmp.i646.not864, label %for.cond.cleanup475, label %for.body476

for.cond.cleanup475:                              ; preds = %for.body476, %for.cond465.preheader
  %add.ptr.i.lcssa = phi i8* [ %201, %for.cond465.preheader ], [ %incdec.ptr.i, %for.body476 ]
  %203 = load i8, i8* %add.ptr.i.lcssa, align 1, !tbaa !21
  tail call void @_ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE12dump_integerIhLi0EEEvT_(%"class.nlohmann::json_v3_11_1::detail::serializer"* nonnull dereferenceable(644) %this, i8 zeroext %203)
  br label %if.end488

for.body476:                                      ; preds = %for.body476, %for.cond465.preheader
  %i460.sroa.0.0865 = phi i8* [ %incdec.ptr.i, %for.body476 ], [ %201, %for.cond465.preheader ]
  %204 = load i8, i8* %i460.sroa.0.0865, align 1, !tbaa !21
  tail call void @_ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE12dump_integerIhLi0EEEvT_(%"class.nlohmann::json_v3_11_1::detail::serializer"* nonnull dereferenceable(644) %this, i8 zeroext %204)
  %205 = load %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"** %_M_ptr.i.i.i706, align 8, !tbaa !194
  %206 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %205 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)***
  %vtable480 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)*** %206, align 8, !tbaa !50
  %207 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)** %vtable480, align 8
  tail call void %207(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %205, i8 signext 44) #38
  %incdec.ptr.i = getelementptr inbounds i8, i8* %i460.sroa.0.0865, i64 1
  %208 = load %"class.std::vector.32"*, %"class.std::vector.32"** %199, align 8, !tbaa !21
  %_M_finish.i = getelementptr inbounds %"class.std::vector.32", %"class.std::vector.32"* %208, i64 0, i32 0, i32 0, i32 0, i32 1
  %209 = load i8*, i8** %_M_finish.i, align 8, !tbaa !60
  %add.ptr.i = getelementptr inbounds i8, i8* %209, i64 -1
  %cmp.i646.not = icmp eq i8* %incdec.ptr.i, %add.ptr.i
  br i1 %cmp.i646.not, label %for.cond.cleanup475, label %for.body476, !llvm.loop !377

if.end488:                                        ; preds = %for.cond.cleanup475, %if.else451
  %210 = load %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"** %_M_ptr.i.i.i706, align 8, !tbaa !194
  %211 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %210 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)***
  %vtable491 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*** %211, align 8, !tbaa !50
  %vfn492 = getelementptr inbounds void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vtable491, i64 1
  %212 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vfn492, align 8
  tail call void %212(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %210, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.65, i64 0, i64 0), i64 12) #38
  %213 = load %"class.nlohmann::json_v3_11_1::byte_container_with_subtype"*, %"class.nlohmann::json_v3_11_1::byte_container_with_subtype"** %binary457, align 8, !tbaa !21
  %m_has_subtype.i635 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::byte_container_with_subtype", %"class.nlohmann::json_v3_11_1::byte_container_with_subtype"* %213, i64 0, i32 2
  %214 = load i8, i8* %m_has_subtype.i635, align 8, !tbaa !374, !range !90
  %tobool.i.not = icmp eq i8 %214, 0
  br i1 %tobool.i.not, label %if.else504, label %_ZNK8nlohmann12json_v3_11_127byte_container_with_subtypeISt6vectorIhSaIhEEE7subtypeEv.exit

_ZNK8nlohmann12json_v3_11_127byte_container_with_subtypeISt6vectorIhSaIhEEE7subtypeEv.exit: ; preds = %if.end488
  %m_subtype.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::byte_container_with_subtype", %"class.nlohmann::json_v3_11_1::byte_container_with_subtype"* %213, i64 0, i32 1
  %215 = load i64, i64* %m_subtype.i, align 8, !tbaa !376
  tail call void @_ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE12dump_integerImLi0EEEvT_(%"class.nlohmann::json_v3_11_1::detail::serializer"* nonnull dereferenceable(644) %this, i64 %215)
  %216 = load %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"** %_M_ptr.i.i.i706, align 8, !tbaa !194
  %217 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %216 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)***
  %vtable502 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)*** %217, align 8, !tbaa !50
  %218 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)** %vtable502, align 8
  tail call void %218(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %216, i8 signext 125) #38
  br label %return

if.else504:                                       ; preds = %if.end488
  %219 = load %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"** %_M_ptr.i.i.i706, align 8, !tbaa !194
  %220 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %219 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)***
  %vtable507 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*** %220, align 8, !tbaa !50
  %vfn508 = getelementptr inbounds void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vtable507, i64 1
  %221 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vfn508, align 8
  tail call void %221(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %219, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.66, i64 0, i64 0), i64 5) #38
  br label %return

sw.bb511:                                         ; preds = %entry
  %m_value512 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %val, i64 0, i32 1
  %boolean = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value512 to i8*
  %222 = load i8, i8* %boolean, align 8, !tbaa !21, !range !90
  %tobool513.not = icmp eq i8 %222, 0
  %_M_ptr.i.i.i629 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %this, i64 0, i32 0, i32 0, i32 0
  %223 = load %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"** %_M_ptr.i.i.i629, align 8, !tbaa !194
  %224 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %223 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)***
  %vtable522 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*** %224, align 8, !tbaa !50
  %vfn523 = getelementptr inbounds void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vtable522, i64 1
  %225 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vfn523, align 8
  br i1 %tobool513.not, label %if.else519, label %if.then514

if.then514:                                       ; preds = %sw.bb511
  tail call void %225(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %223, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.67, i64 0, i64 0), i64 4) #38
  br label %return

if.else519:                                       ; preds = %sw.bb511
  tail call void %225(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %223, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.68, i64 0, i64 0), i64 5) #38
  br label %return

sw.bb525:                                         ; preds = %entry
  %m_value526 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %val, i64 0, i32 1
  %number_integer = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value526 to i64*
  %226 = load i64, i64* %number_integer, align 8, !tbaa !21
  tail call void @_ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE12dump_integerIlLi0EEEvT_(%"class.nlohmann::json_v3_11_1::detail::serializer"* nonnull dereferenceable(644) %this, i64 %226)
  br label %return

sw.bb527:                                         ; preds = %entry
  %m_value528 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %val, i64 0, i32 1
  %number_unsigned = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value528 to i64*
  %227 = load i64, i64* %number_unsigned, align 8, !tbaa !21
  tail call void @_ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE12dump_integerImLi0EEEvT_(%"class.nlohmann::json_v3_11_1::detail::serializer"* nonnull dereferenceable(644) %this, i64 %227)
  br label %return

sw.bb529:                                         ; preds = %entry
  %m_value530 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::basic_json", %"class.nlohmann::json_v3_11_1::basic_json"* %val, i64 0, i32 1
  %number_float = bitcast %"union.nlohmann::json_v3_11_1::basic_json<>::json_value"* %m_value530 to double*
  %228 = load double, double* %number_float, align 8, !tbaa !21
  %arraydecay.i.i.i.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %this, i64 0, i32 1, i32 0, i64 0
  %add.ptr.i.i766 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %this, i64 0, i32 1, i32 0, i64 64
  %call4.i.i = tail call nonnull i8* @_ZN8nlohmann12json_v3_11_16detail8to_charsIdEEPcS3_PKcT_(i8* %arraydecay.i.i.i.i, i8* %add.ptr.i.i766, double %228) #38
  %_M_ptr.i.i.i.i.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %this, i64 0, i32 0, i32 0, i32 0
  %229 = load %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"** %_M_ptr.i.i.i.i.i, align 8, !tbaa !194
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call4.i.i to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %arraydecay.i.i.i.i to i64
  %sub.ptr.sub.i.i = sub i64 %sub.ptr.lhs.cast.i.i, %sub.ptr.rhs.cast.i.i
  %230 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %229 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)***
  %vtable.i.i = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*** %230, align 8, !tbaa !50
  %vfn.i.i = getelementptr inbounds void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vtable.i.i, i64 1
  %231 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vfn.i.i, align 8
  tail call void %231(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %229, i8* nonnull %arraydecay.i.i.i.i, i64 %sub.ptr.sub.i.i) #38
  br label %return

sw.bb531:                                         ; preds = %entry
  %_M_ptr.i.i.i764 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %this, i64 0, i32 0, i32 0, i32 0
  %232 = load %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"** %_M_ptr.i.i.i764, align 8, !tbaa !194
  %233 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %232 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)***
  %vtable534 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*** %233, align 8, !tbaa !50
  %vfn535 = getelementptr inbounds void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vtable534, i64 1
  %234 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vfn535, align 8
  tail call void %234(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %232, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.69, i64 0, i64 0), i64 11) #38
  br label %return

sw.bb536:                                         ; preds = %entry
  %_M_ptr.i.i.i674 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %this, i64 0, i32 0, i32 0, i32 0
  %235 = load %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"** %_M_ptr.i.i.i674, align 8, !tbaa !194
  %236 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %235 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)***
  %vtable539 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*** %236, align 8, !tbaa !50
  %vfn540 = getelementptr inbounds void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vtable539, i64 1
  %237 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vfn540, align 8
  tail call void %237(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %235, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.63, i64 0, i64 0), i64 4) #38
  br label %return

sw.default:                                       ; preds = %entry
  tail call void @__assert_fail(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.68, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.36, i64 0, i64 0), i32 17854, i8* getelementptr inbounds ([192 x i8], [192 x i8]* @__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE4dumpERKSF_bbjj, i64 0, i64 0)) #40
  unreachable

return:                                           ; preds = %sw.bb536, %sw.bb531, %sw.bb529, %sw.bb527, %sw.bb525, %if.else519, %if.then514, %if.else504, %_ZNK8nlohmann12json_v3_11_127byte_container_with_subtypeISt6vectorIhSaIhEEE7subtypeEv.exit, %if.end435, %sw.bb330, %if.then188, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local void @_ZNSt23_Sp_counted_ptr_inplaceIN8nlohmann12json_v3_11_16detail21output_stream_adapterIcEESaIvELN9__gnu_cxx12_Lock_policyE2EED0Ev(%"class.std::_Sp_counted_ptr_inplace"* nonnull dereferenceable(32) %this) unnamed_addr #0 comdat align 2 {
entry:
  %0 = bitcast %"class.std::_Sp_counted_ptr_inplace"* %this to i8*
  tail call void @_ZdlPv(i8* nonnull %0) #41
  ret void
}

; Function Attrs: nounwind uwtable mustprogress
define linkonce_odr dso_local void @_ZNSt23_Sp_counted_ptr_inplaceIN8nlohmann12json_v3_11_16detail21output_stream_adapterIcEESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv(%"class.std::_Sp_counted_ptr_inplace"* nonnull dereferenceable(32) %this) unnamed_addr #5 comdat align 2 {
entry:
  %_M_storage.i = getelementptr inbounds %"class.std::_Sp_counted_ptr_inplace", %"class.std::_Sp_counted_ptr_inplace"* %this, i64 0, i32 1, i32 0
  %0 = bitcast %"struct.__gnu_cxx::__aligned_buffer"* %_M_storage.i to %"class.nlohmann::json_v3_11_1::detail::output_stream_adapter"*
  %1 = bitcast %"struct.__gnu_cxx::__aligned_buffer"* %_M_storage.i to void (%"class.nlohmann::json_v3_11_1::detail::output_stream_adapter"*)***
  %vtable.i.i = load void (%"class.nlohmann::json_v3_11_1::detail::output_stream_adapter"*)**, void (%"class.nlohmann::json_v3_11_1::detail::output_stream_adapter"*)*** %1, align 8, !tbaa !50
  %vfn.i.i = getelementptr inbounds void (%"class.nlohmann::json_v3_11_1::detail::output_stream_adapter"*)*, void (%"class.nlohmann::json_v3_11_1::detail::output_stream_adapter"*)** %vtable.i.i, i64 2
  %2 = load void (%"class.nlohmann::json_v3_11_1::detail::output_stream_adapter"*)*, void (%"class.nlohmann::json_v3_11_1::detail::output_stream_adapter"*)** %vfn.i.i, align 8
  tail call void %2(%"class.nlohmann::json_v3_11_1::detail::output_stream_adapter"* nonnull dereferenceable(16) %0) #38
  ret void
}

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local void @_ZNSt23_Sp_counted_ptr_inplaceIN8nlohmann12json_v3_11_16detail21output_stream_adapterIcEESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv(%"class.std::_Sp_counted_ptr_inplace"* nonnull dereferenceable(32) %this) unnamed_addr #0 comdat align 2 {
_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceIN8nlohmann12json_v3_11_16detail21output_stream_adapterIcEESaIvELN9__gnu_cxx12_Lock_policyE2EEEED2Ev.exit:
  %0 = bitcast %"class.std::_Sp_counted_ptr_inplace"* %this to i8*
  tail call void @_ZdlPv(i8* nonnull %0) #41
  ret void
}

; Function Attrs: nounwind uwtable willreturn mustprogress
define linkonce_odr dso_local i8* @_ZNSt23_Sp_counted_ptr_inplaceIN8nlohmann12json_v3_11_16detail21output_stream_adapterIcEESaIvELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info(%"class.std::_Sp_counted_ptr_inplace"* nonnull dereferenceable(32) %this, %"class.std::type_info"* nonnull align 8 dereferenceable(16) %__ti) unnamed_addr #16 comdat align 2 {
entry:
  %cmp = icmp eq %"class.std::type_info"* %__ti, bitcast ([16 x i8]* @_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag to %"class.std::type_info"*)
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %__name.i = getelementptr inbounds %"class.std::type_info", %"class.std::type_info"* %__ti, i64 0, i32 1
  %0 = load i8*, i8** %__name.i, align 8, !tbaa !378
  %cmp.i = icmp eq i8* %0, getelementptr inbounds ([24 x i8], [24 x i8]* @_ZTSSt19_Sp_make_shared_tag, i64 0, i64 0)
  br i1 %cmp.i, label %if.then, label %if.end.i

if.end.i:                                         ; preds = %lor.lhs.false
  %1 = load i8, i8* %0, align 1, !tbaa !21
  %cmp4.not.i = icmp eq i8 %1, 42
  br i1 %cmp4.not.i, label %cleanup, label %_ZNKSt9type_infoeqERKS_.exit

_ZNKSt9type_infoeqERKS_.exit:                     ; preds = %if.end.i
  %call6.i = tail call i32 @strcmp(i8* nonnull %0, i8* nonnull dereferenceable(24) getelementptr inbounds ([24 x i8], [24 x i8]* @_ZTSSt19_Sp_make_shared_tag, i64 0, i64 0)) #44
  %cmp7.i = icmp eq i32 %call6.i, 0
  br i1 %cmp7.i, label %if.then, label %cleanup

if.then:                                          ; preds = %_ZNKSt9type_infoeqERKS_.exit, %lor.lhs.false, %entry
  %2 = getelementptr inbounds %"class.std::_Sp_counted_ptr_inplace", %"class.std::_Sp_counted_ptr_inplace"* %this, i64 0, i32 1, i32 0, i32 0, i32 0, i64 0
  br label %cleanup

cleanup:                                          ; preds = %if.then, %_ZNKSt9type_infoeqERKS_.exit, %if.end.i
  %retval.0 = phi i8* [ %2, %if.then ], [ null, %_ZNKSt9type_infoeqERKS_.exit ], [ null, %if.end.i ]
  ret i8* %retval.0
}

; Function Attrs: nounwind uwtable willreturn
define linkonce_odr dso_local void @_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EED2Ev(%"class.std::_Sp_counted_base"* nonnull dereferenceable(16) %this) unnamed_addr #31 comdat align 2 {
entry:
  ret void
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #32

; Function Attrs: nounwind uwtable mustprogress
define linkonce_odr dso_local void @_ZN8nlohmann12json_v3_11_16detail21output_stream_adapterIcE15write_characterEc(%"class.nlohmann::json_v3_11_1::detail::output_stream_adapter"* nonnull dereferenceable(16) %this, i8 signext %c) unnamed_addr #5 comdat align 2 {
entry:
  %stream = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::output_stream_adapter", %"class.nlohmann::json_v3_11_1::detail::output_stream_adapter"* %this, i64 0, i32 1
  %0 = load %"class.std::basic_ostream"*, %"class.std::basic_ostream"** %stream, align 8, !tbaa !380
  %call = tail call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSo3putEc(%"class.std::basic_ostream"* nonnull dereferenceable(8) %0, i8 signext %c) #38
  ret void
}

; Function Attrs: nounwind uwtable mustprogress
define linkonce_odr dso_local void @_ZN8nlohmann12json_v3_11_16detail21output_stream_adapterIcE16write_charactersEPKcm(%"class.nlohmann::json_v3_11_1::detail::output_stream_adapter"* nonnull dereferenceable(16) %this, i8* nonnull %s, i64 %length) unnamed_addr #5 comdat align 2 {
entry:
  %stream = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::output_stream_adapter", %"class.nlohmann::json_v3_11_1::detail::output_stream_adapter"* %this, i64 0, i32 1
  %0 = load %"class.std::basic_ostream"*, %"class.std::basic_ostream"** %stream, align 8, !tbaa !380
  %call = tail call nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSo5writeEPKcl(%"class.std::basic_ostream"* nonnull dereferenceable(8) %0, i8* nonnull %s, i64 %length) #38
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define linkonce_odr dso_local void @_ZN8nlohmann12json_v3_11_16detail21output_stream_adapterIcED0Ev(%"class.nlohmann::json_v3_11_1::detail::output_stream_adapter"* nonnull dereferenceable(16) %this) unnamed_addr #25 comdat align 2 {
entry:
  %0 = bitcast %"class.nlohmann::json_v3_11_1::detail::output_stream_adapter"* %this to i8*
  tail call void @_ZdlPv(i8* nonnull %0) #41
  ret void
}

; Function Attrs: nounwind uwtable willreturn
define linkonce_odr dso_local void @_ZN8nlohmann12json_v3_11_16detail23output_adapter_protocolIcED2Ev(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %this) unnamed_addr #31 comdat align 2 {
entry:
  ret void
}

declare dso_local nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSo3putEc(%"class.std::basic_ostream"* nonnull dereferenceable(8), i8 signext) local_unnamed_addr #3

declare dso_local nonnull align 8 dereferenceable(8) %"class.std::basic_ostream"* @_ZNSo5writeEPKcl(%"class.std::basic_ostream"* nonnull dereferenceable(8), i8*, i64) local_unnamed_addr #3

; Function Attrs: noinline nounwind uwtable mustprogress
define linkonce_odr dso_local void @_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE24_M_release_last_use_coldEv(%"class.std::_Sp_counted_base"* nonnull dereferenceable(16) %this) local_unnamed_addr #33 comdat align 2 {
entry:
  %0 = bitcast %"class.std::_Sp_counted_base"* %this to void (%"class.std::_Sp_counted_base"*)***
  %vtable.i = load void (%"class.std::_Sp_counted_base"*)**, void (%"class.std::_Sp_counted_base"*)*** %0, align 8, !tbaa !50
  %vfn.i = getelementptr inbounds void (%"class.std::_Sp_counted_base"*)*, void (%"class.std::_Sp_counted_base"*)** %vtable.i, i64 2
  %1 = load void (%"class.std::_Sp_counted_base"*)*, void (%"class.std::_Sp_counted_base"*)** %vfn.i, align 8
  tail call void %1(%"class.std::_Sp_counted_base"* nonnull dereferenceable(16) %this) #38
  %_M_weak_count.i = getelementptr inbounds %"class.std::_Sp_counted_base", %"class.std::_Sp_counted_base"* %this, i64 0, i32 2
  %2 = load i8, i8* @__libc_single_threaded, align 1, !tbaa !21
  %tobool.i.not.i.i = icmp eq i8 %2, 0
  br i1 %tobool.i.not.i.i, label %if.else.i.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %entry
  %3 = load i32, i32* %_M_weak_count.i, align 4, !tbaa !59
  %add.i.i.i = add nsw i32 %3, -1
  store i32 %add.i.i.i, i32* %_M_weak_count.i, align 4, !tbaa !59
  br label %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i

if.else.i.i:                                      ; preds = %entry
  %4 = atomicrmw volatile add i32* %_M_weak_count.i, i32 -1 acq_rel
  br label %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i

_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i: ; preds = %if.else.i.i, %if.then.i.i
  %retval.0.i.i = phi i32 [ %3, %if.then.i.i ], [ %4, %if.else.i.i ]
  %cmp.i = icmp eq i32 %retval.0.i.i, 1
  br i1 %cmp.i, label %if.then.i, label %_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE19_M_release_last_useEv.exit

if.then.i:                                        ; preds = %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i
  %vtable2.i = load void (%"class.std::_Sp_counted_base"*)**, void (%"class.std::_Sp_counted_base"*)*** %0, align 8, !tbaa !50
  %vfn3.i = getelementptr inbounds void (%"class.std::_Sp_counted_base"*)*, void (%"class.std::_Sp_counted_base"*)** %vtable2.i, i64 3
  %5 = load void (%"class.std::_Sp_counted_base"*)*, void (%"class.std::_Sp_counted_base"*)** %vfn3.i, align 8
  tail call void %5(%"class.std::_Sp_counted_base"* nonnull dereferenceable(16) %this) #38
  br label %_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE19_M_release_last_useEv.exit

_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE19_M_release_last_useEv.exit: ; preds = %if.then.i, %_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii.exit.i
  ret void
}

; Function Attrs: nounwind
declare dso_local %struct.lconv* @localeconv() local_unnamed_addr #6

declare dso_local void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEmc(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32), i64, i8 signext) local_unnamed_addr #3

declare dso_local void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6resizeEmc(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32), i64, i8 signext) local_unnamed_addr #3

; Function Attrs: nounwind uwtable mustprogress
define linkonce_odr dso_local void @_ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE12dump_escapedERKSB_b(%"class.nlohmann::json_v3_11_1::detail::serializer"* nonnull dereferenceable(644) %this, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %s, i1 zeroext %ensure_ascii) local_unnamed_addr #5 comdat align 2 {
entry:
  %_M_string_length.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %s, i64 0, i32 1
  %0 = load i64, i64* %_M_string_length.i, align 8, !tbaa !19
  %cmp311.not = icmp eq i64 %0, 0
  br i1 %cmp311.not, label %if.end200, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %entry
  %_M_p.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %s, i64 0, i32 0, i32 0
  %error_handler = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %this, i64 0, i32 9
  %_M_ptr.i.i.i271 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %this, i64 0, i32 0, i32 0, i32 0
  %arraydecay.i.i270 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %this, i64 0, i32 5, i32 0, i64 0
  br label %for.body

for.cond.cleanup:                                 ; preds = %sw.epilog152
  %state.1.lcssa = phi i8 [ %state.1, %sw.epilog152 ]
  %bytes_after_last_accept.2.lcssa = phi i64 [ %bytes_after_last_accept.2, %sw.epilog152 ]
  %bytes.7.lcssa = phi i64 [ %bytes.7, %sw.epilog152 ]
  %cmp155 = icmp eq i8 %state.1.lcssa, 0
  br i1 %cmp155, label %if.then159, label %if.else169, !prof !172

for.body:                                         ; preds = %sw.epilog152, %for.body.lr.ph
  %bytes.0317 = phi i64 [ 0, %for.body.lr.ph ], [ %bytes.7, %sw.epilog152 ]
  %i.0316 = phi i64 [ 0, %for.body.lr.ph ], [ %inc153, %sw.epilog152 ]
  %undumped_chars.0315 = phi i64 [ 0, %for.body.lr.ph ], [ %undumped_chars.1, %sw.epilog152 ]
  %bytes_after_last_accept.0314 = phi i64 [ 0, %for.body.lr.ph ], [ %bytes_after_last_accept.2, %sw.epilog152 ]
  %state.0313 = phi i8 [ 0, %for.body.lr.ph ], [ %state.1, %sw.epilog152 ]
  %codepoint.0312 = phi i32 [ 0, %for.body.lr.ph ], [ %cond.i, %sw.epilog152 ]
  %1 = load i8*, i8** %_M_p.i.i, align 8, !tbaa !17
  %arrayidx.i = getelementptr inbounds i8, i8* %1, i64 %i.0316
  %2 = load i8, i8* %arrayidx.i, align 1, !tbaa !21
  %conv.i = zext i8 %2 to i64
  %arrayidx.i.i30.i = getelementptr inbounds %"struct.std::array.159", %"struct.std::array.159"* @_ZZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE6decodeERhRjhE5utf8d, i64 0, i32 0, i64 %conv.i
  %3 = load i8, i8* %arrayidx.i.i30.i, align 1, !tbaa !21
  %cmp4.not.i = icmp eq i8 %state.0313, 0
  br i1 %cmp4.not.i, label %cond.false7.i, label %cond.true5.i

cond.true5.i:                                     ; preds = %for.body
  %4 = and i8 %2, 63
  %and.i = zext i8 %4 to i32
  %shl.i = shl i32 %codepoint.0312, 6
  %or.i = or i32 %shl.i, %and.i
  br label %cond.end11.i

cond.false7.i:                                    ; preds = %for.body
  %conv8.i = zext i8 %3 to i32
  %shr.i = lshr i32 255, %conv8.i
  %conv9.i = zext i8 %2 to i32
  %and10.i = and i32 %shr.i, %conv9.i
  br label %cond.end11.i

cond.end11.i:                                     ; preds = %cond.false7.i, %cond.true5.i
  %cond.i = phi i32 [ %or.i, %cond.true5.i ], [ %and10.i, %cond.false7.i ]
  %conv12.i = zext i8 %state.0313 to i64
  %mul.i = shl nuw nsw i64 %conv12.i, 4
  %conv13.i = zext i8 %3 to i64
  %add.i = or i64 %conv13.i, 256
  %add14.i = add nuw nsw i64 %add.i, %mul.i
  %cmp15.i = icmp ult i64 %add14.i, 400
  br i1 %cmp15.i, label %_ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE6decodeERhRjh.exit, label %cond.false17.i

cond.false17.i:                                   ; preds = %cond.end11.i
  tail call void @__assert_fail(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.75, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.36, i64 0, i64 0), i32 18418, i8* getelementptr inbounds ([175 x i8], [175 x i8]* @__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE6decodeERhRjh, i64 0, i64 0)) #40
  unreachable

_ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE6decodeERhRjh.exit: ; preds = %cond.end11.i
  %arrayidx.i.i.i = getelementptr inbounds %"struct.std::array.159", %"struct.std::array.159"* @_ZZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE6decodeERhRjhE5utf8d, i64 0, i32 0, i64 %add14.i
  %5 = load i8, i8* %arrayidx.i.i.i, align 1, !tbaa !21
  switch i8 %5, label %sw.default143 [
    i8 0, label %sw.bb
    i8 1, label %sw.bb85
  ]

sw.bb:                                            ; preds = %_ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE6decodeERhRjh.exit
  switch i32 %cond.i, label %sw.default [
    i32 8, label %sw.bb4
    i32 9, label %sw.bb9
    i32 10, label %sw.bb16
    i32 12, label %sw.bb23
    i32 13, label %sw.bb30
    i32 34, label %sw.bb37
    i32 92, label %sw.bb44
  ]

sw.bb4:                                           ; preds = %sw.bb
  %inc = add i64 %bytes.0317, 1
  %arrayidx.i.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %this, i64 0, i32 5, i32 0, i64 %bytes.0317
  store i8 92, i8* %arrayidx.i.i, align 1, !tbaa !21
  %inc7 = add i64 %bytes.0317, 2
  %arrayidx.i.i258 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %this, i64 0, i32 5, i32 0, i64 %inc
  store i8 98, i8* %arrayidx.i.i258, align 1, !tbaa !21
  br label %sw.epilog

sw.bb9:                                           ; preds = %sw.bb
  %inc11 = add i64 %bytes.0317, 1
  %arrayidx.i.i260 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %this, i64 0, i32 5, i32 0, i64 %bytes.0317
  store i8 92, i8* %arrayidx.i.i260, align 1, !tbaa !21
  %inc14 = add i64 %bytes.0317, 2
  %arrayidx.i.i263 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %this, i64 0, i32 5, i32 0, i64 %inc11
  store i8 116, i8* %arrayidx.i.i263, align 1, !tbaa !21
  br label %sw.epilog

sw.bb16:                                          ; preds = %sw.bb
  %inc18 = add i64 %bytes.0317, 1
  %arrayidx.i.i269 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %this, i64 0, i32 5, i32 0, i64 %bytes.0317
  store i8 92, i8* %arrayidx.i.i269, align 1, !tbaa !21
  %inc21 = add i64 %bytes.0317, 2
  %arrayidx.i.i281 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %this, i64 0, i32 5, i32 0, i64 %inc18
  store i8 110, i8* %arrayidx.i.i281, align 1, !tbaa !21
  br label %sw.epilog

sw.bb23:                                          ; preds = %sw.bb
  %inc25 = add i64 %bytes.0317, 1
  %arrayidx.i.i296 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %this, i64 0, i32 5, i32 0, i64 %bytes.0317
  store i8 92, i8* %arrayidx.i.i296, align 1, !tbaa !21
  %inc28 = add i64 %bytes.0317, 2
  %arrayidx.i.i295 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %this, i64 0, i32 5, i32 0, i64 %inc25
  store i8 102, i8* %arrayidx.i.i295, align 1, !tbaa !21
  br label %sw.epilog

sw.bb30:                                          ; preds = %sw.bb
  %inc32 = add i64 %bytes.0317, 1
  %arrayidx.i.i294 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %this, i64 0, i32 5, i32 0, i64 %bytes.0317
  store i8 92, i8* %arrayidx.i.i294, align 1, !tbaa !21
  %inc35 = add i64 %bytes.0317, 2
  %arrayidx.i.i293 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %this, i64 0, i32 5, i32 0, i64 %inc32
  store i8 114, i8* %arrayidx.i.i293, align 1, !tbaa !21
  br label %sw.epilog

sw.bb37:                                          ; preds = %sw.bb
  %inc39 = add i64 %bytes.0317, 1
  %arrayidx.i.i292 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %this, i64 0, i32 5, i32 0, i64 %bytes.0317
  store i8 92, i8* %arrayidx.i.i292, align 1, !tbaa !21
  %inc42 = add i64 %bytes.0317, 2
  %arrayidx.i.i291 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %this, i64 0, i32 5, i32 0, i64 %inc39
  store i8 34, i8* %arrayidx.i.i291, align 1, !tbaa !21
  br label %sw.epilog

sw.bb44:                                          ; preds = %sw.bb
  %inc46 = add i64 %bytes.0317, 1
  %arrayidx.i.i290 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %this, i64 0, i32 5, i32 0, i64 %bytes.0317
  store i8 92, i8* %arrayidx.i.i290, align 1, !tbaa !21
  %inc49 = add i64 %bytes.0317, 2
  %arrayidx.i.i289 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %this, i64 0, i32 5, i32 0, i64 %inc46
  store i8 92, i8* %arrayidx.i.i289, align 1, !tbaa !21
  br label %sw.epilog

sw.default:                                       ; preds = %sw.bb
  %cmp51 = icmp ult i32 %cond.i, 32
  %cmp52 = icmp ugt i32 %cond.i, 126
  %or.cond = and i1 %cmp52, %ensure_ascii
  %or.cond256 = or i1 %cmp51, %or.cond
  br i1 %or.cond256, label %if.then, label %if.else71

if.then:                                          ; preds = %sw.default
  %cmp53 = icmp ult i32 %cond.i, 65536
  %add.ptr = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %this, i64 0, i32 5, i32 0, i64 %bytes.0317
  br i1 %cmp53, label %if.then54, label %if.else

if.then54:                                        ; preds = %if.then
  %call59 = tail call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull dereferenceable(1) %add.ptr, i64 7, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.70, i64 0, i64 0), i32 %cond.i) #38
  %add = add i64 %bytes.0317, 6
  br label %sw.epilog

if.else:                                          ; preds = %if.then
  %shr = lshr i32 %cond.i, 10
  %conv64 = add nuw nsw i32 %shr, 55232
  %conv65 = and i32 %conv64, 65535
  %6 = and i32 %cond.i, 1023
  %conv67 = or i32 %6, 56320
  %call69 = tail call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull dereferenceable(1) %add.ptr, i64 13, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.71, i64 0, i64 0), i32 %conv65, i32 %conv67) #38
  %add70 = add i64 %bytes.0317, 12
  br label %sw.epilog

if.else71:                                        ; preds = %sw.default
  %inc74 = add i64 %bytes.0317, 1
  %arrayidx.i.i284 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %this, i64 0, i32 5, i32 0, i64 %bytes.0317
  store i8 %2, i8* %arrayidx.i.i284, align 1, !tbaa !21
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.else71, %if.else, %if.then54, %sw.bb44, %sw.bb37, %sw.bb30, %sw.bb23, %sw.bb16, %sw.bb9, %sw.bb4
  %bytes.1 = phi i64 [ %add, %if.then54 ], [ %add70, %if.else ], [ %inc74, %if.else71 ], [ %inc49, %sw.bb44 ], [ %inc42, %sw.bb37 ], [ %inc35, %sw.bb30 ], [ %inc28, %sw.bb23 ], [ %inc21, %sw.bb16 ], [ %inc14, %sw.bb9 ], [ %inc7, %sw.bb4 ]
  %sub = sub i64 512, %bytes.1
  %cmp79 = icmp ult i64 %sub, 13
  br i1 %cmp79, label %if.then80, label %sw.epilog152

if.then80:                                        ; preds = %sw.epilog
  %7 = load %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"** %_M_ptr.i.i.i271, align 8, !tbaa !194
  %8 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %7 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)***
  %vtable = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*** %8, align 8, !tbaa !50
  %vfn = getelementptr inbounds void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vtable, i64 1
  %9 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vfn, align 8
  tail call void %9(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %7, i8* nonnull %arraydecay.i.i270, i64 %bytes.1) #38
  br label %sw.epilog152

sw.bb85:                                          ; preds = %_ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE6decodeERhRjh.exit
  %10 = load i32, i32* %error_handler, align 8, !tbaa !210
  switch i32 %10, label %sw.default141 [
    i32 0, label %sw.bb86
    i32 2, label %sw.bb87
    i32 1, label %sw.bb87
  ]

sw.bb86:                                          ; preds = %sw.bb85
  tail call void @abort() #40
  unreachable

sw.bb87:                                          ; preds = %sw.bb85, %sw.bb85
  %cmp88.not = icmp ne i64 %undumped_chars.0315, 0
  %dec = sext i1 %cmp88.not to i64
  %spec.select = add i64 %i.0316, %dec
  %cmp92 = icmp eq i32 %10, 1
  br i1 %cmp92, label %if.then93, label %sw.epilog152

if.then93:                                        ; preds = %sw.bb87
  %inc97 = add i64 %bytes_after_last_accept.0314, 1
  %arrayidx.i.i280 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %this, i64 0, i32 5, i32 0, i64 %bytes_after_last_accept.0314
  br i1 %ensure_ascii, label %if.then95, label %if.else114

if.then95:                                        ; preds = %if.then93
  store i8 92, i8* %arrayidx.i.i280, align 1, !tbaa !21
  %inc100 = add i64 %bytes_after_last_accept.0314, 2
  %arrayidx.i.i279 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %this, i64 0, i32 5, i32 0, i64 %inc97
  store i8 117, i8* %arrayidx.i.i279, align 1, !tbaa !21
  %inc103 = add i64 %bytes_after_last_accept.0314, 3
  %arrayidx.i.i278 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %this, i64 0, i32 5, i32 0, i64 %inc100
  store i8 102, i8* %arrayidx.i.i278, align 1, !tbaa !21
  %inc106 = add i64 %bytes_after_last_accept.0314, 4
  %arrayidx.i.i277 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %this, i64 0, i32 5, i32 0, i64 %inc103
  store i8 102, i8* %arrayidx.i.i277, align 1, !tbaa !21
  br label %if.end127

if.else114:                                       ; preds = %if.then93
  store i8 -17, i8* %arrayidx.i.i280, align 1, !tbaa !21
  br label %if.end127

if.end127:                                        ; preds = %if.else114, %if.then95
  %.sink329 = phi i64 [ 2, %if.else114 ], [ 5, %if.then95 ]
  %inc97.sink = phi i64 [ %inc97, %if.else114 ], [ %inc106, %if.then95 ]
  %.sink328 = phi i8 [ -65, %if.else114 ], [ 102, %if.then95 ]
  %.sink327 = phi i64 [ 3, %if.else114 ], [ 6, %if.then95 ]
  %.sink = phi i8 [ -67, %if.else114 ], [ 100, %if.then95 ]
  %inc121 = add i64 %bytes_after_last_accept.0314, %.sink329
  %arrayidx.i.i273 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %this, i64 0, i32 5, i32 0, i64 %inc97.sink
  store i8 %.sink328, i8* %arrayidx.i.i273, align 1, !tbaa !21
  %inc125 = add i64 %bytes_after_last_accept.0314, %.sink327
  %arrayidx.i.i272 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %this, i64 0, i32 5, i32 0, i64 %inc121
  store i8 %.sink, i8* %arrayidx.i.i272, align 1, !tbaa !21
  %sub130 = sub i64 512, %inc125
  %cmp131 = icmp ult i64 %sub130, 13
  br i1 %cmp131, label %if.then132, label %sw.epilog152

if.then132:                                       ; preds = %if.end127
  %11 = load %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"** %_M_ptr.i.i.i271, align 8, !tbaa !194
  %12 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %11 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)***
  %vtable137 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*** %12, align 8, !tbaa !50
  %vfn138 = getelementptr inbounds void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vtable137, i64 1
  %13 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vfn138, align 8
  tail call void %13(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %11, i8* nonnull %arraydecay.i.i270, i64 %inc125) #38
  br label %sw.epilog152

sw.default141:                                    ; preds = %sw.bb85
  tail call void @__assert_fail(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.68, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.36, i64 0, i64 0), i32 18046, i8* getelementptr inbounds ([173 x i8], [173 x i8]* @__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE12dump_escapedERKSB_b, i64 0, i64 0)) #40
  unreachable

sw.default143:                                    ; preds = %_ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE6decodeERhRjh.exit
  br i1 %ensure_ascii, label %if.end150, label %if.then145

if.then145:                                       ; preds = %sw.default143
  %inc148 = add i64 %bytes.0317, 1
  %arrayidx.i.i266 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %this, i64 0, i32 5, i32 0, i64 %bytes.0317
  store i8 %2, i8* %arrayidx.i.i266, align 1, !tbaa !21
  br label %if.end150

if.end150:                                        ; preds = %if.then145, %sw.default143
  %bytes.6 = phi i64 [ %bytes.0317, %sw.default143 ], [ %inc148, %if.then145 ]
  %inc151 = add i64 %undumped_chars.0315, 1
  br label %sw.epilog152

sw.epilog152:                                     ; preds = %if.end150, %if.then132, %if.end127, %sw.bb87, %if.then80, %sw.epilog
  %state.1 = phi i8 [ %5, %if.end150 ], [ 0, %if.then80 ], [ 0, %sw.epilog ], [ 0, %if.end127 ], [ 0, %if.then132 ], [ 0, %sw.bb87 ]
  %bytes_after_last_accept.2 = phi i64 [ %bytes_after_last_accept.0314, %if.end150 ], [ 0, %if.then80 ], [ %bytes.1, %sw.epilog ], [ %inc125, %if.end127 ], [ 0, %if.then132 ], [ %bytes_after_last_accept.0314, %sw.bb87 ]
  %undumped_chars.1 = phi i64 [ %inc151, %if.end150 ], [ 0, %if.then80 ], [ 0, %sw.epilog ], [ 0, %if.end127 ], [ 0, %if.then132 ], [ 0, %sw.bb87 ]
  %i.2 = phi i64 [ %i.0316, %if.end150 ], [ %i.0316, %if.then80 ], [ %i.0316, %sw.epilog ], [ %spec.select, %if.end127 ], [ %spec.select, %if.then132 ], [ %spec.select, %sw.bb87 ]
  %bytes.7 = phi i64 [ %bytes.6, %if.end150 ], [ 0, %if.then80 ], [ %bytes.1, %sw.epilog ], [ %inc125, %if.end127 ], [ 0, %if.then132 ], [ %bytes_after_last_accept.0314, %sw.bb87 ]
  %inc153 = add i64 %i.2, 1
  %14 = load i64, i64* %_M_string_length.i, align 8, !tbaa !19
  %cmp = icmp ult i64 %inc153, %14
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !llvm.loop !382

if.then159:                                       ; preds = %for.cond.cleanup
  %cmp160.not = icmp eq i64 %bytes.7.lcssa, 0
  br i1 %cmp160.not, label %if.end200, label %if.then161

if.then161:                                       ; preds = %if.then159
  %15 = load %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"** %_M_ptr.i.i.i271, align 8, !tbaa !194
  %16 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %15 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)***
  %vtable166 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*** %16, align 8, !tbaa !50
  %vfn167 = getelementptr inbounds void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vtable166, i64 1
  %17 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vfn167, align 8
  tail call void %17(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %15, i8* nonnull %arraydecay.i.i270, i64 %bytes.7.lcssa) #38
  br label %if.end200

if.else169:                                       ; preds = %for.cond.cleanup
  %18 = load i32, i32* %error_handler, align 8, !tbaa !210
  switch i32 %18, label %sw.default198 [
    i32 0, label %sw.bb171
    i32 2, label %sw.bb172
    i32 1, label %sw.bb179
  ]

sw.bb171:                                         ; preds = %if.else169
  tail call void @abort() #40
  unreachable

sw.bb172:                                         ; preds = %if.else169
  %19 = load %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"** %_M_ptr.i.i.i271, align 8, !tbaa !194
  %20 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %19 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)***
  %vtable177 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*** %20, align 8, !tbaa !50
  %vfn178 = getelementptr inbounds void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vtable177, i64 1
  %21 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vfn178, align 8
  tail call void %21(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %19, i8* nonnull %arraydecay.i.i270, i64 %bytes_after_last_accept.2.lcssa) #38
  br label %if.end200

sw.bb179:                                         ; preds = %if.else169
  %22 = load %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"** %_M_ptr.i.i.i271, align 8, !tbaa !194
  %23 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %22 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)***
  %vtable184 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*** %23, align 8, !tbaa !50
  %vfn185 = getelementptr inbounds void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vtable184, i64 1
  %24 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vfn185, align 8
  tail call void %24(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %22, i8* nonnull %arraydecay.i.i270, i64 %bytes_after_last_accept.2.lcssa) #38
  %25 = load %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"** %_M_ptr.i.i.i271, align 8, !tbaa !194
  %26 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %25 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)***
  %vtable190 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*** %26, align 8, !tbaa !50
  %vfn191 = getelementptr inbounds void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vtable190, i64 1
  %27 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vfn191, align 8
  br i1 %ensure_ascii, label %if.then187, label %if.else192

if.then187:                                       ; preds = %sw.bb179
  tail call void %27(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %25, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.72, i64 0, i64 0), i64 6) #38
  br label %if.end200

if.else192:                                       ; preds = %sw.bb179
  tail call void %27(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %25, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.73, i64 0, i64 0), i64 3) #38
  br label %if.end200

sw.default198:                                    ; preds = %if.else169
  tail call void @__assert_fail(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.68, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.36, i64 0, i64 0), i32 18100, i8* getelementptr inbounds ([173 x i8], [173 x i8]* @__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE12dump_escapedERKSB_b, i64 0, i64 0)) #40
  unreachable

if.end200:                                        ; preds = %if.else192, %if.then187, %sw.bb172, %if.then161, %if.then159, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local void @_ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE12dump_integerIhLi0EEEvT_(%"class.nlohmann::json_v3_11_1::detail::serializer"* nonnull dereferenceable(644) %this, i8 zeroext %x) local_unnamed_addr #0 comdat align 2 {
entry:
  %cmp = icmp eq i8 %x, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %_M_ptr.i.i.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %this, i64 0, i32 0, i32 0, i32 0
  %0 = load %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"** %_M_ptr.i.i.i, align 8, !tbaa !194
  %1 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %0 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)***
  %vtable = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)*** %1, align 8, !tbaa !50
  %2 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)** %vtable, align 8
  tail call void %2(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %0, i8 signext 48) #38
  br label %return

if.else:                                          ; preds = %entry
  %arraydecay.i.i.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %this, i64 0, i32 1, i32 0, i64 0
  %conv8 = zext i8 %x to i64
  %cmp26.i = icmp ult i8 %x, 10
  br i1 %cmp26.i, label %cond.end.thread, label %if.end.i

cond.end.thread:                                  ; preds = %if.else
  %add.ptr117 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %this, i64 0, i32 1, i32 0, i64 1
  br label %while.end

if.end.i:                                         ; preds = %if.end12.i, %if.else
  %n_digits.028.i = phi i32 [ %add13.i, %if.end12.i ], [ 1, %if.else ]
  %x.addr.027.i = phi i64 [ %div.i, %if.end12.i ], [ %conv8, %if.else ]
  %cmp2.i = icmp ult i64 %x.addr.027.i, 100
  br i1 %cmp2.i, label %if.then3.i, label %if.end4.i

if.then3.i:                                       ; preds = %if.end.i
  %n_digits.028.i.lcssa = phi i32 [ %n_digits.028.i, %if.end.i ]
  %add.i = add i32 %n_digits.028.i.lcssa, 1
  br label %if.end10

if.end4.i:                                        ; preds = %if.end.i
  %cmp5.i = icmp ult i64 %x.addr.027.i, 1000
  br i1 %cmp5.i, label %if.then6.i, label %if.end8.i

if.then6.i:                                       ; preds = %if.end4.i
  %n_digits.028.i.lcssa4 = phi i32 [ %n_digits.028.i, %if.end4.i ]
  %add7.i = add i32 %n_digits.028.i.lcssa4, 2
  br label %if.end10

if.end8.i:                                        ; preds = %if.end4.i
  %cmp9.i = icmp ult i64 %x.addr.027.i, 10000
  br i1 %cmp9.i, label %if.then10.i, label %if.end12.i

if.then10.i:                                      ; preds = %if.end8.i
  %n_digits.028.i.lcssa5 = phi i32 [ %n_digits.028.i, %if.end8.i ]
  %add11.i = add i32 %n_digits.028.i.lcssa5, 3
  br label %if.end10

if.end12.i:                                       ; preds = %if.end8.i
  %div.i = udiv i64 %x.addr.027.i, 10000
  %add13.i = add i32 %n_digits.028.i, 4
  %cmp.i = icmp ult i64 %x.addr.027.i, 100000
  br i1 %cmp.i, label %if.end10, label %if.end.i, !llvm.loop !383

if.end10:                                         ; preds = %if.end12.i, %if.then10.i, %if.then6.i, %if.then3.i
  %n_chars.0 = phi i32 [ %add.i, %if.then3.i ], [ %add7.i, %if.then6.i ], [ %add11.i, %if.then10.i ], [ %add13.i, %if.end12.i ]
  %conv11 = zext i32 %n_chars.0 to i64
  %cmp14 = icmp ult i32 %n_chars.0, 63
  br i1 %cmp14, label %cond.end, label %cond.false

cond.false:                                       ; preds = %if.end10
  tail call void @__assert_fail(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.76, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.36, i64 0, i64 0), i32 18228, i8* getelementptr inbounds ([153 x i8], [153 x i8]* @__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE12dump_integerIhLi0EEEvT_, i64 0, i64 0)) #40
  unreachable

cond.end:                                         ; preds = %if.end10
  %add.ptr = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %this, i64 0, i32 1, i32 0, i64 %conv11
  %cmp15105 = icmp ugt i8 %x, 99
  br i1 %cmp15105, label %while.body, label %while.end

while.body:                                       ; preds = %while.body, %cond.end
  %buffer_ptr.0107 = phi i8* [ %incdec.ptr23, %while.body ], [ %add.ptr, %cond.end ]
  %abs_value.1106 = phi i64 [ %div, %while.body ], [ %conv8, %cond.end ]
  %rem = urem i64 %abs_value.1106, 100
  %div = udiv i64 %abs_value.1106, 100
  %arrayidx.i.i79 = getelementptr inbounds %"struct.std::array.160", %"struct.std::array.160"* @_ZZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE12dump_integerIhLi0EEEvT_E12digits_to_99, i64 0, i32 0, i64 %rem, i32 0, i64 1
  %3 = load i8, i8* %arrayidx.i.i79, align 1, !tbaa !21
  %incdec.ptr = getelementptr inbounds i8, i8* %buffer_ptr.0107, i64 -1
  store i8 %3, i8* %incdec.ptr, align 1, !tbaa !21
  %arrayidx.i.i77 = getelementptr inbounds %"struct.std::array.160", %"struct.std::array.160"* @_ZZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE12dump_integerIhLi0EEEvT_E12digits_to_99, i64 0, i32 0, i64 %rem, i32 0, i64 0
  %4 = load i8, i8* %arrayidx.i.i77, align 1, !tbaa !21
  %incdec.ptr23 = getelementptr inbounds i8, i8* %buffer_ptr.0107, i64 -2
  store i8 %4, i8* %incdec.ptr23, align 1, !tbaa !21
  %cmp15 = icmp ugt i64 %abs_value.1106, 9999
  br i1 %cmp15, label %while.body, label %while.end, !llvm.loop !384

while.end:                                        ; preds = %while.body, %cond.end, %cond.end.thread
  %conv11115119 = phi i64 [ %conv11, %cond.end ], [ 1, %cond.end.thread ], [ %conv11, %while.body ]
  %abs_value.1.lcssa = phi i64 [ %conv8, %cond.end ], [ %conv8, %cond.end.thread ], [ %div, %while.body ]
  %buffer_ptr.0.lcssa = phi i8* [ %add.ptr, %cond.end ], [ %add.ptr117, %cond.end.thread ], [ %incdec.ptr23, %while.body ]
  %cmp24 = icmp ugt i64 %abs_value.1.lcssa, 9
  br i1 %cmp24, label %if.then25, label %if.else36

if.then25:                                        ; preds = %while.end
  %arrayidx.i.i75 = getelementptr inbounds %"struct.std::array.160", %"struct.std::array.160"* @_ZZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE12dump_integerIhLi0EEEvT_E12digits_to_99, i64 0, i32 0, i64 %abs_value.1.lcssa, i32 0, i64 1
  %5 = load i8, i8* %arrayidx.i.i75, align 1, !tbaa !21
  %incdec.ptr31 = getelementptr inbounds i8, i8* %buffer_ptr.0.lcssa, i64 -1
  store i8 %5, i8* %incdec.ptr31, align 1, !tbaa !21
  %arrayidx.i.i = getelementptr inbounds %"struct.std::array.160", %"struct.std::array.160"* @_ZZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE12dump_integerIhLi0EEEvT_E12digits_to_99, i64 0, i32 0, i64 %abs_value.1.lcssa, i32 0, i64 0
  %6 = load i8, i8* %arrayidx.i.i, align 1, !tbaa !21
  br label %if.end40

if.else36:                                        ; preds = %while.end
  %7 = trunc i64 %abs_value.1.lcssa to i8
  %conv38 = add nuw nsw i8 %7, 48
  br label %if.end40

if.end40:                                         ; preds = %if.else36, %if.then25
  %.sink = phi i64 [ -1, %if.else36 ], [ -2, %if.then25 ]
  %conv38.sink = phi i8 [ %conv38, %if.else36 ], [ %6, %if.then25 ]
  %incdec.ptr39 = getelementptr inbounds i8, i8* %buffer_ptr.0.lcssa, i64 %.sink
  store i8 %conv38.sink, i8* %incdec.ptr39, align 1, !tbaa !21
  %_M_ptr.i.i.i73 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %this, i64 0, i32 0, i32 0, i32 0
  %8 = load %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"** %_M_ptr.i.i.i73, align 8, !tbaa !194
  %9 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %8 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)***
  %vtable46 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*** %9, align 8, !tbaa !50
  %vfn47 = getelementptr inbounds void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vtable46, i64 1
  %10 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vfn47, align 8
  tail call void %10(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %8, i8* nonnull %arraydecay.i.i.i, i64 %conv11115119) #38
  br label %return

return:                                           ; preds = %if.end40, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local void @_ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE12dump_integerImLi0EEEvT_(%"class.nlohmann::json_v3_11_1::detail::serializer"* nonnull dereferenceable(644) %this, i64 %x) local_unnamed_addr #0 comdat align 2 {
entry:
  %cmp = icmp eq i64 %x, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %_M_ptr.i.i.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %this, i64 0, i32 0, i32 0, i32 0
  %0 = load %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"** %_M_ptr.i.i.i, align 8, !tbaa !194
  %1 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %0 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)***
  %vtable = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)*** %1, align 8, !tbaa !50
  %2 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)** %vtable, align 8
  tail call void %2(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %0, i8 signext 48) #38
  br label %return

if.else:                                          ; preds = %entry
  %arraydecay.i.i.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %this, i64 0, i32 1, i32 0, i64 0
  %cmp26.i = icmp ult i64 %x, 10
  br i1 %cmp26.i, label %while.end.thread, label %if.end.i

while.end.thread:                                 ; preds = %if.else
  %add.ptr115 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %this, i64 0, i32 1, i32 0, i64 1
  br label %if.else33

if.end.i:                                         ; preds = %if.end12.i, %if.else
  %n_digits.028.i = phi i32 [ %add13.i, %if.end12.i ], [ 1, %if.else ]
  %x.addr.027.i = phi i64 [ %div.i, %if.end12.i ], [ %x, %if.else ]
  %cmp2.i = icmp ult i64 %x.addr.027.i, 100
  br i1 %cmp2.i, label %if.then3.i, label %if.end4.i

if.then3.i:                                       ; preds = %if.end.i
  %n_digits.028.i.lcssa = phi i32 [ %n_digits.028.i, %if.end.i ]
  %add.i = add i32 %n_digits.028.i.lcssa, 1
  br label %if.end8

if.end4.i:                                        ; preds = %if.end.i
  %cmp5.i = icmp ult i64 %x.addr.027.i, 1000
  br i1 %cmp5.i, label %if.then6.i, label %if.end8.i

if.then6.i:                                       ; preds = %if.end4.i
  %n_digits.028.i.lcssa4 = phi i32 [ %n_digits.028.i, %if.end4.i ]
  %add7.i = add i32 %n_digits.028.i.lcssa4, 2
  br label %if.end8

if.end8.i:                                        ; preds = %if.end4.i
  %cmp9.i = icmp ult i64 %x.addr.027.i, 10000
  br i1 %cmp9.i, label %if.then10.i, label %if.end12.i

if.then10.i:                                      ; preds = %if.end8.i
  %n_digits.028.i.lcssa5 = phi i32 [ %n_digits.028.i, %if.end8.i ]
  %add11.i = add i32 %n_digits.028.i.lcssa5, 3
  br label %if.end8

if.end12.i:                                       ; preds = %if.end8.i
  %div.i = udiv i64 %x.addr.027.i, 10000
  %add13.i = add i32 %n_digits.028.i, 4
  %cmp.i = icmp ult i64 %x.addr.027.i, 100000
  br i1 %cmp.i, label %if.end8, label %if.end.i, !llvm.loop !383

if.end8:                                          ; preds = %if.end12.i, %if.then10.i, %if.then6.i, %if.then3.i
  %retval.0.i = phi i32 [ %add.i, %if.then3.i ], [ %add7.i, %if.then6.i ], [ %add11.i, %if.then10.i ], [ %add13.i, %if.end12.i ]
  %conv = zext i32 %retval.0.i to i64
  %cmp11 = icmp ult i32 %retval.0.i, 63
  br i1 %cmp11, label %cond.end, label %cond.false

cond.false:                                       ; preds = %if.end8
  tail call void @__assert_fail(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.76, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.36, i64 0, i64 0), i32 18228, i8* getelementptr inbounds ([153 x i8], [153 x i8]* @__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE12dump_integerImLi0EEEvT_, i64 0, i64 0)) #40
  unreachable

cond.end:                                         ; preds = %if.end8
  %add.ptr = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %this, i64 0, i32 1, i32 0, i64 %conv
  %cmp12103 = icmp ugt i64 %x, 99
  br i1 %cmp12103, label %while.body, label %while.end

while.body:                                       ; preds = %while.body, %cond.end
  %buffer_ptr.0105 = phi i8* [ %incdec.ptr20, %while.body ], [ %add.ptr, %cond.end ]
  %abs_value.1104 = phi i64 [ %div, %while.body ], [ %x, %cond.end ]
  %rem = urem i64 %abs_value.1104, 100
  %div = udiv i64 %abs_value.1104, 100
  %arrayidx.i.i76 = getelementptr inbounds %"struct.std::array.160", %"struct.std::array.160"* @_ZZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE12dump_integerImLi0EEEvT_E12digits_to_99, i64 0, i32 0, i64 %rem, i32 0, i64 1
  %3 = load i8, i8* %arrayidx.i.i76, align 1, !tbaa !21
  %incdec.ptr = getelementptr inbounds i8, i8* %buffer_ptr.0105, i64 -1
  store i8 %3, i8* %incdec.ptr, align 1, !tbaa !21
  %arrayidx.i.i74 = getelementptr inbounds %"struct.std::array.160", %"struct.std::array.160"* @_ZZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE12dump_integerImLi0EEEvT_E12digits_to_99, i64 0, i32 0, i64 %rem, i32 0, i64 0
  %4 = load i8, i8* %arrayidx.i.i74, align 1, !tbaa !21
  %incdec.ptr20 = getelementptr inbounds i8, i8* %buffer_ptr.0105, i64 -2
  store i8 %4, i8* %incdec.ptr20, align 1, !tbaa !21
  %cmp12 = icmp ugt i64 %abs_value.1104, 9999
  br i1 %cmp12, label %while.body, label %while.end, !llvm.loop !385

while.end:                                        ; preds = %while.body, %cond.end
  %abs_value.1.lcssa = phi i64 [ %x, %cond.end ], [ %div, %while.body ]
  %buffer_ptr.0.lcssa = phi i8* [ %add.ptr, %cond.end ], [ %incdec.ptr20, %while.body ]
  %cmp21 = icmp ugt i64 %abs_value.1.lcssa, 9
  br i1 %cmp21, label %if.then22, label %if.else33

if.then22:                                        ; preds = %while.end
  %arrayidx.i.i72 = getelementptr inbounds %"struct.std::array.160", %"struct.std::array.160"* @_ZZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE12dump_integerImLi0EEEvT_E12digits_to_99, i64 0, i32 0, i64 %abs_value.1.lcssa, i32 0, i64 1
  %5 = load i8, i8* %arrayidx.i.i72, align 1, !tbaa !21
  %incdec.ptr28 = getelementptr inbounds i8, i8* %buffer_ptr.0.lcssa, i64 -1
  store i8 %5, i8* %incdec.ptr28, align 1, !tbaa !21
  %arrayidx.i.i = getelementptr inbounds %"struct.std::array.160", %"struct.std::array.160"* @_ZZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE12dump_integerImLi0EEEvT_E12digits_to_99, i64 0, i32 0, i64 %abs_value.1.lcssa, i32 0, i64 0
  %6 = load i8, i8* %arrayidx.i.i, align 1, !tbaa !21
  %incdec.ptr32 = getelementptr inbounds i8, i8* %buffer_ptr.0.lcssa, i64 -2
  br label %if.end37

if.else33:                                        ; preds = %while.end, %while.end.thread
  %buffer_ptr.0.lcssa125 = phi i8* [ %add.ptr115, %while.end.thread ], [ %buffer_ptr.0.lcssa, %while.end ]
  %abs_value.1.lcssa124 = phi i64 [ %x, %while.end.thread ], [ %abs_value.1.lcssa, %while.end ]
  %conv113117123 = phi i64 [ 1, %while.end.thread ], [ %conv, %while.end ]
  %7 = trunc i64 %abs_value.1.lcssa124 to i8
  %conv35 = add nuw nsw i8 %7, 48
  %incdec.ptr36 = getelementptr inbounds i8, i8* %buffer_ptr.0.lcssa125, i64 -1
  br label %if.end37

if.end37:                                         ; preds = %if.else33, %if.then22
  %incdec.ptr36.sink = phi i8* [ %incdec.ptr36, %if.else33 ], [ %incdec.ptr32, %if.then22 ]
  %conv35.sink = phi i8 [ %conv35, %if.else33 ], [ %6, %if.then22 ]
  %conv113117122 = phi i64 [ %conv113117123, %if.else33 ], [ %conv, %if.then22 ]
  store i8 %conv35.sink, i8* %incdec.ptr36.sink, align 1, !tbaa !21
  %_M_ptr.i.i.i70 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %this, i64 0, i32 0, i32 0, i32 0
  %8 = load %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"** %_M_ptr.i.i.i70, align 8, !tbaa !194
  %9 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %8 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)***
  %vtable43 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*** %9, align 8, !tbaa !50
  %vfn44 = getelementptr inbounds void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vtable43, i64 1
  %10 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vfn44, align 8
  tail call void %10(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %8, i8* nonnull %arraydecay.i.i.i, i64 %conv113117122) #38
  br label %return

return:                                           ; preds = %if.end37, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local void @_ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE12dump_integerIlLi0EEEvT_(%"class.nlohmann::json_v3_11_1::detail::serializer"* nonnull dereferenceable(644) %this, i64 %x) local_unnamed_addr #0 comdat align 2 {
entry:
  %cmp = icmp eq i64 %x, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %_M_ptr.i.i.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %this, i64 0, i32 0, i32 0, i32 0
  %0 = load %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"** %_M_ptr.i.i.i, align 8, !tbaa !194
  %1 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %0 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)***
  %vtable = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)*** %1, align 8, !tbaa !50
  %2 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8)** %vtable, align 8
  tail call void %2(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %0, i8 signext 48) #38
  br label %return

if.end:                                           ; preds = %entry
  %arraydecay.i.i.i = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %this, i64 0, i32 1, i32 0, i64 0
  %cmp.i100 = icmp slt i64 %x, 0
  br i1 %cmp.i100, label %_ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE11remove_signEl.exit, label %if.else

_ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE11remove_signEl.exit: ; preds = %if.end
  store i8 45, i8* %arraydecay.i.i.i, align 1, !tbaa !21
  %add3.i = sub i64 0, %x
  %cmp26.i78 = icmp ult i64 %add3.i, 10
  br i1 %cmp26.i78, label %_ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE12count_digitsEm.exit98, label %if.end.i82

if.end.i82:                                       ; preds = %if.end12.i96, %_ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE11remove_signEl.exit
  %n_digits.028.i79 = phi i32 [ %add13.i94, %if.end12.i96 ], [ 1, %_ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE11remove_signEl.exit ]
  %x.addr.027.i80 = phi i64 [ %div.i93, %if.end12.i96 ], [ %add3.i, %_ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE11remove_signEl.exit ]
  %cmp2.i81 = icmp ult i64 %x.addr.027.i80, 100
  br i1 %cmp2.i81, label %if.then3.i84, label %if.end4.i86

if.then3.i84:                                     ; preds = %if.end.i82
  %n_digits.028.i79.lcssa = phi i32 [ %n_digits.028.i79, %if.end.i82 ]
  %add.i83 = add i32 %n_digits.028.i79.lcssa, 1
  br label %_ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE12count_digitsEm.exit98

if.end4.i86:                                      ; preds = %if.end.i82
  %cmp5.i85 = icmp ult i64 %x.addr.027.i80, 1000
  br i1 %cmp5.i85, label %if.then6.i88, label %if.end8.i90

if.then6.i88:                                     ; preds = %if.end4.i86
  %n_digits.028.i79.lcssa7 = phi i32 [ %n_digits.028.i79, %if.end4.i86 ]
  %add7.i87 = add i32 %n_digits.028.i79.lcssa7, 2
  br label %_ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE12count_digitsEm.exit98

if.end8.i90:                                      ; preds = %if.end4.i86
  %cmp9.i89 = icmp ult i64 %x.addr.027.i80, 10000
  br i1 %cmp9.i89, label %if.then10.i92, label %if.end12.i96

if.then10.i92:                                    ; preds = %if.end8.i90
  %n_digits.028.i79.lcssa8 = phi i32 [ %n_digits.028.i79, %if.end8.i90 ]
  %add11.i91 = add i32 %n_digits.028.i79.lcssa8, 3
  br label %_ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE12count_digitsEm.exit98

if.end12.i96:                                     ; preds = %if.end8.i90
  %div.i93 = udiv i64 %x.addr.027.i80, 10000
  %add13.i94 = add i32 %n_digits.028.i79, 4
  %cmp.i95 = icmp ult i64 %x.addr.027.i80, 100000
  br i1 %cmp.i95, label %_ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE12count_digitsEm.exit98, label %if.end.i82, !llvm.loop !383

_ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE12count_digitsEm.exit98: ; preds = %if.end12.i96, %if.then10.i92, %if.then6.i88, %if.then3.i84, %_ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE11remove_signEl.exit
  %retval.0.i97 = phi i32 [ %add.i83, %if.then3.i84 ], [ %add7.i87, %if.then6.i88 ], [ %add11.i91, %if.then10.i92 ], [ 1, %_ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE11remove_signEl.exit ], [ %add13.i94, %if.end12.i96 ]
  %add = add i32 %retval.0.i97, 1
  br label %if.end8

if.else:                                          ; preds = %if.end
  %cmp26.i = icmp ult i64 %x, 10
  br i1 %cmp26.i, label %while.end.thread, label %if.end.i

while.end.thread:                                 ; preds = %if.else
  %add.ptr125 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %this, i64 0, i32 1, i32 0, i64 1
  br label %if.else33

if.end.i:                                         ; preds = %if.end12.i, %if.else
  %n_digits.028.i = phi i32 [ %add13.i, %if.end12.i ], [ 1, %if.else ]
  %x.addr.027.i = phi i64 [ %div.i, %if.end12.i ], [ %x, %if.else ]
  %cmp2.i = icmp ult i64 %x.addr.027.i, 100
  br i1 %cmp2.i, label %if.then3.i, label %if.end4.i

if.then3.i:                                       ; preds = %if.end.i
  %n_digits.028.i.lcssa = phi i32 [ %n_digits.028.i, %if.end.i ]
  %add.i = add i32 %n_digits.028.i.lcssa, 1
  br label %if.end8

if.end4.i:                                        ; preds = %if.end.i
  %cmp5.i = icmp ult i64 %x.addr.027.i, 1000
  br i1 %cmp5.i, label %if.then6.i, label %if.end8.i

if.then6.i:                                       ; preds = %if.end4.i
  %n_digits.028.i.lcssa10 = phi i32 [ %n_digits.028.i, %if.end4.i ]
  %add7.i = add i32 %n_digits.028.i.lcssa10, 2
  br label %if.end8

if.end8.i:                                        ; preds = %if.end4.i
  %cmp9.i = icmp ult i64 %x.addr.027.i, 10000
  br i1 %cmp9.i, label %if.then10.i, label %if.end12.i

if.then10.i:                                      ; preds = %if.end8.i
  %n_digits.028.i.lcssa11 = phi i32 [ %n_digits.028.i, %if.end8.i ]
  %add11.i = add i32 %n_digits.028.i.lcssa11, 3
  br label %if.end8

if.end12.i:                                       ; preds = %if.end8.i
  %div.i = udiv i64 %x.addr.027.i, 10000
  %add13.i = add i32 %n_digits.028.i, 4
  %cmp.i = icmp ult i64 %x.addr.027.i, 100000
  br i1 %cmp.i, label %if.end8, label %if.end.i, !llvm.loop !383

if.end8:                                          ; preds = %if.end12.i, %if.then10.i, %if.then6.i, %if.then3.i, %_ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE12count_digitsEm.exit98
  %n_chars.0 = phi i32 [ %add, %_ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE12count_digitsEm.exit98 ], [ %add.i, %if.then3.i ], [ %add7.i, %if.then6.i ], [ %add11.i, %if.then10.i ], [ %add13.i, %if.end12.i ]
  %abs_value.0 = phi i64 [ %add3.i, %_ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE12count_digitsEm.exit98 ], [ %x, %if.then3.i ], [ %x, %if.then6.i ], [ %x, %if.then10.i ], [ %x, %if.end12.i ]
  %conv = zext i32 %n_chars.0 to i64
  %cmp11 = icmp ult i32 %n_chars.0, 63
  br i1 %cmp11, label %cond.end, label %cond.false

cond.false:                                       ; preds = %if.end8
  tail call void @__assert_fail(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.76, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.36, i64 0, i64 0), i32 18228, i8* getelementptr inbounds ([144 x i8], [144 x i8]* @__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE12dump_integerIlLi0EEEvT_, i64 0, i64 0)) #40
  unreachable

cond.end:                                         ; preds = %if.end8
  %add.ptr = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %this, i64 0, i32 1, i32 0, i64 %conv
  %cmp12107 = icmp ugt i64 %abs_value.0, 99
  br i1 %cmp12107, label %while.body, label %while.end

while.body:                                       ; preds = %while.body, %cond.end
  %buffer_ptr.0109 = phi i8* [ %incdec.ptr20, %while.body ], [ %add.ptr, %cond.end ]
  %abs_value.1108 = phi i64 [ %div, %while.body ], [ %abs_value.0, %cond.end ]
  %rem = urem i64 %abs_value.1108, 100
  %div = udiv i64 %abs_value.1108, 100
  %arrayidx.i.i76 = getelementptr inbounds %"struct.std::array.160", %"struct.std::array.160"* @_ZZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE12dump_integerIlLi0EEEvT_E12digits_to_99, i64 0, i32 0, i64 %rem, i32 0, i64 1
  %3 = load i8, i8* %arrayidx.i.i76, align 1, !tbaa !21
  %incdec.ptr = getelementptr inbounds i8, i8* %buffer_ptr.0109, i64 -1
  store i8 %3, i8* %incdec.ptr, align 1, !tbaa !21
  %arrayidx.i.i74 = getelementptr inbounds %"struct.std::array.160", %"struct.std::array.160"* @_ZZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE12dump_integerIlLi0EEEvT_E12digits_to_99, i64 0, i32 0, i64 %rem, i32 0, i64 0
  %4 = load i8, i8* %arrayidx.i.i74, align 1, !tbaa !21
  %incdec.ptr20 = getelementptr inbounds i8, i8* %buffer_ptr.0109, i64 -2
  store i8 %4, i8* %incdec.ptr20, align 1, !tbaa !21
  %cmp12 = icmp ugt i64 %abs_value.1108, 9999
  br i1 %cmp12, label %while.body, label %while.end, !llvm.loop !386

while.end:                                        ; preds = %while.body, %cond.end
  %abs_value.1.lcssa = phi i64 [ %abs_value.0, %cond.end ], [ %div, %while.body ]
  %buffer_ptr.0.lcssa = phi i8* [ %add.ptr, %cond.end ], [ %incdec.ptr20, %while.body ]
  %cmp21 = icmp ugt i64 %abs_value.1.lcssa, 9
  br i1 %cmp21, label %if.then22, label %if.else33

if.then22:                                        ; preds = %while.end
  %arrayidx.i.i72 = getelementptr inbounds %"struct.std::array.160", %"struct.std::array.160"* @_ZZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE12dump_integerIlLi0EEEvT_E12digits_to_99, i64 0, i32 0, i64 %abs_value.1.lcssa, i32 0, i64 1
  %5 = load i8, i8* %arrayidx.i.i72, align 1, !tbaa !21
  %incdec.ptr28 = getelementptr inbounds i8, i8* %buffer_ptr.0.lcssa, i64 -1
  store i8 %5, i8* %incdec.ptr28, align 1, !tbaa !21
  %arrayidx.i.i = getelementptr inbounds %"struct.std::array.160", %"struct.std::array.160"* @_ZZN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEE12dump_integerIlLi0EEEvT_E12digits_to_99, i64 0, i32 0, i64 %abs_value.1.lcssa, i32 0, i64 0
  %6 = load i8, i8* %arrayidx.i.i, align 1, !tbaa !21
  %incdec.ptr32 = getelementptr inbounds i8, i8* %buffer_ptr.0.lcssa, i64 -2
  br label %if.end37

if.else33:                                        ; preds = %while.end, %while.end.thread
  %buffer_ptr.0.lcssa135 = phi i8* [ %add.ptr125, %while.end.thread ], [ %buffer_ptr.0.lcssa, %while.end ]
  %abs_value.1.lcssa134 = phi i64 [ %x, %while.end.thread ], [ %abs_value.1.lcssa, %while.end ]
  %conv122127133 = phi i64 [ 1, %while.end.thread ], [ %conv, %while.end ]
  %7 = trunc i64 %abs_value.1.lcssa134 to i8
  %conv35 = add nuw nsw i8 %7, 48
  %incdec.ptr36 = getelementptr inbounds i8, i8* %buffer_ptr.0.lcssa135, i64 -1
  br label %if.end37

if.end37:                                         ; preds = %if.else33, %if.then22
  %incdec.ptr36.sink = phi i8* [ %incdec.ptr36, %if.else33 ], [ %incdec.ptr32, %if.then22 ]
  %conv35.sink = phi i8 [ %conv35, %if.else33 ], [ %6, %if.then22 ]
  %conv122127132 = phi i64 [ %conv122127133, %if.else33 ], [ %conv, %if.then22 ]
  store i8 %conv35.sink, i8* %incdec.ptr36.sink, align 1, !tbaa !21
  %_M_ptr.i.i.i70 = getelementptr inbounds %"class.nlohmann::json_v3_11_1::detail::serializer", %"class.nlohmann::json_v3_11_1::detail::serializer"* %this, i64 0, i32 0, i32 0, i32 0
  %8 = load %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"** %_M_ptr.i.i.i70, align 8, !tbaa !194
  %9 = bitcast %"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* %8 to void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)***
  %vtable43 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)**, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*** %9, align 8, !tbaa !50
  %vfn44 = getelementptr inbounds void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vtable43, i64 1
  %10 = load void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)*, void (%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"*, i8*, i64)** %vfn44, align 8
  tail call void %10(%"struct.nlohmann::json_v3_11_1::detail::output_adapter_protocol"* nonnull dereferenceable(8) %8, i8* nonnull %arraydecay.i.i.i, i64 %conv122127132) #38
  br label %return

return:                                           ; preds = %if.end37, %if.then
  ret void
}

; Function Attrs: nounwind readonly willreturn
declare dso_local %"struct.std::_Rb_tree_node_base"* @_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base(%"struct.std::_Rb_tree_node_base"*) local_unnamed_addr #29

; Function Attrs: nounwind uwtable mustprogress
define linkonce_odr dso_local nonnull i8* @_ZN8nlohmann12json_v3_11_16detail8to_charsIdEEPcS3_PKcT_(i8* nonnull %first, i8* nonnull %last, double %value) local_unnamed_addr #5 comdat {
cond.end:
  %w.i = alloca %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::boundaries", align 8
  %len = alloca i32, align 4
  %decimal_exponent = alloca i32, align 4
  %0 = bitcast double %value to i64
  %1 = icmp slt i64 %0, 0
  br i1 %1, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  %fneg = fneg fast double %value
  %incdec.ptr = getelementptr inbounds i8, i8* %first, i64 1
  store i8 45, i8* %first, align 1, !tbaa !21
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end
  %value.addr.0 = phi double [ %fneg, %if.then ], [ %value, %cond.end ]
  %first.addr.0 = phi i8* [ %incdec.ptr, %if.then ], [ %first, %cond.end ]
  %cmp = fcmp fast oeq double %value.addr.0, 0.000000e+00
  br i1 %cmp, label %if.then2, label %if.end6

if.then2:                                         ; preds = %if.end
  %incdec.ptr3 = getelementptr inbounds i8, i8* %first.addr.0, i64 1
  store i8 48, i8* %first.addr.0, align 1, !tbaa !21
  %incdec.ptr4 = getelementptr inbounds i8, i8* %first.addr.0, i64 2
  store i8 46, i8* %incdec.ptr3, align 1, !tbaa !21
  %incdec.ptr5 = getelementptr inbounds i8, i8* %first.addr.0, i64 3
  store i8 48, i8* %incdec.ptr4, align 1, !tbaa !21
  br label %return

if.end6:                                          ; preds = %if.end
  %sub.ptr.lhs.cast = ptrtoint i8* %last to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %first.addr.0 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp7 = icmp sgt i64 %sub.ptr.sub, 16
  br i1 %cmp7, label %cond.end10, label %cond.false9

cond.false9:                                      ; preds = %if.end6
  tail call void @__assert_fail(i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.79, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.36, i64 0, i64 0), i32 17515, i8* getelementptr inbounds ([87 x i8], [87 x i8]* @__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail8to_charsIdEEPcS3_PKcT_, i64 0, i64 0)) #40
  unreachable

cond.end10:                                       ; preds = %if.end6
  %2 = bitcast i32* %len to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2) #38
  store i32 0, i32* %len, align 4, !tbaa !59
  %3 = bitcast i32* %decimal_exponent to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #38
  store i32 0, i32* %decimal_exponent, align 4, !tbaa !59
  %cmp.i = fcmp fast ogt double %value.addr.0, 0.000000e+00
  br i1 %cmp.i, label %_ZN8nlohmann12json_v3_11_16detail9dtoa_impl6grisu2IdEEvPcRiS5_T_.exit, label %cond.false2.i

cond.false2.i:                                    ; preds = %cond.end10
  tail call void @__assert_fail(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.84, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.36, i64 0, i64 0), i32 17328, i8* getelementptr inbounds ([95 x i8], [95 x i8]* @__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail9dtoa_impl6grisu2IdEEvPcRiS5_T_, i64 0, i64 0)) #40
  unreachable

_ZN8nlohmann12json_v3_11_16detail9dtoa_impl6grisu2IdEEvPcRiS5_T_.exit: ; preds = %cond.end10
  %4 = bitcast %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::boundaries"* %w.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %4) #38
  call void @_ZN8nlohmann12json_v3_11_16detail9dtoa_impl18compute_boundariesIdEENS2_10boundariesET_(%"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::boundaries"* nonnull sret(%"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::boundaries") align 8 %w.i, double %value.addr.0) #38
  %agg.tmp.sroa.0.0..sroa_idx.i = getelementptr inbounds %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::boundaries", %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::boundaries"* %w.i, i64 0, i32 1, i32 0
  %agg.tmp.sroa.0.0.copyload.i = load i64, i64* %agg.tmp.sroa.0.0..sroa_idx.i, align 8, !tbaa.struct !387
  %agg.tmp.sroa.2.0..sroa_idx7.i = getelementptr inbounds %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::boundaries", %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::boundaries"* %w.i, i64 0, i32 1, i32 1
  %agg.tmp.sroa.2.0.copyload.i = load i32, i32* %agg.tmp.sroa.2.0..sroa_idx7.i, align 8, !tbaa.struct !388
  %plus.i = getelementptr inbounds %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::boundaries", %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::boundaries"* %w.i, i64 0, i32 2
  %tmpcast.i = getelementptr inbounds %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::boundaries", %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::boundaries"* %w.i, i64 0, i32 0
  call void @_ZN8nlohmann12json_v3_11_16detail9dtoa_impl6grisu2EPcRiS4_NS2_5diyfpES5_S5_(i8* %first.addr.0, i32* nonnull align 4 dereferenceable(4) %len, i32* nonnull align 4 dereferenceable(4) %decimal_exponent, i64 %agg.tmp.sroa.0.0.copyload.i, i32 %agg.tmp.sroa.2.0.copyload.i, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::diyfp"* nonnull byval(%"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::diyfp") align 8 %tmpcast.i, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::diyfp"* nonnull byval(%"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::diyfp") align 8 %plus.i) #38
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %4) #38
  %5 = load i32, i32* %len, align 4, !tbaa !59
  %cmp11 = icmp slt i32 %5, 18
  br i1 %cmp11, label %cond.end21, label %cond.false13

cond.false13:                                     ; preds = %_ZN8nlohmann12json_v3_11_16detail9dtoa_impl6grisu2IdEEvPcRiS5_T_.exit
  call void @__assert_fail(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.80, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.36, i64 0, i64 0), i32 17525, i8* getelementptr inbounds ([87 x i8], [87 x i8]* @__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail8to_charsIdEEPcS3_PKcT_, i64 0, i64 0)) #40
  unreachable

cond.end21:                                       ; preds = %_ZN8nlohmann12json_v3_11_16detail9dtoa_impl6grisu2IdEEvPcRiS5_T_.exit
  %cmp25 = icmp sgt i64 %sub.ptr.sub, 21
  br i1 %cmp25, label %cond.end28, label %cond.false27

cond.false27:                                     ; preds = %cond.end21
  call void @__assert_fail(i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.82, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.36, i64 0, i64 0), i32 17534, i8* getelementptr inbounds ([87 x i8], [87 x i8]* @__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail8to_charsIdEEPcS3_PKcT_, i64 0, i64 0)) #40
  unreachable

cond.end28:                                       ; preds = %cond.end21
  %cmp32.not = icmp eq i64 %sub.ptr.sub, 22
  br i1 %cmp32.not, label %cond.false34, label %cond.end35

cond.false34:                                     ; preds = %cond.end28
  call void @__assert_fail(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.83, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.36, i64 0, i64 0), i32 17535, i8* getelementptr inbounds ([87 x i8], [87 x i8]* @__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail8to_charsIdEEPcS3_PKcT_, i64 0, i64 0)) #40
  unreachable

cond.end35:                                       ; preds = %cond.end28
  %6 = load i32, i32* %decimal_exponent, align 4, !tbaa !59
  %call36 = call nonnull i8* @_ZN8nlohmann12json_v3_11_16detail9dtoa_impl13format_bufferEPciiii(i8* %first.addr.0, i32 %5, i32 %6, i32 -4, i32 15)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #38
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2) #38
  br label %return

return:                                           ; preds = %cond.end35, %if.then2
  %retval.0 = phi i8* [ %incdec.ptr5, %if.then2 ], [ %call36, %cond.end35 ]
  ret i8* %retval.0
}

; Function Attrs: inlinehint nounwind uwtable mustprogress
define linkonce_odr dso_local nonnull i8* @_ZN8nlohmann12json_v3_11_16detail9dtoa_impl13format_bufferEPciiii(i8* nonnull %buf, i32 %len, i32 %decimal_exponent, i32 %min_exp, i32 %max_exp) local_unnamed_addr #19 comdat {
entry:
  %cmp = icmp slt i32 %min_exp, 0
  br i1 %cmp, label %cond.end, label %cond.false

cond.false:                                       ; preds = %entry
  tail call void @__assert_fail(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.109, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.36, i64 0, i64 0), i32 17410, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail9dtoa_impl13format_bufferEPciiii, i64 0, i64 0)) #40
  unreachable

cond.end:                                         ; preds = %entry
  %cmp1 = icmp sgt i32 %max_exp, 0
  br i1 %cmp1, label %cond.end4, label %cond.false3

cond.false3:                                      ; preds = %cond.end
  tail call void @__assert_fail(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.110, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.36, i64 0, i64 0), i32 17411, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail9dtoa_impl13format_bufferEPciiii, i64 0, i64 0)) #40
  unreachable

cond.end4:                                        ; preds = %cond.end
  %add = add nsw i32 %decimal_exponent, %len
  %cmp5.not = icmp slt i32 %decimal_exponent, 0
  %cmp6.not = icmp sgt i32 %add, %max_exp
  %or.cond126 = or i1 %cmp5.not, %cmp6.not
  br i1 %or.cond126, label %if.end, label %if.then

if.then:                                          ; preds = %cond.end4
  %idx.ext = sext i32 %len to i64
  %add.ptr = getelementptr inbounds i8, i8* %buf, i64 %idx.ext
  %conv = sext i32 %add to i64
  %sub = sub nsw i64 %conv, %idx.ext
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %add.ptr, i8 48, i64 %sub, i1 false)
  %arrayidx = getelementptr inbounds i8, i8* %buf, i64 %conv
  store i8 46, i8* %arrayidx, align 1, !tbaa !21
  %add9 = add nsw i32 %add, 1
  %idxprom10 = sext i32 %add9 to i64
  %arrayidx11 = getelementptr inbounds i8, i8* %buf, i64 %idxprom10
  store i8 48, i8* %arrayidx11, align 1, !tbaa !21
  %add13 = add nsw i64 %conv, 2
  %add.ptr14 = getelementptr inbounds i8, i8* %buf, i64 %add13
  br label %cleanup

if.end:                                           ; preds = %cond.end4
  %cmp15 = icmp slt i32 %add, 1
  %or.cond127 = or i1 %cmp15, %cmp6.not
  br i1 %or.cond127, label %if.end36, label %if.then18

if.then18:                                        ; preds = %if.end
  br i1 %cmp5.not, label %cond.end22, label %cond.false21

cond.false21:                                     ; preds = %if.then18
  tail call void @__assert_fail(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.111, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.36, i64 0, i64 0), i32 17435, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail9dtoa_impl13format_bufferEPciiii, i64 0, i64 0)) #40
  unreachable

cond.end22:                                       ; preds = %if.then18
  %conv23128 = zext i32 %add to i64
  %add24 = add nuw nsw i64 %conv23128, 1
  %add.ptr25 = getelementptr inbounds i8, i8* %buf, i64 %add24
  %add.ptr27 = getelementptr inbounds i8, i8* %buf, i64 %conv23128
  %conv28 = sext i32 %len to i64
  %sub30 = sub nsw i64 %conv28, %conv23128
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 1 %add.ptr25, i8* nonnull align 1 %add.ptr27, i64 %sub30, i1 false)
  store i8 46, i8* %add.ptr27, align 1, !tbaa !21
  %add34 = add nsw i64 %conv28, 1
  %add.ptr35 = getelementptr inbounds i8, i8* %buf, i64 %add34
  br label %cleanup

if.end36:                                         ; preds = %if.end
  %cmp37 = icmp sgt i32 %add, %min_exp
  %or.cond = and i1 %cmp37, %cmp15
  br i1 %or.cond, label %if.then40, label %if.end57

if.then40:                                        ; preds = %if.end36
  %sub41 = sub nsw i32 0, %add
  %0 = zext i32 %sub41 to i64
  %add43 = add nuw nsw i64 %0, 2
  %add.ptr44 = getelementptr inbounds i8, i8* %buf, i64 %add43
  %conv45 = sext i32 %len to i64
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 1 %add.ptr44, i8* nonnull align 1 %buf, i64 %conv45, i1 false)
  store i8 48, i8* %buf, align 1, !tbaa !21
  %arrayidx47 = getelementptr inbounds i8, i8* %buf, i64 1
  store i8 46, i8* %arrayidx47, align 1, !tbaa !21
  %add.ptr48 = getelementptr inbounds i8, i8* %buf, i64 2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %add.ptr48, i8 48, i64 %0, i1 false)
  %add55 = add nsw i64 %add43, %conv45
  %add.ptr56 = getelementptr inbounds i8, i8* %buf, i64 %add55
  br label %cleanup

if.end57:                                         ; preds = %if.end36
  %cmp58 = icmp eq i32 %len, 1
  br i1 %cmp58, label %if.end69, label %if.else

if.else:                                          ; preds = %if.end57
  %add.ptr61 = getelementptr inbounds i8, i8* %buf, i64 2
  %add.ptr62 = getelementptr inbounds i8, i8* %buf, i64 1
  %conv63 = sext i32 %len to i64
  %sub64 = add nsw i64 %conv63, -1
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 1 %add.ptr61, i8* nonnull align 1 %add.ptr62, i64 %sub64, i1 false)
  store i8 46, i8* %add.ptr62, align 1, !tbaa !21
  %add67 = add nsw i64 %conv63, 1
  br label %if.end69

if.end69:                                         ; preds = %if.else, %if.end57
  %add67.sink = phi i64 [ %add67, %if.else ], [ 1, %if.end57 ]
  %add.ptr68 = getelementptr inbounds i8, i8* %buf, i64 %add67.sink
  %incdec.ptr = getelementptr inbounds i8, i8* %add.ptr68, i64 1
  store i8 101, i8* %add.ptr68, align 1, !tbaa !21
  %sub70 = add nsw i32 %add, -1
  %cmp.i = icmp sgt i32 %add, -999
  br i1 %cmp.i, label %cond.end.i, label %cond.false.i

cond.false.i:                                     ; preds = %if.end69
  tail call void @__assert_fail(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.112, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.36, i64 0, i64 0), i32 17366, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail9dtoa_impl15append_exponentEPci, i64 0, i64 0)) #40
  unreachable

cond.end.i:                                       ; preds = %if.end69
  %cmp1.i = icmp slt i32 %add, 1001
  br i1 %cmp1.i, label %cond.end4.i, label %cond.false3.i

cond.false3.i:                                    ; preds = %cond.end.i
  tail call void @__assert_fail(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.113, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.36, i64 0, i64 0), i32 17367, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail9dtoa_impl15append_exponentEPci, i64 0, i64 0)) #40
  unreachable

cond.end4.i:                                      ; preds = %cond.end.i
  %sub.i = sub nsw i32 1, %add
  %storemerge.i = select i1 %cmp15, i8 45, i8 43
  %e.addr.0.i = select i1 %cmp15, i32 %sub.i, i32 %sub70
  %buf.addr.0.i = getelementptr inbounds i8, i8* %add.ptr68, i64 2
  store i8 %storemerge.i, i8* %incdec.ptr, align 1, !tbaa !21
  %cmp7.i = icmp ult i32 %e.addr.0.i, 10
  br i1 %cmp7.i, label %if.then8.i, label %if.else11.i

if.then8.i:                                       ; preds = %cond.end4.i
  %incdec.ptr9.i = getelementptr inbounds i8, i8* %add.ptr68, i64 3
  store i8 48, i8* %buf.addr.0.i, align 1, !tbaa !21
  %1 = trunc i32 %e.addr.0.i to i8
  %conv.i = add nuw nsw i8 %1, 48
  store i8 %conv.i, i8* %incdec.ptr9.i, align 1, !tbaa !21
  br label %_ZN8nlohmann12json_v3_11_16detail9dtoa_impl15append_exponentEPci.exit

if.else11.i:                                      ; preds = %cond.end4.i
  %cmp12.i = icmp ult i32 %e.addr.0.i, 100
  br i1 %cmp12.i, label %if.then13.i, label %if.else20.i

if.then13.i:                                      ; preds = %if.else11.i
  %div.lhs.trunc.i = trunc i32 %e.addr.0.i to i8
  %div60.i = udiv i8 %div.lhs.trunc.i, 10
  %conv15.i = add nuw nsw i8 %div60.i, 48
  %incdec.ptr16.i = getelementptr inbounds i8, i8* %add.ptr68, i64 3
  store i8 %conv15.i, i8* %buf.addr.0.i, align 1, !tbaa !21
  %rem61.i = urem i8 %div.lhs.trunc.i, 10
  %conv18.i = or i8 %rem61.i, 48
  store i8 %conv18.i, i8* %incdec.ptr16.i, align 1, !tbaa !21
  br label %_ZN8nlohmann12json_v3_11_16detail9dtoa_impl15append_exponentEPci.exit

if.else20.i:                                      ; preds = %if.else11.i
  %div21.lhs.trunc.i = trunc i32 %e.addr.0.i to i16
  %div2162.i = udiv i16 %div21.lhs.trunc.i, 100
  %2 = trunc i16 %div2162.i to i8
  %conv23.i = add nuw nsw i8 %2, 48
  %incdec.ptr24.i = getelementptr inbounds i8, i8* %add.ptr68, i64 3
  store i8 %conv23.i, i8* %buf.addr.0.i, align 1, !tbaa !21
  %rem2563.i = urem i16 %div21.lhs.trunc.i, 100
  %div26.lhs.trunc.i = trunc i16 %rem2563.i to i8
  %div2664.i = udiv i8 %div26.lhs.trunc.i, 10
  %conv28.i = or i8 %div2664.i, 48
  %incdec.ptr29.i = getelementptr inbounds i8, i8* %add.ptr68, i64 4
  store i8 %conv28.i, i8* %incdec.ptr24.i, align 1, !tbaa !21
  %rem3065.i = urem i8 %div26.lhs.trunc.i, 10
  %conv32.i = or i8 %rem3065.i, 48
  store i8 %conv32.i, i8* %incdec.ptr29.i, align 1, !tbaa !21
  br label %_ZN8nlohmann12json_v3_11_16detail9dtoa_impl15append_exponentEPci.exit

_ZN8nlohmann12json_v3_11_16detail9dtoa_impl15append_exponentEPci.exit: ; preds = %if.else20.i, %if.then13.i, %if.then8.i
  %3 = phi i64 [ 1, %if.then8.i ], [ 1, %if.then13.i ], [ 2, %if.else20.i ]
  %4 = getelementptr inbounds i8, i8* %add.ptr68, i64 %3
  %buf.addr.1.i = getelementptr inbounds i8, i8* %4, i64 3
  br label %cleanup

cleanup:                                          ; preds = %_ZN8nlohmann12json_v3_11_16detail9dtoa_impl15append_exponentEPci.exit, %if.then40, %cond.end22, %if.then
  %retval.0 = phi i8* [ %add.ptr14, %if.then ], [ %add.ptr35, %cond.end22 ], [ %add.ptr56, %if.then40 ], [ %buf.addr.1.i, %_ZN8nlohmann12json_v3_11_16detail9dtoa_impl15append_exponentEPci.exit ]
  ret i8* %retval.0
}

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local void @_ZN8nlohmann12json_v3_11_16detail9dtoa_impl18compute_boundariesIdEENS2_10boundariesET_(%"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::boundaries"* noalias sret(%"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::boundaries") align 8 %agg.result, double %value) local_unnamed_addr #0 comdat {
cond.end:
  %cmp = fcmp fast ogt double %value, 0.000000e+00
  br i1 %cmp, label %cond.end3, label %cond.false2

cond.false2:                                      ; preds = %cond.end
  tail call void @__assert_fail(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.84, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.36, i64 0, i64 0), i32 16671, i8* getelementptr inbounds ([120 x i8], [120 x i8]* @__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail9dtoa_impl18compute_boundariesIdEENS2_10boundariesET_, i64 0, i64 0)) #40
  unreachable

cond.end3:                                        ; preds = %cond.end
  %0 = bitcast double %value to i64
  %shr = lshr i64 %0, 52
  %and = and i64 %0, 4503599627370495
  %cmp5 = icmp eq i64 %shr, 0
  %add = or i64 %and, 4503599627370496
  %conv = trunc i64 %shr to i32
  %sub = add nsw i32 %conv, -1075
  %v.sroa.0.0 = select i1 %cmp5, i64 %and, i64 %add
  %v.sroa.8.0 = select i1 %cmp5, i32 -1074, i32 %sub
  %cmp10 = icmp ugt i64 %0, 9007199254740991
  %mul = shl nuw nsw i64 %v.sroa.0.0, 1
  %add12 = or i64 %mul, 1
  %sub13 = add nsw i32 %v.sroa.8.0, -1
  %sub20 = add nsw i32 %v.sroa.8.0, -2
  br label %while.body.i76

while.body.i76:                                   ; preds = %while.body.i76, %cond.end3
  %x.sroa.0.010.i71 = phi i64 [ %shl.i73, %while.body.i76 ], [ %add12, %cond.end3 ]
  %x.sroa.6.09.i72 = phi i32 [ %dec.i74, %while.body.i76 ], [ %sub13, %cond.end3 ]
  %shl.i73 = shl nuw i64 %x.sroa.0.010.i71, 1
  %dec.i74 = add nsw i32 %x.sroa.6.09.i72, -1
  %cmp2.i75 = icmp sgt i64 %shl.i73, -1
  br i1 %cmp2.i75, label %while.body.i76, label %_ZN8nlohmann12json_v3_11_16detail9dtoa_impl5diyfp9normalizeES3_.exit81, !llvm.loop !389

_ZN8nlohmann12json_v3_11_16detail9dtoa_impl5diyfp9normalizeES3_.exit81: ; preds = %while.body.i76
  %shl.i73.lcssa = phi i64 [ %shl.i73, %while.body.i76 ]
  %dec.i74.lcssa = phi i32 [ %dec.i74, %while.body.i76 ]
  %cmp9 = icmp eq i64 %and, 0
  %1 = and i1 %cmp10, %cmp9
  %mul17 = shl nuw nsw i64 %v.sroa.0.0, 2
  %m_minus.sroa.0.0.v = select i1 %1, i64 %mul17, i64 %mul
  %m_minus.sroa.5.0 = select i1 %1, i32 %sub20, i32 %sub13
  %m_minus.sroa.0.0 = add nsw i64 %m_minus.sroa.0.0.v, -1
  %sub.i = sub nsw i32 %m_minus.sroa.5.0, %dec.i74.lcssa
  %cmp.i = icmp sgt i32 %sub.i, -1
  br i1 %cmp.i, label %cond.end.i, label %cond.false.i59

cond.false.i59:                                   ; preds = %_ZN8nlohmann12json_v3_11_16detail9dtoa_impl5diyfp9normalizeES3_.exit81
  tail call void @__assert_fail(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.86, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.36, i64 0, i64 0), i32 16650, i8* getelementptr inbounds ([146 x i8], [146 x i8]* @__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail9dtoa_impl5diyfp12normalize_toERKS3_i, i64 0, i64 0)) #40
  unreachable

cond.end.i:                                       ; preds = %_ZN8nlohmann12json_v3_11_16detail9dtoa_impl5diyfp9normalizeES3_.exit81
  %sh_prom.i = zext i32 %sub.i to i64
  %shl.i60 = shl i64 %m_minus.sroa.0.0, %sh_prom.i
  %shr.i = lshr i64 %shl.i60, %sh_prom.i
  %cmp3.i = icmp eq i64 %shr.i, %m_minus.sroa.0.0
  br i1 %cmp3.i, label %_ZN8nlohmann12json_v3_11_16detail9dtoa_impl5diyfp12normalize_toERKS3_i.exit, label %cond.false5.i

cond.false5.i:                                    ; preds = %cond.end.i
  tail call void @__assert_fail(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.87, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.36, i64 0, i64 0), i32 16651, i8* getelementptr inbounds ([146 x i8], [146 x i8]* @__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail9dtoa_impl5diyfp12normalize_toERKS3_i, i64 0, i64 0)) #40
  unreachable

_ZN8nlohmann12json_v3_11_16detail9dtoa_impl5diyfp12normalize_toERKS3_i.exit: ; preds = %cond.end.i
  %cmp.not.i = icmp eq i64 %v.sroa.0.0, 0
  br i1 %cmp.not.i, label %cond.false.i, label %while.body.i

cond.false.i:                                     ; preds = %_ZN8nlohmann12json_v3_11_16detail9dtoa_impl5diyfp12normalize_toERKS3_i.exit
  tail call void @__assert_fail(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.85, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.36, i64 0, i64 0), i32 16632, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail9dtoa_impl5diyfp9normalizeES3_, i64 0, i64 0)) #40
  unreachable

while.body.i:                                     ; preds = %while.body.i, %_ZN8nlohmann12json_v3_11_16detail9dtoa_impl5diyfp12normalize_toERKS3_i.exit
  %x.sroa.0.010.i = phi i64 [ %shl.i, %while.body.i ], [ %v.sroa.0.0, %_ZN8nlohmann12json_v3_11_16detail9dtoa_impl5diyfp12normalize_toERKS3_i.exit ]
  %x.sroa.6.09.i = phi i32 [ %dec.i, %while.body.i ], [ %v.sroa.8.0, %_ZN8nlohmann12json_v3_11_16detail9dtoa_impl5diyfp12normalize_toERKS3_i.exit ]
  %shl.i = shl nuw i64 %x.sroa.0.010.i, 1
  %dec.i = add nsw i32 %x.sroa.6.09.i, -1
  %cmp2.i = icmp sgt i64 %shl.i, -1
  br i1 %cmp2.i, label %while.body.i, label %_ZN8nlohmann12json_v3_11_16detail9dtoa_impl5diyfp9normalizeES3_.exit, !llvm.loop !389

_ZN8nlohmann12json_v3_11_16detail9dtoa_impl5diyfp9normalizeES3_.exit: ; preds = %while.body.i
  %shl.i.lcssa = phi i64 [ %shl.i, %while.body.i ]
  %dec.i.lcssa = phi i32 [ %dec.i, %while.body.i ]
  %2 = getelementptr inbounds %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::boundaries", %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::boundaries"* %agg.result, i64 0, i32 0, i32 0
  store i64 %shl.i.lcssa, i64* %2, align 8
  %3 = getelementptr inbounds %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::boundaries", %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::boundaries"* %agg.result, i64 0, i32 0, i32 1
  store i32 %dec.i.lcssa, i32* %3, align 8
  %w_minus.sroa.0.0..sroa_idx = getelementptr inbounds %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::boundaries", %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::boundaries"* %agg.result, i64 0, i32 1, i32 0
  store i64 %shl.i60, i64* %w_minus.sroa.0.0..sroa_idx, align 8, !tbaa.struct !387
  %w_minus.sroa.4.0..sroa_idx37 = getelementptr inbounds %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::boundaries", %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::boundaries"* %agg.result, i64 0, i32 1, i32 1
  store i32 %dec.i74.lcssa, i32* %w_minus.sroa.4.0..sroa_idx37, align 8, !tbaa.struct !388
  %w_plus.sroa.0.0..sroa_idx = getelementptr inbounds %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::boundaries", %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::boundaries"* %agg.result, i64 0, i32 2, i32 0
  store i64 %shl.i73.lcssa, i64* %w_plus.sroa.0.0..sroa_idx, align 8, !tbaa.struct !387
  %w_plus.sroa.4.0..sroa_idx43 = getelementptr inbounds %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::boundaries", %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::boundaries"* %agg.result, i64 0, i32 2, i32 1
  store i32 %dec.i74.lcssa, i32* %w_plus.sroa.4.0..sroa_idx43, align 8, !tbaa.struct !388
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define linkonce_odr dso_local void @_ZN8nlohmann12json_v3_11_16detail9dtoa_impl6grisu2EPcRiS4_NS2_5diyfpES5_S5_(i8* nonnull %buf, i32* nonnull align 4 dereferenceable(4) %len, i32* nonnull align 4 dereferenceable(4) %decimal_exponent, i64 %m_minus.coerce0, i32 %m_minus.coerce1, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::diyfp"* byval(%"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::diyfp") align 8 %v, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::diyfp"* byval(%"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::diyfp") align 8 %m_plus) local_unnamed_addr #25 comdat {
entry:
  %agg.tmp18 = alloca %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::diyfp", align 8
  %agg.tmp19 = alloca %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::diyfp", align 8
  %e = getelementptr inbounds %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::diyfp", %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::diyfp"* %m_plus, i64 0, i32 1
  %0 = load i32, i32* %e, align 8, !tbaa !390
  %cmp = icmp eq i32 %0, %m_minus.coerce1
  br i1 %cmp, label %cond.end, label %cond.false

cond.false:                                       ; preds = %entry
  tail call void @__assert_fail(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.88, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.36, i64 0, i64 0), i32 17265, i8* getelementptr inbounds ([171 x i8], [171 x i8]* @__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail9dtoa_impl6grisu2EPcRiS4_NS2_5diyfpES5_S5_, i64 0, i64 0)) #40
  unreachable

cond.end:                                         ; preds = %entry
  %e3 = getelementptr inbounds %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::diyfp", %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::diyfp"* %v, i64 0, i32 1
  %1 = load i32, i32* %e3, align 8, !tbaa !390
  %cmp4 = icmp eq i32 %1, %m_minus.coerce1
  br i1 %cmp4, label %cond.end7, label %cond.false6

cond.false6:                                      ; preds = %cond.end
  tail call void @__assert_fail(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.89, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.36, i64 0, i64 0), i32 17266, i8* getelementptr inbounds ([171 x i8], [171 x i8]* @__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail9dtoa_impl6grisu2EPcRiS4_NS2_5diyfpES5_S5_, i64 0, i64 0)) #40
  unreachable

cond.end7:                                        ; preds = %cond.end
  %call = tail call { i64, i64 } @_ZN8nlohmann12json_v3_11_16detail9dtoa_impl36get_cached_power_for_binary_exponentEi(i32 %m_minus.coerce1)
  %2 = extractvalue { i64, i64 } %call, 0
  %3 = extractvalue { i64, i64 } %call, 1
  %cached.sroa.4.8.extract.trunc = trunc i64 %3 to i32
  %f.i37 = getelementptr inbounds %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::diyfp", %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::diyfp"* %v, i64 0, i32 0
  %4 = load i64, i64* %f.i37, align 8, !tbaa !392
  %and.i = and i64 %4, 4294967295
  %shr.i = lshr i64 %4, 32
  %and3.i = and i64 %2, 4294967295
  %shr5.i = lshr i64 %2, 32
  %mul.i = mul nuw i64 %and3.i, %and.i
  %mul6.i = mul nuw i64 %shr5.i, %and.i
  %mul7.i = mul nuw i64 %and3.i, %shr.i
  %mul8.i = mul nuw i64 %shr5.i, %shr.i
  %shr9.i = lshr i64 %mul.i, 32
  %and10.i = and i64 %mul6.i, 4294967295
  %shr11.i = lshr i64 %mul6.i, 32
  %and12.i = and i64 %mul7.i, 4294967295
  %shr13.i = lshr i64 %mul7.i, 32
  %add.i = add nuw nsw i64 %and10.i, 2147483648
  %add14.i = add nuw nsw i64 %add.i, %shr9.i
  %add15.i = add nuw nsw i64 %add14.i, %and12.i
  %add16.i = add nuw i64 %shr13.i, %mul8.i
  %add17.i = add nuw i64 %add16.i, %shr11.i
  %shr18.i = lshr i64 %add15.i, 32
  %add19.i = add i64 %add17.i, %shr18.i
  %add21.i = add i32 %cached.sroa.4.8.extract.trunc, 64
  %add22.i = add i32 %add21.i, %m_minus.coerce1
  %and.i72 = and i64 %m_minus.coerce0, 4294967295
  %shr.i73 = lshr i64 %m_minus.coerce0, 32
  %mul.i77 = mul nuw i64 %and3.i, %and.i72
  %mul6.i78 = mul nuw i64 %shr5.i, %and.i72
  %mul7.i79 = mul nuw i64 %and3.i, %shr.i73
  %mul8.i80 = mul nuw i64 %shr5.i, %shr.i73
  %shr9.i81 = lshr i64 %mul.i77, 32
  %and10.i82 = and i64 %mul6.i78, 4294967295
  %shr11.i83 = lshr i64 %mul6.i78, 32
  %and12.i84 = and i64 %mul7.i79, 4294967295
  %shr13.i85 = lshr i64 %mul7.i79, 32
  %add.i86 = add nuw nsw i64 %and10.i82, 2147483648
  %add14.i87 = add nuw nsw i64 %add.i86, %shr9.i81
  %add15.i88 = add nuw nsw i64 %add14.i87, %and12.i84
  %shr18.i91 = lshr i64 %add15.i88, 32
  %f.i43 = getelementptr inbounds %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::diyfp", %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::diyfp"* %m_plus, i64 0, i32 0
  %5 = load i64, i64* %f.i43, align 8, !tbaa !392
  %and.i44 = and i64 %5, 4294967295
  %shr.i45 = lshr i64 %5, 32
  %mul.i49 = mul nuw i64 %and.i44, %and3.i
  %mul6.i50 = mul nuw i64 %and.i44, %shr5.i
  %mul7.i51 = mul nuw i64 %shr.i45, %and3.i
  %mul8.i52 = mul nuw i64 %shr.i45, %shr5.i
  %shr9.i53 = lshr i64 %mul.i49, 32
  %and10.i54 = and i64 %mul6.i50, 4294967295
  %shr11.i55 = lshr i64 %mul6.i50, 32
  %and12.i56 = and i64 %mul7.i51, 4294967295
  %shr13.i57 = lshr i64 %mul7.i51, 32
  %add.i58 = add nuw nsw i64 %and10.i54, 2147483648
  %add14.i59 = add nuw nsw i64 %add.i58, %shr9.i53
  %add15.i60 = add nuw nsw i64 %add14.i59, %and12.i56
  %shr18.i63 = lshr i64 %add15.i60, 32
  %add16.i89 = add nuw i64 %mul8.i80, 1
  %add17.i90 = add nuw i64 %add16.i89, %shr13.i85
  %add19.i92 = add nuw i64 %add17.i90, %shr11.i83
  %add = add i64 %add19.i92, %shr18.i91
  %add16.i61 = add i64 %mul8.i52, -1
  %add17.i62 = add i64 %add16.i61, %shr13.i57
  %add19.i64 = add i64 %add17.i62, %shr11.i55
  %sub = add i64 %add19.i64, %shr18.i63
  %cached.sroa.4.12.extract.shift = lshr i64 %3, 32
  %cached.sroa.4.12.extract.trunc = trunc i64 %cached.sroa.4.12.extract.shift to i32
  %sub17 = sub nsw i32 0, %cached.sroa.4.12.extract.trunc
  store i32 %sub17, i32* %decimal_exponent, align 4, !tbaa !59
  %w.sroa.0.0..sroa_idx = getelementptr inbounds %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::diyfp", %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::diyfp"* %agg.tmp18, i64 0, i32 0
  store i64 %add19.i, i64* %w.sroa.0.0..sroa_idx, align 8, !tbaa.struct !387
  %w.sroa.4.0..sroa_idx29 = getelementptr inbounds %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::diyfp", %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::diyfp"* %agg.tmp18, i64 0, i32 1
  store i32 %add22.i, i32* %w.sroa.4.0..sroa_idx29, align 8, !tbaa.struct !388
  %M_plus.sroa.0.0..sroa_idx = getelementptr inbounds %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::diyfp", %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::diyfp"* %agg.tmp19, i64 0, i32 0
  store i64 %sub, i64* %M_plus.sroa.0.0..sroa_idx, align 8, !tbaa.struct !387
  %M_plus.sroa.4.0..sroa_idx100 = getelementptr inbounds %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::diyfp", %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::diyfp"* %agg.tmp19, i64 0, i32 1
  store i32 %add22.i, i32* %M_plus.sroa.4.0..sroa_idx100, align 8, !tbaa.struct !388
  tail call void @_ZN8nlohmann12json_v3_11_16detail9dtoa_impl16grisu2_digit_genEPcRiS4_NS2_5diyfpES5_S5_(i8* nonnull %buf, i32* nonnull align 4 dereferenceable(4) %len, i32* nonnull align 4 dereferenceable(4) %decimal_exponent, i64 %add, i32 %add22.i, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::diyfp"* nonnull byval(%"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::diyfp") align 8 %agg.tmp18, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::diyfp"* nonnull byval(%"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::diyfp") align 8 %agg.tmp19)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable mustprogress
define linkonce_odr dso_local { i64, i64 } @_ZN8nlohmann12json_v3_11_16detail9dtoa_impl36get_cached_power_for_binary_exponentEi(i32 %e) local_unnamed_addr #19 comdat {
entry:
  %cmp = icmp sgt i32 %e, -1501
  br i1 %cmp, label %cond.end, label %cond.false

cond.false:                                       ; preds = %entry
  tail call void @__assert_fail(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.90, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.36, i64 0, i64 0), i32 16914, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail9dtoa_impl36get_cached_power_for_binary_exponentEi, i64 0, i64 0)) #40
  unreachable

cond.end:                                         ; preds = %entry
  %cmp1 = icmp slt i32 %e, 1501
  br i1 %cmp1, label %cond.end4, label %cond.false3

cond.false3:                                      ; preds = %cond.end
  tail call void @__assert_fail(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.91, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.36, i64 0, i64 0), i32 16915, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail9dtoa_impl36get_cached_power_for_binary_exponentEi, i64 0, i64 0)) #40
  unreachable

cond.end4:                                        ; preds = %cond.end
  %sub5 = sub nsw i32 -61, %e
  %mul = mul nsw i32 %sub5, 78913
  %div = sdiv i32 %mul, 262144
  %cmp6 = icmp slt i32 %e, -61
  %conv = zext i1 %cmp6 to i32
  %add = add nsw i32 %div, %conv
  %cmp10 = icmp sgt i32 %add, -315
  br i1 %cmp10, label %cond.end13, label %cond.false12

cond.false12:                                     ; preds = %cond.end4
  tail call void @__assert_fail(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.92, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.36, i64 0, i64 0), i32 16921, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail9dtoa_impl36get_cached_power_for_binary_exponentEi, i64 0, i64 0)) #40
  unreachable

cond.end13:                                       ; preds = %cond.end4
  %0 = trunc i32 %add to i16
  %div9.lhs.trunc = add nsw i16 %0, 307
  %div951 = sdiv i16 %div9.lhs.trunc, 8
  %cmp15 = icmp ult i16 %div951, 79
  br i1 %cmp15, label %cond.end18, label %cond.false17

cond.false17:                                     ; preds = %cond.end13
  tail call void @__assert_fail(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.93, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.36, i64 0, i64 0), i32 16922, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail9dtoa_impl36get_cached_power_for_binary_exponentEi, i64 0, i64 0)) #40
  unreachable

cond.end18:                                       ; preds = %cond.end13
  %conv1452 = zext i16 %div951 to i64
  %retval.sroa.0.0..sroa_idx = getelementptr inbounds %"struct.std::array.163", %"struct.std::array.163"* @_ZZN8nlohmann12json_v3_11_16detail9dtoa_impl36get_cached_power_for_binary_exponentEiE13kCachedPowers, i64 0, i32 0, i64 %conv1452, i32 0
  %retval.sroa.0.0.copyload = load i64, i64* %retval.sroa.0.0..sroa_idx, align 8, !tbaa.struct !393
  %retval.sroa.2.0..sroa_idx47 = getelementptr inbounds %"struct.std::array.163", %"struct.std::array.163"* @_ZZN8nlohmann12json_v3_11_16detail9dtoa_impl36get_cached_power_for_binary_exponentEiE13kCachedPowers, i64 0, i32 0, i64 %conv1452, i32 1
  %retval.sroa.2.0..sroa_cast = bitcast i32* %retval.sroa.2.0..sroa_idx47 to i64*
  %retval.sroa.2.0.copyload = load i64, i64* %retval.sroa.2.0..sroa_cast, align 8, !tbaa.struct !394
  %retval.sroa.2.8.extract.trunc = trunc i64 %retval.sroa.2.0.copyload to i32
  %add22 = add nsw i32 %retval.sroa.2.8.extract.trunc, %e
  %cmp24 = icmp sgt i32 %add22, -125
  br i1 %cmp24, label %cond.end27, label %cond.false26

cond.false26:                                     ; preds = %cond.end18
  tail call void @__assert_fail(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.94, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.36, i64 0, i64 0), i32 16925, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail9dtoa_impl36get_cached_power_for_binary_exponentEi, i64 0, i64 0)) #40
  unreachable

cond.end27:                                       ; preds = %cond.end18
  %cmp31 = icmp slt i32 %add22, -95
  br i1 %cmp31, label %cond.end34, label %cond.false33

cond.false33:                                     ; preds = %cond.end27
  tail call void @__assert_fail(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.95, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.36, i64 0, i64 0), i32 16926, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail9dtoa_impl36get_cached_power_for_binary_exponentEi, i64 0, i64 0)) #40
  unreachable

cond.end34:                                       ; preds = %cond.end27
  %.fca.0.insert = insertvalue { i64, i64 } undef, i64 %retval.sroa.0.0.copyload, 0
  %.fca.1.insert = insertvalue { i64, i64 } %.fca.0.insert, i64 %retval.sroa.2.0.copyload, 1
  ret { i64, i64 } %.fca.1.insert
}

; Function Attrs: inlinehint nounwind uwtable
define linkonce_odr dso_local void @_ZN8nlohmann12json_v3_11_16detail9dtoa_impl16grisu2_digit_genEPcRiS4_NS2_5diyfpES5_S5_(i8* %buffer, i32* nonnull align 4 dereferenceable(4) %length, i32* nonnull align 4 dereferenceable(4) %decimal_exponent, i64 %M_minus.coerce0, i32 %M_minus.coerce1, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::diyfp"* byval(%"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::diyfp") align 8 %w, %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::diyfp"* byval(%"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::diyfp") align 8 %M_plus) local_unnamed_addr #25 comdat {
entry:
  %e = getelementptr inbounds %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::diyfp", %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::diyfp"* %M_plus, i64 0, i32 1
  %0 = load i32, i32* %e, align 8, !tbaa !390
  %cmp = icmp sgt i32 %0, -61
  br i1 %cmp, label %cond.end, label %cond.false

cond.false:                                       ; preds = %entry
  tail call void @__assert_fail(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.96, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.36, i64 0, i64 0), i32 17036, i8* getelementptr inbounds ([181 x i8], [181 x i8]* @__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail9dtoa_impl16grisu2_digit_genEPcRiS4_NS2_5diyfpES5_S5_, i64 0, i64 0)) #40
  unreachable

cond.end:                                         ; preds = %entry
  %cmp2 = icmp slt i32 %0, -31
  br i1 %cmp2, label %cond.end5, label %cond.false4

cond.false4:                                      ; preds = %cond.end
  tail call void @__assert_fail(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.97, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.36, i64 0, i64 0), i32 17037, i8* getelementptr inbounds ([181 x i8], [181 x i8]* @__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail9dtoa_impl16grisu2_digit_genEPcRiS4_NS2_5diyfpES5_S5_, i64 0, i64 0)) #40
  unreachable

cond.end5:                                        ; preds = %cond.end
  %cmp.i = icmp eq i32 %0, %M_minus.coerce1
  br i1 %cmp.i, label %cond.end.i, label %cond.false.i

cond.false.i:                                     ; preds = %cond.end5
  tail call void @__assert_fail(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.102, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.36, i64 0, i64 0), i32 16556, i8* getelementptr inbounds ([170 x i8], [170 x i8]* @__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail9dtoa_impl5diyfp3subERKS3_S5_, i64 0, i64 0)) #40
  unreachable

cond.end.i:                                       ; preds = %cond.end5
  %f.i = getelementptr inbounds %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::diyfp", %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::diyfp"* %M_plus, i64 0, i32 0
  %1 = load i64, i64* %f.i, align 8, !tbaa !392
  %cmp3.not.i = icmp ult i64 %1, %M_minus.coerce0
  br i1 %cmp3.not.i, label %cond.false5.i, label %_ZN8nlohmann12json_v3_11_16detail9dtoa_impl5diyfp3subERKS3_S5_.exit

cond.false5.i:                                    ; preds = %cond.end.i
  tail call void @__assert_fail(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.103, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.36, i64 0, i64 0), i32 16557, i8* getelementptr inbounds ([170 x i8], [170 x i8]* @__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail9dtoa_impl5diyfp3subERKS3_S5_, i64 0, i64 0)) #40
  unreachable

_ZN8nlohmann12json_v3_11_16detail9dtoa_impl5diyfp3subERKS3_S5_.exit: ; preds = %cond.end.i
  %sub.i = sub i64 %1, %M_minus.coerce0
  %e1.i150 = getelementptr inbounds %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::diyfp", %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::diyfp"* %w, i64 0, i32 1
  %2 = load i32, i32* %e1.i150, align 8, !tbaa !390
  %cmp.i151 = icmp eq i32 %2, %M_minus.coerce1
  br i1 %cmp.i151, label %cond.end.i156, label %cond.false.i152

cond.false.i152:                                  ; preds = %_ZN8nlohmann12json_v3_11_16detail9dtoa_impl5diyfp3subERKS3_S5_.exit
  tail call void @__assert_fail(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.102, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.36, i64 0, i64 0), i32 16556, i8* getelementptr inbounds ([170 x i8], [170 x i8]* @__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail9dtoa_impl5diyfp3subERKS3_S5_, i64 0, i64 0)) #40
  unreachable

cond.end.i156:                                    ; preds = %_ZN8nlohmann12json_v3_11_16detail9dtoa_impl5diyfp3subERKS3_S5_.exit
  %f2.i154 = getelementptr inbounds %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::diyfp", %"struct.nlohmann::json_v3_11_1::detail::dtoa_impl::diyfp"* %w, i64 0, i32 0
  %3 = load i64, i64* %f2.i154, align 8, !tbaa !392
  %cmp3.not.i155 = icmp ult i64 %1, %3
  br i1 %cmp3.not.i155, label %cond.false5.i157, label %_ZN8nlohmann12json_v3_11_16detail9dtoa_impl5diyfp3subERKS3_S5_.exit161

cond.false5.i157:                                 ; preds = %cond.end.i156
  tail call void @__assert_fail(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.103, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.36, i64 0, i64 0), i32 16557, i8* getelementptr inbounds ([170 x i8], [170 x i8]* @__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail9dtoa_impl5diyfp3subERKS3_S5_, i64 0, i64 0)) #40
  unreachable

_ZN8nlohmann12json_v3_11_16detail9dtoa_impl5diyfp3subERKS3_S5_.exit161: ; preds = %cond.end.i156
  %sub.i158 = sub i64 %1, %3
  %sub = sub nsw i32 0, %M_minus.coerce1
  %sh_prom = zext i32 %sub to i64
  %shl = shl nuw nsw i64 1, %sh_prom
  %shr = lshr i64 %1, %sh_prom
  %conv = trunc i64 %shr to i32
  %sub17 = add nsw i64 %shl, -1
  %and = and i64 %1, %sub17
  %cmp18.not = icmp eq i32 %conv, 0
  br i1 %cmp18.not, label %cond.false20, label %cond.end21

cond.false20:                                     ; preds = %_ZN8nlohmann12json_v3_11_16detail9dtoa_impl5diyfp3subERKS3_S5_.exit161
  tail call void @__assert_fail(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.98, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.36, i64 0, i64 0), i32 17064, i8* getelementptr inbounds ([181 x i8], [181 x i8]* @__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail9dtoa_impl16grisu2_digit_genEPcRiS4_NS2_5diyfpES5_S5_, i64 0, i64 0)) #40
  unreachable

cond.end21:                                       ; preds = %_ZN8nlohmann12json_v3_11_16detail9dtoa_impl5diyfp3subERKS3_S5_.exit161
  %cmp.i164 = icmp ugt i32 %conv, 999999999
  br i1 %cmp.i164, label %while.body.preheader, label %if.end.i

if.end.i:                                         ; preds = %cond.end21
  %cmp1.i = icmp ugt i32 %conv, 99999999
  br i1 %cmp1.i, label %while.body.preheader, label %if.end3.i

if.end3.i:                                        ; preds = %if.end.i
  %cmp4.i = icmp ugt i32 %conv, 9999999
  br i1 %cmp4.i, label %while.body.preheader, label %if.end6.i

if.end6.i:                                        ; preds = %if.end3.i
  %cmp7.i = icmp ugt i32 %conv, 999999
  br i1 %cmp7.i, label %while.body.preheader, label %if.end9.i

if.end9.i:                                        ; preds = %if.end6.i
  %cmp10.i = icmp ugt i32 %conv, 99999
  br i1 %cmp10.i, label %while.body.preheader, label %if.end12.i

if.end12.i:                                       ; preds = %if.end9.i
  %cmp13.i = icmp ugt i32 %conv, 9999
  br i1 %cmp13.i, label %while.body.preheader, label %if.end15.i

if.end15.i:                                       ; preds = %if.end12.i
  %cmp16.i = icmp ugt i32 %conv, 999
  br i1 %cmp16.i, label %while.body.preheader, label %if.end18.i

if.end18.i:                                       ; preds = %if.end15.i
  %cmp19.i = icmp ugt i32 %conv, 99
  br i1 %cmp19.i, label %while.body.preheader, label %if.end21.i

if.end21.i:                                       ; preds = %if.end18.i
  %cmp22.i = icmp ugt i32 %conv, 9
  %spec.select = select i1 %cmp22.i, i32 10, i32 1
  %spec.select177 = select i1 %cmp22.i, i32 2, i32 1
  br label %while.body.preheader

while.body.preheader:                             ; preds = %if.end21.i, %if.end18.i, %if.end15.i, %if.end12.i, %if.end9.i, %if.end6.i, %if.end3.i, %if.end.i, %cond.end21
  %n.0182.ph = phi i32 [ 10, %cond.end21 ], [ 9, %if.end.i ], [ 8, %if.end3.i ], [ 7, %if.end6.i ], [ 6, %if.end9.i ], [ 5, %if.end12.i ], [ 4, %if.end15.i ], [ 3, %if.end18.i ], [ %spec.select177, %if.end21.i ]
  %pow10.1181.ph = phi i32 [ 1000000000, %cond.end21 ], [ 100000000, %if.end.i ], [ 10000000, %if.end3.i ], [ 1000000, %if.end6.i ], [ 100000, %if.end9.i ], [ 10000, %if.end12.i ], [ 1000, %if.end15.i ], [ 100, %if.end18.i ], [ %spec.select, %if.end21.i ]
  br label %while.body

while.body:                                       ; preds = %cleanup, %while.body.preheader
  %p1.0183 = phi i32 [ %rem, %cleanup ], [ %conv, %while.body.preheader ]
  %n.0182 = phi i32 [ %dec, %cleanup ], [ %n.0182.ph, %while.body.preheader ]
  %pow10.1181 = phi i32 [ %div42, %cleanup ], [ %pow10.1181.ph, %while.body.preheader ]
  %div = udiv i32 %p1.0183, %pow10.1181
  %rem = urem i32 %p1.0183, %pow10.1181
  %cmp24 = icmp ult i32 %div, 10
  br i1 %cmp24, label %cond.end27, label %cond.false26

cond.false26:                                     ; preds = %while.body
  tail call void @__assert_fail(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.99, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.36, i64 0, i64 0), i32 17099, i8* getelementptr inbounds ([181 x i8], [181 x i8]* @__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail9dtoa_impl16grisu2_digit_genEPcRiS4_NS2_5diyfpES5_S5_, i64 0, i64 0)) #40
  unreachable

cond.end27:                                       ; preds = %while.body
  %4 = trunc i32 %div to i8
  %conv28 = add nuw nsw i8 %4, 48
  %5 = load i32, i32* %length, align 4, !tbaa !59
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %length, align 4, !tbaa !59
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %buffer, i64 %idxprom
  store i8 %conv28, i8* %arrayidx, align 1, !tbaa !21
  %dec = add nsw i32 %n.0182, -1
  %conv29 = zext i32 %rem to i64
  %shl33 = shl i64 %conv29, %sh_prom
  %add34 = add i64 %shl33, %and
  %cmp35.not = icmp ugt i64 %add34, %sub.i
  br i1 %cmp35.not, label %cleanup, label %cleanup.thread

cleanup.thread:                                   ; preds = %cond.end27
  %dec.lcssa = phi i32 [ %dec, %cond.end27 ]
  %add34.lcssa = phi i64 [ %add34, %cond.end27 ]
  %pow10.1181.lcssa7 = phi i32 [ %pow10.1181, %cond.end27 ]
  %6 = load i32, i32* %decimal_exponent, align 4, !tbaa !59
  %add36 = add nsw i32 %6, %dec.lcssa
  store i32 %add36, i32* %decimal_exponent, align 4, !tbaa !59
  %conv37 = zext i32 %pow10.1181.lcssa7 to i64
  %shl41 = shl i64 %conv37, %sh_prom
  %7 = load i32, i32* %length, align 4, !tbaa !59
  tail call void @_ZN8nlohmann12json_v3_11_16detail9dtoa_impl12grisu2_roundEPcimmmm(i8* nonnull %buffer, i32 %7, i64 %sub.i158, i64 %sub.i, i64 %add34.lcssa, i64 %shl41)
  br label %cleanup85

cleanup:                                          ; preds = %cond.end27
  %div42 = udiv i32 %pow10.1181, 10
  %cmp23 = icmp sgt i32 %n.0182, 1
  br i1 %cmp23, label %while.body, label %while.end

while.end:                                        ; preds = %cleanup
  %cmp45 = icmp ugt i64 %and, %sub.i
  br i1 %cmp45, label %for.cond, label %cond.false47

cond.false47:                                     ; preds = %while.end
  tail call void @__assert_fail(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.100, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.36, i64 0, i64 0), i32 17185, i8* getelementptr inbounds ([181 x i8], [181 x i8]* @__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail9dtoa_impl16grisu2_digit_genEPcRiS4_NS2_5diyfpES5_S5_, i64 0, i64 0)) #40
  unreachable

for.cond:                                         ; preds = %cond.end67, %while.end
  %p2.0 = phi i64 [ %and63, %cond.end67 ], [ %and, %while.end ]
  %m.0 = phi i32 [ %inc73, %cond.end67 ], [ 0, %while.end ]
  %dist.0 = phi i64 [ %mul75, %cond.end67 ], [ %sub.i158, %while.end ]
  %delta.0 = phi i64 [ %mul74, %cond.end67 ], [ %sub.i, %while.end ]
  %cmp51.not = icmp ugt i64 %p2.0, 1844674407370955161
  br i1 %cmp51.not, label %cond.false53, label %cond.end54

cond.false53:                                     ; preds = %for.cond
  tail call void @__assert_fail(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.101, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.36, i64 0, i64 0), i32 17197, i8* getelementptr inbounds ([181 x i8], [181 x i8]* @__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail9dtoa_impl16grisu2_digit_genEPcRiS4_NS2_5diyfpES5_S5_, i64 0, i64 0)) #40
  unreachable

cond.end54:                                       ; preds = %for.cond
  %mul = mul nuw i64 %p2.0, 10
  %shr59 = lshr i64 %mul, %sh_prom
  %and63 = and i64 %mul, %sub17
  %cmp64 = icmp ult i64 %shr59, 10
  br i1 %cmp64, label %cond.end67, label %cond.false66

cond.false66:                                     ; preds = %cond.end54
  tail call void @__assert_fail(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.99, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.36, i64 0, i64 0), i32 17206, i8* getelementptr inbounds ([181 x i8], [181 x i8]* @__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail9dtoa_impl16grisu2_digit_genEPcRiS4_NS2_5diyfpES5_S5_, i64 0, i64 0)) #40
  unreachable

cond.end67:                                       ; preds = %cond.end54
  %8 = trunc i64 %shr59 to i8
  %conv69 = add nuw nsw i8 %8, 48
  %9 = load i32, i32* %length, align 4, !tbaa !59
  %inc70 = add nsw i32 %9, 1
  store i32 %inc70, i32* %length, align 4, !tbaa !59
  %idxprom71 = sext i32 %9 to i64
  %arrayidx72 = getelementptr inbounds i8, i8* %buffer, i64 %idxprom71
  store i8 %conv69, i8* %arrayidx72, align 1, !tbaa !21
  %inc73 = add nuw nsw i32 %m.0, 1
  %mul74 = mul i64 %delta.0, 10
  %mul75 = mul i64 %dist.0, 10
  %cmp76.not = icmp ugt i64 %and63, %mul74
  br i1 %cmp76.not, label %for.cond, label %for.end, !llvm.loop !395

for.end:                                          ; preds = %cond.end67
  %inc73.lcssa = phi i32 [ %inc73, %cond.end67 ]
  %mul74.lcssa = phi i64 [ %mul74, %cond.end67 ]
  %mul75.lcssa = phi i64 [ %mul75, %cond.end67 ]
  %and63.lcssa6 = phi i64 [ %and63, %cond.end67 ]
  %10 = load i32, i32* %decimal_exponent, align 4, !tbaa !59
  %sub83 = sub nsw i32 %10, %inc73.lcssa
  store i32 %sub83, i32* %decimal_exponent, align 4, !tbaa !59
  %11 = load i32, i32* %length, align 4, !tbaa !59
  tail call void @_ZN8nlohmann12json_v3_11_16detail9dtoa_impl12grisu2_roundEPcimmmm(i8* nonnull %buffer, i32 %11, i64 %mul75.lcssa, i64 %mul74.lcssa, i64 %and63.lcssa6, i64 %shl)
  br label %cleanup85

cleanup85:                                        ; preds = %for.end, %cleanup.thread
  ret void
}

; Function Attrs: inlinehint nounwind uwtable mustprogress
define linkonce_odr dso_local void @_ZN8nlohmann12json_v3_11_16detail9dtoa_impl12grisu2_roundEPcimmmm(i8* %buf, i32 %len, i64 %dist, i64 %delta, i64 %rest, i64 %ten_k) local_unnamed_addr #19 comdat {
entry:
  %cmp = icmp sgt i32 %len, 0
  br i1 %cmp, label %cond.end, label %cond.false

cond.false:                                       ; preds = %entry
  tail call void @__assert_fail(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.104, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.36, i64 0, i64 0), i32 16982, i8* getelementptr inbounds ([120 x i8], [120 x i8]* @__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail9dtoa_impl12grisu2_roundEPcimmmm, i64 0, i64 0)) #40
  unreachable

cond.end:                                         ; preds = %entry
  %cmp1.not = icmp ugt i64 %dist, %delta
  br i1 %cmp1.not, label %cond.false3, label %cond.end4

cond.false3:                                      ; preds = %cond.end
  tail call void @__assert_fail(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.105, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.36, i64 0, i64 0), i32 16983, i8* getelementptr inbounds ([120 x i8], [120 x i8]* @__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail9dtoa_impl12grisu2_roundEPcimmmm, i64 0, i64 0)) #40
  unreachable

cond.end4:                                        ; preds = %cond.end
  %cmp5.not = icmp ult i64 %delta, %rest
  br i1 %cmp5.not, label %cond.false7, label %cond.end8

cond.false7:                                      ; preds = %cond.end4
  tail call void @__assert_fail(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.106, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.36, i64 0, i64 0), i32 16984, i8* getelementptr inbounds ([120 x i8], [120 x i8]* @__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail9dtoa_impl12grisu2_roundEPcimmmm, i64 0, i64 0)) #40
  unreachable

cond.end8:                                        ; preds = %cond.end4
  %cmp9.not = icmp eq i64 %ten_k, 0
  br i1 %cmp9.not, label %cond.false11, label %while.cond.preheader

while.cond.preheader:                             ; preds = %cond.end8
  %cmp1349 = icmp uge i64 %rest, %dist
  %sub50 = sub i64 %delta, %rest
  %cmp14.not51 = icmp ult i64 %sub50, %ten_k
  %or.cond52 = or i1 %cmp1349, %cmp14.not51
  br i1 %or.cond52, label %while.end, label %land.rhs.lr.ph

land.rhs.lr.ph:                                   ; preds = %while.cond.preheader
  %sub20 = add nsw i32 %len, -1
  %0 = zext i32 %sub20 to i64
  %arrayidx = getelementptr inbounds i8, i8* %buf, i64 %0
  br label %land.rhs

cond.false11:                                     ; preds = %cond.end8
  tail call void @__assert_fail(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.107, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.36, i64 0, i64 0), i32 16985, i8* getelementptr inbounds ([120 x i8], [120 x i8]* @__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail9dtoa_impl12grisu2_roundEPcimmmm, i64 0, i64 0)) #40
  unreachable

land.rhs:                                         ; preds = %cond.end24, %land.rhs.lr.ph
  %rest.addr.053 = phi i64 [ %rest, %land.rhs.lr.ph ], [ %add, %cond.end24 ]
  %add = add i64 %rest.addr.053, %ten_k
  %cmp15 = icmp ult i64 %add, %dist
  br i1 %cmp15, label %while.body, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %sub16 = sub i64 %dist, %rest.addr.053
  %sub18 = sub i64 %add, %dist
  %cmp19 = icmp ugt i64 %sub16, %sub18
  br i1 %cmp19, label %while.body, label %while.end

while.body:                                       ; preds = %lor.rhs, %land.rhs
  %1 = load i8, i8* %arrayidx, align 1, !tbaa !21
  %cmp21.not = icmp eq i8 %1, 48
  br i1 %cmp21.not, label %cond.false23, label %cond.end24

cond.false23:                                     ; preds = %while.body
  tail call void @__assert_fail(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.108, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.36, i64 0, i64 0), i32 17008, i8* getelementptr inbounds ([120 x i8], [120 x i8]* @__PRETTY_FUNCTION__._ZN8nlohmann12json_v3_11_16detail9dtoa_impl12grisu2_roundEPcimmmm, i64 0, i64 0)) #40
  unreachable

cond.end24:                                       ; preds = %while.body
  %dec = add i8 %1, -1
  store i8 %dec, i8* %arrayidx, align 1, !tbaa !21
  %cmp13 = icmp uge i64 %add, %dist
  %sub = sub i64 %delta, %add
  %cmp14.not = icmp ult i64 %sub, %ten_k
  %or.cond = or i1 %cmp13, %cmp14.not
  br i1 %or.cond, label %while.end, label %land.rhs, !llvm.loop !396

while.end:                                        ; preds = %cond.end24, %lor.rhs, %while.cond.preheader
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @_GLOBAL__sub_I_hand.cpp() #0 section ".text.startup" {
entry:
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull dereferenceable(1) @_ZStL8__ioinit) #38
  %0 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #38
  ret void
}

; Function Attrs: nofree nosync nounwind willreturn
declare void @llvm.assume(i1 noundef) #34

; Function Attrs: nofree nounwind
declare noundef i32 @puts(i8* nocapture noundef readonly) local_unnamed_addr #7

; Function Attrs: nofree nounwind
declare noundef i32 @putchar(i32 noundef) local_unnamed_addr #7

; Function Attrs: inaccessiblememonly nofree nosync nounwind willreturn
declare void @llvm.experimental.noalias.scope.decl(metadata) #35

; Function Attrs: nounwind uwtable willreturn mustprogress
define internal void @diffehand_objective(double* noalias nocapture readonly %theta, double* nocapture %"theta'", i32 %bone_count, i8** noalias nocapture readnone %bone_names, i32* noalias nocapture readonly %parents, %struct.Matrix* noalias nocapture readonly %base_relatives, %struct.Matrix* noalias nocapture readonly %inverse_base_absolutes, %struct.Matrix* noalias nocapture readonly %base_positions, %struct.Matrix* noalias nocapture readonly %weights, %struct.Triangle* noalias nocapture readnone %triangles, i32 %is_mirrored, i32 %corresp_count, i32* noalias nocapture readonly %correspondences, %struct.Matrix* nocapture readonly %points, double* noalias nocapture %err, double* nocapture %"err'") #16 {
entry:
  %call.i = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #45
  %"call.i'mi" = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #45
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16) dereferenceable_or_null(16) %"call.i'mi", i8 0, i64 16, i1 false)
  %"'ipc" = bitcast i8* %"call.i'mi" to %struct.Matrix*
  %0 = bitcast i8* %call.i to %struct.Matrix*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %call.i, i8 0, i64 16, i1 false) #45
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %"call.i'mi", i8 0, i64 16, i1 false) #45
  %_augmented5 = call { i8*, i8*, double*, i32, i1, double*, i32*, i32* } @augmented_to_pose_params(i32 %bone_count, double* %theta, double* %"theta'", i8** undef, %struct.Matrix* nonnull %0, %struct.Matrix* nonnull %"'ipc")
  %call.i39 = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #45
  %"call.i39'mi" = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #45
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16) dereferenceable_or_null(16) %"call.i39'mi", i8 0, i64 16, i1 false)
  %"'ipc4" = bitcast i8* %"call.i39'mi" to %struct.Matrix*
  %1 = bitcast i8* %call.i39 to %struct.Matrix*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %call.i39, i8 0, i64 16, i1 false) #45
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %"call.i39'mi", i8 0, i64 16, i1 false) #45
  %_augmented = call fastcc { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } @augmented__ZL28get_skinned_vertex_positionsiPK6MatrixPKiS1_S1_S1_iS1_PS_i(i32 %bone_count, %struct.Matrix* %base_relatives, i32* %parents, %struct.Matrix* %inverse_base_absolutes, %struct.Matrix* %base_positions, %struct.Matrix* %weights, i32 %is_mirrored, %struct.Matrix* nonnull %0, %struct.Matrix* nonnull %"'ipc", %struct.Matrix* nonnull %1, %struct.Matrix* nonnull %"'ipc4")
  %cmp45 = icmp sgt i32 %corresp_count, 0
  br i1 %cmp45, label %for.cond2.preheader.lr.ph, label %invertentry

for.cond2.preheader.lr.ph:                        ; preds = %entry
  %wide.trip.count = zext i32 %corresp_count to i64
  %wide.trip.count_unwrap = zext i32 %corresp_count to i64
  br label %invertfor.inc17

invertentry:                                      ; preds = %invertfor.cond2.preheader, %entry
  call fastcc void @diffe_ZL28get_skinned_vertex_positionsiPK6MatrixPKiS1_S1_S1_iS1_PS_i(i32 %bone_count, %struct.Matrix* %base_relatives, i32* %parents, %struct.Matrix* %inverse_base_absolutes, %struct.Matrix* %base_positions, %struct.Matrix* %weights, i32 %is_mirrored, %struct.Matrix* nonnull %0, %struct.Matrix* nonnull %"'ipc", %struct.Matrix* nonnull %1, %struct.Matrix* nonnull %"'ipc4", { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %_augmented)
  call void @free(i8* nonnull %"call.i39'mi")
  call void @free(i8* nonnull %call.i39)
  call void @diffeto_pose_params(i32 %bone_count, double* %theta, double* %"theta'", i8** undef, %struct.Matrix* nonnull %0, %struct.Matrix* nonnull %"'ipc", { i8*, i8*, double*, i32, i1, double*, i32*, i32* } %_augmented5)
  call void @free(i8* nonnull %"call.i'mi")
  call void @free(i8* nonnull %call.i)
  ret void

invertfor.cond2.preheader:                        ; preds = %invertfor.body4
  %2 = icmp eq i64 %"iv'ac.0", 0
  br i1 %2, label %invertentry, label %invertfor.inc17

invertfor.body4:                                  ; preds = %invertfor.inc17, %incinvertfor.body4
  %"iv1'ac.0" = phi i64 [ 2, %invertfor.inc17 ], [ %7, %incinvertfor.body4 ]
  %_unwrap = mul nuw nsw i64 %"iv'ac.0", 3
  %_unwrap12 = add nuw nsw i64 %"iv1'ac.0", %_unwrap
  %"arrayidx16'ipg_unwrap" = getelementptr inbounds double, double* %"err'", i64 %_unwrap12
  %3 = load double, double* %"arrayidx16'ipg_unwrap", align 8, !tbaa !75, !alias.scope !397, !noalias !400
  store double 0.000000e+00, double* %"arrayidx16'ipg_unwrap", align 8, !tbaa !75, !alias.scope !397, !noalias !400
  %"data5'ipg_unwrap" = getelementptr inbounds i8, i8* %"call.i39'mi", i64 8
  %"'ipc6_unwrap" = bitcast i8* %"data5'ipg_unwrap" to double**
  %"'ipl_unwrap" = load double*, double** %"'ipc6_unwrap", align 8, !tbaa !137, !alias.scope !402, !noalias !405, !invariant.group !407
  %nrows8_unwrap = bitcast i8* %call.i39 to i32*
  %_unwrap13 = load i32, i32* %nrows8_unwrap, align 8, !tbaa !138, !alias.scope !405, !noalias !402, !invariant.group !408
  %arrayidx7_unwrap = getelementptr inbounds i32, i32* %correspondences, i64 %"iv'ac.0"
  %_unwrap14 = load i32, i32* %arrayidx7_unwrap, align 4, !tbaa !59, !alias.scope !409, !noalias !412, !invariant.group !414
  %mul9_unwrap = mul nsw i32 %_unwrap13, %_unwrap14
  %_unwrap15 = sext i32 %mul9_unwrap to i64
  %_unwrap16 = add nsw i64 %"iv1'ac.0", %_unwrap15
  %"arrayidx12'ipg_unwrap" = getelementptr inbounds double, double* %"'ipl_unwrap", i64 %_unwrap16
  %4 = load double, double* %"arrayidx12'ipg_unwrap", align 8, !tbaa !75, !alias.scope !415, !noalias !418
  %5 = fsub fast double %4, %3
  store double %5, double* %"arrayidx12'ipg_unwrap", align 8, !tbaa !75, !alias.scope !415, !noalias !418
  %6 = icmp eq i64 %"iv1'ac.0", 0
  br i1 %6, label %invertfor.cond2.preheader, label %incinvertfor.body4

incinvertfor.body4:                               ; preds = %invertfor.body4
  %7 = add nsw i64 %"iv1'ac.0", -1
  br label %invertfor.body4

invertfor.inc17:                                  ; preds = %invertfor.cond2.preheader, %for.cond2.preheader.lr.ph
  %"iv'ac.0.in" = phi i64 [ %wide.trip.count_unwrap, %for.cond2.preheader.lr.ph ], [ %"iv'ac.0", %invertfor.cond2.preheader ]
  %"iv'ac.0" = add nsw i64 %"iv'ac.0.in", -1
  br label %invertfor.body4
}

; Function Attrs: nounwind uwtable willreturn mustprogress
define internal { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** } @augmented_mat_mult(%struct.Matrix* noalias nocapture readonly %lhs, %struct.Matrix* nocapture %"lhs'", %struct.Matrix* noalias nocapture readonly %rhs, %struct.Matrix* nocapture %"rhs'", %struct.Matrix* noalias nocapture %out, %struct.Matrix* nocapture %"out'") local_unnamed_addr #16 {
entry:
  %0 = alloca { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }, align 8
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 0
  %1 = load i32, i32* %nrows, align 8, !tbaa !138, !alias.scope !420, !noalias !423
  %2 = getelementptr inbounds { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }* %0, i64 0, i32 5
  store i32 %1, i32* %2, align 8
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 1
  %3 = load i32, i32* %ncols, align 4, !tbaa !139, !alias.scope !425, !noalias !428
  %4 = getelementptr inbounds { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }* %0, i64 0, i32 6
  store i32 %3, i32* %4, align 4
  %"nrows1.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 0
  %nrows1.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 0
  %5 = load i32, i32* %nrows1.i, align 8, !tbaa !138, !alias.scope !430, !noalias !433
  %"ncols2.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 1
  %ncols2.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 1
  %6 = load i32, i32* %ncols2.i, align 4, !tbaa !139, !alias.scope !430, !noalias !433
  %mul.i = mul nsw i32 %6, %5
  %mul3.i = mul nsw i32 %3, %1
  %cmp.not.i = icmp eq i32 %mul.i, %mul3.i
  %7 = getelementptr inbounds { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }* %0, i64 0, i32 7
  store i1 %cmp.not.i, i1* %7, align 8
  br i1 %cmp.not.i, label %resize.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %"data.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 2
  %data.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 2
  %8 = load double*, double** %data.i, align 8, !tbaa !137, !alias.scope !430, !noalias !433
  %cmp4.not.i = icmp eq double* %8, null
  %9 = getelementptr inbounds { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }* %0, i64 0, i32 8
  store i1 %cmp4.not.i, i1* %9, align 1
  %cmp8.i = icmp sgt i32 %mul3.i, 0
  br i1 %cmp8.i, label %if.then9.i, label %if.else.i

if.then9.i:                                       ; preds = %if.then.i
  %conv31.i = zext i32 %mul3.i to i64
  %mul11.i = shl nuw nsw i64 %conv31.i, 3
  %call.i = tail call noalias i8* @malloc(i64 %mul11.i) #45
  %10 = getelementptr inbounds { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }* %0, i64 0, i32 1
  store i8* %call.i, i8** %10, align 8
  %"call.i'mi" = tail call noalias nonnull i8* @malloc(i64 %mul11.i) #45
  %11 = getelementptr inbounds { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }* %0, i64 0, i32 0
  store i8* %"call.i'mi", i8** %11, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %"call.i'mi", i8 0, i64 %mul11.i, i1 false)
  %"'ipc" = bitcast double** %"data.i'ipg" to i8**
  %12 = bitcast double** %data.i to i8**
  store i8* %"call.i'mi", i8** %"'ipc", align 8, !tbaa !137, !alias.scope !433, !noalias !430
  store i8* %call.i, i8** %12, align 8, !tbaa !137, !alias.scope !430, !noalias !433
  br label %resize.exit

if.else.i:                                        ; preds = %if.then.i
  store double* null, double** %"data.i'ipg", align 8, !tbaa !137, !alias.scope !433, !noalias !430
  store double* null, double** %data.i, align 8, !tbaa !137, !alias.scope !430, !noalias !433
  br label %resize.exit

resize.exit:                                      ; preds = %if.else.i, %if.then9.i, %entry
  store i32 %3, i32* %"ncols2.i'ipg", align 4, !tbaa !139, !alias.scope !433, !noalias !430
  store i32 %3, i32* %ncols2.i, align 4, !tbaa !139, !alias.scope !430, !noalias !433
  store i32 %1, i32* %"nrows1.i'ipg", align 8, !tbaa !138, !alias.scope !433, !noalias !430
  store i32 %1, i32* %nrows1.i, align 8, !tbaa !138, !alias.scope !430, !noalias !433
  %cmp85 = icmp sgt i32 %1, 0
  br i1 %cmp85, label %for.cond2.preheader.lr.ph, label %for.end49

for.cond2.preheader.lr.ph:                        ; preds = %resize.exit
  %cmp483 = icmp sgt i32 %3, 0
  %"data'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"lhs'", i64 0, i32 2
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 2
  %"data7'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"rhs'", i64 0, i32 2
  %data7 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 2
  %nrows8 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 0
  %"data14'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 2
  %data14 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 2
  %ncols21 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 1
  %13 = zext i32 %1 to i64
  %wide.trip.count96 = zext i32 %3 to i64
  %mallocsize = shl nuw nsw i64 %13, 3
  %malloccall = tail call noalias nonnull i8* @malloc(i64 %mallocsize)
  %"'ipl_malloccache" = bitcast i8* %malloccall to double**
  %14 = getelementptr inbounds { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }* %0, i64 0, i32 2
  %15 = bitcast double*** %14 to i8**
  store i8* %malloccall, i8** %15, align 8
  %malloccall13 = tail call noalias nonnull i8* @malloc(i64 %mallocsize)
  %"'ipl8_malloccache" = bitcast i8* %malloccall13 to double**
  %16 = getelementptr inbounds { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }* %0, i64 0, i32 3
  %17 = bitcast double*** %16 to i8**
  store i8* %malloccall13, i8** %17, align 8
  %malloccall22 = tail call noalias nonnull i8* @malloc(i64 %mallocsize)
  %"'ipl17_malloccache" = bitcast i8* %malloccall22 to double**
  %18 = getelementptr inbounds { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }* %0, i64 0, i32 4
  %19 = bitcast double*** %18 to i8**
  store i8* %malloccall22, i8** %19, align 8
  %mallocsize29 = shl nuw nsw i64 %13, 2
  %malloccall30 = tail call noalias nonnull i8* @malloc(i64 %mallocsize29)
  %_malloccache = bitcast i8* %malloccall30 to i32*
  %20 = getelementptr inbounds { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }* %0, i64 0, i32 9
  %21 = bitcast i32** %20 to i8**
  store i8* %malloccall30, i8** %21, align 8
  %malloccall39 = tail call noalias nonnull i8* @malloc(i64 %mallocsize29)
  %_malloccache40 = bitcast i8* %malloccall39 to i32*
  %22 = getelementptr inbounds { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }* %0, i64 0, i32 10
  %23 = bitcast i32** %22 to i8**
  store i8* %malloccall39, i8** %23, align 8
  %24 = mul nuw nsw i64 %wide.trip.count96, %13
  %mallocsize48 = shl nuw nsw i64 %24, 3
  %malloccall49 = tail call noalias nonnull i8* @malloc(i64 %mallocsize48)
  %_malloccache50 = bitcast i8* %malloccall49 to double*
  %25 = getelementptr inbounds { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }* %0, i64 0, i32 11
  %26 = bitcast double** %25 to i8**
  store i8* %malloccall49, i8** %26, align 8
  %malloccall59 = tail call noalias nonnull i8* @malloc(i64 %mallocsize48)
  %_malloccache60 = bitcast i8* %malloccall59 to double*
  %27 = getelementptr inbounds { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }* %0, i64 0, i32 12
  %28 = bitcast double** %27 to i8**
  store i8* %malloccall59, i8** %28, align 8
  %malloccall72 = tail call noalias nonnull i8* @malloc(i64 %mallocsize48)
  %_malloccache73 = bitcast i8* %malloccall72 to double**
  %29 = getelementptr inbounds { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }* %0, i64 0, i32 13
  %30 = bitcast double*** %29 to i8**
  store i8* %malloccall72, i8** %30, align 8
  %malloccall91 = tail call noalias nonnull i8* @malloc(i64 %mallocsize48)
  %_malloccache92 = bitcast i8* %malloccall91 to double**
  %31 = getelementptr inbounds { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }* %0, i64 0, i32 14
  %32 = bitcast double*** %31 to i8**
  store i8* %malloccall91, i8** %32, align 8
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.inc47, %for.cond2.preheader.lr.ph
  %iv = phi i64 [ %iv.next, %for.inc47 ], [ 0, %for.cond2.preheader.lr.ph ]
  %iv.next = add nuw nsw i64 %iv, 1
  br i1 %cmp483, label %for.body5.lr.ph, label %for.inc47

for.body5.lr.ph:                                  ; preds = %for.cond2.preheader
  %"'ipl17" = load double*, double** %"data'ipg", align 8, !tbaa !137, !alias.scope !423, !noalias !420
  %33 = load double*, double** %data, align 8, !tbaa !137, !alias.scope !420, !noalias !423
  %arrayidx = getelementptr inbounds double, double* %33, i64 %iv
  %"'ipl8" = load double*, double** %"data7'ipg", align 8, !tbaa !137, !alias.scope !428, !noalias !425
  %34 = load double*, double** %data7, align 8, !tbaa !137, !alias.scope !425, !noalias !428
  %35 = load i32, i32* %nrows8, align 8, !tbaa !138, !alias.scope !425, !noalias !428
  %"'ipl" = load double*, double** %"data14'ipg", align 8, !tbaa !137, !alias.scope !433, !noalias !430
  %36 = getelementptr inbounds double*, double** %"'ipl_malloccache", i64 %iv
  store double* %"'ipl", double** %36, align 8, !tbaa !137, !invariant.group !435
  %37 = getelementptr inbounds i32, i32* %_malloccache, i64 %iv
  store i32 %35, i32* %37, align 4, !tbaa !138, !invariant.group !436
  %38 = getelementptr inbounds double*, double** %"'ipl17_malloccache", i64 %iv
  store double* %"'ipl17", double** %38, align 8, !tbaa !137, !invariant.group !437
  %39 = getelementptr inbounds double*, double** %"'ipl8_malloccache", i64 %iv
  store double* %"'ipl8", double** %39, align 8, !tbaa !137, !invariant.group !438
  %40 = load double*, double** %data14, align 8, !tbaa !137, !alias.scope !430, !noalias !433
  %41 = load i32, i32* %ncols21, align 4, !tbaa !139, !alias.scope !420, !noalias !423
  %42 = getelementptr inbounds i32, i32* %_malloccache40, i64 %iv
  store i32 %41, i32* %42, align 4, !tbaa !139, !invariant.group !439
  %cmp2281 = icmp sgt i32 %41, 1
  %43 = sext i32 %35 to i64
  %wide.trip.count = zext i32 %41 to i64
  br label %for.body5

for.body5:                                        ; preds = %for.inc44, %for.body5.lr.ph
  %iv1 = phi i64 [ %iv.next2, %for.inc44 ], [ 0, %for.body5.lr.ph ]
  %iv.next2 = add nuw nsw i64 %iv1, 1
  %44 = load double, double* %arrayidx, align 8, !tbaa !75, !alias.scope !440, !noalias !443
  %45 = mul nsw i64 %iv1, %43
  %arrayidx12 = getelementptr inbounds double, double* %34, i64 %45
  %46 = load double, double* %arrayidx12, align 8, !tbaa !75, !alias.scope !445, !noalias !448
  %mul13 = fmul fast double %46, %44
  %47 = mul nuw nsw i64 %iv1, %13
  %48 = add nuw nsw i64 %47, %iv
  %arrayidx19 = getelementptr inbounds double, double* %40, i64 %48
  store double %mul13, double* %arrayidx19, align 8, !tbaa !75, !alias.scope !450, !noalias !453
  %49 = mul nuw nsw i64 %iv, %wide.trip.count96
  %50 = add nuw nsw i64 %iv1, %49
  %51 = getelementptr inbounds double, double* %_malloccache60, i64 %50
  store double %46, double* %51, align 8, !tbaa !75, !invariant.group !455
  %52 = getelementptr inbounds double, double* %_malloccache50, i64 %50
  store double %44, double* %52, align 8, !tbaa !75, !invariant.group !456
  br i1 %cmp2281, label %for.body23.preheader, label %for.inc44

for.body23.preheader:                             ; preds = %for.body5
  %53 = getelementptr inbounds double*, double** %_malloccache73, i64 %50
  %54 = shl nuw nsw i64 %wide.trip.count, 3
  %mallocsize74 = add nsw i64 %54, -8
  %malloccall75 = tail call noalias nonnull i8* @malloc(i64 %mallocsize74)
  %55 = bitcast double** %53 to i8**
  store i8* %malloccall75, i8** %55, align 8
  %56 = getelementptr inbounds double*, double** %_malloccache92, i64 %50
  %malloccall94 = tail call noalias nonnull i8* @malloc(i64 %mallocsize74)
  %57 = bitcast double** %56 to i8**
  store i8* %malloccall94, i8** %57, align 8
  br label %for.body23

for.body23:                                       ; preds = %for.body23, %for.body23.preheader
  %iv3 = phi i64 [ %iv.next4, %for.body23 ], [ 0, %for.body23.preheader ]
  %58 = phi double [ %add43, %for.body23 ], [ %mul13, %for.body23.preheader ]
  %iv.next4 = add nuw nsw i64 %iv3, 1
  %59 = mul nuw nsw i64 %iv.next4, %13
  %60 = add nuw nsw i64 %59, %iv
  %arrayidx29 = getelementptr inbounds double, double* %33, i64 %60
  %61 = load double, double* %arrayidx29, align 8, !tbaa !75, !alias.scope !440, !noalias !443
  %62 = add nsw i64 %iv.next4, %45
  %arrayidx35 = getelementptr inbounds double, double* %34, i64 %62
  %63 = load double, double* %arrayidx35, align 8, !tbaa !75, !alias.scope !445, !noalias !448
  %mul36 = fmul fast double %63, %61
  %add43 = fadd fast double %58, %mul36
  store double %add43, double* %arrayidx19, align 8, !tbaa !75, !alias.scope !450, !noalias !453
  %64 = load double*, double** %56, align 8, !dereferenceable !457, !invariant.group !458
  %65 = getelementptr inbounds double, double* %64, i64 %iv3
  store double %63, double* %65, align 8, !tbaa !75, !invariant.group !459
  %66 = load double*, double** %53, align 8, !dereferenceable !457, !invariant.group !460
  %67 = getelementptr inbounds double, double* %66, i64 %iv3
  store double %61, double* %67, align 8, !tbaa !75, !invariant.group !461
  %indvars.iv.next = add nuw nsw i64 %iv3, 2
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.inc44, label %for.body23, !llvm.loop !213

for.inc44:                                        ; preds = %for.body23, %for.body5
  %exitcond97.not = icmp eq i64 %iv.next2, %wide.trip.count96
  br i1 %exitcond97.not, label %for.inc47, label %for.body5, !llvm.loop !214

for.inc47:                                        ; preds = %for.inc44, %for.cond2.preheader
  %exitcond101.not = icmp eq i64 %iv.next, %13
  br i1 %exitcond101.not, label %for.end49, label %for.cond2.preheader, !llvm.loop !215

for.end49:                                        ; preds = %for.inc47, %resize.exit
  %68 = load { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }* %0, align 8
  ret { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** } %68
}

; Function Attrs: nounwind uwtable willreturn mustprogress
define internal { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } @augmented_relatives_to_absolutes(i32 %count, %struct.Matrix* nocapture readonly %relatives, %struct.Matrix* nocapture %"relatives'", i32* nocapture readonly %parents, %struct.Matrix* nocapture %absolutes, %struct.Matrix* nocapture %"absolutes'") local_unnamed_addr #16 {
entry:
  %0 = alloca { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, align 8
  %cmp26 = icmp sgt i32 %count, 0
  br i1 %cmp26, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %count to i64
  %mallocsize = shl nuw nsw i64 %wide.trip.count, 3
  %malloccall = tail call noalias nonnull i8* @malloc(i64 %mallocsize)
  %"call.i'mi_malloccache" = bitcast i8* %malloccall to i8**
  %1 = bitcast { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }* %0 to i8**
  store i8* %malloccall, i8** %1, align 8
  %malloccall10 = tail call noalias nonnull i8* @malloc(i64 %mallocsize)
  %call.i_malloccache = bitcast i8* %malloccall10 to i8**
  %2 = getelementptr inbounds { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }* %0, i64 0, i32 1
  %3 = bitcast i8*** %2 to i8**
  store i8* %malloccall10, i8** %3, align 8
  %malloccall18 = tail call noalias nonnull i8* @malloc(i64 %mallocsize)
  %"'ipl_malloccache" = bitcast i8* %malloccall18 to double**
  %4 = getelementptr inbounds { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }* %0, i64 0, i32 2
  %5 = bitcast double*** %4 to i8**
  store i8* %malloccall18, i8** %5, align 8
  %mallocsize25 = mul nuw nsw i64 %wide.trip.count, 104
  %malloccall26 = tail call noalias nonnull i8* @malloc(i64 %mallocsize25)
  %_augmented_malloccache = bitcast i8* %malloccall26 to { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*
  %6 = getelementptr inbounds { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }* %0, i64 0, i32 3
  %7 = bitcast { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }** %6 to i8**
  store i8* %malloccall26, i8** %7, align 8
  %mallocsize33 = shl nuw nsw i64 %wide.trip.count, 2
  %malloccall34 = tail call noalias nonnull i8* @malloc(i64 %mallocsize33)
  %_malloccache = bitcast i8* %malloccall34 to i32*
  %8 = getelementptr inbounds { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }* %0, i64 0, i32 4
  %9 = bitcast i32** %8 to i8**
  store i8* %malloccall34, i8** %9, align 8
  %malloccall40 = tail call noalias nonnull i8* @malloc(i64 %wide.trip.count)
  %10 = getelementptr inbounds { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }* %0, i64 0, i32 5
  %11 = bitcast i1** %10 to i8**
  store i8* %malloccall40, i8** %11, align 8
  %malloccall47 = tail call noalias nonnull i8* @malloc(i64 %mallocsize33)
  %mul.i_malloccache = bitcast i8* %malloccall47 to i32*
  %12 = getelementptr inbounds { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }* %0, i64 0, i32 6
  %13 = bitcast i32** %12 to i8**
  store i8* %malloccall47, i8** %13, align 8
  br label %for.body

for.body:                                         ; preds = %for.inc, %for.body.preheader
  %iv = phi i64 [ %iv.next, %for.inc ], [ 0, %for.body.preheader ]
  %iv.next = add nuw nsw i64 %iv, 1
  %arrayidx = getelementptr inbounds i32, i32* %parents, i64 %iv
  %14 = load i32, i32* %arrayidx, align 4, !tbaa !59, !alias.scope !462, !noalias !465
  %15 = getelementptr inbounds i32, i32* %_malloccache, i64 %iv
  store i32 %14, i32* %15, align 4, !tbaa !59, !invariant.group !467
  %cmp1 = icmp eq i32 %14, -1
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %"data.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"absolutes'", i64 %iv, i32 2
  %data.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %iv, i32 2
  %16 = load double*, double** %data.i, align 8, !tbaa !137, !alias.scope !468, !noalias !471
  %cmp.not.i = icmp eq double* %16, null
  %17 = getelementptr inbounds i8, i8* %malloccall40, i64 %iv
  %18 = bitcast i8* %17 to i1*
  store i1 %cmp.not.i, i1* %18, align 1, !invariant.group !473
  %ncols.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %iv, i32 1
  %19 = load i32, i32* %ncols.i, align 4, !tbaa !139, !alias.scope !474, !noalias !477
  %"ncols2.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"absolutes'", i64 %iv, i32 1
  %ncols2.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %iv, i32 1
  store i32 %19, i32* %"ncols2.i'ipg", align 4, !tbaa !139, !alias.scope !471, !noalias !468
  store i32 %19, i32* %ncols2.i, align 4, !tbaa !139, !alias.scope !468, !noalias !471
  %nrows.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %iv, i32 0
  %20 = load i32, i32* %nrows.i, align 8, !tbaa !138, !alias.scope !474, !noalias !477
  %"nrows3.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"absolutes'", i64 %iv, i32 0
  %nrows3.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %iv, i32 0
  store i32 %20, i32* %"nrows3.i'ipg", align 8, !tbaa !138, !alias.scope !471, !noalias !468
  store i32 %20, i32* %nrows3.i, align 8, !tbaa !138, !alias.scope !468, !noalias !471
  %mul.i = mul i32 %20, %19
  %conv.i = sext i32 %mul.i to i64
  %mul6.i = shl nsw i64 %conv.i, 3
  %call.i = tail call noalias i8* @malloc(i64 %mul6.i) #45
  %"call.i'mi" = tail call noalias nonnull i8* @malloc(i64 %mul6.i) #45
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %"call.i'mi", i8 0, i64 %mul6.i, i1 false)
  %"'ipc" = bitcast double** %"data.i'ipg" to i8**
  %21 = bitcast double** %data.i to i8**
  store i8* %"call.i'mi", i8** %"'ipc", align 8, !tbaa !137, !alias.scope !471, !noalias !468
  %22 = getelementptr inbounds i32, i32* %mul.i_malloccache, i64 %iv
  store i32 %mul.i, i32* %22, align 4, !invariant.group !479
  %23 = getelementptr inbounds i8*, i8** %call.i_malloccache, i64 %iv
  store i8* %call.i, i8** %23, align 8, !invariant.group !480
  %24 = getelementptr inbounds i8*, i8** %"call.i'mi_malloccache", i64 %iv
  store i8* %"call.i'mi", i8** %24, align 8, !invariant.group !481
  store i8* %call.i, i8** %21, align 8, !tbaa !137, !alias.scope !468, !noalias !471
  %cmp1131.i = icmp sgt i32 %mul.i, 0
  %25 = bitcast i8* %call.i to double*
  br i1 %cmp1131.i, label %for.body.lr.ph.i, label %for.inc

for.body.lr.ph.i:                                 ; preds = %if.then
  %"data12.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"relatives'", i64 %iv, i32 2
  %data12.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %iv, i32 2
  %"'ipl" = load double*, double** %"data12.i'ipg", align 8, !tbaa !137, !alias.scope !477, !noalias !474
  %26 = getelementptr inbounds double*, double** %"'ipl_malloccache", i64 %iv
  store double* %"'ipl", double** %26, align 8, !tbaa !137, !invariant.group !482
  %27 = load double*, double** %data12.i, align 8, !tbaa !137, !alias.scope !474, !noalias !477
  %wide.trip.count.i = zext i32 %mul.i to i64
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i, %for.body.lr.ph.i
  %iv1 = phi i64 [ %iv.next2, %for.body.i ], [ 0, %for.body.lr.ph.i ]
  %iv.next2 = add nuw nsw i64 %iv1, 1
  %arrayidx.i = getelementptr inbounds double, double* %27, i64 %iv1
  %28 = load double, double* %arrayidx.i, align 8, !tbaa !75, !alias.scope !483, !noalias !486
  %arrayidx15.i = getelementptr inbounds double, double* %25, i64 %iv1
  store double %28, double* %arrayidx15.i, align 8, !tbaa !75, !alias.scope !488, !noalias !491
  %exitcond.not.i = icmp eq i64 %iv.next2, %wide.trip.count.i
  br i1 %exitcond.not.i, label %for.inc, label %for.body.i, !llvm.loop !221

if.else:                                          ; preds = %for.body
  %idxprom8 = sext i32 %14 to i64
  %"arrayidx9'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"absolutes'", i64 %idxprom8
  %arrayidx9 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %idxprom8
  %"arrayidx11'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"relatives'", i64 %iv
  %arrayidx11 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %iv
  %"arrayidx13'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"absolutes'", i64 %iv
  %arrayidx13 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %iv
  %_augmented = call { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** } @augmented_mat_mult(%struct.Matrix* %arrayidx9, %struct.Matrix* %"arrayidx9'ipg", %struct.Matrix* %arrayidx11, %struct.Matrix* %"arrayidx11'ipg", %struct.Matrix* %arrayidx13, %struct.Matrix* %"arrayidx13'ipg")
  %29 = getelementptr inbounds { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }* %_augmented_malloccache, i64 %iv
  store { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** } %_augmented, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }* %29, align 8, !invariant.group !493
  br label %for.inc

for.inc:                                          ; preds = %if.else, %for.body.i, %if.then
  %exitcond.not = icmp eq i64 %iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.end, label %for.body, !llvm.loop !227

for.end:                                          ; preds = %for.inc, %entry
  %.elt = getelementptr inbounds { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }* %0, i64 0, i32 0
  %.unpack = load i8**, i8*** %.elt, align 8
  %30 = insertvalue { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } undef, i8** %.unpack, 0
  %.elt1 = getelementptr inbounds { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }* %0, i64 0, i32 1
  %.unpack2 = load i8**, i8*** %.elt1, align 8
  %31 = insertvalue { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %30, i8** %.unpack2, 1
  %.elt3 = getelementptr inbounds { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }* %0, i64 0, i32 2
  %.unpack4 = load double**, double*** %.elt3, align 8
  %32 = insertvalue { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %31, double** %.unpack4, 2
  %.elt5 = getelementptr inbounds { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }* %0, i64 0, i32 3
  %.unpack6 = load { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }** %.elt5, align 8
  %33 = insertvalue { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %32, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }* %.unpack6, 3
  %.elt7 = getelementptr inbounds { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }* %0, i64 0, i32 4
  %.unpack8 = load i32*, i32** %.elt7, align 8
  %34 = insertvalue { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %33, i32* %.unpack8, 4
  %.elt9 = getelementptr inbounds { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }* %0, i64 0, i32 5
  %.unpack10 = load i1*, i1** %.elt9, align 8
  %35 = insertvalue { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %34, i1* %.unpack10, 5
  %.elt11 = getelementptr inbounds { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }* %0, i64 0, i32 6
  %.unpack12 = load i32*, i32** %.elt11, align 8
  %36 = insertvalue { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %35, i32* %.unpack12, 6
  ret { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %36
}

; Function Attrs: nounwind uwtable willreturn mustprogress
define internal { i8*, i8*, double**, i1, i1, double*, double*, double*, double* } @augmented_mat_mult.1(%struct.Matrix* noalias nocapture readonly %lhs, %struct.Matrix* nocapture %"lhs'", %struct.Matrix* noalias nocapture readonly %rhs, %struct.Matrix* nocapture %"rhs'", %struct.Matrix* noalias nocapture %out, %struct.Matrix* nocapture %"out'") local_unnamed_addr #16 {
entry:
  %0 = alloca { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, align 8
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 0
  %1 = load i32, i32* %nrows, align 8, !tbaa !138, !alias.scope !494, !noalias !497
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 1
  %2 = load i32, i32* %ncols, align 4, !tbaa !139, !alias.scope !499, !noalias !502
  %"nrows1.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 0
  %nrows1.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 0
  %3 = load i32, i32* %nrows1.i, align 8, !tbaa !138, !alias.scope !504, !noalias !507
  %"ncols2.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 1
  %ncols2.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 1
  %4 = load i32, i32* %ncols2.i, align 4, !tbaa !139, !alias.scope !504, !noalias !507
  %mul.i = mul nsw i32 %4, %3
  %mul3.i = mul nsw i32 %2, %1
  %cmp.not.i = icmp eq i32 %mul.i, %mul3.i
  %5 = getelementptr inbounds { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }* %0, i64 0, i32 3
  store i1 %cmp.not.i, i1* %5, align 8
  br i1 %cmp.not.i, label %resize.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %"data.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 2
  %data.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 2
  %6 = load double*, double** %data.i, align 8, !tbaa !137, !alias.scope !504, !noalias !507
  %cmp4.not.i = icmp eq double* %6, null
  %7 = getelementptr inbounds { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }* %0, i64 0, i32 4
  store i1 %cmp4.not.i, i1* %7, align 1
  %cmp8.i = icmp sgt i32 %mul3.i, 0
  br i1 %cmp8.i, label %if.then9.i, label %if.else.i

if.then9.i:                                       ; preds = %if.then.i
  %conv31.i = zext i32 %mul3.i to i64
  %mul11.i = shl nuw nsw i64 %conv31.i, 3
  %call.i = tail call noalias i8* @malloc(i64 %mul11.i) #45
  %8 = getelementptr inbounds { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }* %0, i64 0, i32 1
  store i8* %call.i, i8** %8, align 8
  %"call.i'mi" = tail call noalias nonnull i8* @malloc(i64 %mul11.i) #45
  %9 = getelementptr inbounds { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }* %0, i64 0, i32 0
  store i8* %"call.i'mi", i8** %9, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %"call.i'mi", i8 0, i64 %mul11.i, i1 false)
  %"'ipc" = bitcast double** %"data.i'ipg" to i8**
  %10 = bitcast double** %data.i to i8**
  store i8* %"call.i'mi", i8** %"'ipc", align 8, !tbaa !137, !alias.scope !507, !noalias !504
  store i8* %call.i, i8** %10, align 8, !tbaa !137, !alias.scope !504, !noalias !507
  br label %resize.exit

if.else.i:                                        ; preds = %if.then.i
  store double* null, double** %"data.i'ipg", align 8, !tbaa !137, !alias.scope !507, !noalias !504
  store double* null, double** %data.i, align 8, !tbaa !137, !alias.scope !504, !noalias !507
  br label %resize.exit

resize.exit:                                      ; preds = %if.else.i, %if.then9.i, %entry
  store i32 %2, i32* %"ncols2.i'ipg", align 4, !tbaa !139, !alias.scope !507, !noalias !504
  store i32 %2, i32* %ncols2.i, align 4, !tbaa !139, !alias.scope !504, !noalias !507
  store i32 %1, i32* %"nrows1.i'ipg", align 8, !tbaa !138, !alias.scope !507, !noalias !504
  store i32 %1, i32* %nrows1.i, align 8, !tbaa !138, !alias.scope !504, !noalias !507
  %cmp85 = icmp sgt i32 %1, 0
  br i1 %cmp85, label %for.cond2.preheader.lr.ph, label %for.end49

for.cond2.preheader.lr.ph:                        ; preds = %resize.exit
  %cmp483 = icmp sgt i32 %2, 0
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 2
  %data7 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 2
  %nrows8 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 0
  %"data14'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 2
  %data14 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 2
  %ncols21 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 1
  %11 = zext i32 %1 to i64
  %wide.trip.count96 = zext i32 %2 to i64
  %mallocsize = shl nuw nsw i64 %11, 3
  %malloccall = tail call noalias nonnull i8* @malloc(i64 %mallocsize)
  %"'ipl_malloccache" = bitcast i8* %malloccall to double**
  %12 = getelementptr inbounds { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }* %0, i64 0, i32 2
  %13 = bitcast double*** %12 to i8**
  store i8* %malloccall, i8** %13, align 8
  %14 = mul nuw nsw i64 %wide.trip.count96, %11
  %mallocsize13 = shl nuw nsw i64 %14, 3
  %malloccall14 = tail call noalias nonnull i8* @malloc(i64 %mallocsize13)
  %_malloccache = bitcast i8* %malloccall14 to double*
  %15 = getelementptr inbounds { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }* %0, i64 0, i32 5
  %16 = bitcast double** %15 to i8**
  store i8* %malloccall14, i8** %16, align 8
  %malloccall23 = tail call noalias nonnull i8* @malloc(i64 %mallocsize13)
  %_malloccache24 = bitcast i8* %malloccall23 to double*
  %17 = getelementptr inbounds { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }* %0, i64 0, i32 6
  %18 = bitcast double** %17 to i8**
  store i8* %malloccall23, i8** %18, align 8
  %_unwrap = load i32, i32* %ncols21, align 4, !tbaa !139, !alias.scope !494, !noalias !497, !invariant.group !509
  %wide.trip.count_unwrap = zext i32 %_unwrap to i64
  %19 = add nsw i64 %wide.trip.count_unwrap, -1
  %20 = mul nuw nsw i64 %19, %wide.trip.count96
  %21 = mul nuw nsw i64 %20, %11
  %mallocsize33 = shl nuw nsw i64 %21, 3
  %malloccall34 = tail call noalias nonnull i8* @malloc(i64 %mallocsize33)
  %_malloccache35 = bitcast i8* %malloccall34 to double*
  %22 = getelementptr inbounds { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }* %0, i64 0, i32 7
  %23 = bitcast double** %22 to i8**
  store i8* %malloccall34, i8** %23, align 8
  %malloccall44 = tail call noalias nonnull i8* @malloc(i64 %mallocsize33)
  %_malloccache45 = bitcast i8* %malloccall44 to double*
  %24 = getelementptr inbounds { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }* %0, i64 0, i32 8
  %25 = bitcast double** %24 to i8**
  store i8* %malloccall44, i8** %25, align 8
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.inc47, %for.cond2.preheader.lr.ph
  %iv = phi i64 [ %iv.next, %for.inc47 ], [ 0, %for.cond2.preheader.lr.ph ]
  %iv.next = add nuw nsw i64 %iv, 1
  br i1 %cmp483, label %for.body5.lr.ph, label %for.inc47

for.body5.lr.ph:                                  ; preds = %for.cond2.preheader
  %26 = load double*, double** %data, align 8, !tbaa !137, !alias.scope !494, !noalias !497
  %arrayidx = getelementptr inbounds double, double* %26, i64 %iv
  %27 = load double*, double** %data7, align 8, !tbaa !137, !alias.scope !499, !noalias !502
  %28 = load i32, i32* %nrows8, align 8, !tbaa !138, !alias.scope !499, !noalias !502
  %"'ipl" = load double*, double** %"data14'ipg", align 8, !tbaa !137, !alias.scope !507, !noalias !504
  %29 = getelementptr inbounds double*, double** %"'ipl_malloccache", i64 %iv
  store double* %"'ipl", double** %29, align 8, !tbaa !137, !invariant.group !510
  %30 = load double*, double** %data14, align 8, !tbaa !137, !alias.scope !504, !noalias !507
  %31 = load i32, i32* %ncols21, align 4, !tbaa !139, !alias.scope !494, !noalias !497, !invariant.group !509
  %cmp2281 = icmp sgt i32 %31, 1
  %32 = sext i32 %28 to i64
  %wide.trip.count = zext i32 %31 to i64
  br label %for.body5

for.body5:                                        ; preds = %for.inc44, %for.body5.lr.ph
  %iv1 = phi i64 [ %iv.next2, %for.inc44 ], [ 0, %for.body5.lr.ph ]
  %iv.next2 = add nuw nsw i64 %iv1, 1
  %33 = load double, double* %arrayidx, align 8, !tbaa !75, !alias.scope !511, !noalias !514
  %34 = mul nsw i64 %iv1, %32
  %arrayidx12 = getelementptr inbounds double, double* %27, i64 %34
  %35 = load double, double* %arrayidx12, align 8, !tbaa !75, !alias.scope !516, !noalias !519
  %mul13 = fmul fast double %35, %33
  %36 = mul nuw nsw i64 %iv1, %11
  %37 = add nuw nsw i64 %36, %iv
  %arrayidx19 = getelementptr inbounds double, double* %30, i64 %37
  store double %mul13, double* %arrayidx19, align 8, !tbaa !75, !alias.scope !521, !noalias !524
  %38 = mul nuw nsw i64 %iv, %wide.trip.count96
  %39 = add nuw nsw i64 %iv1, %38
  %40 = getelementptr inbounds double, double* %_malloccache24, i64 %39
  store double %35, double* %40, align 8, !tbaa !75, !invariant.group !526
  %41 = getelementptr inbounds double, double* %_malloccache, i64 %39
  store double %33, double* %41, align 8, !tbaa !75, !invariant.group !527
  br i1 %cmp2281, label %for.body23, label %for.inc44

for.body23:                                       ; preds = %for.body23, %for.body5
  %iv3 = phi i64 [ %iv.next4, %for.body23 ], [ 0, %for.body5 ]
  %42 = phi double [ %add43, %for.body23 ], [ %mul13, %for.body5 ]
  %iv.next4 = add nuw nsw i64 %iv3, 1
  %43 = mul nuw nsw i64 %iv.next4, %11
  %44 = add nuw nsw i64 %43, %iv
  %arrayidx29 = getelementptr inbounds double, double* %26, i64 %44
  %45 = load double, double* %arrayidx29, align 8, !tbaa !75, !alias.scope !511, !noalias !514
  %46 = add nsw i64 %iv.next4, %34
  %arrayidx35 = getelementptr inbounds double, double* %27, i64 %46
  %47 = load double, double* %arrayidx35, align 8, !tbaa !75, !alias.scope !516, !noalias !519
  %mul36 = fmul fast double %47, %45
  %add43 = fadd fast double %42, %mul36
  store double %add43, double* %arrayidx19, align 8, !tbaa !75, !alias.scope !521, !noalias !524
  %48 = mul nuw nsw i64 %iv1, %19
  %49 = add nuw nsw i64 %iv3, %48
  %50 = mul nuw nsw i64 %iv, %20
  %51 = add nuw nsw i64 %49, %50
  %52 = getelementptr inbounds double, double* %_malloccache45, i64 %51
  store double %47, double* %52, align 8, !tbaa !75, !invariant.group !528
  %53 = getelementptr inbounds double, double* %_malloccache35, i64 %51
  store double %45, double* %53, align 8, !tbaa !75, !invariant.group !529
  %indvars.iv.next = add nuw nsw i64 %iv3, 2
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.inc44, label %for.body23, !llvm.loop !213

for.inc44:                                        ; preds = %for.body23, %for.body5
  %exitcond97.not = icmp eq i64 %iv.next2, %wide.trip.count96
  br i1 %exitcond97.not, label %for.inc47, label %for.body5, !llvm.loop !214

for.inc47:                                        ; preds = %for.inc44, %for.cond2.preheader
  %exitcond101.not = icmp eq i64 %iv.next, %11
  br i1 %exitcond101.not, label %for.end49, label %for.cond2.preheader, !llvm.loop !215

for.end49:                                        ; preds = %for.inc47, %resize.exit
  %54 = load { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }* %0, align 8
  ret { i8*, i8*, double**, i1, i1, double*, double*, double*, double* } %54
}

; Function Attrs: nounwind uwtable willreturn mustprogress
define internal { i8*, i8*, i1, i1, double*, double*, double*, double* } @augmented_mat_mult.2(%struct.Matrix* noalias nocapture readonly %lhs, %struct.Matrix* nocapture %"lhs'", %struct.Matrix* noalias nocapture readonly %rhs, %struct.Matrix* nocapture %"rhs'", %struct.Matrix* noalias nocapture %out, %struct.Matrix* nocapture %"out'") local_unnamed_addr #16 {
entry:
  %0 = alloca { i8*, i8*, i1, i1, double*, double*, double*, double* }, align 8
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 0
  %1 = load i32, i32* %nrows, align 8, !tbaa !138, !alias.scope !530, !noalias !533
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 1
  %2 = load i32, i32* %ncols, align 4, !tbaa !139, !alias.scope !535, !noalias !538
  %"nrows1.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 0
  %nrows1.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 0
  %3 = load i32, i32* %nrows1.i, align 8, !tbaa !138, !alias.scope !540, !noalias !543
  %"ncols2.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 1
  %ncols2.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 1
  %4 = load i32, i32* %ncols2.i, align 4, !tbaa !139, !alias.scope !540, !noalias !543
  %mul.i = mul nsw i32 %4, %3
  %mul3.i = mul nsw i32 %2, %1
  %cmp.not.i = icmp eq i32 %mul.i, %mul3.i
  %5 = getelementptr inbounds { i8*, i8*, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }* %0, i64 0, i32 2
  store i1 %cmp.not.i, i1* %5, align 8
  br i1 %cmp.not.i, label %resize.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %"data.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 2
  %data.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 2
  %6 = load double*, double** %data.i, align 8, !tbaa !137, !alias.scope !540, !noalias !543
  %cmp4.not.i = icmp eq double* %6, null
  %7 = getelementptr inbounds { i8*, i8*, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }* %0, i64 0, i32 3
  store i1 %cmp4.not.i, i1* %7, align 1
  %cmp8.i = icmp sgt i32 %mul3.i, 0
  br i1 %cmp8.i, label %if.then9.i, label %if.else.i

if.then9.i:                                       ; preds = %if.then.i
  %conv31.i = zext i32 %mul3.i to i64
  %mul11.i = shl nuw nsw i64 %conv31.i, 3
  %call.i = tail call noalias i8* @malloc(i64 %mul11.i) #45
  %8 = getelementptr inbounds { i8*, i8*, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }* %0, i64 0, i32 1
  store i8* %call.i, i8** %8, align 8
  %"call.i'mi" = tail call noalias nonnull i8* @malloc(i64 %mul11.i) #45
  %9 = getelementptr inbounds { i8*, i8*, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }* %0, i64 0, i32 0
  store i8* %"call.i'mi", i8** %9, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %"call.i'mi", i8 0, i64 %mul11.i, i1 false)
  %"'ipc" = bitcast double** %"data.i'ipg" to i8**
  %10 = bitcast double** %data.i to i8**
  store i8* %"call.i'mi", i8** %"'ipc", align 8, !tbaa !137, !alias.scope !543, !noalias !540
  store i8* %call.i, i8** %10, align 8, !tbaa !137, !alias.scope !540, !noalias !543
  br label %resize.exit

if.else.i:                                        ; preds = %if.then.i
  store double* null, double** %"data.i'ipg", align 8, !tbaa !137, !alias.scope !543, !noalias !540
  store double* null, double** %data.i, align 8, !tbaa !137, !alias.scope !540, !noalias !543
  br label %resize.exit

resize.exit:                                      ; preds = %if.else.i, %if.then9.i, %entry
  store i32 %2, i32* %"ncols2.i'ipg", align 4, !tbaa !139, !alias.scope !543, !noalias !540
  store i32 %2, i32* %ncols2.i, align 4, !tbaa !139, !alias.scope !540, !noalias !543
  store i32 %1, i32* %"nrows1.i'ipg", align 8, !tbaa !138, !alias.scope !543, !noalias !540
  store i32 %1, i32* %nrows1.i, align 8, !tbaa !138, !alias.scope !540, !noalias !543
  %cmp85 = icmp sgt i32 %1, 0
  br i1 %cmp85, label %for.cond2.preheader.lr.ph, label %for.end49

for.cond2.preheader.lr.ph:                        ; preds = %resize.exit
  %cmp483 = icmp sgt i32 %2, 0
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 2
  %data7 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 2
  %nrows8 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 0
  %data14 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 2
  %ncols21 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 1
  %11 = zext i32 %1 to i64
  %wide.trip.count96 = zext i32 %2 to i64
  %12 = mul nuw nsw i64 %wide.trip.count96, %11
  %mallocsize = shl nuw nsw i64 %12, 3
  %malloccall = tail call noalias nonnull i8* @malloc(i64 %mallocsize)
  %_malloccache = bitcast i8* %malloccall to double*
  %13 = getelementptr inbounds { i8*, i8*, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }* %0, i64 0, i32 4
  %14 = bitcast double** %13 to i8**
  store i8* %malloccall, i8** %14, align 8
  %malloccall15 = tail call noalias nonnull i8* @malloc(i64 %mallocsize)
  %_malloccache16 = bitcast i8* %malloccall15 to double*
  %15 = getelementptr inbounds { i8*, i8*, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }* %0, i64 0, i32 5
  %16 = bitcast double** %15 to i8**
  store i8* %malloccall15, i8** %16, align 8
  %_unwrap = load i32, i32* %ncols21, align 4, !tbaa !139, !alias.scope !530, !noalias !533, !invariant.group !545
  %wide.trip.count_unwrap = zext i32 %_unwrap to i64
  %17 = add nsw i64 %wide.trip.count_unwrap, -1
  %18 = mul nuw nsw i64 %17, %wide.trip.count96
  %19 = mul nuw nsw i64 %18, %11
  %mallocsize25 = shl nuw nsw i64 %19, 3
  %malloccall26 = tail call noalias nonnull i8* @malloc(i64 %mallocsize25)
  %_malloccache27 = bitcast i8* %malloccall26 to double*
  %20 = getelementptr inbounds { i8*, i8*, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }* %0, i64 0, i32 6
  %21 = bitcast double** %20 to i8**
  store i8* %malloccall26, i8** %21, align 8
  %malloccall36 = tail call noalias nonnull i8* @malloc(i64 %mallocsize25)
  %_malloccache37 = bitcast i8* %malloccall36 to double*
  %22 = getelementptr inbounds { i8*, i8*, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }* %0, i64 0, i32 7
  %23 = bitcast double** %22 to i8**
  store i8* %malloccall36, i8** %23, align 8
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.inc47, %for.cond2.preheader.lr.ph
  %iv = phi i64 [ %iv.next, %for.inc47 ], [ 0, %for.cond2.preheader.lr.ph ]
  %iv.next = add nuw nsw i64 %iv, 1
  br i1 %cmp483, label %for.body5.lr.ph, label %for.inc47

for.body5.lr.ph:                                  ; preds = %for.cond2.preheader
  %24 = load double*, double** %data, align 8, !tbaa !137, !alias.scope !530, !noalias !533
  %arrayidx = getelementptr inbounds double, double* %24, i64 %iv
  %25 = load double*, double** %data7, align 8, !tbaa !137, !alias.scope !535, !noalias !538
  %26 = load i32, i32* %nrows8, align 8, !tbaa !138, !alias.scope !535, !noalias !538
  %27 = load double*, double** %data14, align 8, !tbaa !137, !alias.scope !540, !noalias !543
  %28 = load i32, i32* %ncols21, align 4, !tbaa !139, !alias.scope !530, !noalias !533, !invariant.group !545
  %cmp2281 = icmp sgt i32 %28, 1
  %29 = sext i32 %26 to i64
  %wide.trip.count = zext i32 %28 to i64
  br label %for.body5

for.body5:                                        ; preds = %for.inc44, %for.body5.lr.ph
  %iv1 = phi i64 [ %iv.next2, %for.inc44 ], [ 0, %for.body5.lr.ph ]
  %iv.next2 = add nuw nsw i64 %iv1, 1
  %30 = load double, double* %arrayidx, align 8, !tbaa !75, !alias.scope !546, !noalias !549
  %31 = mul nsw i64 %iv1, %29
  %arrayidx12 = getelementptr inbounds double, double* %25, i64 %31
  %32 = load double, double* %arrayidx12, align 8, !tbaa !75, !alias.scope !551, !noalias !554
  %mul13 = fmul fast double %32, %30
  %33 = mul nuw nsw i64 %iv1, %11
  %34 = add nuw nsw i64 %33, %iv
  %arrayidx19 = getelementptr inbounds double, double* %27, i64 %34
  store double %mul13, double* %arrayidx19, align 8, !tbaa !75, !alias.scope !556, !noalias !559
  %35 = mul nuw nsw i64 %iv, %wide.trip.count96
  %36 = add nuw nsw i64 %iv1, %35
  %37 = getelementptr inbounds double, double* %_malloccache16, i64 %36
  store double %32, double* %37, align 8, !tbaa !75, !invariant.group !561
  %38 = getelementptr inbounds double, double* %_malloccache, i64 %36
  store double %30, double* %38, align 8, !tbaa !75, !invariant.group !562
  br i1 %cmp2281, label %for.body23, label %for.inc44

for.body23:                                       ; preds = %for.body23, %for.body5
  %iv3 = phi i64 [ %iv.next4, %for.body23 ], [ 0, %for.body5 ]
  %39 = phi double [ %add43, %for.body23 ], [ %mul13, %for.body5 ]
  %iv.next4 = add nuw nsw i64 %iv3, 1
  %40 = mul nuw nsw i64 %iv.next4, %11
  %41 = add nuw nsw i64 %40, %iv
  %arrayidx29 = getelementptr inbounds double, double* %24, i64 %41
  %42 = load double, double* %arrayidx29, align 8, !tbaa !75, !alias.scope !546, !noalias !549
  %43 = add nsw i64 %iv.next4, %31
  %arrayidx35 = getelementptr inbounds double, double* %25, i64 %43
  %44 = load double, double* %arrayidx35, align 8, !tbaa !75, !alias.scope !551, !noalias !554
  %mul36 = fmul fast double %44, %42
  %add43 = fadd fast double %39, %mul36
  store double %add43, double* %arrayidx19, align 8, !tbaa !75, !alias.scope !556, !noalias !559
  %45 = mul nuw nsw i64 %iv1, %17
  %46 = add nuw nsw i64 %iv3, %45
  %47 = mul nuw nsw i64 %iv, %18
  %48 = add nuw nsw i64 %46, %47
  %49 = getelementptr inbounds double, double* %_malloccache37, i64 %48
  store double %44, double* %49, align 8, !tbaa !75, !invariant.group !563
  %50 = getelementptr inbounds double, double* %_malloccache27, i64 %48
  store double %42, double* %50, align 8, !tbaa !75, !invariant.group !564
  %indvars.iv.next = add nuw nsw i64 %iv3, 2
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.inc44, label %for.body23, !llvm.loop !213

for.inc44:                                        ; preds = %for.body23, %for.body5
  %exitcond97.not = icmp eq i64 %iv.next2, %wide.trip.count96
  br i1 %exitcond97.not, label %for.inc47, label %for.body5, !llvm.loop !214

for.inc47:                                        ; preds = %for.inc44, %for.cond2.preheader
  %exitcond101.not = icmp eq i64 %iv.next, %11
  br i1 %exitcond101.not, label %for.end49, label %for.cond2.preheader, !llvm.loop !215

for.end49:                                        ; preds = %for.inc47, %resize.exit
  %51 = load { i8*, i8*, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }* %0, align 8
  ret { i8*, i8*, i1, i1, double*, double*, double*, double* } %51
}

; Function Attrs: nounwind uwtable willreturn mustprogress
define internal { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } @augmented_euler_angles_to_rotation_matrix(double* noalias nocapture readonly %xzy, double* nocapture %"xzy'", %struct.Matrix* noalias nocapture %R, %struct.Matrix* nocapture %"R'") local_unnamed_addr #16 {
for.cond1.preheader.lr.ph.i:
  %0 = alloca { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, align 8
  %1 = load double, double* %xzy, align 8, !tbaa !75, !alias.scope !565, !noalias !568
  %2 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 0, i32 10
  store double %1, double* %2, align 8
  %arrayidx1 = getelementptr inbounds double, double* %xzy, i64 2
  %3 = load double, double* %arrayidx1, align 8, !tbaa !75, !alias.scope !565, !noalias !568
  %4 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 0, i32 11
  store double %3, double* %4, align 8
  %arrayidx2 = getelementptr inbounds double, double* %xzy, i64 1
  %5 = load double, double* %arrayidx2, align 8, !tbaa !75, !alias.scope !565, !noalias !568
  %6 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 0, i32 12
  store double %5, double* %6, align 8
  %call.i = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #45
  %"call.i'mi" = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #45
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16) dereferenceable_or_null(16) %"call.i'mi", i8 0, i64 16, i1 false)
  %"nrows1.i'ipc" = bitcast i8* %"call.i'mi" to i32*
  %nrows1.i = bitcast i8* %call.i to i32*
  store i32 3, i32* %"nrows1.i'ipc", align 8, !tbaa !138, !alias.scope !570, !noalias !573
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138, !alias.scope !573, !noalias !570
  %"ncols2.i'ipg" = getelementptr inbounds i8, i8* %"call.i'mi", i64 4
  %ncols2.i = getelementptr inbounds i8, i8* %call.i, i64 4
  %"'ipc5" = bitcast i8* %"ncols2.i'ipg" to i32*
  %7 = bitcast i8* %ncols2.i to i32*
  store i32 3, i32* %"'ipc5", align 4, !tbaa !139, !alias.scope !570, !noalias !573
  store i32 3, i32* %7, align 4, !tbaa !139, !alias.scope !573, !noalias !570
  %call4.i = tail call noalias nonnull dereferenceable(72) dereferenceable_or_null(72) i8* @malloc(i64 72) #45
  %8 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 0, i32 5
  store i8* %call4.i, i8** %8, align 8
  %"call4.i'mi" = tail call noalias nonnull dereferenceable(72) dereferenceable_or_null(72) i8* @malloc(i64 72) #45
  %9 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 0, i32 4
  store i8* %"call4.i'mi", i8** %9, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(72) dereferenceable_or_null(72) %"call4.i'mi", i8 0, i64 72, i1 false)
  %"data.i'ipg" = getelementptr inbounds i8, i8* %"call.i'mi", i64 8
  %data.i = getelementptr inbounds i8, i8* %call.i, i64 8
  %"'ipc4" = bitcast i8* %"data.i'ipg" to i8**
  %10 = bitcast i8* %data.i to i8**
  store i8* %"call4.i'mi", i8** %"'ipc4", align 8, !tbaa !137, !alias.scope !570, !noalias !573
  store i8* %call4.i, i8** %10, align 8, !tbaa !137, !alias.scope !573, !noalias !570
  %call.i167 = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #45
  %"call.i167'mi" = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #45
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16) dereferenceable_or_null(16) %"call.i167'mi", i8 0, i64 16, i1 false)
  %"nrows1.i168'ipc" = bitcast i8* %"call.i167'mi" to i32*
  %nrows1.i168 = bitcast i8* %call.i167 to i32*
  store i32 3, i32* %"nrows1.i168'ipc", align 8, !tbaa !138, !alias.scope !575, !noalias !578
  store i32 3, i32* %nrows1.i168, align 8, !tbaa !138, !alias.scope !578, !noalias !575
  %"ncols2.i169'ipg" = getelementptr inbounds i8, i8* %"call.i167'mi", i64 4
  %ncols2.i169 = getelementptr inbounds i8, i8* %call.i167, i64 4
  %"'ipc3" = bitcast i8* %"ncols2.i169'ipg" to i32*
  %11 = bitcast i8* %ncols2.i169 to i32*
  store i32 3, i32* %"'ipc3", align 4, !tbaa !139, !alias.scope !575, !noalias !578
  store i32 3, i32* %11, align 4, !tbaa !139, !alias.scope !578, !noalias !575
  %call4.i170 = tail call noalias nonnull dereferenceable(72) dereferenceable_or_null(72) i8* @malloc(i64 72) #45
  %12 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 0, i32 3
  store i8* %call4.i170, i8** %12, align 8
  %"call4.i170'mi" = tail call noalias nonnull dereferenceable(72) dereferenceable_or_null(72) i8* @malloc(i64 72) #45
  %13 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 0, i32 2
  store i8* %"call4.i170'mi", i8** %13, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(72) dereferenceable_or_null(72) %"call4.i170'mi", i8 0, i64 72, i1 false)
  %"data.i171'ipg" = getelementptr inbounds i8, i8* %"call.i167'mi", i64 8
  %data.i171 = getelementptr inbounds i8, i8* %call.i167, i64 8
  %"'ipc2" = bitcast i8* %"data.i171'ipg" to i8**
  %14 = bitcast i8* %data.i171 to i8**
  store i8* %"call4.i170'mi", i8** %"'ipc2", align 8, !tbaa !137, !alias.scope !575, !noalias !578
  store i8* %call4.i170, i8** %14, align 8, !tbaa !137, !alias.scope !578, !noalias !575
  %call.i172 = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #45
  %"call.i172'mi" = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #45
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16) dereferenceable_or_null(16) %"call.i172'mi", i8 0, i64 16, i1 false)
  %"nrows1.i173'ipc" = bitcast i8* %"call.i172'mi" to i32*
  %nrows1.i173 = bitcast i8* %call.i172 to i32*
  store i32 3, i32* %"nrows1.i173'ipc", align 8, !tbaa !138, !alias.scope !580, !noalias !583
  store i32 3, i32* %nrows1.i173, align 8, !tbaa !138, !alias.scope !583, !noalias !580
  %"ncols2.i174'ipg" = getelementptr inbounds i8, i8* %"call.i172'mi", i64 4
  %ncols2.i174 = getelementptr inbounds i8, i8* %call.i172, i64 4
  %"'ipc1" = bitcast i8* %"ncols2.i174'ipg" to i32*
  %15 = bitcast i8* %ncols2.i174 to i32*
  store i32 3, i32* %"'ipc1", align 4, !tbaa !139, !alias.scope !580, !noalias !583
  store i32 3, i32* %15, align 4, !tbaa !139, !alias.scope !583, !noalias !580
  %call4.i175 = tail call noalias nonnull dereferenceable(72) dereferenceable_or_null(72) i8* @malloc(i64 72) #45
  %16 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 0, i32 1
  store i8* %call4.i175, i8** %16, align 8
  %"call4.i175'mi" = tail call noalias nonnull dereferenceable(72) dereferenceable_or_null(72) i8* @malloc(i64 72) #45
  %17 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 0, i32 0
  store i8* %"call4.i175'mi", i8** %17, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(72) dereferenceable_or_null(72) %"call4.i175'mi", i8 0, i64 72, i1 false)
  %"data.i176'ipg" = getelementptr inbounds i8, i8* %"call.i172'mi", i64 8
  %data.i176 = getelementptr inbounds i8, i8* %call.i172, i64 8
  %"'ipc" = bitcast i8* %"data.i176'ipg" to i8**
  %18 = bitcast i8* %data.i176 to i8**
  store i8* %"call4.i175'mi", i8** %"'ipc", align 8, !tbaa !137, !alias.scope !580, !noalias !583
  store i8* %call4.i175, i8** %18, align 8, !tbaa !137, !alias.scope !583, !noalias !580
  %19 = bitcast i8* %call4.i to double*
  %20 = bitcast i8* %call4.i170 to double*
  br label %for.body3.lr.ph.i

for.body3.lr.ph.i:                                ; preds = %for.inc12.i, %for.cond1.preheader.lr.ph.i
  %iv = phi i64 [ %iv.next, %for.inc12.i ], [ 0, %for.cond1.preheader.lr.ph.i ]
  %iv.next = add nuw nsw i64 %iv, 1
  %21 = mul nuw nsw i64 %iv, 3
  %22 = shl nuw nsw i64 %iv, 2
  %arrayidx.i = getelementptr inbounds double, double* %19, i64 %22
  br label %for.body3.i

for.body3.i:                                      ; preds = %for.inc.i, %for.body3.lr.ph.i
  %iv1 = phi i64 [ %iv.next2, %for.inc.i ], [ 0, %for.body3.lr.ph.i ]
  %iv.next2 = add nuw nsw i64 %iv1, 1
  %cmp4.i = icmp eq i64 %iv, %iv1
  br i1 %cmp4.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %for.body3.i
  store double 1.000000e+00, double* %arrayidx.i, align 8, !tbaa !75, !alias.scope !585, !noalias !588
  br label %for.inc.i

if.else.i:                                        ; preds = %for.body3.i
  %23 = add nuw nsw i64 %iv1, %21
  %arrayidx11.i = getelementptr inbounds double, double* %19, i64 %23
  store double 0.000000e+00, double* %arrayidx11.i, align 8, !tbaa !75, !alias.scope !585, !noalias !588
  br label %for.inc.i

for.inc.i:                                        ; preds = %if.else.i, %if.then.i
  %exitcond.not.i = icmp eq i64 %iv.next2, 3
  br i1 %exitcond.not.i, label %for.inc12.i, label %for.body3.i, !llvm.loop !216

for.inc12.i:                                      ; preds = %for.inc.i
  %exitcond37.not.i = icmp eq i64 %iv.next, 3
  br i1 %exitcond37.not.i, label %for.cond1.preheader.lr.ph.i182, label %for.body3.lr.ph.i, !llvm.loop !217

for.cond1.preheader.lr.ph.i182:                   ; preds = %for.inc12.i
  %"'ipc7" = bitcast i8* %"call.i'mi" to %struct.Matrix*
  %24 = bitcast i8* %call.i to %struct.Matrix*
  %"'ipc9" = bitcast i8* %"call.i167'mi" to %struct.Matrix*
  %25 = bitcast i8* %call.i167 to %struct.Matrix*
  %"'ipc8" = bitcast i8* %"call.i172'mi" to %struct.Matrix*
  %26 = bitcast i8* %call.i172 to %struct.Matrix*
  %27 = bitcast i8* %call4.i175 to double*
  %28 = tail call fast double @llvm.cos.f64(double %1) #46
  %arrayidx5 = getelementptr inbounds i8, i8* %call4.i, i64 32
  %29 = bitcast i8* %arrayidx5 to double*
  store double %28, double* %29, align 8, !tbaa !75, !alias.scope !585, !noalias !588
  %30 = tail call fast double @llvm.sin.f64(double %1) #46
  %arrayidx11 = getelementptr inbounds i8, i8* %call4.i, i64 40
  %31 = bitcast i8* %arrayidx11 to double*
  store double %30, double* %31, align 8, !tbaa !75, !alias.scope !585, !noalias !588
  %fneg = fneg fast double %30
  %arrayidx23 = getelementptr inbounds i8, i8* %call4.i, i64 56
  %32 = bitcast i8* %arrayidx23 to double*
  store double %fneg, double* %32, align 8, !tbaa !75, !alias.scope !585, !noalias !588
  %arrayidx35 = getelementptr inbounds i8, i8* %call4.i, i64 64
  %33 = bitcast i8* %arrayidx35 to double*
  store double %28, double* %33, align 8, !tbaa !75, !alias.scope !585, !noalias !588
  br label %for.body3.lr.ph.i189

for.body3.lr.ph.i189:                             ; preds = %for.inc12.i204, %for.cond1.preheader.lr.ph.i182
  %iv3 = phi i64 [ %iv.next4, %for.inc12.i204 ], [ 0, %for.cond1.preheader.lr.ph.i182 ]
  %iv.next4 = add nuw nsw i64 %iv3, 1
  %34 = mul nuw nsw i64 %iv3, 3
  %35 = shl nuw nsw i64 %iv3, 2
  %arrayidx.i193 = getelementptr inbounds double, double* %20, i64 %35
  br label %for.body3.i192

for.body3.i192:                                   ; preds = %for.inc.i201, %for.body3.lr.ph.i189
  %iv5 = phi i64 [ %iv.next6, %for.inc.i201 ], [ 0, %for.body3.lr.ph.i189 ]
  %iv.next6 = add nuw nsw i64 %iv5, 1
  %cmp4.i191 = icmp eq i64 %iv3, %iv5
  br i1 %cmp4.i191, label %if.then.i194, label %if.else.i198

if.then.i194:                                     ; preds = %for.body3.i192
  store double 1.000000e+00, double* %arrayidx.i193, align 8, !tbaa !75, !alias.scope !590, !noalias !593
  br label %for.inc.i201

if.else.i198:                                     ; preds = %for.body3.i192
  %36 = add nuw nsw i64 %iv5, %34
  %arrayidx11.i197 = getelementptr inbounds double, double* %20, i64 %36
  store double 0.000000e+00, double* %arrayidx11.i197, align 8, !tbaa !75, !alias.scope !590, !noalias !593
  br label %for.inc.i201

for.inc.i201:                                     ; preds = %if.else.i198, %if.then.i194
  %exitcond.not.i200 = icmp eq i64 %iv.next6, 3
  br i1 %exitcond.not.i200, label %for.inc12.i204, label %for.body3.i192, !llvm.loop !216

for.inc12.i204:                                   ; preds = %for.inc.i201
  %exitcond37.not.i203 = icmp eq i64 %iv.next4, 3
  br i1 %exitcond37.not.i203, label %for.cond1.preheader.lr.ph.i211, label %for.body3.lr.ph.i189, !llvm.loop !217

for.cond1.preheader.lr.ph.i211:                   ; preds = %for.inc12.i204
  %37 = tail call fast double @llvm.cos.f64(double %3) #46
  store double %37, double* %20, align 8, !tbaa !75, !alias.scope !590, !noalias !593
  %38 = tail call fast double @llvm.sin.f64(double %3) #46
  %arrayidx47 = getelementptr inbounds i8, i8* %call4.i170, i64 48
  %39 = bitcast i8* %arrayidx47 to double*
  store double %38, double* %39, align 8, !tbaa !75, !alias.scope !590, !noalias !593
  %fneg54 = fneg fast double %38
  %arrayidx60 = getelementptr inbounds i8, i8* %call4.i170, i64 16
  %40 = bitcast i8* %arrayidx60 to double*
  store double %fneg54, double* %40, align 8, !tbaa !75, !alias.scope !590, !noalias !593
  %arrayidx72 = getelementptr inbounds i8, i8* %call4.i170, i64 64
  %41 = bitcast i8* %arrayidx72 to double*
  store double %37, double* %41, align 8, !tbaa !75, !alias.scope !590, !noalias !593
  br label %for.body3.lr.ph.i218

for.body3.lr.ph.i218:                             ; preds = %for.inc12.i233, %for.cond1.preheader.lr.ph.i211
  %iv7 = phi i64 [ %iv.next8, %for.inc12.i233 ], [ 0, %for.cond1.preheader.lr.ph.i211 ]
  %iv.next8 = add nuw nsw i64 %iv7, 1
  %42 = mul nuw nsw i64 %iv7, 3
  %43 = shl nuw nsw i64 %iv7, 2
  %arrayidx.i222 = getelementptr inbounds double, double* %27, i64 %43
  br label %for.body3.i221

for.body3.i221:                                   ; preds = %for.inc.i230, %for.body3.lr.ph.i218
  %iv9 = phi i64 [ %iv.next10, %for.inc.i230 ], [ 0, %for.body3.lr.ph.i218 ]
  %iv.next10 = add nuw nsw i64 %iv9, 1
  %cmp4.i220 = icmp eq i64 %iv7, %iv9
  br i1 %cmp4.i220, label %if.then.i223, label %if.else.i227

if.then.i223:                                     ; preds = %for.body3.i221
  store double 1.000000e+00, double* %arrayidx.i222, align 8, !tbaa !75, !alias.scope !595, !noalias !598
  br label %for.inc.i230

if.else.i227:                                     ; preds = %for.body3.i221
  %44 = add nuw nsw i64 %iv9, %42
  %arrayidx11.i226 = getelementptr inbounds double, double* %27, i64 %44
  store double 0.000000e+00, double* %arrayidx11.i226, align 8, !tbaa !75, !alias.scope !595, !noalias !598
  br label %for.inc.i230

for.inc.i230:                                     ; preds = %if.else.i227, %if.then.i223
  %exitcond.not.i229 = icmp eq i64 %iv.next10, 3
  br i1 %exitcond.not.i229, label %for.inc12.i233, label %for.body3.i221, !llvm.loop !216

for.inc12.i233:                                   ; preds = %for.inc.i230
  %exitcond37.not.i232 = icmp eq i64 %iv.next8, 3
  br i1 %exitcond37.not.i232, label %set_identity.exit234, label %for.body3.lr.ph.i218, !llvm.loop !217

set_identity.exit234:                             ; preds = %for.inc12.i233
  %45 = tail call fast double @llvm.cos.f64(double %5) #46
  store double %45, double* %27, align 8, !tbaa !75, !alias.scope !595, !noalias !598
  %46 = tail call fast double @llvm.sin.f64(double %5) #46
  %arrayidx84 = getelementptr inbounds i8, i8* %call4.i175, i64 8
  %47 = bitcast i8* %arrayidx84 to double*
  store double %46, double* %47, align 8, !tbaa !75, !alias.scope !595, !noalias !598
  %fneg91 = fneg fast double %46
  %arrayidx97 = getelementptr inbounds i8, i8* %call4.i175, i64 24
  %48 = bitcast i8* %arrayidx97 to double*
  store double %fneg91, double* %48, align 8, !tbaa !75, !alias.scope !595, !noalias !598
  %arrayidx109 = getelementptr inbounds i8, i8* %call4.i175, i64 32
  %49 = bitcast i8* %arrayidx109 to double*
  store double %45, double* %49, align 8, !tbaa !75, !alias.scope !595, !noalias !598
  %call.i235 = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #45
  %50 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 0, i32 9
  store i8* %call.i235, i8** %50, align 8
  %"call.i235'mi" = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #45
  %51 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 0, i32 8
  store i8* %"call.i235'mi", i8** %51, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16) dereferenceable_or_null(16) %"call.i235'mi", i8 0, i64 16, i1 false)
  %"'ipc6" = bitcast i8* %"call.i235'mi" to %struct.Matrix*
  %52 = bitcast i8* %call.i235 to %struct.Matrix*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %call.i235, i8 0, i64 16, i1 false) #45
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %"call.i235'mi", i8 0, i64 16, i1 false) #45
  %_augmented10 = call { i8*, i8*, i1, i1, double*, double*, double*, double* } @augmented_mat_mult.2(%struct.Matrix* nonnull %26, %struct.Matrix* nonnull %"'ipc8", %struct.Matrix* nonnull %25, %struct.Matrix* nonnull %"'ipc9", %struct.Matrix* nonnull %52, %struct.Matrix* nonnull %"'ipc6")
  %53 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 0, i32 7
  store { i8*, i8*, i1, i1, double*, double*, double*, double* } %_augmented10, { i8*, i8*, i1, i1, double*, double*, double*, double* }* %53, align 8
  %_augmented = call { i8*, i8*, double**, i1, i1, double*, double*, double*, double* } @augmented_mat_mult.1(%struct.Matrix* nonnull %52, %struct.Matrix* nonnull %"'ipc6", %struct.Matrix* nonnull %24, %struct.Matrix* nonnull %"'ipc7", %struct.Matrix* %R, %struct.Matrix* %"R'")
  %54 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 0, i32 6
  store { i8*, i8*, double**, i1, i1, double*, double*, double*, double* } %_augmented, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }* %54, align 8
  tail call void @free(i8* %call.i) #45
  call void @free(i8* %"call.i'mi") #45
  tail call void @free(i8* %call.i167) #45
  call void @free(i8* %"call.i167'mi") #45
  tail call void @free(i8* nonnull %call.i172) #45
  call void @free(i8* nonnull %"call.i172'mi") #45
  %.elt = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 0, i32 0
  %.unpack = load i8*, i8** %.elt, align 8
  %55 = insertvalue { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } undef, i8* %.unpack, 0
  %.elt1 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 0, i32 1
  %.unpack2 = load i8*, i8** %.elt1, align 8
  %56 = insertvalue { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %55, i8* %.unpack2, 1
  %.elt3 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 0, i32 2
  %.unpack4 = load i8*, i8** %.elt3, align 8
  %57 = insertvalue { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %56, i8* %.unpack4, 2
  %.elt5 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 0, i32 3
  %.unpack6 = load i8*, i8** %.elt5, align 8
  %58 = insertvalue { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %57, i8* %.unpack6, 3
  %.elt7 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 0, i32 4
  %.unpack8 = load i8*, i8** %.elt7, align 8
  %59 = insertvalue { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %58, i8* %.unpack8, 4
  %.elt9 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 0, i32 5
  %.unpack10 = load i8*, i8** %.elt9, align 8
  %60 = insertvalue { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %59, i8* %.unpack10, 5
  %.elt11 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 0, i32 6
  %.unpack12 = load { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }* %.elt11, align 8
  %61 = insertvalue { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %60, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* } %.unpack12, 6
  %.elt13 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 0, i32 7
  %.unpack14 = load { i8*, i8*, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }* %.elt13, align 8
  %62 = insertvalue { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %61, { i8*, i8*, i1, i1, double*, double*, double*, double* } %.unpack14, 7
  %.elt15 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 0, i32 8
  %.unpack16 = load i8*, i8** %.elt15, align 8
  %63 = insertvalue { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %62, i8* %.unpack16, 8
  %.elt17 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 0, i32 9
  %.unpack18 = load i8*, i8** %.elt17, align 8
  %64 = insertvalue { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %63, i8* %.unpack18, 9
  %.elt19 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 0, i32 10
  %.unpack20 = load double, double* %.elt19, align 8
  %65 = insertvalue { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %64, double %.unpack20, 10
  %.elt21 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 0, i32 11
  %.unpack22 = load double, double* %.elt21, align 8
  %66 = insertvalue { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %65, double %.unpack22, 11
  %.elt23 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 0, i32 12
  %.unpack24 = load double, double* %.elt23, align 8
  %67 = insertvalue { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %66, double %.unpack24, 12
  ret { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %67
}

; Function Attrs: nounwind uwtable willreturn mustprogress
define internal { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** } @augmented_mat_mult.3(%struct.Matrix* noalias nocapture readonly %lhs, %struct.Matrix* noalias nocapture readonly %rhs, %struct.Matrix* nocapture %"rhs'", %struct.Matrix* noalias nocapture %out, %struct.Matrix* nocapture %"out'") local_unnamed_addr #16 {
entry:
  %0 = alloca { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }, align 8
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 0
  %1 = load i32, i32* %nrows, align 8, !tbaa !138, !alias.scope !600, !noalias !603
  %2 = getelementptr inbounds { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 3
  store i32 %1, i32* %2, align 8
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 1
  %3 = load i32, i32* %ncols, align 4, !tbaa !139, !alias.scope !605, !noalias !608
  %"nrows1.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 0
  %nrows1.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 0
  %4 = load i32, i32* %nrows1.i, align 8, !tbaa !138, !alias.scope !610, !noalias !613
  %"ncols2.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 1
  %ncols2.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 1
  %5 = load i32, i32* %ncols2.i, align 4, !tbaa !139, !alias.scope !610, !noalias !613
  %mul.i = mul nsw i32 %5, %4
  %mul3.i = mul nsw i32 %3, %1
  %cmp.not.i = icmp eq i32 %mul.i, %mul3.i
  %6 = getelementptr inbounds { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 4
  store i1 %cmp.not.i, i1* %6, align 4
  br i1 %cmp.not.i, label %resize.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %"data.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 2
  %data.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 2
  %7 = load double*, double** %data.i, align 8, !tbaa !137, !alias.scope !610, !noalias !613
  %cmp4.not.i = icmp eq double* %7, null
  %8 = getelementptr inbounds { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 5
  store i1 %cmp4.not.i, i1* %8, align 1
  %cmp8.i = icmp sgt i32 %mul3.i, 0
  br i1 %cmp8.i, label %if.then9.i, label %if.else.i

if.then9.i:                                       ; preds = %if.then.i
  %conv31.i = zext i32 %mul3.i to i64
  %mul11.i = shl nuw nsw i64 %conv31.i, 3
  %call.i = tail call noalias i8* @malloc(i64 %mul11.i) #45
  %9 = getelementptr inbounds { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 1
  store i8* %call.i, i8** %9, align 8
  %"call.i'mi" = tail call noalias nonnull i8* @malloc(i64 %mul11.i) #45
  %10 = getelementptr inbounds { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 0
  store i8* %"call.i'mi", i8** %10, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %"call.i'mi", i8 0, i64 %mul11.i, i1 false)
  %"'ipc" = bitcast double** %"data.i'ipg" to i8**
  %11 = bitcast double** %data.i to i8**
  store i8* %"call.i'mi", i8** %"'ipc", align 8, !tbaa !137, !alias.scope !613, !noalias !610
  store i8* %call.i, i8** %11, align 8, !tbaa !137, !alias.scope !610, !noalias !613
  br label %resize.exit

if.else.i:                                        ; preds = %if.then.i
  store double* null, double** %"data.i'ipg", align 8, !tbaa !137, !alias.scope !613, !noalias !610
  store double* null, double** %data.i, align 8, !tbaa !137, !alias.scope !610, !noalias !613
  br label %resize.exit

resize.exit:                                      ; preds = %if.else.i, %if.then9.i, %entry
  store i32 %3, i32* %"ncols2.i'ipg", align 4, !tbaa !139, !alias.scope !613, !noalias !610
  store i32 %3, i32* %ncols2.i, align 4, !tbaa !139, !alias.scope !610, !noalias !613
  store i32 %1, i32* %"nrows1.i'ipg", align 8, !tbaa !138, !alias.scope !613, !noalias !610
  store i32 %1, i32* %nrows1.i, align 8, !tbaa !138, !alias.scope !610, !noalias !613
  %cmp85 = icmp sgt i32 %1, 0
  br i1 %cmp85, label %for.cond2.preheader.lr.ph, label %for.end49

for.cond2.preheader.lr.ph:                        ; preds = %resize.exit
  %cmp483 = icmp sgt i32 %3, 0
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 2
  %data7 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 2
  %nrows8 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 0
  %"data14'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 2
  %data14 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 2
  %ncols21 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 1
  %12 = zext i32 %1 to i64
  %wide.trip.count96 = zext i32 %3 to i64
  %mallocsize = shl nuw nsw i64 %12, 3
  %malloccall = tail call noalias nonnull i8* @malloc(i64 %mallocsize)
  %"'ipl_malloccache" = bitcast i8* %malloccall to double**
  %13 = getelementptr inbounds { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 2
  %14 = bitcast double*** %13 to i8**
  store i8* %malloccall, i8** %14, align 8
  %mallocsize12 = shl nuw nsw i64 %12, 2
  %malloccall13 = tail call noalias nonnull i8* @malloc(i64 %mallocsize12)
  %_malloccache = bitcast i8* %malloccall13 to i32*
  %15 = getelementptr inbounds { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 6
  %16 = bitcast i32** %15 to i8**
  store i8* %malloccall13, i8** %16, align 8
  %17 = mul nuw nsw i64 %wide.trip.count96, %12
  %mallocsize21 = shl nuw nsw i64 %17, 3
  %malloccall22 = tail call noalias nonnull i8* @malloc(i64 %mallocsize21)
  %_malloccache23 = bitcast i8* %malloccall22 to double*
  %18 = getelementptr inbounds { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 7
  %19 = bitcast double** %18 to i8**
  store i8* %malloccall22, i8** %19, align 8
  %malloccall35 = tail call noalias nonnull i8* @malloc(i64 %mallocsize21)
  %_malloccache36 = bitcast i8* %malloccall35 to double**
  %20 = getelementptr inbounds { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 8
  %21 = bitcast double*** %20 to i8**
  store i8* %malloccall35, i8** %21, align 8
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.inc47, %for.cond2.preheader.lr.ph
  %iv = phi i64 [ %iv.next, %for.inc47 ], [ 0, %for.cond2.preheader.lr.ph ]
  %iv.next = add nuw nsw i64 %iv, 1
  br i1 %cmp483, label %for.body5.lr.ph, label %for.inc47

for.body5.lr.ph:                                  ; preds = %for.cond2.preheader
  %22 = load double*, double** %data, align 8, !tbaa !137, !alias.scope !600, !noalias !603
  %arrayidx = getelementptr inbounds double, double* %22, i64 %iv
  %23 = load double*, double** %data7, align 8, !tbaa !137, !alias.scope !605, !noalias !608
  %24 = load i32, i32* %nrows8, align 8, !tbaa !138, !alias.scope !605, !noalias !608
  %"'ipl" = load double*, double** %"data14'ipg", align 8, !tbaa !137, !alias.scope !613, !noalias !610
  %25 = getelementptr inbounds double*, double** %"'ipl_malloccache", i64 %iv
  store double* %"'ipl", double** %25, align 8, !tbaa !137, !invariant.group !615
  %26 = load double*, double** %data14, align 8, !tbaa !137, !alias.scope !610, !noalias !613
  %27 = load i32, i32* %ncols21, align 4, !tbaa !139, !alias.scope !600, !noalias !603
  %28 = getelementptr inbounds i32, i32* %_malloccache, i64 %iv
  store i32 %27, i32* %28, align 4, !tbaa !139, !invariant.group !616
  %cmp2281 = icmp sgt i32 %27, 1
  %29 = sext i32 %24 to i64
  %wide.trip.count = zext i32 %27 to i64
  br label %for.body5

for.body5:                                        ; preds = %for.inc44, %for.body5.lr.ph
  %iv1 = phi i64 [ %iv.next2, %for.inc44 ], [ 0, %for.body5.lr.ph ]
  %iv.next2 = add nuw nsw i64 %iv1, 1
  %30 = load double, double* %arrayidx, align 8, !tbaa !75, !alias.scope !617, !noalias !620
  %31 = mul nsw i64 %iv1, %29
  %arrayidx12 = getelementptr inbounds double, double* %23, i64 %31
  %32 = load double, double* %arrayidx12, align 8, !tbaa !75, !alias.scope !622, !noalias !625
  %mul13 = fmul fast double %32, %30
  %33 = mul nuw nsw i64 %iv1, %12
  %34 = add nuw nsw i64 %33, %iv
  %arrayidx19 = getelementptr inbounds double, double* %26, i64 %34
  store double %mul13, double* %arrayidx19, align 8, !tbaa !75, !alias.scope !627, !noalias !630
  %35 = mul nuw nsw i64 %iv, %wide.trip.count96
  %36 = add nuw nsw i64 %iv1, %35
  %37 = getelementptr inbounds double, double* %_malloccache23, i64 %36
  store double %30, double* %37, align 8, !tbaa !75, !invariant.group !632
  br i1 %cmp2281, label %for.body23.preheader, label %for.inc44

for.body23.preheader:                             ; preds = %for.body5
  %38 = getelementptr inbounds double*, double** %_malloccache36, i64 %36
  %39 = shl nuw nsw i64 %wide.trip.count, 3
  %mallocsize37 = add nsw i64 %39, -8
  %malloccall38 = tail call noalias nonnull i8* @malloc(i64 %mallocsize37)
  %40 = bitcast double** %38 to i8**
  store i8* %malloccall38, i8** %40, align 8
  br label %for.body23

for.body23:                                       ; preds = %for.body23, %for.body23.preheader
  %iv3 = phi i64 [ %iv.next4, %for.body23 ], [ 0, %for.body23.preheader ]
  %41 = phi double [ %add43, %for.body23 ], [ %mul13, %for.body23.preheader ]
  %iv.next4 = add nuw nsw i64 %iv3, 1
  %42 = mul nuw nsw i64 %iv.next4, %12
  %43 = add nuw nsw i64 %42, %iv
  %arrayidx29 = getelementptr inbounds double, double* %22, i64 %43
  %44 = load double, double* %arrayidx29, align 8, !tbaa !75, !alias.scope !617, !noalias !620
  %45 = add nsw i64 %iv.next4, %31
  %arrayidx35 = getelementptr inbounds double, double* %23, i64 %45
  %46 = load double, double* %arrayidx35, align 8, !tbaa !75, !alias.scope !622, !noalias !625
  %mul36 = fmul fast double %46, %44
  %add43 = fadd fast double %41, %mul36
  store double %add43, double* %arrayidx19, align 8, !tbaa !75, !alias.scope !627, !noalias !630
  %47 = load double*, double** %38, align 8, !dereferenceable !457, !invariant.group !633
  %48 = getelementptr inbounds double, double* %47, i64 %iv3
  store double %44, double* %48, align 8, !tbaa !75, !invariant.group !634
  %indvars.iv.next = add nuw nsw i64 %iv3, 2
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.inc44, label %for.body23, !llvm.loop !213

for.inc44:                                        ; preds = %for.body23, %for.body5
  %exitcond97.not = icmp eq i64 %iv.next2, %wide.trip.count96
  br i1 %exitcond97.not, label %for.inc47, label %for.body5, !llvm.loop !214

for.inc47:                                        ; preds = %for.inc44, %for.cond2.preheader
  %exitcond101.not = icmp eq i64 %iv.next, %12
  br i1 %exitcond101.not, label %for.end49, label %for.cond2.preheader, !llvm.loop !215

for.end49:                                        ; preds = %for.inc47, %resize.exit
  %49 = load { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }* %0, align 8
  ret { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** } %49
}

; Function Attrs: nounwind uwtable willreturn mustprogress
define internal { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* } @augmented_get_posed_relatives(i32 %bone_count, %struct.Matrix* noalias nocapture readonly %base_relatives, %struct.Matrix* noalias nocapture readonly %pose_params, %struct.Matrix* nocapture %"pose_params'", %struct.Matrix* noalias nocapture %relatives, %struct.Matrix* nocapture %"relatives'") local_unnamed_addr #16 {
entry:
  %0 = alloca { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, align 8
  %call.i = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #45
  %"call.i'mi" = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #45
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16) dereferenceable_or_null(16) %"call.i'mi", i8 0, i64 16, i1 false)
  %"'ipc30" = bitcast i8* %"call.i'mi" to %struct.Matrix*
  %1 = bitcast i8* %call.i to %struct.Matrix*
  %"nrows1.i'ipc" = bitcast i8* %"call.i'mi" to i32*
  %nrows1.i = bitcast i8* %call.i to i32*
  store i32 4, i32* %"nrows1.i'ipc", align 8, !tbaa !138, !alias.scope !635, !noalias !638
  store i32 4, i32* %nrows1.i, align 8, !tbaa !138, !alias.scope !638, !noalias !635
  %"ncols2.i'ipg" = getelementptr inbounds i8, i8* %"call.i'mi", i64 4
  %ncols2.i = getelementptr inbounds i8, i8* %call.i, i64 4
  %"'ipc5" = bitcast i8* %"ncols2.i'ipg" to i32*
  %2 = bitcast i8* %ncols2.i to i32*
  store i32 4, i32* %"'ipc5", align 4, !tbaa !139, !alias.scope !635, !noalias !638
  store i32 4, i32* %2, align 4, !tbaa !139, !alias.scope !638, !noalias !635
  %call4.i = tail call noalias nonnull dereferenceable(128) dereferenceable_or_null(128) i8* @malloc(i64 128) #45
  %3 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }* %0, i64 0, i32 5
  store i8* %call4.i, i8** %3, align 8
  %"call4.i'mi" = tail call noalias nonnull dereferenceable(128) dereferenceable_or_null(128) i8* @malloc(i64 128) #45
  %4 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }* %0, i64 0, i32 4
  store i8* %"call4.i'mi", i8** %4, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(128) dereferenceable_or_null(128) %"call4.i'mi", i8 0, i64 128, i1 false)
  %"data.i'ipg" = getelementptr inbounds i8, i8* %"call.i'mi", i64 8
  %data.i = getelementptr inbounds i8, i8* %call.i, i64 8
  %"'ipc4" = bitcast i8* %"data.i'ipg" to i8**
  %5 = bitcast i8* %data.i to i8**
  store i8* %"call4.i'mi", i8** %"'ipc4", align 8, !tbaa !137, !alias.scope !635, !noalias !638
  store i8* %call4.i, i8** %5, align 8, !tbaa !137, !alias.scope !638, !noalias !635
  %call.i18 = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #45
  %6 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }* %0, i64 0, i32 3
  store i8* %call.i18, i8** %6, align 8
  %"call.i18'mi" = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #45
  %7 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }* %0, i64 0, i32 2
  store i8* %"call.i18'mi", i8** %7, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16) dereferenceable_or_null(16) %"call.i18'mi", i8 0, i64 16, i1 false)
  %"'ipc6" = bitcast i8* %"call.i18'mi" to %struct.Matrix*
  %8 = bitcast i8* %call.i18 to %struct.Matrix*
  %"nrows1.i19'ipc" = bitcast i8* %"call.i18'mi" to i32*
  %nrows1.i19 = bitcast i8* %call.i18 to i32*
  store i32 3, i32* %"nrows1.i19'ipc", align 8, !tbaa !138, !alias.scope !640, !noalias !643
  store i32 3, i32* %nrows1.i19, align 8, !tbaa !138, !alias.scope !643, !noalias !640
  %"ncols2.i20'ipg" = getelementptr inbounds i8, i8* %"call.i18'mi", i64 4
  %ncols2.i20 = getelementptr inbounds i8, i8* %call.i18, i64 4
  %"'ipc3" = bitcast i8* %"ncols2.i20'ipg" to i32*
  %9 = bitcast i8* %ncols2.i20 to i32*
  store i32 3, i32* %"'ipc3", align 4, !tbaa !139, !alias.scope !640, !noalias !643
  store i32 3, i32* %9, align 4, !tbaa !139, !alias.scope !643, !noalias !640
  %call4.i21 = tail call noalias nonnull dereferenceable(72) dereferenceable_or_null(72) i8* @malloc(i64 72) #45
  %10 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }* %0, i64 0, i32 1
  store i8* %call4.i21, i8** %10, align 8
  %"call4.i21'mi" = tail call noalias nonnull dereferenceable(72) dereferenceable_or_null(72) i8* @malloc(i64 72) #45
  %11 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }* %0, i64 0, i32 0
  store i8* %"call4.i21'mi", i8** %11, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(72) dereferenceable_or_null(72) %"call4.i21'mi", i8 0, i64 72, i1 false)
  %"data.i22'ipg" = getelementptr inbounds i8, i8* %"call.i18'mi", i64 8
  %data.i22 = getelementptr inbounds i8, i8* %call.i18, i64 8
  %"'ipc" = bitcast i8* %"data.i22'ipg" to i8**
  %12 = bitcast i8* %data.i22 to i8**
  store i8* %"call4.i21'mi", i8** %"'ipc", align 8, !tbaa !137, !alias.scope !640, !noalias !643
  store i8* %call4.i21, i8** %12, align 8, !tbaa !137, !alias.scope !643, !noalias !640
  %cmp40 = icmp sgt i32 %bone_count, 0
  %13 = bitcast i8* %call4.i to double*
  br i1 %cmp40, label %for.body.lr.ph, label %delete_matrix.exit

for.body.lr.ph:                                   ; preds = %entry
  %"data'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"pose_params'", i64 0, i32 2
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 2
  %"'ipl" = load double*, double** %"data'ipg", align 8, !tbaa !137, !alias.scope !645, !noalias !648
  %14 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }* %0, i64 0, i32 6
  store double* %"'ipl", double** %14, align 8
  %15 = load double*, double** %data, align 8, !tbaa !137, !alias.scope !648, !noalias !645
  %16 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }* %0, i64 0, i32 10
  store double* %15, double** %16, align 8
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 0
  %17 = load i32, i32* %nrows, align 8, !tbaa !138, !alias.scope !648, !noalias !645
  %18 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }* %0, i64 0, i32 11
  store i32 %17, i32* %18, align 8
  %"'ipc11" = bitcast i8* %"data.i22'ipg" to double**
  %19 = bitcast i8* %data.i22 to double**
  %wide.trip.count = zext i32 %bone_count to i64
  %mallocsize = mul nuw nsw i64 %wide.trip.count, 208
  %malloccall = tail call noalias nonnull i8* @malloc(i64 %mallocsize)
  %_augmented_malloccache = bitcast i8* %malloccall to { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*
  %20 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }* %0, i64 0, i32 7
  %21 = bitcast { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }** %20 to i8**
  store i8* %malloccall, i8** %21, align 8
  %mallocsize19 = shl nuw nsw i64 %wide.trip.count, 3
  %malloccall20 = tail call noalias nonnull i8* @malloc(i64 %mallocsize19)
  %"'ipl12_malloccache" = bitcast i8* %malloccall20 to double***
  %22 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }* %0, i64 0, i32 8
  %23 = bitcast double**** %22 to i8**
  store i8* %malloccall20, i8** %23, align 8
  %mallocsize35 = mul nuw nsw i64 %wide.trip.count, 56
  %malloccall36 = tail call noalias nonnull i8* @malloc(i64 %mallocsize35)
  %_augmented31_malloccache = bitcast i8* %malloccall36 to { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*
  %24 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }* %0, i64 0, i32 9
  %25 = bitcast { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }** %24 to i8**
  store i8* %malloccall36, i8** %25, align 8
  %mallocsize43 = shl nuw nsw i64 %wide.trip.count, 2
  %malloccall44 = tail call noalias nonnull i8* @malloc(i64 %mallocsize43)
  %_malloccache = bitcast i8* %malloccall44 to i32*
  %26 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }* %0, i64 0, i32 12
  %27 = bitcast i32** %26 to i8**
  store i8* %malloccall44, i8** %27, align 8
  %malloccall53 = tail call noalias nonnull i8* @malloc(i64 %mallocsize43)
  %_malloccache54 = bitcast i8* %malloccall53 to i32*
  %28 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }* %0, i64 0, i32 13
  %29 = bitcast i32** %28 to i8**
  store i8* %malloccall53, i8** %29, align 8
  br label %for.cond1.preheader.lr.ph.i

for.cond1.preheader.lr.ph.i:                      ; preds = %set_block.exit, %for.body.lr.ph
  %iv = phi i64 [ %iv.next, %set_block.exit ], [ 0, %for.body.lr.ph ]
  %iv.next = add nuw nsw i64 %iv, 1
  br label %for.body3.lr.ph.i

for.body3.lr.ph.i:                                ; preds = %for.inc12.i, %for.cond1.preheader.lr.ph.i
  %iv1 = phi i64 [ %iv.next2, %for.inc12.i ], [ 0, %for.cond1.preheader.lr.ph.i ]
  %iv.next2 = add nuw nsw i64 %iv1, 1
  %30 = shl nsw i64 %iv1, 2
  %31 = mul nsw i64 %iv1, 5
  %arrayidx.i = getelementptr inbounds double, double* %13, i64 %31
  br label %for.body3.i

for.body3.i:                                      ; preds = %for.inc.i, %for.body3.lr.ph.i
  %iv3 = phi i64 [ %iv.next4, %for.inc.i ], [ 0, %for.body3.lr.ph.i ]
  %iv.next4 = add nuw nsw i64 %iv3, 1
  %cmp4.i = icmp eq i64 %iv1, %iv3
  br i1 %cmp4.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %for.body3.i
  store double 1.000000e+00, double* %arrayidx.i, align 8, !tbaa !75, !alias.scope !650, !noalias !653
  br label %for.inc.i

if.else.i:                                        ; preds = %for.body3.i
  %32 = add nuw nsw i64 %iv3, %30
  %arrayidx11.i = getelementptr inbounds double, double* %13, i64 %32
  store double 0.000000e+00, double* %arrayidx11.i, align 8, !tbaa !75, !alias.scope !650, !noalias !653
  br label %for.inc.i

for.inc.i:                                        ; preds = %if.else.i, %if.then.i
  %exitcond.not.i = icmp eq i64 %iv.next4, 4
  br i1 %exitcond.not.i, label %for.inc12.i, label %for.body3.i, !llvm.loop !216

for.inc12.i:                                      ; preds = %for.inc.i
  %exitcond37.not.i = icmp eq i64 %iv.next2, 4
  br i1 %exitcond37.not.i, label %set_identity.exit, label %for.body3.lr.ph.i, !llvm.loop !217

set_identity.exit:                                ; preds = %for.inc12.i
  %33 = trunc i64 %iv to i32
  %34 = add i32 %33, 3
  %mul = mul nsw i32 %17, %34
  %idx.ext = sext i32 %mul to i64
  %"add.ptr'ipg" = getelementptr inbounds double, double* %"'ipl", i64 %idx.ext
  %add.ptr = getelementptr inbounds double, double* %15, i64 %idx.ext
  %_augmented = call { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } @augmented_euler_angles_to_rotation_matrix(double* %add.ptr, double* %"add.ptr'ipg", %struct.Matrix* nonnull %8, %struct.Matrix* nonnull %"'ipc6")
  %.repack = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %_augmented_malloccache, i64 %iv, i32 0
  %_augmented.elt = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %_augmented, 0
  store i8* %_augmented.elt, i8** %.repack, align 8
  %.repack1 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %_augmented_malloccache, i64 %iv, i32 1
  %_augmented.elt2 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %_augmented, 1
  store i8* %_augmented.elt2, i8** %.repack1, align 8
  %.repack3 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %_augmented_malloccache, i64 %iv, i32 2
  %_augmented.elt4 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %_augmented, 2
  store i8* %_augmented.elt4, i8** %.repack3, align 8
  %.repack5 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %_augmented_malloccache, i64 %iv, i32 3
  %_augmented.elt6 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %_augmented, 3
  store i8* %_augmented.elt6, i8** %.repack5, align 8
  %.repack7 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %_augmented_malloccache, i64 %iv, i32 4
  %_augmented.elt8 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %_augmented, 4
  store i8* %_augmented.elt8, i8** %.repack7, align 8
  %.repack9 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %_augmented_malloccache, i64 %iv, i32 5
  %_augmented.elt10 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %_augmented, 5
  store i8* %_augmented.elt10, i8** %.repack9, align 8
  %.repack11 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %_augmented_malloccache, i64 %iv, i32 6
  %_augmented.elt12 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %_augmented, 6
  store { i8*, i8*, double**, i1, i1, double*, double*, double*, double* } %_augmented.elt12, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }* %.repack11, align 8
  %.repack13 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %_augmented_malloccache, i64 %iv, i32 7
  %_augmented.elt14 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %_augmented, 7
  store { i8*, i8*, i1, i1, double*, double*, double*, double* } %_augmented.elt14, { i8*, i8*, i1, i1, double*, double*, double*, double* }* %.repack13, align 8
  %.repack15 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %_augmented_malloccache, i64 %iv, i32 8
  %_augmented.elt16 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %_augmented, 8
  store i8* %_augmented.elt16, i8** %.repack15, align 8
  %.repack17 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %_augmented_malloccache, i64 %iv, i32 9
  %_augmented.elt18 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %_augmented, 9
  store i8* %_augmented.elt18, i8** %.repack17, align 8
  %.repack19 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %_augmented_malloccache, i64 %iv, i32 10
  %_augmented.elt20 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %_augmented, 10
  store double %_augmented.elt20, double* %.repack19, align 8
  %.repack21 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %_augmented_malloccache, i64 %iv, i32 11
  %_augmented.elt22 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %_augmented, 11
  store double %_augmented.elt22, double* %.repack21, align 8
  %.repack23 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %_augmented_malloccache, i64 %iv, i32 12
  %_augmented.elt24 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %_augmented, 12
  store double %_augmented.elt24, double* %.repack23, align 8
  %35 = load i32, i32* %9, align 4, !tbaa !139, !alias.scope !643, !noalias !640
  %36 = getelementptr inbounds i32, i32* %_malloccache, i64 %iv
  store i32 %35, i32* %36, align 4, !tbaa !139, !invariant.group !655
  %cmp30.i = icmp sgt i32 %35, 0
  br i1 %cmp30.i, label %for.cond1.preheader.lr.ph.i26, label %set_block.exit

for.cond1.preheader.lr.ph.i26:                    ; preds = %set_identity.exit
  %37 = load i32, i32* %nrows1.i19, align 8, !tbaa !138, !alias.scope !643, !noalias !640
  %cmp228.i = icmp sgt i32 %37, 0
  %wide.trip.count.i = zext i32 %37 to i64
  %38 = zext i32 %35 to i64
  %39 = sext i32 %37 to i64
  %40 = getelementptr inbounds double**, double*** %"'ipl12_malloccache", i64 %iv
  %mallocsize21 = shl nuw nsw i64 %38, 3
  %malloccall22 = tail call noalias nonnull i8* @malloc(i64 %mallocsize21)
  %41 = bitcast double*** %40 to i8**
  store i8* %malloccall22, i8** %41, align 8
  %42 = getelementptr inbounds i32, i32* %_malloccache54, i64 %iv
  store i32 %37, i32* %42, align 4, !tbaa !138, !invariant.group !656
  br label %for.cond1.preheader.i27

for.cond1.preheader.i27:                          ; preds = %for.inc13.i, %for.cond1.preheader.lr.ph.i26
  %iv5 = phi i64 [ %iv.next6, %for.inc13.i ], [ 0, %for.cond1.preheader.lr.ph.i26 ]
  %iv.next6 = add nuw nsw i64 %iv5, 1
  br i1 %cmp228.i, label %for.body3.lr.ph.i29, label %for.inc13.i

for.body3.lr.ph.i29:                              ; preds = %for.cond1.preheader.i27
  %"'ipl12" = load double*, double** %"'ipc11", align 8, !tbaa !137, !alias.scope !640, !noalias !643
  %43 = load double**, double*** %40, align 8, !dereferenceable !457, !invariant.group !657
  %44 = getelementptr inbounds double*, double** %43, i64 %iv5
  store double* %"'ipl12", double** %44, align 8, !tbaa !137, !invariant.group !658
  %45 = load double*, double** %19, align 8, !tbaa !137, !alias.scope !643, !noalias !640
  %46 = shl nsw i64 %iv5, 2
  %47 = mul nsw i64 %iv5, %39
  br label %for.body3.i32

for.body3.i32:                                    ; preds = %for.body3.i32, %for.body3.lr.ph.i29
  %iv7 = phi i64 [ %iv.next8, %for.body3.i32 ], [ 0, %for.body3.lr.ph.i29 ]
  %iv.next8 = add nuw nsw i64 %iv7, 1
  %48 = add nsw i64 %iv7, %47
  %arrayidx.i30 = getelementptr inbounds double, double* %45, i64 %48
  %49 = load double, double* %arrayidx.i30, align 8, !tbaa !75, !alias.scope !659, !noalias !662
  %50 = add nuw nsw i64 %iv7, %46
  %arrayidx12.i = getelementptr inbounds double, double* %13, i64 %50
  store double %49, double* %arrayidx12.i, align 8, !tbaa !75, !alias.scope !650, !noalias !653
  %exitcond.not.i31 = icmp eq i64 %iv.next8, %wide.trip.count.i
  br i1 %exitcond.not.i31, label %for.inc13.i, label %for.body3.i32, !llvm.loop !219

for.inc13.i:                                      ; preds = %for.body3.i32, %for.cond1.preheader.i27
  %exitcond37.not.i33 = icmp eq i64 %iv.next6, %38
  br i1 %exitcond37.not.i33, label %set_block.exit, label %for.cond1.preheader.i27, !llvm.loop !220

set_block.exit:                                   ; preds = %for.inc13.i, %set_identity.exit
  %arrayidx = getelementptr inbounds %struct.Matrix, %struct.Matrix* %base_relatives, i64 %iv
  %"arrayidx3'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"relatives'", i64 %iv
  %arrayidx3 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %iv
  %_augmented31 = call { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** } @augmented_mat_mult.3(%struct.Matrix* %arrayidx, %struct.Matrix* nonnull %1, %struct.Matrix* nonnull %"'ipc30", %struct.Matrix* %arrayidx3, %struct.Matrix* %"arrayidx3'ipg")
  %51 = getelementptr inbounds { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }* %_augmented31_malloccache, i64 %iv
  store { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** } %_augmented31, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }* %51, align 8, !invariant.group !664
  %exitcond.not = icmp eq i64 %iv.next, %wide.trip.count
  br i1 %exitcond.not, label %delete_matrix.exit, label %for.cond1.preheader.lr.ph.i, !llvm.loop !228

delete_matrix.exit:                               ; preds = %set_block.exit, %entry
  tail call void @free(i8* nonnull %call.i) #45
  call void @free(i8* nonnull %"call.i'mi") #45
  %52 = load { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }* %0, align 8
  ret { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* } %52
}

; Function Attrs: nounwind uwtable willreturn mustprogress
define internal { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** } @augmented_mat_mult.4(%struct.Matrix* noalias nocapture readonly %lhs, %struct.Matrix* nocapture %"lhs'", %struct.Matrix* noalias nocapture readonly %rhs, %struct.Matrix* noalias nocapture %out, %struct.Matrix* nocapture %"out'") local_unnamed_addr #16 {
entry:
  %0 = alloca { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }, align 8
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 0
  %1 = load i32, i32* %nrows, align 8, !tbaa !138, !alias.scope !665, !noalias !668
  %2 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 4
  store i32 %1, i32* %2, align 8
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 1
  %3 = load i32, i32* %ncols, align 4, !tbaa !139, !alias.scope !670, !noalias !673
  %4 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 5
  store i32 %3, i32* %4, align 4
  %"nrows1.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 0
  %nrows1.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 0
  %5 = load i32, i32* %nrows1.i, align 8, !tbaa !138, !alias.scope !675, !noalias !678
  %"ncols2.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 1
  %ncols2.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 1
  %6 = load i32, i32* %ncols2.i, align 4, !tbaa !139, !alias.scope !675, !noalias !678
  %mul.i = mul nsw i32 %6, %5
  %mul3.i = mul nsw i32 %3, %1
  %cmp.not.i = icmp eq i32 %mul.i, %mul3.i
  %7 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 6
  store i1 %cmp.not.i, i1* %7, align 8
  br i1 %cmp.not.i, label %resize.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %"data.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 2
  %data.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 2
  %8 = load double*, double** %data.i, align 8, !tbaa !137, !alias.scope !675, !noalias !678
  %cmp4.not.i = icmp eq double* %8, null
  %9 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 7
  store i1 %cmp4.not.i, i1* %9, align 1
  %cmp8.i = icmp sgt i32 %mul3.i, 0
  br i1 %cmp8.i, label %if.then9.i, label %if.else.i

if.then9.i:                                       ; preds = %if.then.i
  %conv31.i = zext i32 %mul3.i to i64
  %mul11.i = shl nuw nsw i64 %conv31.i, 3
  %call.i = tail call noalias i8* @malloc(i64 %mul11.i) #45
  %10 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 1
  store i8* %call.i, i8** %10, align 8
  %"call.i'mi" = tail call noalias nonnull i8* @malloc(i64 %mul11.i) #45
  %11 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 0
  store i8* %"call.i'mi", i8** %11, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %"call.i'mi", i8 0, i64 %mul11.i, i1 false)
  %"'ipc" = bitcast double** %"data.i'ipg" to i8**
  %12 = bitcast double** %data.i to i8**
  store i8* %"call.i'mi", i8** %"'ipc", align 8, !tbaa !137, !alias.scope !678, !noalias !675
  store i8* %call.i, i8** %12, align 8, !tbaa !137, !alias.scope !675, !noalias !678
  br label %resize.exit

if.else.i:                                        ; preds = %if.then.i
  store double* null, double** %"data.i'ipg", align 8, !tbaa !137, !alias.scope !678, !noalias !675
  store double* null, double** %data.i, align 8, !tbaa !137, !alias.scope !675, !noalias !678
  br label %resize.exit

resize.exit:                                      ; preds = %if.else.i, %if.then9.i, %entry
  store i32 %3, i32* %"ncols2.i'ipg", align 4, !tbaa !139, !alias.scope !678, !noalias !675
  store i32 %3, i32* %ncols2.i, align 4, !tbaa !139, !alias.scope !675, !noalias !678
  store i32 %1, i32* %"nrows1.i'ipg", align 8, !tbaa !138, !alias.scope !678, !noalias !675
  store i32 %1, i32* %nrows1.i, align 8, !tbaa !138, !alias.scope !675, !noalias !678
  %cmp85 = icmp sgt i32 %1, 0
  br i1 %cmp85, label %for.cond2.preheader.lr.ph, label %for.end49

for.cond2.preheader.lr.ph:                        ; preds = %resize.exit
  %cmp483 = icmp sgt i32 %3, 0
  %"data'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"lhs'", i64 0, i32 2
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 2
  %data7 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 2
  %nrows8 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 0
  %"data14'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 2
  %data14 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 2
  %ncols21 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 1
  %13 = zext i32 %1 to i64
  %wide.trip.count96 = zext i32 %3 to i64
  %mallocsize = shl nuw nsw i64 %13, 3
  %malloccall = tail call noalias nonnull i8* @malloc(i64 %mallocsize)
  %"'ipl_malloccache" = bitcast i8* %malloccall to double**
  %14 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 2
  %15 = bitcast double*** %14 to i8**
  store i8* %malloccall, i8** %15, align 8
  %malloccall13 = tail call noalias nonnull i8* @malloc(i64 %mallocsize)
  %"'ipl8_malloccache" = bitcast i8* %malloccall13 to double**
  %16 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 3
  %17 = bitcast double*** %16 to i8**
  store i8* %malloccall13, i8** %17, align 8
  %mallocsize20 = shl nuw nsw i64 %13, 2
  %malloccall21 = tail call noalias nonnull i8* @malloc(i64 %mallocsize20)
  %_malloccache = bitcast i8* %malloccall21 to i32*
  %18 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 8
  %19 = bitcast i32** %18 to i8**
  store i8* %malloccall21, i8** %19, align 8
  %20 = mul nuw nsw i64 %wide.trip.count96, %13
  %mallocsize29 = shl nuw nsw i64 %20, 3
  %malloccall30 = tail call noalias nonnull i8* @malloc(i64 %mallocsize29)
  %_malloccache31 = bitcast i8* %malloccall30 to double*
  %21 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 9
  %22 = bitcast double** %21 to i8**
  store i8* %malloccall30, i8** %22, align 8
  %malloccall43 = tail call noalias nonnull i8* @malloc(i64 %mallocsize29)
  %_malloccache44 = bitcast i8* %malloccall43 to double**
  %23 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 10
  %24 = bitcast double*** %23 to i8**
  store i8* %malloccall43, i8** %24, align 8
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.inc47, %for.cond2.preheader.lr.ph
  %iv = phi i64 [ %iv.next, %for.inc47 ], [ 0, %for.cond2.preheader.lr.ph ]
  %iv.next = add nuw nsw i64 %iv, 1
  br i1 %cmp483, label %for.body5.lr.ph, label %for.inc47

for.body5.lr.ph:                                  ; preds = %for.cond2.preheader
  %"'ipl8" = load double*, double** %"data'ipg", align 8, !tbaa !137, !alias.scope !668, !noalias !665
  %25 = load double*, double** %data, align 8, !tbaa !137, !alias.scope !665, !noalias !668
  %arrayidx = getelementptr inbounds double, double* %25, i64 %iv
  %26 = load double*, double** %data7, align 8, !tbaa !137, !alias.scope !670, !noalias !673
  %27 = load i32, i32* %nrows8, align 8, !tbaa !138, !alias.scope !670, !noalias !673
  %"'ipl" = load double*, double** %"data14'ipg", align 8, !tbaa !137, !alias.scope !678, !noalias !675
  %28 = getelementptr inbounds double*, double** %"'ipl_malloccache", i64 %iv
  store double* %"'ipl", double** %28, align 8, !tbaa !137, !invariant.group !680
  %29 = getelementptr inbounds double*, double** %"'ipl8_malloccache", i64 %iv
  store double* %"'ipl8", double** %29, align 8, !tbaa !137, !invariant.group !681
  %30 = load double*, double** %data14, align 8, !tbaa !137, !alias.scope !675, !noalias !678
  %31 = load i32, i32* %ncols21, align 4, !tbaa !139, !alias.scope !665, !noalias !668
  %32 = getelementptr inbounds i32, i32* %_malloccache, i64 %iv
  store i32 %31, i32* %32, align 4, !tbaa !139, !invariant.group !682
  %cmp2281 = icmp sgt i32 %31, 1
  %33 = sext i32 %27 to i64
  %wide.trip.count = zext i32 %31 to i64
  br label %for.body5

for.body5:                                        ; preds = %for.inc44, %for.body5.lr.ph
  %iv1 = phi i64 [ %iv.next2, %for.inc44 ], [ 0, %for.body5.lr.ph ]
  %iv.next2 = add nuw nsw i64 %iv1, 1
  %34 = load double, double* %arrayidx, align 8, !tbaa !75, !alias.scope !683, !noalias !686
  %35 = mul nsw i64 %iv1, %33
  %arrayidx12 = getelementptr inbounds double, double* %26, i64 %35
  %36 = load double, double* %arrayidx12, align 8, !tbaa !75, !alias.scope !688, !noalias !691
  %mul13 = fmul fast double %36, %34
  %37 = mul nuw nsw i64 %iv1, %13
  %38 = add nuw nsw i64 %37, %iv
  %arrayidx19 = getelementptr inbounds double, double* %30, i64 %38
  store double %mul13, double* %arrayidx19, align 8, !tbaa !75, !alias.scope !693, !noalias !696
  %39 = mul nuw nsw i64 %iv, %wide.trip.count96
  %40 = add nuw nsw i64 %iv1, %39
  %41 = getelementptr inbounds double, double* %_malloccache31, i64 %40
  store double %36, double* %41, align 8, !tbaa !75, !invariant.group !698
  br i1 %cmp2281, label %for.body23.preheader, label %for.inc44

for.body23.preheader:                             ; preds = %for.body5
  %42 = getelementptr inbounds double*, double** %_malloccache44, i64 %40
  %43 = shl nuw nsw i64 %wide.trip.count, 3
  %mallocsize45 = add nsw i64 %43, -8
  %malloccall46 = tail call noalias nonnull i8* @malloc(i64 %mallocsize45)
  %44 = bitcast double** %42 to i8**
  store i8* %malloccall46, i8** %44, align 8
  br label %for.body23

for.body23:                                       ; preds = %for.body23, %for.body23.preheader
  %iv3 = phi i64 [ %iv.next4, %for.body23 ], [ 0, %for.body23.preheader ]
  %45 = phi double [ %add43, %for.body23 ], [ %mul13, %for.body23.preheader ]
  %iv.next4 = add nuw nsw i64 %iv3, 1
  %46 = mul nuw nsw i64 %iv.next4, %13
  %47 = add nuw nsw i64 %46, %iv
  %arrayidx29 = getelementptr inbounds double, double* %25, i64 %47
  %48 = load double, double* %arrayidx29, align 8, !tbaa !75, !alias.scope !683, !noalias !686
  %49 = add nsw i64 %iv.next4, %35
  %arrayidx35 = getelementptr inbounds double, double* %26, i64 %49
  %50 = load double, double* %arrayidx35, align 8, !tbaa !75, !alias.scope !688, !noalias !691
  %mul36 = fmul fast double %50, %48
  %add43 = fadd fast double %45, %mul36
  store double %add43, double* %arrayidx19, align 8, !tbaa !75, !alias.scope !693, !noalias !696
  %51 = load double*, double** %42, align 8, !dereferenceable !457, !invariant.group !699
  %52 = getelementptr inbounds double, double* %51, i64 %iv3
  store double %50, double* %52, align 8, !tbaa !75, !invariant.group !700
  %indvars.iv.next = add nuw nsw i64 %iv3, 2
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.inc44, label %for.body23, !llvm.loop !213

for.inc44:                                        ; preds = %for.body23, %for.body5
  %exitcond97.not = icmp eq i64 %iv.next2, %wide.trip.count96
  br i1 %exitcond97.not, label %for.inc47, label %for.body5, !llvm.loop !214

for.inc47:                                        ; preds = %for.inc44, %for.cond2.preheader
  %exitcond101.not = icmp eq i64 %iv.next, %13
  br i1 %exitcond101.not, label %for.end49, label %for.cond2.preheader, !llvm.loop !215

for.end49:                                        ; preds = %for.inc47, %resize.exit
  %53 = load { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %0, align 8
  ret { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** } %53
}

; Function Attrs: nounwind uwtable willreturn mustprogress
define internal { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** } @augmented_mat_mult.5(%struct.Matrix* noalias nocapture readonly %lhs, %struct.Matrix* nocapture %"lhs'", %struct.Matrix* noalias nocapture readonly %rhs, %struct.Matrix* noalias nocapture %out, %struct.Matrix* nocapture %"out'") local_unnamed_addr #16 {
entry:
  %0 = alloca { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }, align 8
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 0
  %1 = load i32, i32* %nrows, align 8, !tbaa !138, !alias.scope !701, !noalias !704
  %2 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 4
  store i32 %1, i32* %2, align 8
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 1
  %3 = load i32, i32* %ncols, align 4, !tbaa !139, !alias.scope !706, !noalias !709
  %"nrows1.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 0
  %nrows1.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 0
  %4 = load i32, i32* %nrows1.i, align 8, !tbaa !138, !alias.scope !711, !noalias !714
  %"ncols2.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 1
  %ncols2.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 1
  %5 = load i32, i32* %ncols2.i, align 4, !tbaa !139, !alias.scope !711, !noalias !714
  %mul.i = mul nsw i32 %5, %4
  %mul3.i = mul nsw i32 %3, %1
  %cmp.not.i = icmp eq i32 %mul.i, %mul3.i
  %6 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 5
  store i1 %cmp.not.i, i1* %6, align 4
  br i1 %cmp.not.i, label %resize.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %"data.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 2
  %data.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 2
  %7 = load double*, double** %data.i, align 8, !tbaa !137, !alias.scope !711, !noalias !714
  %cmp4.not.i = icmp eq double* %7, null
  %8 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 6
  store i1 %cmp4.not.i, i1* %8, align 1
  %cmp8.i = icmp sgt i32 %mul3.i, 0
  br i1 %cmp8.i, label %if.then9.i, label %if.else.i

if.then9.i:                                       ; preds = %if.then.i
  %conv31.i = zext i32 %mul3.i to i64
  %mul11.i = shl nuw nsw i64 %conv31.i, 3
  %call.i = tail call noalias i8* @malloc(i64 %mul11.i) #45
  %9 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 1
  store i8* %call.i, i8** %9, align 8
  %"call.i'mi" = tail call noalias nonnull i8* @malloc(i64 %mul11.i) #45
  %10 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 0
  store i8* %"call.i'mi", i8** %10, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %"call.i'mi", i8 0, i64 %mul11.i, i1 false)
  %"'ipc" = bitcast double** %"data.i'ipg" to i8**
  %11 = bitcast double** %data.i to i8**
  store i8* %"call.i'mi", i8** %"'ipc", align 8, !tbaa !137, !alias.scope !714, !noalias !711
  store i8* %call.i, i8** %11, align 8, !tbaa !137, !alias.scope !711, !noalias !714
  br label %resize.exit

if.else.i:                                        ; preds = %if.then.i
  store double* null, double** %"data.i'ipg", align 8, !tbaa !137, !alias.scope !714, !noalias !711
  store double* null, double** %data.i, align 8, !tbaa !137, !alias.scope !711, !noalias !714
  br label %resize.exit

resize.exit:                                      ; preds = %if.else.i, %if.then9.i, %entry
  store i32 %3, i32* %"ncols2.i'ipg", align 4, !tbaa !139, !alias.scope !714, !noalias !711
  store i32 %3, i32* %ncols2.i, align 4, !tbaa !139, !alias.scope !711, !noalias !714
  store i32 %1, i32* %"nrows1.i'ipg", align 8, !tbaa !138, !alias.scope !714, !noalias !711
  store i32 %1, i32* %nrows1.i, align 8, !tbaa !138, !alias.scope !711, !noalias !714
  %cmp85 = icmp sgt i32 %1, 0
  br i1 %cmp85, label %for.cond2.preheader.lr.ph, label %for.end49

for.cond2.preheader.lr.ph:                        ; preds = %resize.exit
  %cmp483 = icmp sgt i32 %3, 0
  %"data'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"lhs'", i64 0, i32 2
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 2
  %data7 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 2
  %nrows8 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 0
  %"data14'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 2
  %data14 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 2
  %ncols21 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 1
  %12 = zext i32 %1 to i64
  %wide.trip.count96 = zext i32 %3 to i64
  %mallocsize = shl nuw nsw i64 %12, 3
  %malloccall = tail call noalias nonnull i8* @malloc(i64 %mallocsize)
  %"'ipl_malloccache" = bitcast i8* %malloccall to double**
  %13 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 2
  %14 = bitcast double*** %13 to i8**
  store i8* %malloccall, i8** %14, align 8
  %malloccall13 = tail call noalias nonnull i8* @malloc(i64 %mallocsize)
  %"'ipl8_malloccache" = bitcast i8* %malloccall13 to double**
  %15 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 3
  %16 = bitcast double*** %15 to i8**
  store i8* %malloccall13, i8** %16, align 8
  %mallocsize20 = shl nuw nsw i64 %12, 2
  %malloccall21 = tail call noalias nonnull i8* @malloc(i64 %mallocsize20)
  %_malloccache = bitcast i8* %malloccall21 to i32*
  %17 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 7
  %18 = bitcast i32** %17 to i8**
  store i8* %malloccall21, i8** %18, align 8
  %19 = mul nuw nsw i64 %wide.trip.count96, %12
  %mallocsize29 = shl nuw nsw i64 %19, 3
  %malloccall30 = tail call noalias nonnull i8* @malloc(i64 %mallocsize29)
  %_malloccache31 = bitcast i8* %malloccall30 to double*
  %20 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 8
  %21 = bitcast double** %20 to i8**
  store i8* %malloccall30, i8** %21, align 8
  %malloccall43 = tail call noalias nonnull i8* @malloc(i64 %mallocsize29)
  %_malloccache44 = bitcast i8* %malloccall43 to double**
  %22 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 9
  %23 = bitcast double*** %22 to i8**
  store i8* %malloccall43, i8** %23, align 8
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.inc47, %for.cond2.preheader.lr.ph
  %iv = phi i64 [ %iv.next, %for.inc47 ], [ 0, %for.cond2.preheader.lr.ph ]
  %iv.next = add nuw nsw i64 %iv, 1
  br i1 %cmp483, label %for.body5.lr.ph, label %for.inc47

for.body5.lr.ph:                                  ; preds = %for.cond2.preheader
  %"'ipl8" = load double*, double** %"data'ipg", align 8, !tbaa !137, !alias.scope !704, !noalias !701
  %24 = load double*, double** %data, align 8, !tbaa !137, !alias.scope !701, !noalias !704
  %arrayidx = getelementptr inbounds double, double* %24, i64 %iv
  %25 = load double*, double** %data7, align 8, !tbaa !137, !alias.scope !706, !noalias !709
  %26 = load i32, i32* %nrows8, align 8, !tbaa !138, !alias.scope !706, !noalias !709
  %"'ipl" = load double*, double** %"data14'ipg", align 8, !tbaa !137, !alias.scope !714, !noalias !711
  %27 = getelementptr inbounds double*, double** %"'ipl_malloccache", i64 %iv
  store double* %"'ipl", double** %27, align 8, !tbaa !137, !invariant.group !716
  %28 = getelementptr inbounds double*, double** %"'ipl8_malloccache", i64 %iv
  store double* %"'ipl8", double** %28, align 8, !tbaa !137, !invariant.group !717
  %29 = load double*, double** %data14, align 8, !tbaa !137, !alias.scope !711, !noalias !714
  %30 = load i32, i32* %ncols21, align 4, !tbaa !139, !alias.scope !701, !noalias !704
  %31 = getelementptr inbounds i32, i32* %_malloccache, i64 %iv
  store i32 %30, i32* %31, align 4, !tbaa !139, !invariant.group !718
  %cmp2281 = icmp sgt i32 %30, 1
  %32 = sext i32 %26 to i64
  %wide.trip.count = zext i32 %30 to i64
  br label %for.body5

for.body5:                                        ; preds = %for.inc44, %for.body5.lr.ph
  %iv1 = phi i64 [ %iv.next2, %for.inc44 ], [ 0, %for.body5.lr.ph ]
  %iv.next2 = add nuw nsw i64 %iv1, 1
  %33 = load double, double* %arrayidx, align 8, !tbaa !75, !alias.scope !719, !noalias !722
  %34 = mul nsw i64 %iv1, %32
  %arrayidx12 = getelementptr inbounds double, double* %25, i64 %34
  %35 = load double, double* %arrayidx12, align 8, !tbaa !75, !alias.scope !724, !noalias !727
  %mul13 = fmul fast double %35, %33
  %36 = mul nuw nsw i64 %iv1, %12
  %37 = add nuw nsw i64 %36, %iv
  %arrayidx19 = getelementptr inbounds double, double* %29, i64 %37
  store double %mul13, double* %arrayidx19, align 8, !tbaa !75, !alias.scope !729, !noalias !732
  %38 = mul nuw nsw i64 %iv, %wide.trip.count96
  %39 = add nuw nsw i64 %iv1, %38
  %40 = getelementptr inbounds double, double* %_malloccache31, i64 %39
  store double %35, double* %40, align 8, !tbaa !75, !invariant.group !734
  br i1 %cmp2281, label %for.body23.preheader, label %for.inc44

for.body23.preheader:                             ; preds = %for.body5
  %41 = getelementptr inbounds double*, double** %_malloccache44, i64 %39
  %42 = shl nuw nsw i64 %wide.trip.count, 3
  %mallocsize45 = add nsw i64 %42, -8
  %malloccall46 = tail call noalias nonnull i8* @malloc(i64 %mallocsize45)
  %43 = bitcast double** %41 to i8**
  store i8* %malloccall46, i8** %43, align 8
  br label %for.body23

for.body23:                                       ; preds = %for.body23, %for.body23.preheader
  %iv3 = phi i64 [ %iv.next4, %for.body23 ], [ 0, %for.body23.preheader ]
  %44 = phi double [ %add43, %for.body23 ], [ %mul13, %for.body23.preheader ]
  %iv.next4 = add nuw nsw i64 %iv3, 1
  %45 = mul nuw nsw i64 %iv.next4, %12
  %46 = add nuw nsw i64 %45, %iv
  %arrayidx29 = getelementptr inbounds double, double* %24, i64 %46
  %47 = load double, double* %arrayidx29, align 8, !tbaa !75, !alias.scope !719, !noalias !722
  %48 = add nsw i64 %iv.next4, %34
  %arrayidx35 = getelementptr inbounds double, double* %25, i64 %48
  %49 = load double, double* %arrayidx35, align 8, !tbaa !75, !alias.scope !724, !noalias !727
  %mul36 = fmul fast double %49, %47
  %add43 = fadd fast double %44, %mul36
  store double %add43, double* %arrayidx19, align 8, !tbaa !75, !alias.scope !729, !noalias !732
  %50 = load double*, double** %41, align 8, !dereferenceable !457, !invariant.group !735
  %51 = getelementptr inbounds double, double* %50, i64 %iv3
  store double %49, double* %51, align 8, !tbaa !75, !invariant.group !736
  %indvars.iv.next = add nuw nsw i64 %iv3, 2
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.inc44, label %for.body23, !llvm.loop !213

for.inc44:                                        ; preds = %for.body23, %for.body5
  %exitcond97.not = icmp eq i64 %iv.next2, %wide.trip.count96
  br i1 %exitcond97.not, label %for.inc47, label %for.body5, !llvm.loop !214

for.inc47:                                        ; preds = %for.inc44, %for.cond2.preheader
  %exitcond101.not = icmp eq i64 %iv.next, %12
  br i1 %exitcond101.not, label %for.end49, label %for.cond2.preheader, !llvm.loop !215

for.end49:                                        ; preds = %for.inc47, %resize.exit
  %52 = load { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }* %0, align 8
  ret { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** } %52
}

; Function Attrs: nofree nounwind uwtable willreturn mustprogress
define internal { double, double*, double*, double, double } @augmented_angle_axis_to_rotation_matrix(double* nocapture readonly %angle_axis, double* nocapture %"angle_axis'", %struct.Matrix* nocapture readonly %R, %struct.Matrix* nocapture %"R'") local_unnamed_addr #14 {
entry:
  %0 = alloca { double, double*, double*, double, double }, align 8
  %1 = load double, double* %angle_axis, align 8, !tbaa !75, !alias.scope !737, !noalias !740
  %2 = getelementptr inbounds { double, double*, double*, double, double }, { double, double*, double*, double, double }* %0, i64 0, i32 0
  store double %1, double* %2, align 8
  %mul.i = fmul fast double %1, %1
  %malloccall = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16)
  %_malloccache = bitcast i8* %malloccall to double*
  %3 = getelementptr inbounds { double, double*, double*, double, double }, { double, double*, double*, double, double }* %0, i64 0, i32 1
  %4 = bitcast double** %3 to i8**
  store i8* %malloccall, i8** %4, align 8
  %malloccall8 = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16)
  %add.i_malloccache = bitcast i8* %malloccall8 to double*
  %5 = getelementptr inbounds { double, double*, double*, double, double }, { double, double*, double*, double, double }* %0, i64 0, i32 2
  %6 = bitcast double** %5 to i8**
  store i8* %malloccall8, i8** %6, align 8
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i, %entry
  %iv = phi i64 [ %iv.next, %for.body.i ], [ 0, %entry ]
  %res.017.i = phi double [ %add.i, %for.body.i ], [ %mul.i, %entry ]
  %iv.next = add nuw nsw i64 %iv, 1
  %arrayidx2.i = getelementptr inbounds double, double* %angle_axis, i64 %iv.next
  %7 = load double, double* %arrayidx2.i, align 8, !tbaa !75, !alias.scope !737, !noalias !740
  %8 = getelementptr inbounds double, double* %_malloccache, i64 %iv
  store double %7, double* %8, align 8, !tbaa !75, !invariant.group !742
  %mul5.i = fmul fast double %7, %7
  %add.i = fadd fast double %mul5.i, %res.017.i
  %9 = getelementptr inbounds double, double* %add.i_malloccache, i64 %iv
  store double %add.i, double* %9, align 8, !invariant.group !743
  %exitcond.not.i = icmp eq i64 %iv, 1
  br i1 %exitcond.not.i, label %square_sum.exit, label %for.body.i, !llvm.loop !222

square_sum.exit:                                  ; preds = %for.body.i
  %add.i.lcssa = phi double [ %add.i, %for.body.i ]
  %10 = tail call fast double @llvm.sqrt.f64(double %add.i.lcssa) #46
  %cmp = fcmp fast olt double %10, 1.000000e-04
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %square_sum.exit
  %ncols.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %R, i64 0, i32 1
  %11 = load i32, i32* %ncols.i, align 4, !tbaa !139, !alias.scope !744, !noalias !747
  %cmp33.i = icmp sgt i32 %11, 0
  br i1 %cmp33.i, label %for.cond1.preheader.lr.ph.i, label %cleanup

for.cond1.preheader.lr.ph.i:                      ; preds = %if.then
  %nrows.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %R, i64 0, i32 0
  %12 = load i32, i32* %nrows.i, align 8, !tbaa !138, !alias.scope !744, !noalias !747
  %cmp230.i = icmp sgt i32 %12, 0
  %data6.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %R, i64 0, i32 2
  %13 = zext i32 %12 to i64
  %14 = zext i32 %11 to i64
  %15 = sext i32 %12 to i64
  br label %for.cond1.preheader.i

for.cond1.preheader.i:                            ; preds = %for.inc12.i, %for.cond1.preheader.lr.ph.i
  %iv1 = phi i64 [ %iv.next2, %for.inc12.i ], [ 0, %for.cond1.preheader.lr.ph.i ]
  %iv.next2 = add nuw nsw i64 %iv1, 1
  br i1 %cmp230.i, label %for.body3.lr.ph.i, label %for.inc12.i

for.body3.lr.ph.i:                                ; preds = %for.cond1.preheader.i
  %16 = mul nsw i64 %iv1, %15
  br label %for.body3.i

for.body3.i:                                      ; preds = %for.body3.i, %for.body3.lr.ph.i
  %iv3 = phi i64 [ %iv.next4, %for.body3.i ], [ 0, %for.body3.lr.ph.i ]
  %iv.next4 = add nuw nsw i64 %iv3, 1
  %cmp4.i = icmp eq i64 %iv1, %iv3
  %17 = load double*, double** %data6.i, align 8, !tbaa !137, !alias.scope !744, !noalias !747
  %.sink178 = add nsw i64 %iv3, %16
  %.sink = select i1 %cmp4.i, double 1.000000e+00, double 0.000000e+00
  %arrayidx11.i = getelementptr inbounds double, double* %17, i64 %.sink178
  store double %.sink, double* %arrayidx11.i, align 8, !tbaa !75, !alias.scope !749, !noalias !752
  %exitcond.not.i172 = icmp eq i64 %iv.next4, %13
  br i1 %exitcond.not.i172, label %for.inc12.i, label %for.body3.i, !llvm.loop !216

for.inc12.i:                                      ; preds = %for.body3.i, %for.cond1.preheader.i
  %exitcond37.not.i = icmp eq i64 %iv.next2, %14
  br i1 %exitcond37.not.i, label %cleanup, label %for.cond1.preheader.i, !llvm.loop !217

if.end:                                           ; preds = %square_sum.exit
  %div = fdiv fast double %1, %10
  %arrayidx1 = getelementptr inbounds double, double* %angle_axis, i64 1
  %18 = load double, double* %arrayidx1, align 8, !tbaa !75, !alias.scope !737, !noalias !740
  %19 = getelementptr inbounds { double, double*, double*, double, double }, { double, double*, double*, double, double }* %0, i64 0, i32 3
  store double %18, double* %19, align 8
  %div2 = fdiv fast double %18, %10
  %arrayidx3 = getelementptr inbounds double, double* %angle_axis, i64 2
  %20 = load double, double* %arrayidx3, align 8, !tbaa !75, !alias.scope !737, !noalias !740
  %21 = getelementptr inbounds { double, double*, double*, double, double }, { double, double*, double*, double, double }* %0, i64 0, i32 4
  store double %20, double* %21, align 8
  %div4 = fdiv fast double %20, %10
  %22 = tail call fast double @llvm.sin.f64(double %10) #46
  %23 = tail call fast double @llvm.cos.f64(double %10) #46
  %mul = fmul fast double %div, %div
  %sub = fsub fast double 1.000000e+00, %mul
  %mul6 = fmul fast double %sub, %23
  %add = fadd fast double %mul6, %mul
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %R, i64 0, i32 2
  %24 = load double*, double** %data, align 8, !tbaa !137, !alias.scope !744, !noalias !747
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %R, i64 0, i32 0
  store double %add, double* %24, align 8, !tbaa !75, !alias.scope !754, !noalias !757
  %sub11 = fsub fast double 1.000000e+00, %23
  %mul10 = fmul fast double %sub11, %div
  %mul12 = fmul fast double %mul10, %div2
  %mul13 = fmul fast double %div4, %22
  %sub14 = fsub fast double %mul12, %mul13
  %25 = load i32, i32* %nrows, align 8, !tbaa !138, !alias.scope !744, !noalias !747
  %idxprom19 = sext i32 %25 to i64
  %arrayidx20 = getelementptr inbounds double, double* %24, i64 %idxprom19
  store double %sub14, double* %arrayidx20, align 8, !tbaa !75, !alias.scope !754, !noalias !757
  %mul23 = fmul fast double %mul10, %div4
  %mul24 = fmul fast double %div2, %22
  %add25 = fadd fast double %mul23, %mul24
  %mul28 = shl nsw i32 %25, 1
  %idxprom30 = sext i32 %mul28 to i64
  %arrayidx31 = getelementptr inbounds double, double* %24, i64 %idxprom30
  store double %add25, double* %arrayidx31, align 8, !tbaa !75, !alias.scope !754, !noalias !757
  %add36 = fadd fast double %mul12, %mul13
  %arrayidx42 = getelementptr inbounds double, double* %24, i64 1
  store double %add36, double* %arrayidx42, align 8, !tbaa !75, !alias.scope !754, !noalias !757
  %mul43 = fmul fast double %div2, %div2
  %sub45 = fsub fast double 1.000000e+00, %mul43
  %mul46 = fmul fast double %sub45, %23
  %add47 = fadd fast double %mul46, %mul43
  %add51 = add nsw i32 %25, 1
  %idxprom52 = sext i32 %add51 to i64
  %arrayidx53 = getelementptr inbounds double, double* %24, i64 %idxprom52
  store double %add47, double* %arrayidx53, align 8, !tbaa !75, !alias.scope !754, !noalias !757
  %mul54 = fmul fast double %div2, %sub11
  %mul56 = fmul fast double %mul54, %div4
  %mul57 = fmul fast double %div, %22
  %sub58 = fsub fast double %mul56, %mul57
  %add62 = or i32 %mul28, 1
  %idxprom63 = sext i32 %add62 to i64
  %arrayidx64 = getelementptr inbounds double, double* %24, i64 %idxprom63
  store double %sub58, double* %arrayidx64, align 8, !tbaa !75, !alias.scope !754, !noalias !757
  %sub69 = fsub fast double %mul23, %mul24
  %arrayidx75 = getelementptr inbounds double, double* %24, i64 2
  store double %sub69, double* %arrayidx75, align 8, !tbaa !75, !alias.scope !754, !noalias !757
  %add80 = fadd fast double %mul56, %mul57
  %add84 = add nsw i32 %25, 2
  %idxprom85 = sext i32 %add84 to i64
  %arrayidx86 = getelementptr inbounds double, double* %24, i64 %idxprom85
  store double %add80, double* %arrayidx86, align 8, !tbaa !75, !alias.scope !754, !noalias !757
  %mul87 = fmul fast double %div4, %div4
  %sub89 = fsub fast double 1.000000e+00, %mul87
  %mul90 = fmul fast double %sub89, %23
  %add91 = fadd fast double %mul90, %mul87
  %add95 = add nsw i32 %mul28, 2
  %idxprom96 = sext i32 %add95 to i64
  %arrayidx97 = getelementptr inbounds double, double* %24, i64 %idxprom96
  store double %add91, double* %arrayidx97, align 8, !tbaa !75, !alias.scope !754, !noalias !757
  br label %cleanup

cleanup:                                          ; preds = %if.end, %for.inc12.i, %if.then
  %.elt = getelementptr inbounds { double, double*, double*, double, double }, { double, double*, double*, double, double }* %0, i64 0, i32 0
  %.unpack = load double, double* %.elt, align 8
  %26 = insertvalue { double, double*, double*, double, double } undef, double %.unpack, 0
  %.elt1 = getelementptr inbounds { double, double*, double*, double, double }, { double, double*, double*, double, double }* %0, i64 0, i32 1
  %.unpack2 = load double*, double** %.elt1, align 8
  %27 = insertvalue { double, double*, double*, double, double } %26, double* %.unpack2, 1
  %.elt3 = getelementptr inbounds { double, double*, double*, double, double }, { double, double*, double*, double, double }* %0, i64 0, i32 2
  %.unpack4 = load double*, double** %.elt3, align 8
  %28 = insertvalue { double, double*, double*, double, double } %27, double* %.unpack4, 2
  %.elt5 = getelementptr inbounds { double, double*, double*, double, double }, { double, double*, double*, double, double }* %0, i64 0, i32 3
  %.unpack6 = load double, double* %.elt5, align 8
  %29 = insertvalue { double, double*, double*, double, double } %28, double %.unpack6, 3
  %.elt7 = getelementptr inbounds { double, double*, double*, double, double }, { double, double*, double*, double, double }* %0, i64 0, i32 4
  %.unpack8 = load double, double* %.elt7, align 8
  %30 = insertvalue { double, double*, double*, double, double } %29, double %.unpack8, 4
  ret { double, double*, double*, double, double } %30
}

; Function Attrs: nounwind uwtable willreturn mustprogress
define internal { i8*, i8*, i1, i1, double*, double*, double*, double* } @augmented_mat_mult.6(%struct.Matrix* noalias nocapture readonly %lhs, %struct.Matrix* nocapture %"lhs'", %struct.Matrix* noalias nocapture readonly %rhs, %struct.Matrix* nocapture %"rhs'", %struct.Matrix* noalias nocapture %out, %struct.Matrix* nocapture %"out'") local_unnamed_addr #16 {
entry:
  %0 = alloca { i8*, i8*, i1, i1, double*, double*, double*, double* }, align 8
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 0
  %1 = load i32, i32* %nrows, align 8, !tbaa !138, !alias.scope !759, !noalias !762
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 1
  %2 = load i32, i32* %ncols, align 4, !tbaa !139, !alias.scope !764, !noalias !767
  %"nrows1.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 0
  %nrows1.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 0
  %3 = load i32, i32* %nrows1.i, align 8, !tbaa !138, !alias.scope !769, !noalias !772
  %"ncols2.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 1
  %ncols2.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 1
  %4 = load i32, i32* %ncols2.i, align 4, !tbaa !139, !alias.scope !769, !noalias !772
  %mul.i = mul nsw i32 %4, %3
  %mul3.i = mul nsw i32 %2, %1
  %cmp.not.i = icmp eq i32 %mul.i, %mul3.i
  %5 = getelementptr inbounds { i8*, i8*, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }* %0, i64 0, i32 2
  store i1 %cmp.not.i, i1* %5, align 8
  br i1 %cmp.not.i, label %resize.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %"data.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 2
  %data.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 2
  %6 = load double*, double** %data.i, align 8, !tbaa !137, !alias.scope !769, !noalias !772
  %cmp4.not.i = icmp eq double* %6, null
  %7 = getelementptr inbounds { i8*, i8*, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }* %0, i64 0, i32 3
  store i1 %cmp4.not.i, i1* %7, align 1
  %cmp8.i = icmp sgt i32 %mul3.i, 0
  br i1 %cmp8.i, label %if.then9.i, label %if.else.i

if.then9.i:                                       ; preds = %if.then.i
  %conv31.i = zext i32 %mul3.i to i64
  %mul11.i = shl nuw nsw i64 %conv31.i, 3
  %call.i = tail call noalias i8* @malloc(i64 %mul11.i) #45
  %8 = getelementptr inbounds { i8*, i8*, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }* %0, i64 0, i32 1
  store i8* %call.i, i8** %8, align 8
  %"call.i'mi" = tail call noalias nonnull i8* @malloc(i64 %mul11.i) #45
  %9 = getelementptr inbounds { i8*, i8*, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }* %0, i64 0, i32 0
  store i8* %"call.i'mi", i8** %9, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %"call.i'mi", i8 0, i64 %mul11.i, i1 false)
  %"'ipc" = bitcast double** %"data.i'ipg" to i8**
  %10 = bitcast double** %data.i to i8**
  store i8* %"call.i'mi", i8** %"'ipc", align 8, !tbaa !137, !alias.scope !772, !noalias !769
  store i8* %call.i, i8** %10, align 8, !tbaa !137, !alias.scope !769, !noalias !772
  br label %resize.exit

if.else.i:                                        ; preds = %if.then.i
  store double* null, double** %"data.i'ipg", align 8, !tbaa !137, !alias.scope !772, !noalias !769
  store double* null, double** %data.i, align 8, !tbaa !137, !alias.scope !769, !noalias !772
  br label %resize.exit

resize.exit:                                      ; preds = %if.else.i, %if.then9.i, %entry
  store i32 %2, i32* %"ncols2.i'ipg", align 4, !tbaa !139, !alias.scope !772, !noalias !769
  store i32 %2, i32* %ncols2.i, align 4, !tbaa !139, !alias.scope !769, !noalias !772
  store i32 %1, i32* %"nrows1.i'ipg", align 8, !tbaa !138, !alias.scope !772, !noalias !769
  store i32 %1, i32* %nrows1.i, align 8, !tbaa !138, !alias.scope !769, !noalias !772
  %cmp85 = icmp sgt i32 %1, 0
  br i1 %cmp85, label %for.cond2.preheader.lr.ph, label %for.end49

for.cond2.preheader.lr.ph:                        ; preds = %resize.exit
  %cmp483 = icmp sgt i32 %2, 0
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 2
  %data7 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 2
  %nrows8 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 0
  %data14 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 2
  %ncols21 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 1
  %11 = zext i32 %1 to i64
  %wide.trip.count96 = zext i32 %2 to i64
  %12 = mul nuw nsw i64 %wide.trip.count96, %11
  %mallocsize = shl nuw nsw i64 %12, 3
  %malloccall = tail call noalias nonnull i8* @malloc(i64 %mallocsize)
  %_malloccache = bitcast i8* %malloccall to double*
  %13 = getelementptr inbounds { i8*, i8*, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }* %0, i64 0, i32 4
  %14 = bitcast double** %13 to i8**
  store i8* %malloccall, i8** %14, align 8
  %malloccall15 = tail call noalias nonnull i8* @malloc(i64 %mallocsize)
  %_malloccache16 = bitcast i8* %malloccall15 to double*
  %15 = getelementptr inbounds { i8*, i8*, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }* %0, i64 0, i32 5
  %16 = bitcast double** %15 to i8**
  store i8* %malloccall15, i8** %16, align 8
  %_unwrap = load i32, i32* %ncols21, align 4, !tbaa !139, !alias.scope !759, !noalias !762, !invariant.group !774
  %wide.trip.count_unwrap = zext i32 %_unwrap to i64
  %17 = add nsw i64 %wide.trip.count_unwrap, -1
  %18 = mul nuw nsw i64 %17, %wide.trip.count96
  %19 = mul nuw nsw i64 %18, %11
  %mallocsize25 = shl nuw nsw i64 %19, 3
  %malloccall26 = tail call noalias nonnull i8* @malloc(i64 %mallocsize25)
  %_malloccache27 = bitcast i8* %malloccall26 to double*
  %20 = getelementptr inbounds { i8*, i8*, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }* %0, i64 0, i32 6
  %21 = bitcast double** %20 to i8**
  store i8* %malloccall26, i8** %21, align 8
  %malloccall36 = tail call noalias nonnull i8* @malloc(i64 %mallocsize25)
  %_malloccache37 = bitcast i8* %malloccall36 to double*
  %22 = getelementptr inbounds { i8*, i8*, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }* %0, i64 0, i32 7
  %23 = bitcast double** %22 to i8**
  store i8* %malloccall36, i8** %23, align 8
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.inc47, %for.cond2.preheader.lr.ph
  %iv = phi i64 [ %iv.next, %for.inc47 ], [ 0, %for.cond2.preheader.lr.ph ]
  %iv.next = add nuw nsw i64 %iv, 1
  br i1 %cmp483, label %for.body5.lr.ph, label %for.inc47

for.body5.lr.ph:                                  ; preds = %for.cond2.preheader
  %24 = load double*, double** %data, align 8, !tbaa !137, !alias.scope !759, !noalias !762
  %arrayidx = getelementptr inbounds double, double* %24, i64 %iv
  %25 = load double*, double** %data7, align 8, !tbaa !137, !alias.scope !764, !noalias !767
  %26 = load i32, i32* %nrows8, align 8, !tbaa !138, !alias.scope !764, !noalias !767
  %27 = load double*, double** %data14, align 8, !tbaa !137, !alias.scope !769, !noalias !772
  %28 = load i32, i32* %ncols21, align 4, !tbaa !139, !alias.scope !759, !noalias !762, !invariant.group !774
  %cmp2281 = icmp sgt i32 %28, 1
  %29 = sext i32 %26 to i64
  %wide.trip.count = zext i32 %28 to i64
  br label %for.body5

for.body5:                                        ; preds = %for.inc44, %for.body5.lr.ph
  %iv1 = phi i64 [ %iv.next2, %for.inc44 ], [ 0, %for.body5.lr.ph ]
  %iv.next2 = add nuw nsw i64 %iv1, 1
  %30 = load double, double* %arrayidx, align 8, !tbaa !75, !alias.scope !775, !noalias !778
  %31 = mul nsw i64 %iv1, %29
  %arrayidx12 = getelementptr inbounds double, double* %25, i64 %31
  %32 = load double, double* %arrayidx12, align 8, !tbaa !75, !alias.scope !780, !noalias !783
  %mul13 = fmul fast double %32, %30
  %33 = mul nuw nsw i64 %iv1, %11
  %34 = add nuw nsw i64 %33, %iv
  %arrayidx19 = getelementptr inbounds double, double* %27, i64 %34
  store double %mul13, double* %arrayidx19, align 8, !tbaa !75, !alias.scope !785, !noalias !788
  %35 = mul nuw nsw i64 %iv, %wide.trip.count96
  %36 = add nuw nsw i64 %iv1, %35
  %37 = getelementptr inbounds double, double* %_malloccache16, i64 %36
  store double %32, double* %37, align 8, !tbaa !75, !invariant.group !790
  %38 = getelementptr inbounds double, double* %_malloccache, i64 %36
  store double %30, double* %38, align 8, !tbaa !75, !invariant.group !791
  br i1 %cmp2281, label %for.body23, label %for.inc44

for.body23:                                       ; preds = %for.body23, %for.body5
  %iv3 = phi i64 [ %iv.next4, %for.body23 ], [ 0, %for.body5 ]
  %39 = phi double [ %add43, %for.body23 ], [ %mul13, %for.body5 ]
  %iv.next4 = add nuw nsw i64 %iv3, 1
  %40 = mul nuw nsw i64 %iv.next4, %11
  %41 = add nuw nsw i64 %40, %iv
  %arrayidx29 = getelementptr inbounds double, double* %24, i64 %41
  %42 = load double, double* %arrayidx29, align 8, !tbaa !75, !alias.scope !775, !noalias !778
  %43 = add nsw i64 %iv.next4, %31
  %arrayidx35 = getelementptr inbounds double, double* %25, i64 %43
  %44 = load double, double* %arrayidx35, align 8, !tbaa !75, !alias.scope !780, !noalias !783
  %mul36 = fmul fast double %44, %42
  %add43 = fadd fast double %39, %mul36
  store double %add43, double* %arrayidx19, align 8, !tbaa !75, !alias.scope !785, !noalias !788
  %45 = mul nuw nsw i64 %iv1, %17
  %46 = add nuw nsw i64 %iv3, %45
  %47 = mul nuw nsw i64 %iv, %18
  %48 = add nuw nsw i64 %46, %47
  %49 = getelementptr inbounds double, double* %_malloccache37, i64 %48
  store double %44, double* %49, align 8, !tbaa !75, !invariant.group !792
  %50 = getelementptr inbounds double, double* %_malloccache27, i64 %48
  store double %42, double* %50, align 8, !tbaa !75, !invariant.group !793
  %indvars.iv.next = add nuw nsw i64 %iv3, 2
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.inc44, label %for.body23, !llvm.loop !213

for.inc44:                                        ; preds = %for.body23, %for.body5
  %exitcond97.not = icmp eq i64 %iv.next2, %wide.trip.count96
  br i1 %exitcond97.not, label %for.inc47, label %for.body5, !llvm.loop !214

for.inc47:                                        ; preds = %for.inc44, %for.cond2.preheader
  %exitcond101.not = icmp eq i64 %iv.next, %11
  br i1 %exitcond101.not, label %for.end49, label %for.cond2.preheader, !llvm.loop !215

for.end49:                                        ; preds = %for.inc47, %resize.exit
  %51 = load { i8*, i8*, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }* %0, align 8
  ret { i8*, i8*, i1, i1, double*, double*, double*, double* } %51
}

; Function Attrs: nounwind uwtable willreturn mustprogress
define internal { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* } @augmented_apply_global_transform(%struct.Matrix* nocapture readonly %pose_params, %struct.Matrix* nocapture %"pose_params'", %struct.Matrix* nocapture readonly %positions, %struct.Matrix* nocapture %"positions'") local_unnamed_addr #16 {
entry:
  %0 = alloca { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, align 8
  %call.i = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #45
  %"call.i'mi" = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #45
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16) dereferenceable_or_null(16) %"call.i'mi", i8 0, i64 16, i1 false)
  %"'ipc" = bitcast i8* %"call.i'mi" to %struct.Matrix*
  %1 = bitcast i8* %call.i to %struct.Matrix*
  %"nrows1.i'ipc" = bitcast i8* %"call.i'mi" to i32*
  %nrows1.i = bitcast i8* %call.i to i32*
  store i32 3, i32* %"nrows1.i'ipc", align 8, !tbaa !138, !alias.scope !794, !noalias !797
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138, !alias.scope !797, !noalias !794
  %"ncols2.i'ipg" = getelementptr inbounds i8, i8* %"call.i'mi", i64 4
  %ncols2.i = getelementptr inbounds i8, i8* %call.i, i64 4
  %"'ipc8" = bitcast i8* %"ncols2.i'ipg" to i32*
  %2 = bitcast i8* %ncols2.i to i32*
  store i32 3, i32* %"'ipc8", align 4, !tbaa !139, !alias.scope !794, !noalias !797
  store i32 3, i32* %2, align 4, !tbaa !139, !alias.scope !797, !noalias !794
  %call4.i = tail call noalias nonnull dereferenceable(72) dereferenceable_or_null(72) i8* @malloc(i64 72) #45
  %3 = getelementptr inbounds { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }* %0, i64 0, i32 4
  store i8* %call4.i, i8** %3, align 8
  %"call4.i'mi" = tail call noalias nonnull dereferenceable(72) dereferenceable_or_null(72) i8* @malloc(i64 72) #45
  %4 = getelementptr inbounds { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }* %0, i64 0, i32 3
  store i8* %"call4.i'mi", i8** %4, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(72) dereferenceable_or_null(72) %"call4.i'mi", i8 0, i64 72, i1 false)
  %"data.i'ipg" = getelementptr inbounds i8, i8* %"call.i'mi", i64 8
  %data.i = getelementptr inbounds i8, i8* %call.i, i64 8
  %"'ipc7" = bitcast i8* %"data.i'ipg" to i8**
  %5 = bitcast i8* %data.i to i8**
  store i8* %"call4.i'mi", i8** %"'ipc7", align 8, !tbaa !137, !alias.scope !794, !noalias !797
  store i8* %call4.i, i8** %5, align 8, !tbaa !137, !alias.scope !797, !noalias !794
  %"data'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"pose_params'", i64 0, i32 2
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 2
  %"'ipl6" = load double*, double** %"data'ipg", align 8, !tbaa !137, !alias.scope !799, !noalias !802
  %6 = getelementptr inbounds { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }* %0, i64 0, i32 2
  store double* %"'ipl6", double** %6, align 8
  %7 = load double*, double** %data, align 8, !tbaa !137, !alias.scope !802, !noalias !799
  %8 = getelementptr inbounds { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }* %0, i64 0, i32 8
  store double* %7, double** %8, align 8
  %_augmented = call { double, double*, double*, double, double } @augmented_angle_axis_to_rotation_matrix(double* %7, double* %"'ipl6", %struct.Matrix* nonnull %1, %struct.Matrix* nonnull %"'ipc")
  %.repack = getelementptr inbounds { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }* %0, i64 0, i32 1, i32 0
  %_augmented.elt = extractvalue { double, double*, double*, double, double } %_augmented, 0
  store double %_augmented.elt, double* %.repack, align 8
  %.repack1 = getelementptr inbounds { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }* %0, i64 0, i32 1, i32 1
  %_augmented.elt2 = extractvalue { double, double*, double*, double, double } %_augmented, 1
  store double* %_augmented.elt2, double** %.repack1, align 8
  %.repack3 = getelementptr inbounds { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }* %0, i64 0, i32 1, i32 2
  %_augmented.elt4 = extractvalue { double, double*, double*, double, double } %_augmented, 2
  store double* %_augmented.elt4, double** %.repack3, align 8
  %.repack5 = getelementptr inbounds { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }* %0, i64 0, i32 1, i32 3
  %_augmented.elt6 = extractvalue { double, double*, double*, double, double } %_augmented, 3
  store double %_augmented.elt6, double* %.repack5, align 8
  %.repack7 = getelementptr inbounds { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }* %0, i64 0, i32 1, i32 4
  %_augmented.elt8 = extractvalue { double, double*, double*, double, double } %_augmented, 4
  store double %_augmented.elt8, double* %.repack7, align 8
  %"'ipl" = load double*, double** %"data'ipg", align 8, !tbaa !137, !alias.scope !799, !noalias !802
  %9 = getelementptr inbounds { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }* %0, i64 0, i32 0
  store double* %"'ipl", double** %9, align 8
  %10 = load double*, double** %data, align 8, !tbaa !137, !alias.scope !802, !noalias !799
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 0
  %11 = load i32, i32* %nrows, align 8, !tbaa !138, !alias.scope !802, !noalias !799
  %12 = getelementptr inbounds { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }* %0, i64 0, i32 9
  store i32 %11, i32* %12, align 8
  %13 = bitcast i8* %call4.i to double*
  %14 = sext i32 %11 to i64
  %malloccall = tail call noalias nonnull dereferenceable(72) dereferenceable_or_null(72) i8* @malloc(i64 72)
  %_malloccache = bitcast i8* %malloccall to double*
  %15 = getelementptr inbounds { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }* %0, i64 0, i32 10
  %16 = bitcast double** %15 to i8**
  store i8* %malloccall, i8** %16, align 8
  %malloccall21 = tail call noalias nonnull dereferenceable(72) dereferenceable_or_null(72) i8* @malloc(i64 72)
  %_malloccache22 = bitcast i8* %malloccall21 to double*
  %17 = getelementptr inbounds { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }* %0, i64 0, i32 11
  %18 = bitcast double** %17 to i8**
  store i8* %malloccall21, i8** %18, align 8
  br label %for.cond1.preheader

for.cond1.preheader:                              ; preds = %for.inc12, %entry
  %iv = phi i64 [ %iv.next, %for.inc12 ], [ 0, %entry ]
  %iv.next = add nuw nsw i64 %iv, 1
  %19 = add nsw i64 %iv, %14
  %arrayidx = getelementptr inbounds double, double* %10, i64 %19
  %20 = mul nuw nsw i64 %iv, 3
  br label %for.body3

for.body3:                                        ; preds = %for.body3, %for.cond1.preheader
  %iv1 = phi i64 [ %iv.next2, %for.body3 ], [ 0, %for.cond1.preheader ]
  %iv.next2 = add nuw nsw i64 %iv1, 1
  %21 = load double, double* %arrayidx, align 8, !tbaa !75, !alias.scope !804, !noalias !807
  %22 = add nuw nsw i64 %20, %iv1
  %arrayidx10 = getelementptr inbounds double, double* %13, i64 %22
  %23 = load double, double* %arrayidx10, align 8, !tbaa !75, !alias.scope !809, !noalias !812
  %mul11 = fmul fast double %23, %21
  store double %mul11, double* %arrayidx10, align 8, !tbaa !75, !alias.scope !809, !noalias !812
  %24 = getelementptr inbounds double, double* %_malloccache22, i64 %22
  store double %23, double* %24, align 8, !tbaa !75, !invariant.group !814
  %25 = getelementptr inbounds double, double* %_malloccache, i64 %22
  store double %21, double* %25, align 8, !tbaa !75, !invariant.group !815
  %exitcond102.not = icmp eq i64 %iv.next2, 3
  br i1 %exitcond102.not, label %for.inc12, label %for.body3, !llvm.loop !223

for.inc12:                                        ; preds = %for.body3
  %exitcond107.not = icmp eq i64 %iv.next, 3
  br i1 %exitcond107.not, label %for.end14, label %for.cond1.preheader, !llvm.loop !224

for.end14:                                        ; preds = %for.inc12
  %call.i81 = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #45
  %26 = getelementptr inbounds { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }* %0, i64 0, i32 7
  store i8* %call.i81, i8** %26, align 8
  %"call.i81'mi" = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #45
  %27 = getelementptr inbounds { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }* %0, i64 0, i32 6
  store i8* %"call.i81'mi", i8** %27, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16) dereferenceable_or_null(16) %"call.i81'mi", i8 0, i64 16, i1 false)
  %"'ipc9" = bitcast i8* %"call.i81'mi" to %struct.Matrix*
  %28 = bitcast i8* %call.i81 to %struct.Matrix*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %call.i81, i8 0, i64 16, i1 false) #45
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %"call.i81'mi", i8 0, i64 16, i1 false) #45
  %_augmented10 = call { i8*, i8*, i1, i1, double*, double*, double*, double* } @augmented_mat_mult.6(%struct.Matrix* nonnull %1, %struct.Matrix* nonnull %"'ipc", %struct.Matrix* %positions, %struct.Matrix* %"positions'", %struct.Matrix* nonnull %28, %struct.Matrix* nonnull %"'ipc9")
  %29 = getelementptr inbounds { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }* %0, i64 0, i32 5
  store { i8*, i8*, i1, i1, double*, double*, double*, double* } %_augmented10, { i8*, i8*, i1, i1, double*, double*, double*, double* }* %29, align 8
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 1
  %30 = load i32, i32* %ncols, align 4, !tbaa !139, !alias.scope !816, !noalias !819
  %cmp1789 = icmp sgt i32 %30, 0
  br i1 %cmp1789, label %for.cond19.preheader.lr.ph, label %delete_matrix.exit

for.cond19.preheader.lr.ph:                       ; preds = %for.end14
  %nrows20 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 0
  %31 = load i32, i32* %nrows20, align 8, !tbaa !138, !alias.scope !816, !noalias !819
  %cmp2187 = icmp sgt i32 %31, 0
  %data23 = getelementptr inbounds i8, i8* %call.i81, i64 8
  %32 = bitcast i8* %data23 to double**
  %nrows24 = bitcast i8* %call.i81 to i32*
  %data36 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 2
  %wide.trip.count = zext i32 %31 to i64
  %33 = sext i32 %31 to i64
  %34 = zext i32 %30 to i64
  br label %for.cond19.preheader

for.cond19.preheader:                             ; preds = %for.inc45, %for.cond19.preheader.lr.ph
  %iv3 = phi i64 [ %iv.next4, %for.inc45 ], [ 0, %for.cond19.preheader.lr.ph ]
  %iv.next4 = add nuw nsw i64 %iv3, 1
  br i1 %cmp2187, label %for.body22.lr.ph, label %for.inc45

for.body22.lr.ph:                                 ; preds = %for.cond19.preheader
  %35 = load double*, double** %32, align 8, !tbaa !137, !alias.scope !821, !noalias !824
  %36 = load i32, i32* %nrows24, align 8, !tbaa !138, !alias.scope !821, !noalias !824
  %37 = sext i32 %36 to i64
  %38 = mul nsw i64 %iv3, %37
  %39 = load double*, double** %data, align 8, !tbaa !137, !alias.scope !802, !noalias !799
  %40 = load i32, i32* %nrows, align 8, !tbaa !138, !alias.scope !802, !noalias !799
  %mul31 = shl nsw i32 %40, 1
  %41 = load double*, double** %data36, align 8, !tbaa !137, !alias.scope !816, !noalias !819
  %42 = sext i32 %mul31 to i64
  %43 = mul nsw i64 %iv3, %33
  br label %for.body22

for.body22:                                       ; preds = %for.body22, %for.body22.lr.ph
  %iv5 = phi i64 [ %iv.next6, %for.body22 ], [ 0, %for.body22.lr.ph ]
  %iv.next6 = add nuw nsw i64 %iv5, 1
  %44 = add nsw i64 %iv5, %38
  %arrayidx28 = getelementptr inbounds double, double* %35, i64 %44
  %45 = load double, double* %arrayidx28, align 8, !tbaa !75, !alias.scope !826, !noalias !829
  %46 = add nsw i64 %iv5, %42
  %arrayidx34 = getelementptr inbounds double, double* %39, i64 %46
  %47 = load double, double* %arrayidx34, align 8, !tbaa !75, !alias.scope !831, !noalias !834
  %add35 = fadd fast double %47, %45
  %48 = add nsw i64 %iv5, %43
  %arrayidx41 = getelementptr inbounds double, double* %41, i64 %48
  store double %add35, double* %arrayidx41, align 8, !tbaa !75, !alias.scope !836, !noalias !839
  %exitcond.not = icmp eq i64 %iv.next6, %wide.trip.count
  br i1 %exitcond.not, label %for.inc45, label %for.body22, !llvm.loop !225

for.inc45:                                        ; preds = %for.body22, %for.cond19.preheader
  %exitcond98.not = icmp eq i64 %iv.next4, %34
  br i1 %exitcond98.not, label %delete_matrix.exit, label %for.cond19.preheader, !llvm.loop !226

delete_matrix.exit:                               ; preds = %for.inc45, %for.end14
  tail call void @free(i8* nonnull %call.i) #45
  call void @free(i8* nonnull %"call.i'mi") #45
  %49 = load { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }* %0, align 8
  ret { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* } %49
}

; Function Attrs: inlinehint nounwind uwtable willreturn mustprogress
define internal fastcc { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } @augmented__ZL28get_skinned_vertex_positionsiPK6MatrixPKiS1_S1_S1_iS1_PS_i(i32 %bone_count, %struct.Matrix* noalias nocapture readonly %base_relatives, i32* nocapture readonly %parents, %struct.Matrix* noalias nocapture readonly %inverse_base_absolutes, %struct.Matrix* noalias nocapture readonly %base_positions, %struct.Matrix* noalias nocapture readonly %weights, i32 %is_mirrored, %struct.Matrix* noalias nocapture readonly %pose_params, %struct.Matrix* nocapture %"pose_params'", %struct.Matrix* noalias nocapture %positions, %struct.Matrix* nocapture %"positions'") unnamed_addr #36 {
entry:
  %0 = alloca { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, align 8
  %conv.i = sext i32 %bone_count to i64
  %mul.i = shl nsw i64 %conv.i, 4
  %call.i = tail call noalias i8* @malloc(i64 %mul.i) #45
  %1 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 1
  store i8* %call.i, i8** %1, align 8
  %"call.i'mi" = tail call noalias nonnull i8* @malloc(i64 %mul.i) #45
  %2 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 0
  store i8* %"call.i'mi", i8** %2, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %"call.i'mi", i8 0, i64 %mul.i, i1 false)
  %cmp15.i = icmp sgt i32 %bone_count, 0
  br i1 %cmp15.i, label %for.body.preheader.i11, label %get_matrix_array.exit6

get_matrix_array.exit6:                           ; preds = %entry
  %call.i3 = tail call noalias i8* @malloc(i64 %mul.i) #45
  %3 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 5
  store i8* %call.i3, i8** %3, align 8
  %"call.i3'mi" = tail call noalias nonnull i8* @malloc(i64 %mul.i) #45
  %4 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 4
  store i8* %"call.i3'mi", i8** %4, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %"call.i3'mi", i8 0, i64 %mul.i, i1 false)
  %call.i9 = tail call noalias i8* @malloc(i64 %mul.i) #45
  %5 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 3
  store i8* %call.i9, i8** %5, align 8
  %"call.i9'mi" = tail call noalias nonnull i8* @malloc(i64 %mul.i) #45
  %6 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 2
  store i8* %"call.i9'mi", i8** %6, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %"call.i9'mi", i8 0, i64 %mul.i, i1 false)
  br label %get_matrix_array.exit12

for.body.preheader.i11:                           ; preds = %entry
  %7 = zext i32 %bone_count to i64
  %8 = shl nuw nsw i64 %7, 4
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %call.i, i8 0, i64 %8, i1 false) #45
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %"call.i'mi", i8 0, i64 %8, i1 false) #45
  %call.i359 = tail call noalias i8* @malloc(i64 %mul.i) #45
  %9 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 9
  store i8* %call.i359, i8** %9, align 8
  %"call.i359'mi" = tail call noalias nonnull i8* @malloc(i64 %mul.i) #45
  %10 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 8
  store i8* %"call.i359'mi", i8** %10, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %"call.i359'mi", i8 0, i64 %mul.i, i1 false)
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %call.i359, i8 0, i64 %8, i1 false) #45
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %"call.i359'mi", i8 0, i64 %8, i1 false) #45
  %call.i963 = tail call noalias i8* @malloc(i64 %mul.i) #45
  %11 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 7
  store i8* %call.i963, i8** %11, align 8
  %"call.i963'mi" = tail call noalias nonnull i8* @malloc(i64 %mul.i) #45
  %12 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 6
  store i8* %"call.i963'mi", i8** %12, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %"call.i963'mi", i8 0, i64 %mul.i, i1 false)
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %call.i963, i8 0, i64 %8, i1 false) #45
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %"call.i963'mi", i8 0, i64 %8, i1 false) #45
  br label %get_matrix_array.exit12

get_matrix_array.exit12:                          ; preds = %for.body.preheader.i11, %get_matrix_array.exit6
  %13 = phi i8* [ %"call.i9'mi", %get_matrix_array.exit6 ], [ %"call.i963'mi", %for.body.preheader.i11 ]
  %call.i966 = phi i8* [ %call.i9, %get_matrix_array.exit6 ], [ %call.i963, %for.body.preheader.i11 ]
  %14 = phi i8* [ %"call.i3'mi", %get_matrix_array.exit6 ], [ %"call.i359'mi", %for.body.preheader.i11 ]
  %call.i36064 = phi i8* [ %call.i3, %get_matrix_array.exit6 ], [ %call.i359, %for.body.preheader.i11 ]
  %"'ipc" = bitcast i8* %"call.i'mi" to %struct.Matrix*
  %15 = bitcast i8* %call.i to %struct.Matrix*
  %"'ipc9" = bitcast i8* %14 to %struct.Matrix*
  %16 = bitcast i8* %call.i36064 to %struct.Matrix*
  %"'ipc11" = bitcast i8* %13 to %struct.Matrix*
  %17 = bitcast i8* %call.i966 to %struct.Matrix*
  %_augmented10 = call { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* } @augmented_get_posed_relatives(i32 %bone_count, %struct.Matrix* %base_relatives, %struct.Matrix* %pose_params, %struct.Matrix* %"pose_params'", %struct.Matrix* %15, %struct.Matrix* nonnull %"'ipc")
  %18 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 11
  store { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* } %_augmented10, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }* %18, align 8
  %_augmented = call { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } @augmented_relatives_to_absolutes(i32 %bone_count, %struct.Matrix* %15, %struct.Matrix* nonnull %"'ipc", i32* %parents, %struct.Matrix* %16, %struct.Matrix* nonnull %"'ipc9")
  %.repack = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 10, i32 0
  %_augmented.elt = extractvalue { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %_augmented, 0
  store i8** %_augmented.elt, i8*** %.repack, align 8
  %.repack1 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 10, i32 1
  %_augmented.elt2 = extractvalue { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %_augmented, 1
  store i8** %_augmented.elt2, i8*** %.repack1, align 8
  %.repack3 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 10, i32 2
  %_augmented.elt4 = extractvalue { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %_augmented, 2
  store double** %_augmented.elt4, double*** %.repack3, align 8
  %.repack5 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 10, i32 3
  %_augmented.elt6 = extractvalue { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %_augmented, 3
  store { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }* %_augmented.elt6, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }** %.repack5, align 8
  %.repack7 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 10, i32 4
  %_augmented.elt8 = extractvalue { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %_augmented, 4
  store i32* %_augmented.elt8, i32** %.repack7, align 8
  %.repack9 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 10, i32 5
  %_augmented.elt10 = extractvalue { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %_augmented, 5
  store i1* %_augmented.elt10, i1** %.repack9, align 8
  %.repack11 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 10, i32 6
  %_augmented.elt12 = extractvalue { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %_augmented, 6
  store i32* %_augmented.elt12, i32** %.repack11, align 8
  br i1 %cmp15.i, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %get_matrix_array.exit12
  %wide.trip.count101 = zext i32 %bone_count to i64
  %mallocsize = mul nuw nsw i64 %wide.trip.count101, 72
  %malloccall = tail call noalias nonnull i8* @malloc(i64 %mallocsize)
  %_augmented12_malloccache = bitcast i8* %malloccall to { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*
  %19 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 12
  %20 = bitcast { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }** %19 to i8**
  store i8* %malloccall, i8** %20, align 8
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %iv = phi i64 [ %iv.next, %for.body ], [ 0, %for.body.preheader ]
  %iv.next = add nuw nsw i64 %iv, 1
  %"arrayidx'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"'ipc9", i64 %iv
  %arrayidx = getelementptr inbounds %struct.Matrix, %struct.Matrix* %16, i64 %iv
  %arrayidx4 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %inverse_base_absolutes, i64 %iv
  %"arrayidx6'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"'ipc11", i64 %iv
  %arrayidx6 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %17, i64 %iv
  %_augmented12 = call { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** } @augmented_mat_mult.4(%struct.Matrix* %arrayidx, %struct.Matrix* nonnull %"arrayidx'ipg", %struct.Matrix* %arrayidx4, %struct.Matrix* %arrayidx6, %struct.Matrix* nonnull %"arrayidx6'ipg")
  %21 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %_augmented12_malloccache, i64 %iv
  store { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** } %_augmented12, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %21, align 8, !invariant.group !841
  %exitcond102.not = icmp eq i64 %iv.next, %wide.trip.count101
  br i1 %exitcond102.not, label %for.end, label %for.body, !llvm.loop !234

for.end:                                          ; preds = %for.body, %get_matrix_array.exit12
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %base_positions, i64 0, i32 1
  %22 = load i32, i32* %ncols, align 4, !tbaa !139, !alias.scope !842, !noalias !845
  %"nrows1.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"positions'", i64 0, i32 0
  %nrows1.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 0
  %23 = load i32, i32* %nrows1.i, align 8, !tbaa !138, !alias.scope !847, !noalias !850
  %"ncols2.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"positions'", i64 0, i32 1
  %ncols2.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 1
  %24 = load i32, i32* %ncols2.i, align 4, !tbaa !139, !alias.scope !847, !noalias !850
  %mul.i13 = mul nsw i32 %24, %23
  %25 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 22
  store i32 %mul.i13, i32* %25, align 8
  %mul3.i = mul i32 %22, 3
  %cmp.not.i = icmp eq i32 %mul.i13, %mul3.i
  br i1 %cmp.not.i, label %resize.exit, label %if.then.i

if.then.i:                                        ; preds = %for.end
  %"data.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"positions'", i64 0, i32 2
  %data.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 2
  %26 = load double*, double** %data.i, align 8, !tbaa !137, !alias.scope !847, !noalias !850
  %cmp4.not.i = icmp eq double* %26, null
  %27 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 23
  store i1 %cmp4.not.i, i1* %27, align 4
  %cmp8.i = icmp sgt i32 %mul3.i, 0
  br i1 %cmp8.i, label %resize.exit.thread, label %resize.exit.thread69

resize.exit.thread:                               ; preds = %if.then.i
  %conv31.i = zext i32 %mul3.i to i64
  %mul11.i = shl nuw nsw i64 %conv31.i, 3
  %call.i14 = tail call noalias i8* @malloc(i64 %mul11.i) #45
  %28 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 14
  store i8* %call.i14, i8** %28, align 8
  %"call.i14'mi" = tail call noalias nonnull i8* @malloc(i64 %mul11.i) #45
  %29 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 13
  store i8* %"call.i14'mi", i8** %29, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %"call.i14'mi", i8 0, i64 %mul11.i, i1 false)
  %"'ipc17" = bitcast double** %"data.i'ipg" to i8**
  %30 = bitcast double** %data.i to i8**
  store i8* %"call.i14'mi", i8** %"'ipc17", align 8, !tbaa !137, !alias.scope !850, !noalias !847
  store i8* %call.i14, i8** %30, align 8, !tbaa !137, !alias.scope !847, !noalias !850
  store i32 %22, i32* %"ncols2.i'ipg", align 4, !tbaa !139, !alias.scope !850, !noalias !847
  store i32 %22, i32* %ncols2.i, align 4, !tbaa !139, !alias.scope !847, !noalias !850
  store i32 3, i32* %"nrows1.i'ipg", align 8, !tbaa !138, !alias.scope !850, !noalias !847
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138, !alias.scope !847, !noalias !850
  br label %for.body.lr.ph.i

resize.exit.thread69:                             ; preds = %if.then.i
  store double* null, double** %"data.i'ipg", align 8, !tbaa !137, !alias.scope !850, !noalias !847
  store double* null, double** %data.i, align 8, !tbaa !137, !alias.scope !847, !noalias !850
  store i32 %22, i32* %"ncols2.i'ipg", align 4, !tbaa !139, !alias.scope !850, !noalias !847
  store i32 %22, i32* %ncols2.i, align 4, !tbaa !139, !alias.scope !847, !noalias !850
  store i32 3, i32* %"nrows1.i'ipg", align 8, !tbaa !138, !alias.scope !850, !noalias !847
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138, !alias.scope !847, !noalias !850
  br label %fill.exit

resize.exit:                                      ; preds = %for.end
  store i32 %22, i32* %"ncols2.i'ipg", align 4, !tbaa !139, !alias.scope !850, !noalias !847
  store i32 %22, i32* %ncols2.i, align 4, !tbaa !139, !alias.scope !847, !noalias !850
  store i32 3, i32* %"nrows1.i'ipg", align 8, !tbaa !138, !alias.scope !850, !noalias !847
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138, !alias.scope !847, !noalias !850
  %cmp7.i = icmp sgt i32 %mul.i13, 0
  br i1 %cmp7.i, label %resize.exit.for.body.lr.ph.i_crit_edge, label %fill.exit

resize.exit.for.body.lr.ph.i_crit_edge:           ; preds = %resize.exit
  %data.i15.phi.trans.insert = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 2
  %31 = bitcast double** %data.i15.phi.trans.insert to i8**
  %.pre105 = load i8*, i8** %31, align 8, !tbaa !137, !alias.scope !847, !noalias !850
  %.pre103 = zext i32 %mul3.i to i64
  %.pre104 = shl nuw nsw i64 %.pre103, 3
  br label %for.body.lr.ph.i

for.body.lr.ph.i:                                 ; preds = %resize.exit.for.body.lr.ph.i_crit_edge, %resize.exit.thread
  %.pre-phi = phi i64 [ %.pre104, %resize.exit.for.body.lr.ph.i_crit_edge ], [ %mul11.i, %resize.exit.thread ]
  %32 = phi i8* [ %.pre105, %resize.exit.for.body.lr.ph.i_crit_edge ], [ %call.i14, %resize.exit.thread ]
  call void @llvm.memset.p0i8.i64(i8* align 8 %32, i8 0, i64 %.pre-phi, i1 false) #46
  br label %fill.exit

fill.exit:                                        ; preds = %for.body.lr.ph.i, %resize.exit, %resize.exit.thread69
  %call.i16 = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #45
  %33 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 18
  store i8* %call.i16, i8** %33, align 8
  %"call.i16'mi" = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #45
  %34 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 17
  store i8* %"call.i16'mi", i8** %34, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16) dereferenceable_or_null(16) %"call.i16'mi", i8 0, i64 16, i1 false)
  %"'ipc21" = bitcast i8* %"call.i16'mi" to %struct.Matrix*
  %35 = bitcast i8* %call.i16 to %struct.Matrix*
  %"nrows1.i17'ipc" = bitcast i8* %"call.i16'mi" to i32*
  %nrows1.i17 = bitcast i8* %call.i16 to i32*
  store i32 4, i32* %"nrows1.i17'ipc", align 8, !tbaa !138, !alias.scope !852, !noalias !855
  store i32 4, i32* %nrows1.i17, align 8, !tbaa !138, !alias.scope !855, !noalias !852
  %"ncols2.i18'ipg" = getelementptr inbounds i8, i8* %"call.i16'mi", i64 4
  %ncols2.i18 = getelementptr inbounds i8, i8* %call.i16, i64 4
  %"'ipc20" = bitcast i8* %"ncols2.i18'ipg" to i32*
  %36 = bitcast i8* %ncols2.i18 to i32*
  store i32 %22, i32* %"'ipc20", align 4, !tbaa !139, !alias.scope !852, !noalias !855
  store i32 %22, i32* %36, align 4, !tbaa !139, !alias.scope !855, !noalias !852
  %mul.i19 = shl nsw i32 %22, 2
  %conv.i20 = sext i32 %mul.i19 to i64
  %mul3.i21 = shl nsw i64 %conv.i20, 3
  %call4.i = tail call noalias i8* @malloc(i64 %mul3.i21) #45
  %37 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 16
  store i8* %call4.i, i8** %37, align 8
  %"call4.i'mi" = tail call noalias nonnull i8* @malloc(i64 %mul3.i21) #45
  %38 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 15
  store i8* %"call4.i'mi", i8** %38, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %"call4.i'mi", i8 0, i64 %mul3.i21, i1 false)
  %"data.i22'ipg" = getelementptr inbounds i8, i8* %"call.i16'mi", i64 8
  %data.i22 = getelementptr inbounds i8, i8* %call.i16, i64 8
  %"'ipc19" = bitcast i8* %"data.i22'ipg" to i8**
  %39 = bitcast i8* %data.i22 to i8**
  store i8* %"call4.i'mi", i8** %"'ipc19", align 8, !tbaa !137, !alias.scope !852, !noalias !855
  store i8* %call4.i, i8** %39, align 8, !tbaa !137, !alias.scope !855, !noalias !852
  br i1 %cmp15.i, label %for.body11.lr.ph, label %for.end45

for.body11.lr.ph:                                 ; preds = %fill.exit
  %cmp1674 = icmp sgt i32 %22, 0
  %"'ipc31" = bitcast i8* %"data.i22'ipg" to double**
  %40 = bitcast i8* %data.i22 to double**
  %data23 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %weights, i64 0, i32 2
  %nrows24 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %weights, i64 0, i32 0
  %data30 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 2
  %wide.trip.count97 = zext i32 %bone_count to i64
  %wide.trip.count93 = zext i32 %22 to i64
  %mallocsize26 = shl nuw nsw i64 %wide.trip.count97, 6
  %malloccall27 = tail call noalias nonnull i8* @malloc(i64 %mallocsize26)
  %_augmented22_malloccache = bitcast i8* %malloccall27 to { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*
  %41 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 19
  %42 = bitcast { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }** %41 to i8**
  store i8* %malloccall27, i8** %42, align 8
  %mallocsize36 = shl nuw nsw i64 %wide.trip.count97, 3
  %malloccall37 = tail call noalias nonnull i8* @malloc(i64 %mallocsize36)
  %"'ipl32_malloccache" = bitcast i8* %malloccall37 to double**
  %43 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 20
  %44 = bitcast double*** %43 to i8**
  store i8* %malloccall37, i8** %44, align 8
  %mallocsize50 = shl nuw nsw i64 %wide.trip.count97, 2
  %malloccall51 = tail call noalias nonnull i8* @malloc(i64 %mallocsize50)
  %_malloccache = bitcast i8* %malloccall51 to i32*
  %45 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 24
  %46 = bitcast i32** %45 to i8**
  store i8* %malloccall51, i8** %46, align 8
  %47 = mul nuw nsw i64 %wide.trip.count93, 3
  %48 = mul nuw nsw i64 %47, %wide.trip.count97
  %mallocsize59 = shl nuw nsw i64 %48, 3
  %malloccall60 = tail call noalias nonnull i8* @malloc(i64 %mallocsize59)
  %_malloccache61 = bitcast i8* %malloccall60 to double*
  %49 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 25
  %50 = bitcast double** %49 to i8**
  store i8* %malloccall60, i8** %50, align 8
  br label %for.body11

for.body11:                                       ; preds = %for.inc43, %for.body11.lr.ph
  %iv1 = phi i64 [ %iv.next2, %for.inc43 ], [ 0, %for.body11.lr.ph ]
  %iv.next2 = add nuw nsw i64 %iv1, 1
  %"arrayidx13'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"'ipc11", i64 %iv1
  %arrayidx13 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %17, i64 %iv1
  %_augmented22 = call { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** } @augmented_mat_mult.5(%struct.Matrix* %arrayidx13, %struct.Matrix* nonnull %"arrayidx13'ipg", %struct.Matrix* %base_positions, %struct.Matrix* nonnull %35, %struct.Matrix* nonnull %"'ipc21")
  %51 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }* %_augmented22_malloccache, i64 %iv1
  store { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** } %_augmented22, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }* %51, align 8, !invariant.group !857
  br i1 %cmp1674, label %for.cond18.preheader.lr.ph, label %for.inc43

for.cond18.preheader.lr.ph:                       ; preds = %for.body11
  %"'ipl32" = load double*, double** %"'ipc31", align 8, !tbaa !137, !alias.scope !852, !noalias !855
  %52 = getelementptr inbounds double*, double** %"'ipl32_malloccache", i64 %iv1
  store double* %"'ipl32", double** %52, align 8, !tbaa !137, !invariant.group !858
  %53 = load double*, double** %40, align 8, !tbaa !137, !alias.scope !855, !noalias !852
  %54 = load i32, i32* %nrows1.i17, align 8, !tbaa !138, !alias.scope !855, !noalias !852
  %55 = getelementptr inbounds i32, i32* %_malloccache, i64 %iv1
  store i32 %54, i32* %55, align 4, !tbaa !138, !invariant.group !859
  %56 = load double*, double** %data23, align 8, !tbaa !137, !alias.scope !860, !noalias !863
  %57 = load i32, i32* %nrows24, align 8, !tbaa !138, !alias.scope !860, !noalias !863
  %58 = load double*, double** %data30, align 8, !tbaa !137, !alias.scope !847, !noalias !850
  %59 = sext i32 %54 to i64
  %60 = sext i32 %57 to i64
  br label %for.cond18.preheader

for.cond18.preheader:                             ; preds = %for.inc40, %for.cond18.preheader.lr.ph
  %iv3 = phi i64 [ %iv.next4, %for.inc40 ], [ 0, %for.cond18.preheader.lr.ph ]
  %iv.next4 = add nuw nsw i64 %iv3, 1
  %61 = mul nsw i64 %iv3, %59
  %62 = mul nsw i64 %iv3, %60
  %63 = add nsw i64 %62, %iv1
  %arrayidx28 = getelementptr inbounds double, double* %56, i64 %63
  %64 = mul nuw nsw i64 %iv3, 3
  br label %for.body20

for.body20:                                       ; preds = %for.body20, %for.cond18.preheader
  %iv5 = phi i64 [ %iv.next6, %for.body20 ], [ 0, %for.cond18.preheader ]
  %iv.next6 = add nuw nsw i64 %iv5, 1
  %65 = add nsw i64 %61, %iv5
  %arrayidx22 = getelementptr inbounds double, double* %53, i64 %65
  %66 = load double, double* %arrayidx22, align 8, !tbaa !75, !alias.scope !865, !noalias !868
  %67 = load double, double* %arrayidx28, align 8, !tbaa !75, !alias.scope !870, !noalias !873
  %mul29 = fmul fast double %67, %66
  %68 = add nuw nsw i64 %iv5, %64
  %arrayidx35 = getelementptr inbounds double, double* %58, i64 %68
  %69 = load double, double* %arrayidx35, align 8, !tbaa !75, !alias.scope !875, !noalias !878
  %add36 = fadd fast double %69, %mul29
  store double %add36, double* %arrayidx35, align 8, !tbaa !75, !alias.scope !875, !noalias !878
  %70 = mul nuw nsw i64 %iv1, %47
  %71 = add nuw nsw i64 %68, %70
  %72 = getelementptr inbounds double, double* %_malloccache61, i64 %71
  store double %67, double* %72, align 8, !tbaa !75, !invariant.group !880
  %exitcond86.not = icmp eq i64 %iv.next6, 3
  br i1 %exitcond86.not, label %for.inc40, label %for.body20, !llvm.loop !235

for.inc40:                                        ; preds = %for.body20
  %exitcond94.not = icmp eq i64 %iv.next4, %wide.trip.count93
  br i1 %exitcond94.not, label %for.inc43, label %for.cond18.preheader, !llvm.loop !236

for.inc43:                                        ; preds = %for.inc40, %for.body11
  %exitcond98.not = icmp eq i64 %iv.next2, %wide.trip.count97
  br i1 %exitcond98.not, label %for.end45, label %for.body11, !llvm.loop !237

for.end45:                                        ; preds = %for.inc43, %fill.exit
  %tobool.not = icmp ne i32 %is_mirrored, 0
  %cmp4871 = icmp sgt i32 %22, 0
  %or.cond = and i1 %tobool.not, %cmp4871
  br i1 %or.cond, label %for.body49.lr.ph, label %if.then61

for.body49.lr.ph:                                 ; preds = %for.end45
  %data50 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 2
  %73 = load double*, double** %data50, align 8, !tbaa !137, !alias.scope !847, !noalias !850
  %wide.trip.count = zext i32 %22 to i64
  %mallocsize69 = shl nuw nsw i64 %wide.trip.count, 3
  %malloccall70 = tail call noalias nonnull i8* @malloc(i64 %mallocsize69)
  %_malloccache71 = bitcast i8* %malloccall70 to double*
  %74 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 26
  %75 = bitcast double** %74 to i8**
  store i8* %malloccall70, i8** %75, align 8
  br label %for.body49

for.body49:                                       ; preds = %for.body49, %for.body49.lr.ph
  %iv7 = phi i64 [ %iv.next8, %for.body49 ], [ 0, %for.body49.lr.ph ]
  %iv.next8 = add nuw nsw i64 %iv7, 1
  %76 = mul nuw nsw i64 %iv7, 3
  %arrayidx55 = getelementptr inbounds double, double* %73, i64 %76
  %77 = load double, double* %arrayidx55, align 8, !tbaa !75, !alias.scope !881, !noalias !884
  %mul56 = fneg fast double %77
  store double %mul56, double* %arrayidx55, align 8, !tbaa !75, !alias.scope !881, !noalias !884
  %78 = getelementptr inbounds double, double* %_malloccache71, i64 %iv7
  store double %77, double* %78, align 8, !tbaa !75, !invariant.group !886
  %exitcond.not = icmp eq i64 %iv.next8, %wide.trip.count
  br i1 %exitcond.not, label %if.then61, label %for.body49, !llvm.loop !238

if.then61:                                        ; preds = %for.body49, %for.end45
  %_augmented42 = call { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* } @augmented_apply_global_transform(%struct.Matrix* %pose_params, %struct.Matrix* %"pose_params'", %struct.Matrix* %positions, %struct.Matrix* %"positions'")
  %79 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 21
  store { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* } %_augmented42, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }* %79, align 8
  br i1 %cmp15.i, label %for.body.preheader.i28, label %delete_light_matrix_array.exit58

for.body.preheader.i28:                           ; preds = %if.then61
  %wide.trip.count.i27 = zext i32 %bone_count to i64
  %malloccall77 = tail call noalias nonnull i8* @malloc(i64 %wide.trip.count.i27)
  %80 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 27
  %81 = bitcast i1** %80 to i8**
  store i8* %malloccall77, i8** %81, align 8
  br label %for.body.i31

for.body.i31:                                     ; preds = %for.body.i31, %for.body.preheader.i28
  %iv9 = phi i64 [ %iv.next10, %for.body.i31 ], [ 0, %for.body.preheader.i28 ]
  %iv.next10 = add nuw nsw i64 %iv9, 1
  %data.i30 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %15, i64 %iv9, i32 2
  %82 = load double*, double** %data.i30, align 8, !tbaa !137, !alias.scope !887, !noalias !890
  %cmp1.not.i = icmp eq double* %82, null
  %83 = getelementptr inbounds i8, i8* %malloccall77, i64 %iv9
  %84 = bitcast i8* %83 to i1*
  store i1 %cmp1.not.i, i1* %84, align 1, !invariant.group !892
  %exitcond.not.i34 = icmp eq i64 %iv.next10, %wide.trip.count.i27
  br i1 %exitcond.not.i34, label %for.body.preheader.i37, label %for.body.i31, !llvm.loop !212

for.body.preheader.i37:                           ; preds = %for.body.i31
  %malloccall82 = tail call noalias nonnull i8* @malloc(i64 %wide.trip.count.i27)
  %85 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 28
  %86 = bitcast i1** %85 to i8**
  store i8* %malloccall82, i8** %86, align 8
  br label %for.body.i41

for.body.i41:                                     ; preds = %for.body.i41, %for.body.preheader.i37
  %iv11 = phi i64 [ %iv.next12, %for.body.i41 ], [ 0, %for.body.preheader.i37 ]
  %iv.next12 = add nuw nsw i64 %iv11, 1
  %data.i39 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %16, i64 %iv11, i32 2
  %87 = load double*, double** %data.i39, align 8, !tbaa !137, !alias.scope !893, !noalias !896
  %cmp1.not.i40 = icmp eq double* %87, null
  %88 = getelementptr inbounds i8, i8* %malloccall82, i64 %iv11
  %89 = bitcast i8* %88 to i1*
  store i1 %cmp1.not.i40, i1* %89, align 1, !invariant.group !898
  %exitcond.not.i44 = icmp eq i64 %iv.next12, %wide.trip.count.i27
  br i1 %exitcond.not.i44, label %for.body.preheader.i49, label %for.body.i41, !llvm.loop !212

for.body.preheader.i49:                           ; preds = %for.body.i41
  %malloccall87 = tail call noalias nonnull i8* @malloc(i64 %wide.trip.count.i27)
  %90 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 29
  %91 = bitcast i1** %90 to i8**
  store i8* %malloccall87, i8** %91, align 8
  br label %for.body.i53

for.body.i53:                                     ; preds = %for.body.i53, %for.body.preheader.i49
  %iv13 = phi i64 [ %iv.next14, %for.body.i53 ], [ 0, %for.body.preheader.i49 ]
  %iv.next14 = add nuw nsw i64 %iv13, 1
  %data.i51 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %17, i64 %iv13, i32 2
  %92 = load double*, double** %data.i51, align 8, !tbaa !137, !alias.scope !899, !noalias !902
  %cmp1.not.i52 = icmp eq double* %92, null
  %93 = getelementptr inbounds i8, i8* %malloccall87, i64 %iv13
  %94 = bitcast i8* %93 to i1*
  store i1 %cmp1.not.i52, i1* %94, align 1, !invariant.group !904
  %exitcond.not.i56 = icmp eq i64 %iv.next14, %wide.trip.count.i27
  br i1 %exitcond.not.i56, label %delete_light_matrix_array.exit58, label %for.body.i53, !llvm.loop !212

delete_light_matrix_array.exit58:                 ; preds = %for.body.i53, %if.then61
  %95 = load { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, align 8
  ret { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %95
}

; Function Attrs: inlinehint nounwind uwtable willreturn mustprogress
define internal fastcc void @diffe_ZL28get_skinned_vertex_positionsiPK6MatrixPKiS1_S1_S1_iS1_PS_i(i32 %bone_count, %struct.Matrix* noalias nocapture readonly %base_relatives, i32* nocapture readonly %parents, %struct.Matrix* noalias nocapture readonly %inverse_base_absolutes, %struct.Matrix* noalias nocapture readonly %base_positions, %struct.Matrix* noalias nocapture readonly %weights, i32 %is_mirrored, %struct.Matrix* noalias nocapture readonly %pose_params, %struct.Matrix* nocapture %"pose_params'", %struct.Matrix* noalias nocapture %positions, %struct.Matrix* nocapture %"positions'", { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg) unnamed_addr #36 {
entry:
  %0 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 12
  %1 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 19
  %2 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 20
  %3 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 26
  %4 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 27
  %5 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 28
  %6 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 29
  %7 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 24
  %8 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 25
  %call.i = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 1
  %"call.i'mi" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 0
  %cmp15.i = icmp sgt i32 %bone_count, 0
  br i1 %cmp15.i, label %for.body.preheader.i11, label %get_matrix_array.exit6

get_matrix_array.exit6:                           ; preds = %entry
  %call.i3 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 5
  %"call.i3'mi" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 4
  %call.i9 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 3
  %"call.i9'mi" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 2
  br label %get_matrix_array.exit12

for.body.preheader.i11:                           ; preds = %entry
  %call.i359 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 9
  %"call.i359'mi" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 8
  %call.i963 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 7
  %"call.i963'mi" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 6
  br label %get_matrix_array.exit12

get_matrix_array.exit12:                          ; preds = %for.body.preheader.i11, %get_matrix_array.exit6
  %9 = phi i8* [ %"call.i9'mi", %get_matrix_array.exit6 ], [ %"call.i963'mi", %for.body.preheader.i11 ]
  %call.i966 = phi i8* [ %call.i9, %get_matrix_array.exit6 ], [ %call.i963, %for.body.preheader.i11 ]
  %10 = phi i8* [ %"call.i3'mi", %get_matrix_array.exit6 ], [ %"call.i359'mi", %for.body.preheader.i11 ]
  %call.i36064 = phi i8* [ %call.i3, %get_matrix_array.exit6 ], [ %call.i359, %for.body.preheader.i11 ]
  %"'ipc" = bitcast i8* %"call.i'mi" to %struct.Matrix*
  %11 = bitcast i8* %call.i to %struct.Matrix*
  %"'ipc9" = bitcast i8* %10 to %struct.Matrix*
  %12 = bitcast i8* %call.i36064 to %struct.Matrix*
  %"'ipc12" = bitcast i8* %9 to %struct.Matrix*
  %13 = bitcast i8* %call.i966 to %struct.Matrix*
  %tapeArg11 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 11
  %tapeArg10 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 10
  br i1 %cmp15.i, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %get_matrix_array.exit12
  %wide.trip.count101 = zext i32 %bone_count to i64
  br label %for.end

for.end:                                          ; preds = %for.body.preheader, %get_matrix_array.exit12
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %base_positions, i64 0, i32 1
  %14 = load i32, i32* %ncols, align 4, !tbaa !139, !alias.scope !905, !noalias !908, !invariant.group !910
  %mul.i13 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 22
  %mul3.i = mul i32 %14, 3
  %cmp.not.i = icmp eq i32 %mul.i13, %mul3.i
  br i1 %cmp.not.i, label %resize.exit, label %if.end.i

if.end.i:                                         ; preds = %for.end
  %cmp8.i = icmp sgt i32 %mul3.i, 0
  br i1 %cmp8.i, label %for.body.lr.ph.i, label %fill.exit

resize.exit:                                      ; preds = %for.end
  %cmp7.i = icmp sgt i32 %mul.i13, 0
  br i1 %cmp7.i, label %for.body.lr.ph.i, label %fill.exit

for.body.lr.ph.i:                                 ; preds = %resize.exit, %if.end.i
  br label %fill.exit

fill.exit:                                        ; preds = %for.body.lr.ph.i, %resize.exit, %if.end.i
  %_cache.0 = phi i8 [ 0, %for.body.lr.ph.i ], [ 2, %resize.exit ], [ 1, %if.end.i ]
  %call.i16 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 18
  %"call.i16'mi" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 17
  %"'ipc30" = bitcast i8* %"call.i16'mi" to %struct.Matrix*
  %15 = bitcast i8* %call.i16 to %struct.Matrix*
  %call4.i = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 16
  %"call4.i'mi" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 15
  br i1 %cmp15.i, label %for.body11.lr.ph, label %for.end45

for.body11.lr.ph:                                 ; preds = %fill.exit
  %cmp1674 = icmp sgt i32 %14, 0
  %wide.trip.count97 = zext i32 %bone_count to i64
  %wide.trip.count93 = zext i32 %14 to i64
  br label %for.end45

for.end45:                                        ; preds = %for.body11.lr.ph, %fill.exit
  %tobool.not = icmp ne i32 %is_mirrored, 0
  %cmp4871 = icmp sgt i32 %14, 0
  %or.cond = and i1 %tobool.not, %cmp4871
  br i1 %or.cond, label %for.body49.lr.ph, label %if.then61

for.body49.lr.ph:                                 ; preds = %for.end45
  %wide.trip.count = zext i32 %14 to i64
  br label %if.then61

if.then61:                                        ; preds = %for.body49.lr.ph, %for.end45
  %tapeArg94 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 21
  br i1 %cmp15.i, label %for.body.preheader.i28, label %invertdelete_matrix.exit

for.body.preheader.i28:                           ; preds = %if.then61
  %wide.trip.count.i27 = zext i32 %bone_count to i64
  %wide.trip.count.i27_unwrap135 = zext i32 %bone_count to i64
  %_unwrap136 = add nsw i64 %wide.trip.count.i27_unwrap135, -1
  %16 = bitcast i1* %6 to i8*
  tail call void @free(i8* nonnull %16)
  %17 = bitcast i1* %5 to i8*
  tail call void @free(i8* nonnull %17)
  %18 = bitcast i1* %4 to i8*
  tail call void @free(i8* nonnull %18)
  br label %invertdelete_matrix.exit

invertentry:                                      ; preds = %invertfor.body.preheader.i11, %invertget_matrix_array.exit6
  call void @free(i8* nonnull %"call.i'mi")
  call void @free(i8* %call.i)
  ret void

invertget_matrix_array.exit6.critedge:            ; preds = %invertfor.end
  call void @differelatives_to_absolutes(i32 %bone_count, %struct.Matrix* %11, %struct.Matrix* %"'ipc", i32* %parents, %struct.Matrix* %12, %struct.Matrix* %"'ipc9", { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %tapeArg10)
  call void @diffeget_posed_relatives(i32 %bone_count, %struct.Matrix* %base_relatives, %struct.Matrix* %pose_params, %struct.Matrix* %"pose_params'", %struct.Matrix* %11, %struct.Matrix* %"'ipc", { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* } %tapeArg11)
  br label %invertget_matrix_array.exit6

invertget_matrix_array.exit6:                     ; preds = %invertfor.body.preheader, %invertget_matrix_array.exit6.critedge
  %"call.i9'mi_unwrap" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 2
  call void @free(i8* nonnull %"call.i9'mi_unwrap")
  %call.i9_unwrap = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 3
  call void @free(i8* %call.i9_unwrap)
  %"call.i3'mi_unwrap" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 4
  call void @free(i8* nonnull %"call.i3'mi_unwrap")
  %call.i3_unwrap = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 5
  call void @free(i8* %call.i3_unwrap)
  br label %invertentry

invertfor.body.preheader.i11:                     ; preds = %invertfor.body.preheader
  %"call.i963'mi_unwrap" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 6
  call void @free(i8* nonnull %"call.i963'mi_unwrap")
  %call.i963_unwrap = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 7
  call void @free(i8* %call.i963_unwrap)
  %"call.i359'mi_unwrap" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 8
  call void @free(i8* nonnull %"call.i359'mi_unwrap")
  %call.i359_unwrap = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 9
  call void @free(i8* %call.i359_unwrap)
  br label %invertentry

invertfor.body.preheader:                         ; preds = %invertfor.body
  %19 = bitcast { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %0 to i8*
  tail call void @free(i8* nonnull %19)
  call void @differelatives_to_absolutes(i32 %bone_count, %struct.Matrix* %11, %struct.Matrix* %"'ipc", i32* %parents, %struct.Matrix* %12, %struct.Matrix* %"'ipc9", { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %tapeArg10)
  call void @diffeget_posed_relatives(i32 %bone_count, %struct.Matrix* %base_relatives, %struct.Matrix* %pose_params, %struct.Matrix* %"pose_params'", %struct.Matrix* %11, %struct.Matrix* %"'ipc", { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* } %tapeArg11)
  br i1 %cmp15.i, label %invertfor.body.preheader.i11, label %invertget_matrix_array.exit6

invertfor.body:                                   ; preds = %mergeinvertfor.body_for.end.loopexit, %invertfor.body
  %"iv'ac.0.in" = phi i64 [ %wide.trip.count101_unwrap, %mergeinvertfor.body_for.end.loopexit ], [ %"iv'ac.0", %invertfor.body ]
  %"iv'ac.0" = add nsw i64 %"iv'ac.0.in", -1
  %arrayidx_unwrap = getelementptr inbounds %struct.Matrix, %struct.Matrix* %12, i64 %"iv'ac.0"
  %"arrayidx'ipg_unwrap" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"'ipc9", i64 %"iv'ac.0"
  %arrayidx4_unwrap = getelementptr inbounds %struct.Matrix, %struct.Matrix* %inverse_base_absolutes, i64 %"iv'ac.0"
  %arrayidx6_unwrap = getelementptr inbounds %struct.Matrix, %struct.Matrix* %13, i64 %"iv'ac.0"
  %"arrayidx6'ipg_unwrap" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"'ipc12", i64 %"iv'ac.0"
  %_unwrap16 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %0, i64 %"iv'ac.0"
  %tapeArg13_unwrap = load { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %_unwrap16, align 8, !invariant.group !911
  call void @diffemat_mult.10(%struct.Matrix* %arrayidx_unwrap, %struct.Matrix* %"arrayidx'ipg_unwrap", %struct.Matrix* %arrayidx4_unwrap, %struct.Matrix* %arrayidx6_unwrap, %struct.Matrix* %"arrayidx6'ipg_unwrap", { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** } %tapeArg13_unwrap)
  %20 = icmp eq i64 %"iv'ac.0", 0
  br i1 %20, label %invertfor.body.preheader, label %invertfor.body

mergeinvertfor.body_for.end.loopexit:             ; preds = %invertfor.end
  %wide.trip.count101_unwrap = zext i32 %bone_count to i64
  br label %invertfor.body

invertfor.end:                                    ; preds = %invertfill.exit, %invertfor.body.lr.ph.i_phimerge_phimerge, %invertresize.exit.thread
  br i1 %cmp15.i, label %mergeinvertfor.body_for.end.loopexit, label %invertget_matrix_array.exit6.critedge

invertresize.exit.thread:                         ; preds = %invertfor.body.lr.ph.i_phimerge_phimerge
  %"call.i14'mi_unwrap" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 13
  call void @free(i8* nonnull %"call.i14'mi_unwrap")
  %call.i14_unwrap = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 14
  call void @free(i8* %call.i14_unwrap)
  br label %invertfor.end

invertfor.body.lr.ph.i_phimerge:                  ; preds = %invertfill.exit
  %.in = zext i32 %mul3.i to i64
  %21 = shl nuw nsw i64 %.in, 3
  br i1 %cmp.not.i, label %invertfor.body.lr.ph.i_phimerge_phirc, label %invertfor.body.lr.ph.i_phimerge_phirc24

invertfor.body.lr.ph.i_phimerge_phirc:            ; preds = %invertfor.body.lr.ph.i_phimerge
  %"data.i15.phi.trans.insert'ipg_unwrap" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"positions'", i64 0, i32 2
  %"'ipc22_unwrap" = bitcast double** %"data.i15.phi.trans.insert'ipg_unwrap" to i8**
  %".pre105'ipl_unwrap" = load i8*, i8** %"'ipc22_unwrap", align 8, !tbaa !137, !alias.scope !912, !noalias !915, !invariant.group !917
  br label %invertfor.body.lr.ph.i_phimerge_phimerge

invertfor.body.lr.ph.i_phimerge_phirc24:          ; preds = %invertfor.body.lr.ph.i_phimerge
  %"call.i14'mi_unwrap25" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 13
  br label %invertfor.body.lr.ph.i_phimerge_phimerge

invertfor.body.lr.ph.i_phimerge_phimerge:         ; preds = %invertfor.body.lr.ph.i_phimerge_phirc24, %invertfor.body.lr.ph.i_phimerge_phirc
  %22 = phi i8* [ %".pre105'ipl_unwrap", %invertfor.body.lr.ph.i_phimerge_phirc ], [ %"call.i14'mi_unwrap25", %invertfor.body.lr.ph.i_phimerge_phirc24 ]
  call void @llvm.memset.p0i8.i64(i8* align 8 %22, i8 0, i64 %21, i1 false) #46
  br i1 %cmp.not.i, label %invertfor.end, label %invertresize.exit.thread

invertfill.exit:                                  ; preds = %invertfor.end45, %invertfor.body11.lr.ph
  call void @free(i8* nonnull %"call4.i'mi")
  call void @free(i8* %call4.i)
  call void @free(i8* nonnull %"call.i16'mi")
  call void @free(i8* %call.i16)
  %cond = icmp eq i8 %_cache.0, 0
  br i1 %cond, label %invertfor.body.lr.ph.i_phimerge, label %invertfor.end

invertfor.body11.lr.ph:                           ; preds = %invertfor.body11
  %23 = bitcast { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }* %1 to i8*
  tail call void @free(i8* nonnull %23)
  %24 = bitcast double** %2 to i8*
  tail call void @free(i8* nonnull %24)
  %25 = bitcast i32* %7 to i8*
  tail call void @free(i8* nonnull %25)
  %26 = bitcast double* %8 to i8*
  tail call void @free(i8* nonnull %26)
  br label %invertfill.exit

invertfor.body11:                                 ; preds = %invertfor.inc43, %invertfor.cond18.preheader
  %arrayidx13_unwrap = getelementptr inbounds %struct.Matrix, %struct.Matrix* %13, i64 %"iv1'ac.0"
  %"arrayidx13'ipg_unwrap" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"'ipc12", i64 %"iv1'ac.0"
  %_unwrap37 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }* %1, i64 %"iv1'ac.0"
  %tapeArg31_unwrap = load { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }* %_unwrap37, align 8, !invariant.group !918
  call void @diffemat_mult.11(%struct.Matrix* %arrayidx13_unwrap, %struct.Matrix* %"arrayidx13'ipg_unwrap", %struct.Matrix* %base_positions, %struct.Matrix* %15, %struct.Matrix* %"'ipc30", { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** } %tapeArg31_unwrap)
  %27 = icmp eq i64 %"iv1'ac.0", 0
  br i1 %27, label %invertfor.body11.lr.ph, label %invertfor.inc43

invertfor.cond18.preheader:                       ; preds = %invertfor.body20
  %28 = icmp eq i64 %"iv3'ac.1", 0
  br i1 %28, label %invertfor.body11, label %invertfor.inc40

invertfor.body20:                                 ; preds = %invertfor.inc40, %incinvertfor.body20
  %"iv5'ac.1" = phi i64 [ 2, %invertfor.inc40 ], [ %40, %incinvertfor.body20 ]
  %"data30'ipg_unwrap" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"positions'", i64 0, i32 2
  %"'ipl_unwrap" = load double*, double** %"data30'ipg_unwrap", align 8, !tbaa !137, !alias.scope !912, !noalias !915, !invariant.group !919
  %_unwrap49 = mul nuw nsw i64 %"iv3'ac.1", 3
  %_unwrap50 = add nuw nsw i64 %"iv5'ac.1", %_unwrap49
  %"arrayidx35'ipg_unwrap" = getelementptr inbounds double, double* %"'ipl_unwrap", i64 %_unwrap50
  %29 = load double, double* %"arrayidx35'ipg_unwrap", align 8, !tbaa !75, !alias.scope !920, !noalias !923
  %_unwrap59 = load i32, i32* %ncols, align 4, !tbaa !139, !alias.scope !905, !noalias !908, !invariant.group !910
  %wide.trip.count93_unwrap = zext i32 %_unwrap59 to i64
  %30 = mul nuw nsw i64 %wide.trip.count93_unwrap, 3
  %31 = mul nuw nsw i64 %"iv1'ac.0", %30
  %32 = add nuw nsw i64 %_unwrap50, %31
  %33 = getelementptr inbounds double, double* %8, i64 %32
  %34 = load double, double* %33, align 8, !tbaa !75, !invariant.group !925
  %m1diffe = fmul fast double %29, %34
  %_unwrap66 = getelementptr inbounds double*, double** %2, i64 %"iv1'ac.0"
  %"'il_phi1_unwrap" = load double*, double** %_unwrap66, align 8, !invariant.group !926
  %35 = getelementptr inbounds i32, i32* %7, i64 %"iv1'ac.0"
  %36 = load i32, i32* %35, align 4, !tbaa !138, !alias.scope !927, !noalias !930, !invariant.group !932
  %_unwrap81 = sext i32 %36 to i64
  %_unwrap82 = mul nsw i64 %"iv3'ac.1", %_unwrap81
  %_unwrap83 = add nsw i64 %_unwrap82, %"iv5'ac.1"
  %"arrayidx22'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi1_unwrap", i64 %_unwrap83
  %37 = load double, double* %"arrayidx22'ipg_unwrap", align 8, !tbaa !75, !alias.scope !933, !noalias !936
  %38 = fadd fast double %37, %m1diffe
  store double %38, double* %"arrayidx22'ipg_unwrap", align 8, !tbaa !75, !alias.scope !933, !noalias !936
  %39 = icmp eq i64 %"iv5'ac.1", 0
  br i1 %39, label %invertfor.cond18.preheader, label %incinvertfor.body20

incinvertfor.body20:                              ; preds = %invertfor.body20
  %40 = add nsw i64 %"iv5'ac.1", -1
  br label %invertfor.body20

invertfor.inc40:                                  ; preds = %mergeinvertfor.cond18.preheader_for.inc43.loopexit, %invertfor.cond18.preheader
  %"iv3'ac.1.in" = phi i64 [ %wide.trip.count93_unwrap85, %mergeinvertfor.cond18.preheader_for.inc43.loopexit ], [ %"iv3'ac.1", %invertfor.cond18.preheader ]
  %"iv3'ac.1" = add nsw i64 %"iv3'ac.1.in", -1
  br label %invertfor.body20

mergeinvertfor.cond18.preheader_for.inc43.loopexit: ; preds = %invertfor.inc43
  %wide.trip.count93_unwrap85 = zext i32 %14 to i64
  br label %invertfor.inc40

invertfor.inc43:                                  ; preds = %mergeinvertfor.body11_for.end45.loopexit, %invertfor.body11
  %"iv1'ac.0.in" = phi i64 [ %wide.trip.count97_unwrap87, %mergeinvertfor.body11_for.end45.loopexit ], [ %"iv1'ac.0", %invertfor.body11 ]
  %"iv1'ac.0" = add nsw i64 %"iv1'ac.0.in", -1
  br i1 %cmp4871, label %mergeinvertfor.cond18.preheader_for.inc43.loopexit, label %invertfor.body11

mergeinvertfor.body11_for.end45.loopexit:         ; preds = %invertfor.end45
  %wide.trip.count97_unwrap87 = zext i32 %bone_count to i64
  br label %invertfor.inc43

invertfor.end45:                                  ; preds = %invertdelete_matrix.exit, %invertfor.body49.lr.ph
  br i1 %cmp15.i, label %mergeinvertfor.body11_for.end45.loopexit, label %invertfill.exit

invertfor.body49.lr.ph:                           ; preds = %invertfor.body49
  %41 = bitcast double* %3 to i8*
  tail call void @free(i8* nonnull %41)
  br label %invertfor.end45

invertfor.body49:                                 ; preds = %mergeinvertfor.body49_if.then61.loopexit, %invertfor.body49
  %"iv7'ac.0.in" = phi i64 [ %wide.trip.count_unwrap, %mergeinvertfor.body49_if.then61.loopexit ], [ %"iv7'ac.0", %invertfor.body49 ]
  %"iv7'ac.0" = add nsw i64 %"iv7'ac.0.in", -1
  %"data50'ipg_unwrap" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"positions'", i64 0, i32 2
  %"'ipl89_unwrap" = load double*, double** %"data50'ipg_unwrap", align 8, !tbaa !137, !alias.scope !912, !noalias !915, !invariant.group !938
  %_unwrap91 = mul nuw nsw i64 %"iv7'ac.0", 3
  %"arrayidx55'ipg_unwrap" = getelementptr inbounds double, double* %"'ipl89_unwrap", i64 %_unwrap91
  %42 = load double, double* %"arrayidx55'ipg_unwrap", align 8, !tbaa !75, !alias.scope !939, !noalias !942
  %43 = fneg fast double %42
  store double %43, double* %"arrayidx55'ipg_unwrap", align 8, !tbaa !75, !alias.scope !939, !noalias !942
  %44 = icmp eq i64 %"iv7'ac.0", 0
  br i1 %44, label %invertfor.body49.lr.ph, label %invertfor.body49

mergeinvertfor.body49_if.then61.loopexit:         ; preds = %invertdelete_matrix.exit
  %wide.trip.count_unwrap = zext i32 %14 to i64
  br label %invertfor.body49

invertdelete_matrix.exit:                         ; preds = %for.body.preheader.i28, %if.then61
  call void @diffeapply_global_transform(%struct.Matrix* %pose_params, %struct.Matrix* %"pose_params'", %struct.Matrix* %positions, %struct.Matrix* %"positions'", { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* } %tapeArg94)
  br i1 %or.cond, label %mergeinvertfor.body49_if.then61.loopexit, label %invertfor.end45
}

; Function Attrs: nounwind uwtable willreturn mustprogress
define internal void @differelatives_to_absolutes(i32 %count, %struct.Matrix* nocapture readonly %relatives, %struct.Matrix* nocapture %"relatives'", i32* nocapture readonly %parents, %struct.Matrix* nocapture %absolutes, %struct.Matrix* nocapture %"absolutes'", { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %tapeArg) local_unnamed_addr #16 {
entry:
  %0 = extractvalue { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %tapeArg, 0
  %1 = extractvalue { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %tapeArg, 1
  %2 = extractvalue { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %tapeArg, 2
  %3 = extractvalue { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %tapeArg, 3
  %4 = extractvalue { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %tapeArg, 4
  %5 = extractvalue { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %tapeArg, 5
  %6 = extractvalue { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %tapeArg, 6
  %cmp26 = icmp sgt i32 %count, 0
  br i1 %cmp26, label %for.body.preheader, label %invertfor.end

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %count to i64
  %malloccall77 = tail call noalias nonnull i8* @malloc(i64 %wide.trip.count), !enzyme_cache_alloc !944
  br label %for.body

for.body:                                         ; preds = %for.inc, %for.body.preheader
  %iv = phi i64 [ %iv.next, %for.inc ], [ 0, %for.body.preheader ]
  %iv.next = add nuw nsw i64 %iv, 1
  %7 = getelementptr inbounds i32, i32* %4, i64 %iv
  %8 = load i32, i32* %7, align 4, !invariant.group !946
  %cmp1 = icmp eq i32 %8, -1
  br i1 %cmp1, label %if.end.i, label %if.else

if.end.i:                                         ; preds = %for.body
  %9 = getelementptr inbounds i32, i32* %6, i64 %iv
  %mul.i = load i32, i32* %9, align 4, !invariant.group !947
  %cmp1131.i = icmp sgt i32 %mul.i, 0
  %10 = getelementptr inbounds i8, i8* %malloccall77, i64 %iv
  store i8 0, i8* %10, align 1, !invariant.group !948
  br i1 %cmp1131.i, label %for.body.lr.ph.i, label %for.inc

for.body.lr.ph.i:                                 ; preds = %if.end.i
  %wide.trip.count.i = zext i32 %mul.i to i64
  store i8 2, i8* %10, align 1, !invariant.group !948
  br label %for.inc

if.else:                                          ; preds = %for.body
  %11 = getelementptr inbounds i8, i8* %malloccall77, i64 %iv
  store i8 1, i8* %11, align 1, !invariant.group !948
  br label %for.inc

for.inc:                                          ; preds = %if.else, %for.body.lr.ph.i, %if.end.i
  %exitcond.not = icmp eq i64 %iv.next, %wide.trip.count
  br i1 %exitcond.not, label %invertfor.end, label %for.body, !llvm.loop !227

invertentry:                                      ; preds = %invertfor.end, %invertfor.body.preheader
  ret void

invertfor.body.preheader:                         ; preds = %invertfor.body
  %12 = bitcast i8** %0 to i8*
  tail call void @free(i8* nonnull %12)
  %13 = bitcast i8** %1 to i8*
  tail call void @free(i8* nonnull %13)
  %14 = bitcast double** %2 to i8*
  tail call void @free(i8* nonnull %14)
  %15 = bitcast { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }* %3 to i8*
  tail call void @free(i8* nonnull %15)
  tail call void @free(i8* nonnull %_cache76.0), !enzyme_cache_free !944
  %16 = bitcast i32* %4 to i8*
  tail call void @free(i8* nonnull %16)
  %17 = bitcast i1* %5 to i8*
  tail call void @free(i8* nonnull %17)
  %18 = bitcast i32* %6 to i8*
  tail call void @free(i8* nonnull %18)
  br label %invertentry

invertfor.body:                                   ; preds = %invertif.else, %invertif.end.i
  %19 = icmp eq i64 %"iv'ac.0", 0
  br i1 %19, label %invertfor.body.preheader, label %invertfor.inc

invertif.end.i:                                   ; preds = %invertfor.inc, %invertfor.body.i
  %_unwrap7 = getelementptr inbounds i8*, i8** %0, i64 %"iv'ac.0"
  %"call.i'mi_unwrap" = load i8*, i8** %_unwrap7, align 8, !invariant.group !949
  call void @free(i8* nonnull %"call.i'mi_unwrap")
  %_unwrap13 = getelementptr inbounds i8*, i8** %1, i64 %"iv'ac.0"
  %call.i_unwrap = load i8*, i8** %_unwrap13, align 8, !alias.scope !950, !noalias !953, !invariant.group !955
  call void @free(i8* %call.i_unwrap)
  br label %invertfor.body

invertfor.body.i:                                 ; preds = %mergeinvertfor.body.i_for.inc.loopexit, %invertfor.body.i
  %"iv1'ac.0.in" = phi i64 [ %wide.trip.count.i_unwrap, %mergeinvertfor.body.i_for.inc.loopexit ], [ %"iv1'ac.0", %invertfor.body.i ]
  %"iv1'ac.0" = add nsw i64 %"iv1'ac.0.in", -1
  %_unwrap31 = getelementptr inbounds i8*, i8** %0, i64 %"iv'ac.0"
  %20 = bitcast i8** %_unwrap31 to double**
  %"call.i'mi_unwrap32111" = load double*, double** %20, align 8
  %"arrayidx15.i'ipg_unwrap" = getelementptr inbounds double, double* %"call.i'mi_unwrap32111", i64 %"iv1'ac.0"
  %21 = load double, double* %"arrayidx15.i'ipg_unwrap", align 8, !tbaa !75, !alias.scope !956, !noalias !959
  store double 0.000000e+00, double* %"arrayidx15.i'ipg_unwrap", align 8, !tbaa !75, !alias.scope !956, !noalias !959
  %_unwrap34 = getelementptr inbounds double*, double** %2, i64 %"iv'ac.0"
  %"'il_phi1_unwrap" = load double*, double** %_unwrap34, align 8, !invariant.group !961
  %"arrayidx.i'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi1_unwrap", i64 %"iv1'ac.0"
  %22 = load double, double* %"arrayidx.i'ipg_unwrap", align 8, !tbaa !75, !alias.scope !962, !noalias !965
  %23 = fadd fast double %22, %21
  store double %23, double* %"arrayidx.i'ipg_unwrap", align 8, !tbaa !75, !alias.scope !962, !noalias !965
  %24 = icmp eq i64 %"iv1'ac.0", 0
  br i1 %24, label %invertif.end.i, label %invertfor.body.i

invertif.else:                                    ; preds = %invertfor.inc
  %25 = getelementptr inbounds i32, i32* %4, i64 %"iv'ac.0"
  %26 = load i32, i32* %25, align 4, !tbaa !59, !alias.scope !967, !noalias !970, !invariant.group !972
  %idxprom8_unwrap = sext i32 %26 to i64
  %arrayidx9_unwrap = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %idxprom8_unwrap
  %"arrayidx9'ipg_unwrap" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"absolutes'", i64 %idxprom8_unwrap
  %arrayidx11_unwrap = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %"iv'ac.0"
  %"arrayidx11'ipg_unwrap" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"relatives'", i64 %"iv'ac.0"
  %arrayidx13_unwrap = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %"iv'ac.0"
  %"arrayidx13'ipg_unwrap" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"absolutes'", i64 %"iv'ac.0"
  %_unwrap58 = getelementptr inbounds { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }* %3, i64 %"iv'ac.0"
  %tapeArg48_unwrap = load { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }* %_unwrap58, align 8, !invariant.group !973
  call void @diffemat_mult(%struct.Matrix* %arrayidx9_unwrap, %struct.Matrix* %"arrayidx9'ipg_unwrap", %struct.Matrix* %arrayidx11_unwrap, %struct.Matrix* %"arrayidx11'ipg_unwrap", %struct.Matrix* %arrayidx13_unwrap, %struct.Matrix* %"arrayidx13'ipg_unwrap", { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** } %tapeArg48_unwrap)
  br label %invertfor.body

mergeinvertfor.body.i_for.inc.loopexit:           ; preds = %invertfor.inc
  %27 = getelementptr inbounds i32, i32* %6, i64 %"iv'ac.0"
  %28 = load i32, i32* %27, align 4, !invariant.group !974
  %wide.trip.count.i_unwrap = zext i32 %28 to i64
  br label %invertfor.body.i

invertfor.inc:                                    ; preds = %mergeinvertfor.body_for.end.loopexit, %invertfor.body
  %"iv'ac.0.in" = phi i64 [ %wide.trip.count_unwrap89, %mergeinvertfor.body_for.end.loopexit ], [ %"iv'ac.0", %invertfor.body ]
  %"iv'ac.0" = add nsw i64 %"iv'ac.0.in", -1
  %29 = getelementptr inbounds i8, i8* %_cache76.0, i64 %"iv'ac.0"
  %30 = load i8, i8* %29, align 1, !invariant.group !948
  switch i8 %30, label %mergeinvertfor.body.i_for.inc.loopexit [
    i8 0, label %invertif.end.i
    i8 1, label %invertif.else
  ]

mergeinvertfor.body_for.end.loopexit:             ; preds = %invertfor.end
  %wide.trip.count_unwrap89 = zext i32 %count to i64
  br label %invertfor.inc

invertfor.end:                                    ; preds = %for.inc, %entry
  %_cache76.0 = phi i8* [ undef, %entry ], [ %malloccall77, %for.inc ]
  br i1 %cmp26, label %mergeinvertfor.body_for.end.loopexit, label %invertentry
}

; Function Attrs: nounwind uwtable willreturn mustprogress
define internal void @diffemat_mult(%struct.Matrix* noalias nocapture readonly %lhs, %struct.Matrix* nocapture %"lhs'", %struct.Matrix* noalias nocapture readonly %rhs, %struct.Matrix* nocapture %"rhs'", %struct.Matrix* noalias nocapture %out, %struct.Matrix* nocapture %"out'", { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** } %tapeArg) local_unnamed_addr #16 {
entry:
  %0 = extractvalue { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** } %tapeArg, 2
  %1 = extractvalue { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** } %tapeArg, 3
  %2 = extractvalue { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** } %tapeArg, 4
  %3 = extractvalue { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** } %tapeArg, 14
  %4 = extractvalue { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** } %tapeArg, 9
  %5 = extractvalue { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** } %tapeArg, 10
  %6 = extractvalue { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** } %tapeArg, 11
  %7 = extractvalue { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** } %tapeArg, 12
  %8 = extractvalue { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** } %tapeArg, 13
  %9 = extractvalue { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** } %tapeArg, 5
  %10 = extractvalue { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** } %tapeArg, 6
  %mul3.i = mul nsw i32 %10, %9
  %cmp.not.i = extractvalue { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** } %tapeArg, 7
  %cmp8.i = icmp sgt i32 %mul3.i, 0
  %spec.select = select i1 %cmp8.i, i8 1, i8 2
  %_cache.0 = select i1 %cmp.not.i, i8 0, i8 %spec.select
  %cmp85 = icmp sgt i32 %9, 0
  br i1 %cmp85, label %for.cond2.preheader.lr.ph, label %invertresize.exit

for.cond2.preheader.lr.ph:                        ; preds = %entry
  %cmp483 = icmp sgt i32 %10, 0
  %11 = zext i32 %9 to i64
  %wide.trip.count96 = zext i32 %10 to i64
  %wide.trip.count100_unwrap200 = zext i32 %9 to i64
  br label %invertfor.inc47

invertentry:                                      ; preds = %invertresize.exit, %invertif.then9.i
  ret void

invertif.then9.i:                                 ; preds = %invertresize.exit
  %"call.i'mi_unwrap" = extractvalue { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** } %tapeArg, 0
  call void @free(i8* nonnull %"call.i'mi_unwrap")
  %call.i_unwrap = extractvalue { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** } %tapeArg, 1
  call void @free(i8* %call.i_unwrap)
  br label %invertentry

invertresize.exit:                                ; preds = %invertfor.cond2.preheader.lr.ph, %entry
  %cond = icmp eq i8 %_cache.0, 1
  br i1 %cond, label %invertif.then9.i, label %invertentry

invertfor.cond2.preheader.lr.ph:                  ; preds = %invertfor.cond2.preheader
  %12 = bitcast double** %0 to i8*
  tail call void @free(i8* nonnull %12)
  %13 = bitcast double** %1 to i8*
  tail call void @free(i8* nonnull %13)
  %14 = bitcast double** %2 to i8*
  tail call void @free(i8* nonnull %14)
  %15 = bitcast double** %3 to i8*
  tail call void @free(i8* nonnull %15)
  %16 = bitcast i32* %4 to i8*
  tail call void @free(i8* nonnull %16)
  %17 = bitcast i32* %5 to i8*
  tail call void @free(i8* nonnull %17)
  %18 = bitcast double* %6 to i8*
  tail call void @free(i8* nonnull %18)
  %19 = bitcast double* %7 to i8*
  tail call void @free(i8* nonnull %19)
  %20 = bitcast double** %8 to i8*
  tail call void @free(i8* nonnull %20)
  br label %invertresize.exit

invertfor.cond2.preheader:                        ; preds = %invertfor.inc47, %invertfor.body5
  %"add43'de.0" = phi double [ %"add43'de.4", %invertfor.inc47 ], [ %"add43'de.1", %invertfor.body5 ]
  %21 = icmp eq i64 %"iv'ac.0", 0
  br i1 %21, label %invertfor.cond2.preheader.lr.ph, label %invertfor.inc47

invertfor.body5:                                  ; preds = %invertfor.inc44, %invertfor.body23.preheader
  %"add43'de.1" = phi double [ %.lcssa278, %invertfor.body23.preheader ], [ %"add43'de.3", %invertfor.inc44 ]
  %"mul13'de.1" = phi double [ %.lcssa, %invertfor.body23.preheader ], [ 0.000000e+00, %invertfor.inc44 ]
  %_unwrap21 = getelementptr inbounds double*, double** %0, i64 %"iv'ac.0"
  %"'il_phi3_unwrap" = load double*, double** %_unwrap21, align 8, !invariant.group !975
  %_unwrap23 = mul nuw nsw i64 %"iv1'ac.1", %wide.trip.count100_unwrap200
  %_unwrap24 = add nuw nsw i64 %_unwrap23, %"iv'ac.0"
  %"arrayidx19'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi3_unwrap", i64 %_unwrap24
  %22 = load double, double* %"arrayidx19'ipg_unwrap", align 8, !tbaa !75, !alias.scope !976, !noalias !979
  store double 0.000000e+00, double* %"arrayidx19'ipg_unwrap", align 8, !tbaa !75, !alias.scope !976, !noalias !979
  %23 = fadd fast double %"mul13'de.1", %22
  %24 = mul nuw nsw i64 %"iv'ac.0", %wide.trip.count96_unwrap198
  %25 = add nuw nsw i64 %"iv1'ac.1", %24
  %26 = getelementptr inbounds double, double* %6, i64 %25
  %27 = load double, double* %26, align 8, !tbaa !75, !invariant.group !981
  %m0diffe = fmul fast double %23, %27
  %28 = getelementptr inbounds double, double* %7, i64 %25
  %29 = load double, double* %28, align 8, !tbaa !75, !invariant.group !982
  %m1diffe = fmul fast double %23, %29
  %_unwrap53 = getelementptr inbounds double*, double** %1, i64 %"iv'ac.0"
  %"'il_phi2_unwrap" = load double*, double** %_unwrap53, align 8, !invariant.group !983
  %30 = getelementptr inbounds i32, i32* %4, i64 %"iv'ac.0"
  %31 = load i32, i32* %30, align 4, !tbaa !138, !alias.scope !984, !noalias !987, !invariant.group !989
  %_unwrap68 = sext i32 %31 to i64
  %_unwrap69 = mul nsw i64 %"iv1'ac.1", %_unwrap68
  %"arrayidx12'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi2_unwrap", i64 %_unwrap69
  %32 = load double, double* %"arrayidx12'ipg_unwrap", align 8, !tbaa !75, !alias.scope !990, !noalias !993
  %33 = fadd fast double %32, %m0diffe
  store double %33, double* %"arrayidx12'ipg_unwrap", align 8, !tbaa !75, !alias.scope !990, !noalias !993
  %_unwrap71 = getelementptr inbounds double*, double** %2, i64 %"iv'ac.0"
  %"'il_phi1_unwrap" = load double*, double** %_unwrap71, align 8, !invariant.group !995
  %"arrayidx'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi1_unwrap", i64 %"iv'ac.0"
  %34 = load double, double* %"arrayidx'ipg_unwrap", align 8, !tbaa !75, !alias.scope !996, !noalias !999
  %35 = fadd fast double %34, %m1diffe
  store double %35, double* %"arrayidx'ipg_unwrap", align 8, !tbaa !75, !alias.scope !996, !noalias !999
  %36 = icmp eq i64 %"iv1'ac.1", 0
  br i1 %36, label %invertfor.cond2.preheader, label %invertfor.inc44

invertfor.body23.preheader:                       ; preds = %invertfor.body23
  %.lcssa280 = phi double** [ %60, %invertfor.body23 ]
  %.lcssa279 = phi double** [ %61, %invertfor.body23 ]
  %.lcssa278 = phi double [ %54, %invertfor.body23 ]
  %.lcssa = phi double [ %56, %invertfor.body23 ]
  %37 = bitcast double** %.lcssa279 to i8**
  %forfree214276 = load i8*, i8** %37, align 8, !dereferenceable !457
  tail call void @free(i8* nonnull %forfree214276)
  %38 = bitcast double** %.lcssa280 to i8**
  %forfree261277 = load i8*, i8** %38, align 8, !dereferenceable !457
  tail call void @free(i8* nonnull %forfree261277)
  br label %invertfor.body5

invertfor.body23:                                 ; preds = %mergeinvertfor.body23_for.inc44.loopexit, %incinvertfor.body23
  %"add43'de.2" = phi double [ %"add43'de.3", %mergeinvertfor.body23_for.inc44.loopexit ], [ %54, %incinvertfor.body23 ]
  %"mul13'de.2" = phi double [ 0.000000e+00, %mergeinvertfor.body23_for.inc44.loopexit ], [ %56, %incinvertfor.body23 ]
  %"iv3'ac.0" = phi i64 [ %_unwrap191, %mergeinvertfor.body23_for.inc44.loopexit ], [ %57, %incinvertfor.body23 ]
  %_unwrap73 = getelementptr inbounds double*, double** %0, i64 %"iv'ac.0"
  %"'il_phi3_unwrap74" = load double*, double** %_unwrap73, align 8, !invariant.group !975
  %_unwrap76 = mul nuw nsw i64 %"iv1'ac.1", %wide.trip.count100_unwrap200
  %_unwrap77 = add nuw nsw i64 %_unwrap76, %"iv'ac.0"
  %"arrayidx19'ipg_unwrap78" = getelementptr inbounds double, double* %"'il_phi3_unwrap74", i64 %_unwrap77
  %39 = load double, double* %"arrayidx19'ipg_unwrap78", align 8, !tbaa !75, !alias.scope !976, !noalias !979
  store double 0.000000e+00, double* %"arrayidx19'ipg_unwrap78", align 8, !tbaa !75, !alias.scope !976, !noalias !979
  %40 = fadd fast double %"add43'de.2", %39
  %41 = load double*, double** %60, align 8, !dereferenceable !457, !invariant.group !1001
  %42 = getelementptr inbounds double, double* %41, i64 %"iv3'ac.0"
  %43 = load double, double* %42, align 8, !tbaa !75, !invariant.group !1002
  %m0diffe122 = fmul fast double %40, %43
  %44 = load double*, double** %61, align 8, !dereferenceable !457, !invariant.group !1003
  %45 = getelementptr inbounds double, double* %44, i64 %"iv3'ac.0"
  %46 = load double, double* %45, align 8, !tbaa !75, !invariant.group !1004
  %m1diffe154 = fmul fast double %40, %46
  %_unwrap158 = getelementptr inbounds double*, double** %1, i64 %"iv'ac.0"
  %"'il_phi2_unwrap159" = load double*, double** %_unwrap158, align 8, !invariant.group !983
  %iv.next4_unwrap = add nuw nsw i64 %"iv3'ac.0", 1
  %47 = getelementptr inbounds i32, i32* %4, i64 %"iv'ac.0"
  %48 = load i32, i32* %47, align 4, !tbaa !138, !alias.scope !984, !noalias !987, !invariant.group !989
  %_unwrap163 = sext i32 %48 to i64
  %_unwrap164 = mul nsw i64 %"iv1'ac.1", %_unwrap163
  %_unwrap165 = add nsw i64 %iv.next4_unwrap, %_unwrap164
  %"arrayidx35'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi2_unwrap159", i64 %_unwrap165
  %49 = load double, double* %"arrayidx35'ipg_unwrap", align 8, !tbaa !75, !alias.scope !990, !noalias !993
  %50 = fadd fast double %49, %m0diffe122
  store double %50, double* %"arrayidx35'ipg_unwrap", align 8, !tbaa !75, !alias.scope !990, !noalias !993
  %_unwrap167 = getelementptr inbounds double*, double** %2, i64 %"iv'ac.0"
  %"'il_phi1_unwrap168" = load double*, double** %_unwrap167, align 8, !invariant.group !995
  %_unwrap169 = mul nuw nsw i64 %iv.next4_unwrap, %wide.trip.count100_unwrap200
  %_unwrap170 = add nuw nsw i64 %_unwrap169, %"iv'ac.0"
  %"arrayidx29'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi1_unwrap168", i64 %_unwrap170
  %51 = load double, double* %"arrayidx29'ipg_unwrap", align 8, !tbaa !75, !alias.scope !996, !noalias !999
  %52 = fadd fast double %51, %m1diffe154
  store double %52, double* %"arrayidx29'ipg_unwrap", align 8, !tbaa !75, !alias.scope !996, !noalias !999
  %53 = icmp eq i64 %"iv3'ac.0", 0
  %54 = select fast i1 %53, double 0.000000e+00, double %40
  %55 = fadd fast double %"mul13'de.2", %40
  %56 = select fast i1 %53, double %55, double %"mul13'de.2"
  br i1 %53, label %invertfor.body23.preheader, label %incinvertfor.body23

incinvertfor.body23:                              ; preds = %invertfor.body23
  %57 = add nsw i64 %"iv3'ac.0", -1
  br label %invertfor.body23

mergeinvertfor.body23_for.inc44.loopexit:         ; preds = %invertfor.inc44
  %wide.trip.count_unwrap190 = zext i32 %63 to i64
  %_unwrap191 = add nsw i64 %wide.trip.count_unwrap190, -2
  %58 = mul nuw nsw i64 %"iv'ac.0", %wide.trip.count96_unwrap198
  %59 = add nuw nsw i64 %"iv1'ac.1", %58
  %60 = getelementptr inbounds double*, double** %8, i64 %59
  %61 = getelementptr inbounds double*, double** %3, i64 %59
  br label %invertfor.body23

invertfor.inc44:                                  ; preds = %invertfor.inc47.loopexit, %invertfor.body5
  %"add43'de.3" = phi double [ %"add43'de.4", %invertfor.inc47.loopexit ], [ %"add43'de.1", %invertfor.body5 ]
  %"iv1'ac.1.in" = phi i64 [ %wide.trip.count96_unwrap198, %invertfor.inc47.loopexit ], [ %"iv1'ac.1", %invertfor.body5 ]
  %"iv1'ac.1" = add nsw i64 %"iv1'ac.1.in", -1
  %62 = getelementptr inbounds i32, i32* %5, i64 %"iv'ac.0"
  %63 = load i32, i32* %62, align 4, !tbaa !139, !alias.scope !1005, !noalias !1008, !invariant.group !1010
  %cmp2281_unwrap = icmp sgt i32 %63, 1
  br i1 %cmp2281_unwrap, label %mergeinvertfor.body23_for.inc44.loopexit, label %invertfor.body5

invertfor.inc47.loopexit:                         ; preds = %invertfor.inc47
  %wide.trip.count96_unwrap198 = zext i32 %10 to i64
  br label %invertfor.inc44

invertfor.inc47:                                  ; preds = %invertfor.cond2.preheader, %for.cond2.preheader.lr.ph
  %"add43'de.4" = phi double [ 0.000000e+00, %for.cond2.preheader.lr.ph ], [ %"add43'de.0", %invertfor.cond2.preheader ]
  %"iv'ac.0.in" = phi i64 [ %wide.trip.count100_unwrap200, %for.cond2.preheader.lr.ph ], [ %"iv'ac.0", %invertfor.cond2.preheader ]
  %"iv'ac.0" = add nsw i64 %"iv'ac.0.in", -1
  %cmp483_unwrap = icmp sgt i32 %10, 0
  br i1 %cmp483_unwrap, label %invertfor.inc47.loopexit, label %invertfor.cond2.preheader
}

; Function Attrs: nounwind uwtable willreturn mustprogress
define internal void @diffeget_posed_relatives(i32 %bone_count, %struct.Matrix* noalias nocapture readonly %base_relatives, %struct.Matrix* noalias nocapture readonly %pose_params, %struct.Matrix* nocapture %"pose_params'", %struct.Matrix* noalias nocapture %relatives, %struct.Matrix* nocapture %"relatives'", { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* } %tapeArg) local_unnamed_addr #16 {
entry:
  %0 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* } %tapeArg, 7
  %1 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* } %tapeArg, 8
  %2 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* } %tapeArg, 9
  %3 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* } %tapeArg, 12
  %4 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* } %tapeArg, 13
  %call.i = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #45
  %"call.i'mi" = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #45
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16) dereferenceable_or_null(16) %"call.i'mi", i8 0, i64 16, i1 false)
  %"'ipc79" = bitcast i8* %"call.i'mi" to %struct.Matrix*
  %5 = bitcast i8* %call.i to %struct.Matrix*
  %"nrows1.i'ipc" = bitcast i8* %"call.i'mi" to i32*
  %nrows1.i = bitcast i8* %call.i to i32*
  store i32 4, i32* %"nrows1.i'ipc", align 8, !tbaa !138, !alias.scope !1011, !noalias !1014
  store i32 4, i32* %nrows1.i, align 8, !tbaa !138, !alias.scope !1014, !noalias !1011
  %"ncols2.i'ipg" = getelementptr inbounds i8, i8* %"call.i'mi", i64 4
  %ncols2.i = getelementptr inbounds i8, i8* %call.i, i64 4
  %"'ipc5" = bitcast i8* %"ncols2.i'ipg" to i32*
  %6 = bitcast i8* %ncols2.i to i32*
  store i32 4, i32* %"'ipc5", align 4, !tbaa !139, !alias.scope !1011, !noalias !1014
  store i32 4, i32* %6, align 4, !tbaa !139, !alias.scope !1014, !noalias !1011
  %call4.i = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* } %tapeArg, 5
  %"call4.i'mi" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* } %tapeArg, 4
  %"data.i'ipg" = getelementptr inbounds i8, i8* %"call.i'mi", i64 8
  %data.i = getelementptr inbounds i8, i8* %call.i, i64 8
  %"'ipc" = bitcast i8* %"data.i'ipg" to i8**
  %7 = bitcast i8* %data.i to i8**
  store i8* %"call4.i'mi", i8** %"'ipc", align 8, !tbaa !137, !alias.scope !1011, !noalias !1014
  store i8* %call4.i, i8** %7, align 8, !tbaa !137, !alias.scope !1014, !noalias !1011
  %call.i18 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* } %tapeArg, 3
  %"call.i18'mi" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* } %tapeArg, 2
  %"'ipc14" = bitcast i8* %"call.i18'mi" to %struct.Matrix*
  %8 = bitcast i8* %call.i18 to %struct.Matrix*
  %cmp40 = icmp sgt i32 %bone_count, 0
  %"'ipc7" = bitcast i8* %"call4.i'mi" to double*
  br i1 %cmp40, label %for.body.lr.ph, label %invertentry

for.body.lr.ph:                                   ; preds = %entry
  %wide.trip.count = zext i32 %bone_count to i64
  %wide.trip.count_unwrap96 = zext i32 %bone_count to i64
  br label %invertset_block.exit

invertentry:                                      ; preds = %invertfor.body.lr.ph, %entry
  %"call4.i21'mi" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* } %tapeArg, 0
  %call4.i21 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* } %tapeArg, 1
  call void @free(i8* nonnull %"call4.i21'mi")
  call void @free(i8* %call4.i21)
  call void @free(i8* nonnull %"call.i18'mi")
  call void @free(i8* %call.i18)
  call void @free(i8* nonnull %"call4.i'mi")
  call void @free(i8* %call4.i)
  call void @free(i8* nonnull %"call.i'mi")
  call void @free(i8* nonnull %call.i)
  ret void

invertfor.body.lr.ph:                             ; preds = %invertfor.cond1.preheader.lr.ph.i
  %9 = bitcast { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0 to i8*
  tail call void @free(i8* nonnull %9)
  %10 = bitcast double*** %1 to i8*
  tail call void @free(i8* nonnull %10)
  %11 = bitcast { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }* %2 to i8*
  tail call void @free(i8* nonnull %11)
  %12 = bitcast i32* %3 to i8*
  tail call void @free(i8* nonnull %12)
  %13 = bitcast i32* %4 to i8*
  tail call void @free(i8* nonnull %13)
  br label %invertentry

invertfor.cond1.preheader.lr.ph.i:                ; preds = %invertfor.body3.lr.ph.i
  %14 = icmp eq i64 %"iv'ac.0", 0
  br i1 %14, label %invertfor.body.lr.ph, label %invertset_block.exit

invertfor.body3.lr.ph.i:                          ; preds = %invertfor.body3.i
  %15 = icmp eq i64 %"iv1'ac.0", 0
  br i1 %15, label %invertfor.cond1.preheader.lr.ph.i, label %incinvertfor.body3.lr.ph.i

incinvertfor.body3.lr.ph.i:                       ; preds = %invertfor.body3.lr.ph.i
  %16 = add nsw i64 %"iv1'ac.0", -1
  br label %invertfor.inc12.i

invertfor.body3.i:                                ; preds = %invertif.else.i, %invertif.then.i
  %17 = icmp eq i64 %"iv3'ac.0", 0
  br i1 %17, label %invertfor.body3.lr.ph.i, label %incinvertfor.body3.i

incinvertfor.body3.i:                             ; preds = %invertfor.body3.i
  %18 = add nsw i64 %"iv3'ac.0", -1
  br label %invertfor.inc.i

invertif.then.i:                                  ; preds = %invertfor.inc.i
  %_unwrap8 = mul nsw i64 %"iv1'ac.0", 5
  %"arrayidx.i'ipg_unwrap" = getelementptr inbounds double, double* %"'ipc7", i64 %_unwrap8
  store double 0.000000e+00, double* %"arrayidx.i'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1016, !noalias !1019
  br label %invertfor.body3.i

invertif.else.i:                                  ; preds = %invertfor.inc.i
  %_unwrap9 = shl nsw i64 %"iv1'ac.0", 2
  %_unwrap10 = add nuw nsw i64 %"iv3'ac.0", %_unwrap9
  %"arrayidx11.i'ipg_unwrap" = getelementptr inbounds double, double* %"'ipc7", i64 %_unwrap10
  store double 0.000000e+00, double* %"arrayidx11.i'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1016, !noalias !1019
  br label %invertfor.body3.i

invertfor.inc.i:                                  ; preds = %invertfor.inc12.i, %incinvertfor.body3.i
  %"iv3'ac.0" = phi i64 [ 3, %invertfor.inc12.i ], [ %18, %incinvertfor.body3.i ]
  %cmp4.i_unwrap = icmp eq i64 %"iv1'ac.0", %"iv3'ac.0"
  br i1 %cmp4.i_unwrap, label %invertif.then.i, label %invertif.else.i

invertfor.inc12.i:                                ; preds = %invertset_identity.exit, %incinvertfor.body3.lr.ph.i
  %"iv1'ac.0" = phi i64 [ 3, %invertset_identity.exit ], [ %16, %incinvertfor.body3.lr.ph.i ]
  br label %invertfor.inc.i

invertset_identity.exit:                          ; preds = %invertset_block.exit, %invertfor.cond1.preheader.lr.ph.i26
  %_unwrap116 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* } %tapeArg, 10
  %_unwrap117 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* } %tapeArg, 11
  %_unwrap12 = trunc i64 %"iv'ac.0" to i32
  %_unwrap13 = add i32 %_unwrap12, 3
  %mul_unwrap = mul nsw i32 %_unwrap117, %_unwrap13
  %idx.ext_unwrap = sext i32 %mul_unwrap to i64
  %add.ptr_unwrap = getelementptr inbounds double, double* %_unwrap116, i64 %idx.ext_unwrap
  %"'il_phi_unwrap" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* } %tapeArg, 6
  %"add.ptr'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi_unwrap", i64 %idx.ext_unwrap
  %tapeArg15_unwrap.elt = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 %"iv'ac.0", i32 0
  %tapeArg15_unwrap.unpack = load i8*, i8** %tapeArg15_unwrap.elt, align 8
  %19 = insertvalue { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } undef, i8* %tapeArg15_unwrap.unpack, 0
  %tapeArg15_unwrap.elt118 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 %"iv'ac.0", i32 1
  %tapeArg15_unwrap.unpack119 = load i8*, i8** %tapeArg15_unwrap.elt118, align 8
  %20 = insertvalue { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %19, i8* %tapeArg15_unwrap.unpack119, 1
  %tapeArg15_unwrap.elt120 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 %"iv'ac.0", i32 2
  %tapeArg15_unwrap.unpack121 = load i8*, i8** %tapeArg15_unwrap.elt120, align 8
  %21 = insertvalue { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %20, i8* %tapeArg15_unwrap.unpack121, 2
  %tapeArg15_unwrap.elt122 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 %"iv'ac.0", i32 3
  %tapeArg15_unwrap.unpack123 = load i8*, i8** %tapeArg15_unwrap.elt122, align 8
  %22 = insertvalue { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %21, i8* %tapeArg15_unwrap.unpack123, 3
  %tapeArg15_unwrap.elt124 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 %"iv'ac.0", i32 4
  %tapeArg15_unwrap.unpack125 = load i8*, i8** %tapeArg15_unwrap.elt124, align 8
  %23 = insertvalue { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %22, i8* %tapeArg15_unwrap.unpack125, 4
  %tapeArg15_unwrap.elt126 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 %"iv'ac.0", i32 5
  %tapeArg15_unwrap.unpack127 = load i8*, i8** %tapeArg15_unwrap.elt126, align 8
  %24 = insertvalue { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %23, i8* %tapeArg15_unwrap.unpack127, 5
  %tapeArg15_unwrap.elt128 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 %"iv'ac.0", i32 6
  %tapeArg15_unwrap.unpack129 = load { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }* %tapeArg15_unwrap.elt128, align 8
  %25 = insertvalue { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %24, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* } %tapeArg15_unwrap.unpack129, 6
  %tapeArg15_unwrap.elt130 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 %"iv'ac.0", i32 7
  %tapeArg15_unwrap.unpack131 = load { i8*, i8*, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }* %tapeArg15_unwrap.elt130, align 8
  %26 = insertvalue { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %25, { i8*, i8*, i1, i1, double*, double*, double*, double* } %tapeArg15_unwrap.unpack131, 7
  %tapeArg15_unwrap.elt132 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 %"iv'ac.0", i32 8
  %tapeArg15_unwrap.unpack133 = load i8*, i8** %tapeArg15_unwrap.elt132, align 8
  %27 = insertvalue { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %26, i8* %tapeArg15_unwrap.unpack133, 8
  %tapeArg15_unwrap.elt134 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 %"iv'ac.0", i32 9
  %tapeArg15_unwrap.unpack135 = load i8*, i8** %tapeArg15_unwrap.elt134, align 8
  %28 = insertvalue { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %27, i8* %tapeArg15_unwrap.unpack135, 9
  %tapeArg15_unwrap.elt136 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 %"iv'ac.0", i32 10
  %tapeArg15_unwrap.unpack137 = load double, double* %tapeArg15_unwrap.elt136, align 8
  %29 = insertvalue { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %28, double %tapeArg15_unwrap.unpack137, 10
  %tapeArg15_unwrap.elt138 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 %"iv'ac.0", i32 11
  %tapeArg15_unwrap.unpack139 = load double, double* %tapeArg15_unwrap.elt138, align 8
  %30 = insertvalue { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %29, double %tapeArg15_unwrap.unpack139, 11
  %tapeArg15_unwrap.elt140 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 %"iv'ac.0", i32 12
  %tapeArg15_unwrap.unpack141 = load double, double* %tapeArg15_unwrap.elt140, align 8
  %tapeArg15_unwrap142 = insertvalue { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %30, double %tapeArg15_unwrap.unpack141, 12
  call void @diffeeuler_angles_to_rotation_matrix(double* %add.ptr_unwrap, double* %"add.ptr'ipg_unwrap", %struct.Matrix* %8, %struct.Matrix* %"'ipc14", { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %tapeArg15_unwrap142)
  br label %invertfor.inc12.i

invertfor.cond1.preheader.lr.ph.i26:              ; preds = %invertfor.cond1.preheader.i27
  %_unwrap25 = getelementptr inbounds double**, double*** %1, i64 %"iv'ac.0"
  %31 = bitcast double*** %_unwrap25 to i8**
  %forfree26143 = load i8*, i8** %31, align 8, !dereferenceable !457
  tail call void @free(i8* nonnull %forfree26143)
  br label %invertset_identity.exit

invertfor.cond1.preheader.i27:                    ; preds = %invertfor.inc13.i, %invertfor.body3.i32
  %32 = icmp eq i64 %"iv5'ac.0", 0
  br i1 %32, label %invertfor.cond1.preheader.lr.ph.i26, label %invertfor.inc13.i

invertfor.body3.i32:                              ; preds = %mergeinvertfor.body3.i32_for.inc13.i.loopexit, %invertfor.body3.i32
  %"iv7'ac.0.in" = phi i64 [ %wide.trip.count.i_unwrap, %mergeinvertfor.body3.i32_for.inc13.i.loopexit ], [ %"iv7'ac.0", %invertfor.body3.i32 ]
  %"iv7'ac.0" = add nsw i64 %"iv7'ac.0.in", -1
  %_unwrap30 = shl nsw i64 %"iv5'ac.0", 2
  %_unwrap31 = add nuw nsw i64 %"iv7'ac.0", %_unwrap30
  %"arrayidx12.i'ipg_unwrap" = getelementptr inbounds double, double* %"'ipc7", i64 %_unwrap31
  %33 = load double, double* %"arrayidx12.i'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1016, !noalias !1019
  store double 0.000000e+00, double* %"arrayidx12.i'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1016, !noalias !1019
  %_unwrap33 = getelementptr inbounds double**, double*** %1, i64 %"iv'ac.0"
  %_unwrap34 = load double**, double*** %_unwrap33, align 8, !dereferenceable !457, !invariant.group !1021
  %_unwrap35 = getelementptr inbounds double*, double** %_unwrap34, i64 %"iv5'ac.0"
  %"'il_phi1_unwrap" = load double*, double** %_unwrap35, align 8, !invariant.group !1022
  %34 = load i32, i32* %38, align 4, !tbaa !138, !alias.scope !1023, !noalias !1026, !invariant.group !1028
  %_unwrap46 = sext i32 %34 to i64
  %_unwrap47 = mul nsw i64 %"iv5'ac.0", %_unwrap46
  %_unwrap48 = add nsw i64 %"iv7'ac.0", %_unwrap47
  %"arrayidx.i30'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi1_unwrap", i64 %_unwrap48
  %35 = load double, double* %"arrayidx.i30'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1029, !noalias !1032
  %36 = fadd fast double %35, %33
  store double %36, double* %"arrayidx.i30'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1029, !noalias !1032
  %37 = icmp eq i64 %"iv7'ac.0", 0
  br i1 %37, label %invertfor.cond1.preheader.i27, label %invertfor.body3.i32

mergeinvertfor.body3.i32_for.inc13.i.loopexit:    ; preds = %invertfor.inc13.i
  %wide.trip.count.i_unwrap = zext i32 %39 to i64
  br label %invertfor.body3.i32

invertfor.inc13.i:                                ; preds = %mergeinvertfor.cond1.preheader.i27_set_block.exit.loopexit, %invertfor.cond1.preheader.i27
  %"iv5'ac.0.in" = phi i64 [ %_unwrap77, %mergeinvertfor.cond1.preheader.i27_set_block.exit.loopexit ], [ %"iv5'ac.0", %invertfor.cond1.preheader.i27 ]
  %"iv5'ac.0" = add nsw i64 %"iv5'ac.0.in", -1
  %38 = getelementptr inbounds i32, i32* %4, i64 %"iv'ac.0"
  %39 = load i32, i32* %38, align 4, !tbaa !138, !alias.scope !1023, !noalias !1026, !invariant.group !1028
  %cmp228.i_unwrap = icmp sgt i32 %39, 0
  br i1 %cmp228.i_unwrap, label %mergeinvertfor.body3.i32_for.inc13.i.loopexit, label %invertfor.cond1.preheader.i27

mergeinvertfor.cond1.preheader.i27_set_block.exit.loopexit: ; preds = %invertset_block.exit
  %_unwrap77 = zext i32 %41 to i64
  br label %invertfor.inc13.i

invertset_block.exit:                             ; preds = %invertfor.cond1.preheader.lr.ph.i, %for.body.lr.ph
  %"iv'ac.0.in" = phi i64 [ %wide.trip.count_unwrap96, %for.body.lr.ph ], [ %"iv'ac.0", %invertfor.cond1.preheader.lr.ph.i ]
  %"iv'ac.0" = add nsw i64 %"iv'ac.0.in", -1
  %arrayidx_unwrap = getelementptr inbounds %struct.Matrix, %struct.Matrix* %base_relatives, i64 %"iv'ac.0"
  %arrayidx3_unwrap = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %"iv'ac.0"
  %"arrayidx3'ipg_unwrap" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"relatives'", i64 %"iv'ac.0"
  %_unwrap90 = getelementptr inbounds { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }* %2, i64 %"iv'ac.0"
  %tapeArg80_unwrap = load { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }* %_unwrap90, align 8, !invariant.group !1034
  call void @diffemat_mult.9(%struct.Matrix* %arrayidx_unwrap, %struct.Matrix* nonnull %5, %struct.Matrix* nonnull %"'ipc79", %struct.Matrix* %arrayidx3_unwrap, %struct.Matrix* %"arrayidx3'ipg_unwrap", { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** } %tapeArg80_unwrap)
  %40 = getelementptr inbounds i32, i32* %3, i64 %"iv'ac.0"
  %41 = load i32, i32* %40, align 4, !tbaa !139, !alias.scope !1023, !noalias !1026, !invariant.group !1035
  %cmp30.i_unwrap = icmp sgt i32 %41, 0
  br i1 %cmp30.i_unwrap, label %mergeinvertfor.cond1.preheader.i27_set_block.exit.loopexit, label %invertset_identity.exit
}

; Function Attrs: nounwind uwtable willreturn mustprogress
define internal void @diffeeuler_angles_to_rotation_matrix(double* noalias nocapture readonly %xzy, double* nocapture %"xzy'", %struct.Matrix* noalias nocapture %R, %struct.Matrix* nocapture %"R'", { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %tapeArg) local_unnamed_addr #16 {
for.cond1.preheader.lr.ph.i:
  %0 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %tapeArg, 10
  %"arrayidx1'ipg" = getelementptr inbounds double, double* %"xzy'", i64 2
  %1 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %tapeArg, 11
  %"arrayidx2'ipg" = getelementptr inbounds double, double* %"xzy'", i64 1
  %2 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %tapeArg, 12
  %call.i = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #45
  %"call.i'mi" = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #45
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16) dereferenceable_or_null(16) %"call.i'mi", i8 0, i64 16, i1 false)
  %"nrows1.i'ipc" = bitcast i8* %"call.i'mi" to i32*
  %nrows1.i = bitcast i8* %call.i to i32*
  store i32 3, i32* %"nrows1.i'ipc", align 8, !tbaa !138, !alias.scope !1036, !noalias !1039
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138, !alias.scope !1039, !noalias !1036
  %"ncols2.i'ipg" = getelementptr inbounds i8, i8* %"call.i'mi", i64 4
  %ncols2.i = getelementptr inbounds i8, i8* %call.i, i64 4
  %"'ipc6" = bitcast i8* %"ncols2.i'ipg" to i32*
  %3 = bitcast i8* %ncols2.i to i32*
  store i32 3, i32* %"'ipc6", align 4, !tbaa !139, !alias.scope !1036, !noalias !1039
  store i32 3, i32* %3, align 4, !tbaa !139, !alias.scope !1039, !noalias !1036
  %call4.i = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %tapeArg, 5
  %"call4.i'mi" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %tapeArg, 4
  %"data.i'ipg" = getelementptr inbounds i8, i8* %"call.i'mi", i64 8
  %data.i = getelementptr inbounds i8, i8* %call.i, i64 8
  %"'ipc5" = bitcast i8* %"data.i'ipg" to i8**
  %4 = bitcast i8* %data.i to i8**
  store i8* %"call4.i'mi", i8** %"'ipc5", align 8, !tbaa !137, !alias.scope !1036, !noalias !1039
  store i8* %call4.i, i8** %4, align 8, !tbaa !137, !alias.scope !1039, !noalias !1036
  %call.i167 = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #45
  %"call.i167'mi" = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #45
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16) dereferenceable_or_null(16) %"call.i167'mi", i8 0, i64 16, i1 false)
  %"nrows1.i168'ipc" = bitcast i8* %"call.i167'mi" to i32*
  %nrows1.i168 = bitcast i8* %call.i167 to i32*
  store i32 3, i32* %"nrows1.i168'ipc", align 8, !tbaa !138, !alias.scope !1041, !noalias !1044
  store i32 3, i32* %nrows1.i168, align 8, !tbaa !138, !alias.scope !1044, !noalias !1041
  %"ncols2.i169'ipg" = getelementptr inbounds i8, i8* %"call.i167'mi", i64 4
  %ncols2.i169 = getelementptr inbounds i8, i8* %call.i167, i64 4
  %"'ipc4" = bitcast i8* %"ncols2.i169'ipg" to i32*
  %5 = bitcast i8* %ncols2.i169 to i32*
  store i32 3, i32* %"'ipc4", align 4, !tbaa !139, !alias.scope !1041, !noalias !1044
  store i32 3, i32* %5, align 4, !tbaa !139, !alias.scope !1044, !noalias !1041
  %call4.i170 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %tapeArg, 3
  %"call4.i170'mi" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %tapeArg, 2
  %"data.i171'ipg" = getelementptr inbounds i8, i8* %"call.i167'mi", i64 8
  %data.i171 = getelementptr inbounds i8, i8* %call.i167, i64 8
  %"'ipc3" = bitcast i8* %"data.i171'ipg" to i8**
  %6 = bitcast i8* %data.i171 to i8**
  store i8* %"call4.i170'mi", i8** %"'ipc3", align 8, !tbaa !137, !alias.scope !1041, !noalias !1044
  store i8* %call4.i170, i8** %6, align 8, !tbaa !137, !alias.scope !1044, !noalias !1041
  %call.i172 = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #45
  %"call.i172'mi" = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #45
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16) dereferenceable_or_null(16) %"call.i172'mi", i8 0, i64 16, i1 false)
  %"nrows1.i173'ipc" = bitcast i8* %"call.i172'mi" to i32*
  %nrows1.i173 = bitcast i8* %call.i172 to i32*
  store i32 3, i32* %"nrows1.i173'ipc", align 8, !tbaa !138, !alias.scope !1046, !noalias !1049
  store i32 3, i32* %nrows1.i173, align 8, !tbaa !138, !alias.scope !1049, !noalias !1046
  %"ncols2.i174'ipg" = getelementptr inbounds i8, i8* %"call.i172'mi", i64 4
  %ncols2.i174 = getelementptr inbounds i8, i8* %call.i172, i64 4
  %"'ipc2" = bitcast i8* %"ncols2.i174'ipg" to i32*
  %7 = bitcast i8* %ncols2.i174 to i32*
  store i32 3, i32* %"'ipc2", align 4, !tbaa !139, !alias.scope !1046, !noalias !1049
  store i32 3, i32* %7, align 4, !tbaa !139, !alias.scope !1049, !noalias !1046
  %call4.i175 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %tapeArg, 1
  %"call4.i175'mi" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %tapeArg, 0
  %"data.i176'ipg" = getelementptr inbounds i8, i8* %"call.i172'mi", i64 8
  %data.i176 = getelementptr inbounds i8, i8* %call.i172, i64 8
  %"'ipc" = bitcast i8* %"data.i176'ipg" to i8**
  %8 = bitcast i8* %data.i176 to i8**
  store i8* %"call4.i175'mi", i8** %"'ipc", align 8, !tbaa !137, !alias.scope !1046, !noalias !1049
  store i8* %call4.i175, i8** %8, align 8, !tbaa !137, !alias.scope !1049, !noalias !1046
  %"'ipc9" = bitcast i8* %"call4.i'mi" to double*
  %"'ipc25" = bitcast i8* %"call4.i170'mi" to double*
  %"'ipc45" = bitcast i8* %"call.i'mi" to %struct.Matrix*
  %9 = bitcast i8* %call.i to %struct.Matrix*
  %"'ipc48" = bitcast i8* %"call.i167'mi" to %struct.Matrix*
  %10 = bitcast i8* %call.i167 to %struct.Matrix*
  %"'ipc47" = bitcast i8* %"call.i172'mi" to %struct.Matrix*
  %11 = bitcast i8* %call.i172 to %struct.Matrix*
  %"'ipc39" = bitcast i8* %"call4.i175'mi" to double*
  %"arrayidx5'ipg" = getelementptr inbounds i8, i8* %"call4.i'mi", i64 32
  %"'ipc21" = bitcast i8* %"arrayidx5'ipg" to double*
  %"arrayidx11'ipg" = getelementptr inbounds i8, i8* %"call4.i'mi", i64 40
  %"'ipc19" = bitcast i8* %"arrayidx11'ipg" to double*
  %"arrayidx23'ipg" = getelementptr inbounds i8, i8* %"call4.i'mi", i64 56
  %"'ipc16" = bitcast i8* %"arrayidx23'ipg" to double*
  %"arrayidx35'ipg" = getelementptr inbounds i8, i8* %"call4.i'mi", i64 64
  %"'ipc13" = bitcast i8* %"arrayidx35'ipg" to double*
  %"arrayidx47'ipg" = getelementptr inbounds i8, i8* %"call4.i170'mi", i64 48
  %"'ipc36" = bitcast i8* %"arrayidx47'ipg" to double*
  %"arrayidx60'ipg" = getelementptr inbounds i8, i8* %"call4.i170'mi", i64 16
  %"'ipc33" = bitcast i8* %"arrayidx60'ipg" to double*
  %"arrayidx72'ipg" = getelementptr inbounds i8, i8* %"call4.i170'mi", i64 64
  %"'ipc30" = bitcast i8* %"arrayidx72'ipg" to double*
  %"arrayidx84'ipg" = getelementptr inbounds i8, i8* %"call4.i175'mi", i64 8
  %"'ipc56" = bitcast i8* %"arrayidx84'ipg" to double*
  %"arrayidx97'ipg" = getelementptr inbounds i8, i8* %"call4.i175'mi", i64 24
  %"'ipc53" = bitcast i8* %"arrayidx97'ipg" to double*
  %"arrayidx109'ipg" = getelementptr inbounds i8, i8* %"call4.i175'mi", i64 32
  %"'ipc50" = bitcast i8* %"arrayidx109'ipg" to double*
  %call.i235 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %tapeArg, 9
  %"call.i235'mi" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %tapeArg, 8
  %"'ipc44" = bitcast i8* %"call.i235'mi" to %struct.Matrix*
  %12 = bitcast i8* %call.i235 to %struct.Matrix*
  %tapeArg49 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %tapeArg, 7
  %tapeArg46 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %tapeArg, 6
  call void @diffemat_mult.7(%struct.Matrix* %12, %struct.Matrix* %"'ipc44", %struct.Matrix* nonnull %9, %struct.Matrix* nonnull %"'ipc45", %struct.Matrix* %R, %struct.Matrix* %"R'", { i8*, i8*, double**, i1, i1, double*, double*, double*, double* } %tapeArg46)
  call void @diffemat_mult.8(%struct.Matrix* nonnull %11, %struct.Matrix* nonnull %"'ipc47", %struct.Matrix* nonnull %10, %struct.Matrix* nonnull %"'ipc48", %struct.Matrix* %12, %struct.Matrix* %"'ipc44", { i8*, i8*, i1, i1, double*, double*, double*, double* } %tapeArg49)
  call void @free(i8* nonnull %"call.i235'mi")
  call void @free(i8* %call.i235)
  %13 = load double, double* %"'ipc50", align 8, !tbaa !75, !alias.scope !1051, !noalias !1054
  store double 0.000000e+00, double* %"'ipc50", align 8, !tbaa !75, !alias.scope !1051, !noalias !1054
  %14 = load double, double* %"'ipc53", align 8, !tbaa !75, !alias.scope !1051, !noalias !1054
  store double 0.000000e+00, double* %"'ipc53", align 8, !tbaa !75, !alias.scope !1051, !noalias !1054
  %15 = load double, double* %"'ipc56", align 8, !tbaa !75, !alias.scope !1051, !noalias !1054
  store double 0.000000e+00, double* %"'ipc56", align 8, !tbaa !75, !alias.scope !1051, !noalias !1054
  %16 = load double, double* %"'ipc39", align 8, !tbaa !75, !alias.scope !1051, !noalias !1054
  store double 0.000000e+00, double* %"'ipc39", align 8, !tbaa !75, !alias.scope !1051, !noalias !1054
  br label %invertfor.inc12.i233

invertfor.cond1.preheader.lr.ph.i:                ; preds = %invertfor.body3.lr.ph.i
  %17 = fsub fast double %50, %49
  %18 = call fast double @llvm.cos.f64(double %0)
  %19 = fmul fast double %17, %18
  %20 = call fast double @llvm.sin.f64(double %0)
  %21 = fadd fast double %48, %51
  %22 = fmul fast double %20, %21
  %23 = fsub fast double %19, %22
  %24 = fsub fast double %58, %57
  %25 = call fast double @llvm.cos.f64(double %1)
  %26 = fmul fast double %24, %25
  %27 = call fast double @llvm.sin.f64(double %1)
  %28 = fadd fast double %56, %59
  %29 = fmul fast double %27, %28
  %30 = fsub fast double %26, %29
  %31 = fsub fast double %15, %14
  %32 = call fast double @llvm.cos.f64(double %2)
  %33 = fmul fast double %31, %32
  %34 = call fast double @llvm.sin.f64(double %2)
  %35 = fadd fast double %13, %16
  %36 = fmul fast double %34, %35
  %37 = fsub fast double %33, %36
  call void @free(i8* nonnull %"call4.i175'mi")
  call void @free(i8* %call4.i175)
  call void @free(i8* nonnull %"call.i172'mi")
  call void @free(i8* nonnull %call.i172)
  call void @free(i8* nonnull %"call4.i170'mi")
  call void @free(i8* %call4.i170)
  call void @free(i8* nonnull %"call.i167'mi")
  call void @free(i8* nonnull %call.i167)
  call void @free(i8* nonnull %"call4.i'mi")
  call void @free(i8* %call4.i)
  call void @free(i8* nonnull %"call.i'mi")
  call void @free(i8* nonnull %call.i)
  %38 = load double, double* %"arrayidx2'ipg", align 8, !tbaa !75, !alias.scope !1056, !noalias !1059
  %39 = fadd fast double %38, %37
  store double %39, double* %"arrayidx2'ipg", align 8, !tbaa !75, !alias.scope !1056, !noalias !1059
  %40 = load double, double* %"arrayidx1'ipg", align 8, !tbaa !75, !alias.scope !1056, !noalias !1059
  %41 = fadd fast double %40, %30
  store double %41, double* %"arrayidx1'ipg", align 8, !tbaa !75, !alias.scope !1056, !noalias !1059
  %42 = load double, double* %"xzy'", align 8, !tbaa !75, !alias.scope !1056, !noalias !1059
  %43 = fadd fast double %42, %23
  store double %43, double* %"xzy'", align 8, !tbaa !75, !alias.scope !1056, !noalias !1059
  ret void

invertfor.body3.lr.ph.i:                          ; preds = %invertfor.body3.i
  %44 = icmp eq i64 %"iv'ac.0", 0
  br i1 %44, label %invertfor.cond1.preheader.lr.ph.i, label %incinvertfor.body3.lr.ph.i

incinvertfor.body3.lr.ph.i:                       ; preds = %invertfor.body3.lr.ph.i
  %45 = add nsw i64 %"iv'ac.0", -1
  br label %invertfor.inc12.i

invertfor.body3.i:                                ; preds = %invertif.else.i, %invertif.then.i
  %46 = icmp eq i64 %"iv1'ac.0", 0
  br i1 %46, label %invertfor.body3.lr.ph.i, label %incinvertfor.body3.i

incinvertfor.body3.i:                             ; preds = %invertfor.body3.i
  %47 = add nsw i64 %"iv1'ac.0", -1
  br label %invertfor.inc.i

invertif.then.i:                                  ; preds = %invertfor.inc.i
  %_unwrap10 = shl nuw nsw i64 %"iv'ac.0", 2
  %"arrayidx.i'ipg_unwrap" = getelementptr inbounds double, double* %"'ipc9", i64 %_unwrap10
  store double 0.000000e+00, double* %"arrayidx.i'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1061, !noalias !1064
  br label %invertfor.body3.i

invertif.else.i:                                  ; preds = %invertfor.inc.i
  %_unwrap11 = mul nuw nsw i64 %"iv'ac.0", 3
  %_unwrap12 = add nuw nsw i64 %"iv1'ac.0", %_unwrap11
  %"arrayidx11.i'ipg_unwrap" = getelementptr inbounds double, double* %"'ipc9", i64 %_unwrap12
  store double 0.000000e+00, double* %"arrayidx11.i'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1061, !noalias !1064
  br label %invertfor.body3.i

invertfor.inc.i:                                  ; preds = %invertfor.inc12.i, %incinvertfor.body3.i
  %"iv1'ac.0" = phi i64 [ 2, %invertfor.inc12.i ], [ %47, %incinvertfor.body3.i ]
  %cmp4.i_unwrap = icmp eq i64 %"iv'ac.0", %"iv1'ac.0"
  br i1 %cmp4.i_unwrap, label %invertif.then.i, label %invertif.else.i

invertfor.inc12.i:                                ; preds = %invertfor.cond1.preheader.lr.ph.i182, %incinvertfor.body3.lr.ph.i
  %"iv'ac.0" = phi i64 [ 2, %invertfor.cond1.preheader.lr.ph.i182 ], [ %45, %incinvertfor.body3.lr.ph.i ]
  br label %invertfor.inc.i

invertfor.cond1.preheader.lr.ph.i182:             ; preds = %invertfor.body3.lr.ph.i189
  %48 = load double, double* %"'ipc13", align 8, !tbaa !75, !alias.scope !1061, !noalias !1064
  store double 0.000000e+00, double* %"'ipc13", align 8, !tbaa !75, !alias.scope !1061, !noalias !1064
  %49 = load double, double* %"'ipc16", align 8, !tbaa !75, !alias.scope !1061, !noalias !1064
  store double 0.000000e+00, double* %"'ipc16", align 8, !tbaa !75, !alias.scope !1061, !noalias !1064
  %50 = load double, double* %"'ipc19", align 8, !tbaa !75, !alias.scope !1061, !noalias !1064
  store double 0.000000e+00, double* %"'ipc19", align 8, !tbaa !75, !alias.scope !1061, !noalias !1064
  %51 = load double, double* %"'ipc21", align 8, !tbaa !75, !alias.scope !1061, !noalias !1064
  store double 0.000000e+00, double* %"'ipc21", align 8, !tbaa !75, !alias.scope !1061, !noalias !1064
  br label %invertfor.inc12.i

invertfor.body3.lr.ph.i189:                       ; preds = %invertfor.body3.i192
  %52 = icmp eq i64 %"iv3'ac.0", 0
  br i1 %52, label %invertfor.cond1.preheader.lr.ph.i182, label %incinvertfor.body3.lr.ph.i189

incinvertfor.body3.lr.ph.i189:                    ; preds = %invertfor.body3.lr.ph.i189
  %53 = add nsw i64 %"iv3'ac.0", -1
  br label %invertfor.inc12.i204

invertfor.body3.i192:                             ; preds = %invertif.else.i198, %invertif.then.i194
  %54 = icmp eq i64 %"iv5'ac.0", 0
  br i1 %54, label %invertfor.body3.lr.ph.i189, label %incinvertfor.body3.i192

incinvertfor.body3.i192:                          ; preds = %invertfor.body3.i192
  %55 = add nsw i64 %"iv5'ac.0", -1
  br label %invertfor.inc.i201

invertif.then.i194:                               ; preds = %invertfor.inc.i201
  %_unwrap27 = shl nuw nsw i64 %"iv3'ac.0", 2
  %"arrayidx.i193'ipg_unwrap" = getelementptr inbounds double, double* %"'ipc25", i64 %_unwrap27
  store double 0.000000e+00, double* %"arrayidx.i193'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1066, !noalias !1069
  br label %invertfor.body3.i192

invertif.else.i198:                               ; preds = %invertfor.inc.i201
  %_unwrap28 = mul nuw nsw i64 %"iv3'ac.0", 3
  %_unwrap29 = add nuw nsw i64 %"iv5'ac.0", %_unwrap28
  %"arrayidx11.i197'ipg_unwrap" = getelementptr inbounds double, double* %"'ipc25", i64 %_unwrap29
  store double 0.000000e+00, double* %"arrayidx11.i197'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1066, !noalias !1069
  br label %invertfor.body3.i192

invertfor.inc.i201:                               ; preds = %invertfor.inc12.i204, %incinvertfor.body3.i192
  %"iv5'ac.0" = phi i64 [ 2, %invertfor.inc12.i204 ], [ %55, %incinvertfor.body3.i192 ]
  %cmp4.i191_unwrap = icmp eq i64 %"iv3'ac.0", %"iv5'ac.0"
  br i1 %cmp4.i191_unwrap, label %invertif.then.i194, label %invertif.else.i198

invertfor.inc12.i204:                             ; preds = %invertfor.cond1.preheader.lr.ph.i211, %incinvertfor.body3.lr.ph.i189
  %"iv3'ac.0" = phi i64 [ 2, %invertfor.cond1.preheader.lr.ph.i211 ], [ %53, %incinvertfor.body3.lr.ph.i189 ]
  br label %invertfor.inc.i201

invertfor.cond1.preheader.lr.ph.i211:             ; preds = %invertfor.body3.lr.ph.i218
  %56 = load double, double* %"'ipc30", align 8, !tbaa !75, !alias.scope !1066, !noalias !1069
  store double 0.000000e+00, double* %"'ipc30", align 8, !tbaa !75, !alias.scope !1066, !noalias !1069
  %57 = load double, double* %"'ipc33", align 8, !tbaa !75, !alias.scope !1066, !noalias !1069
  store double 0.000000e+00, double* %"'ipc33", align 8, !tbaa !75, !alias.scope !1066, !noalias !1069
  %58 = load double, double* %"'ipc36", align 8, !tbaa !75, !alias.scope !1066, !noalias !1069
  store double 0.000000e+00, double* %"'ipc36", align 8, !tbaa !75, !alias.scope !1066, !noalias !1069
  %59 = load double, double* %"'ipc25", align 8, !tbaa !75, !alias.scope !1066, !noalias !1069
  store double 0.000000e+00, double* %"'ipc25", align 8, !tbaa !75, !alias.scope !1066, !noalias !1069
  br label %invertfor.inc12.i204

invertfor.body3.lr.ph.i218:                       ; preds = %invertfor.body3.i221
  %60 = icmp eq i64 %"iv7'ac.0", 0
  br i1 %60, label %invertfor.cond1.preheader.lr.ph.i211, label %incinvertfor.body3.lr.ph.i218

incinvertfor.body3.lr.ph.i218:                    ; preds = %invertfor.body3.lr.ph.i218
  %61 = add nsw i64 %"iv7'ac.0", -1
  br label %invertfor.inc12.i233

invertfor.body3.i221:                             ; preds = %invertif.else.i227, %invertif.then.i223
  %62 = icmp eq i64 %"iv9'ac.0", 0
  br i1 %62, label %invertfor.body3.lr.ph.i218, label %incinvertfor.body3.i221

incinvertfor.body3.i221:                          ; preds = %invertfor.body3.i221
  %63 = add nsw i64 %"iv9'ac.0", -1
  br label %invertfor.inc.i230

invertif.then.i223:                               ; preds = %invertfor.inc.i230
  %_unwrap41 = shl nuw nsw i64 %"iv7'ac.0", 2
  %"arrayidx.i222'ipg_unwrap" = getelementptr inbounds double, double* %"'ipc39", i64 %_unwrap41
  store double 0.000000e+00, double* %"arrayidx.i222'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1051, !noalias !1054
  br label %invertfor.body3.i221

invertif.else.i227:                               ; preds = %invertfor.inc.i230
  %_unwrap42 = mul nuw nsw i64 %"iv7'ac.0", 3
  %_unwrap43 = add nuw nsw i64 %"iv9'ac.0", %_unwrap42
  %"arrayidx11.i226'ipg_unwrap" = getelementptr inbounds double, double* %"'ipc39", i64 %_unwrap43
  store double 0.000000e+00, double* %"arrayidx11.i226'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1051, !noalias !1054
  br label %invertfor.body3.i221

invertfor.inc.i230:                               ; preds = %invertfor.inc12.i233, %incinvertfor.body3.i221
  %"iv9'ac.0" = phi i64 [ 2, %invertfor.inc12.i233 ], [ %63, %incinvertfor.body3.i221 ]
  %cmp4.i220_unwrap = icmp eq i64 %"iv7'ac.0", %"iv9'ac.0"
  br i1 %cmp4.i220_unwrap, label %invertif.then.i223, label %invertif.else.i227

invertfor.inc12.i233:                             ; preds = %incinvertfor.body3.lr.ph.i218, %for.cond1.preheader.lr.ph.i
  %"iv7'ac.0" = phi i64 [ 2, %for.cond1.preheader.lr.ph.i ], [ %61, %incinvertfor.body3.lr.ph.i218 ]
  br label %invertfor.inc.i230
}

; Function Attrs: nounwind uwtable willreturn mustprogress
define internal void @diffemat_mult.7(%struct.Matrix* noalias nocapture readonly %lhs, %struct.Matrix* nocapture %"lhs'", %struct.Matrix* noalias nocapture readonly %rhs, %struct.Matrix* nocapture %"rhs'", %struct.Matrix* noalias nocapture %out, %struct.Matrix* nocapture %"out'", { i8*, i8*, double**, i1, i1, double*, double*, double*, double* } %tapeArg) local_unnamed_addr #16 {
entry:
  %0 = extractvalue { i8*, i8*, double**, i1, i1, double*, double*, double*, double* } %tapeArg, 2
  %1 = extractvalue { i8*, i8*, double**, i1, i1, double*, double*, double*, double* } %tapeArg, 8
  %2 = extractvalue { i8*, i8*, double**, i1, i1, double*, double*, double*, double* } %tapeArg, 5
  %3 = extractvalue { i8*, i8*, double**, i1, i1, double*, double*, double*, double* } %tapeArg, 6
  %4 = extractvalue { i8*, i8*, double**, i1, i1, double*, double*, double*, double* } %tapeArg, 7
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 0
  %5 = load i32, i32* %nrows, align 8, !tbaa !138, !alias.scope !1071, !noalias !1074, !invariant.group !1076
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 1
  %6 = load i32, i32* %ncols, align 4, !tbaa !139, !alias.scope !1077, !noalias !1080, !invariant.group !1082
  %mul3.i = mul nsw i32 %6, %5
  %cmp.not.i = extractvalue { i8*, i8*, double**, i1, i1, double*, double*, double*, double* } %tapeArg, 3
  %cmp8.i = icmp sgt i32 %mul3.i, 0
  %spec.select = select i1 %cmp8.i, i8 0, i8 2
  %_cache.0 = select i1 %cmp.not.i, i8 1, i8 %spec.select
  %cmp85 = icmp sgt i32 %5, 0
  br i1 %cmp85, label %for.cond2.preheader.lr.ph, label %invertresize.exit

for.cond2.preheader.lr.ph:                        ; preds = %entry
  %cmp483 = icmp sgt i32 %6, 0
  %ncols21 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 1
  %7 = zext i32 %5 to i64
  %wide.trip.count96 = zext i32 %6 to i64
  %wide.trip.count100_unwrap120 = zext i32 %5 to i64
  br label %invertfor.inc47

invertentry:                                      ; preds = %invertresize.exit, %invertif.then9.i
  ret void

invertif.then9.i:                                 ; preds = %invertresize.exit
  %"call.i'mi_unwrap" = extractvalue { i8*, i8*, double**, i1, i1, double*, double*, double*, double* } %tapeArg, 0
  call void @free(i8* nonnull %"call.i'mi_unwrap")
  %call.i_unwrap = extractvalue { i8*, i8*, double**, i1, i1, double*, double*, double*, double* } %tapeArg, 1
  call void @free(i8* %call.i_unwrap)
  br label %invertentry

invertresize.exit:                                ; preds = %invertfor.cond2.preheader.lr.ph, %entry
  %cond = icmp eq i8 %_cache.0, 0
  br i1 %cond, label %invertif.then9.i, label %invertentry

invertfor.cond2.preheader.lr.ph:                  ; preds = %invertfor.cond2.preheader
  %8 = bitcast double** %0 to i8*
  tail call void @free(i8* nonnull %8)
  %9 = bitcast double* %1 to i8*
  tail call void @free(i8* nonnull %9)
  %10 = bitcast double* %2 to i8*
  tail call void @free(i8* nonnull %10)
  %11 = bitcast double* %3 to i8*
  tail call void @free(i8* nonnull %11)
  %12 = bitcast double* %4 to i8*
  tail call void @free(i8* nonnull %12)
  br label %invertresize.exit

invertfor.cond2.preheader:                        ; preds = %invertfor.inc47, %invertfor.body5
  %"add43'de.0" = phi double [ %"add43'de.4", %invertfor.inc47 ], [ %"add43'de.1", %invertfor.body5 ]
  %13 = icmp eq i64 %"iv'ac.0", 0
  br i1 %13, label %invertfor.cond2.preheader.lr.ph, label %invertfor.inc47

invertfor.body5:                                  ; preds = %invertfor.inc44, %invertfor.body23
  %"add43'de.1" = phi double [ %"add43'de.3", %invertfor.inc44 ], [ %44, %invertfor.body23 ]
  %"mul13'de.1" = phi double [ 0.000000e+00, %invertfor.inc44 ], [ %46, %invertfor.body23 ]
  %_unwrap14 = getelementptr inbounds double*, double** %0, i64 %"iv'ac.0"
  %"'il_phi3_unwrap" = load double*, double** %_unwrap14, align 8, !invariant.group !1083
  %_unwrap16 = mul nuw nsw i64 %"iv1'ac.1", %wide.trip.count100_unwrap120
  %_unwrap17 = add nuw nsw i64 %_unwrap16, %"iv'ac.0"
  %"arrayidx19'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi3_unwrap", i64 %_unwrap17
  %14 = load double, double* %"arrayidx19'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1084, !noalias !1087
  store double 0.000000e+00, double* %"arrayidx19'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1084, !noalias !1087
  %15 = fadd fast double %"mul13'de.1", %14
  %_unwrap26 = load i32, i32* %ncols, align 4, !tbaa !139, !alias.scope !1077, !noalias !1080, !invariant.group !1082
  %wide.trip.count96_unwrap = zext i32 %_unwrap26 to i64
  %16 = mul nuw nsw i64 %"iv'ac.0", %wide.trip.count96_unwrap
  %17 = add nuw nsw i64 %"iv1'ac.1", %16
  %18 = getelementptr inbounds double, double* %2, i64 %17
  %19 = load double, double* %18, align 8, !tbaa !75, !invariant.group !1089
  %m0diffe = fmul fast double %15, %19
  %20 = getelementptr inbounds double, double* %3, i64 %17
  %21 = load double, double* %20, align 8, !tbaa !75, !invariant.group !1090
  %m1diffe = fmul fast double %15, %21
  %"data7'ipg_unwrap" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"rhs'", i64 0, i32 2
  %"'ipl_unwrap" = load double*, double** %"data7'ipg_unwrap", align 8, !tbaa !137, !alias.scope !1080, !noalias !1077, !invariant.group !1091
  %nrows8_unwrap = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 0
  %_unwrap46 = load i32, i32* %nrows8_unwrap, align 8, !tbaa !138, !alias.scope !1077, !noalias !1080, !invariant.group !1092
  %_unwrap47 = sext i32 %_unwrap46 to i64
  %_unwrap48 = mul nsw i64 %"iv1'ac.1", %_unwrap47
  %"arrayidx12'ipg_unwrap" = getelementptr inbounds double, double* %"'ipl_unwrap", i64 %_unwrap48
  %22 = load double, double* %"arrayidx12'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1093, !noalias !1096
  %23 = fadd fast double %22, %m0diffe
  store double %23, double* %"arrayidx12'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1093, !noalias !1096
  %"data'ipg_unwrap" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"lhs'", i64 0, i32 2
  %"'ipl12_unwrap" = load double*, double** %"data'ipg_unwrap", align 8, !tbaa !137, !alias.scope !1074, !noalias !1071, !invariant.group !1098
  %"arrayidx'ipg_unwrap" = getelementptr inbounds double, double* %"'ipl12_unwrap", i64 %"iv'ac.0"
  %24 = load double, double* %"arrayidx'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1099, !noalias !1102
  %25 = fadd fast double %24, %m1diffe
  store double %25, double* %"arrayidx'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1099, !noalias !1102
  %26 = icmp eq i64 %"iv1'ac.1", 0
  br i1 %26, label %invertfor.cond2.preheader, label %invertfor.inc44

invertfor.body23:                                 ; preds = %mergeinvertfor.body23_for.inc44.loopexit, %incinvertfor.body23
  %"add43'de.2" = phi double [ %"add43'de.3", %mergeinvertfor.body23_for.inc44.loopexit ], [ %44, %incinvertfor.body23 ]
  %"mul13'de.2" = phi double [ 0.000000e+00, %mergeinvertfor.body23_for.inc44.loopexit ], [ %46, %incinvertfor.body23 ]
  %"iv3'ac.2" = phi i64 [ %_unwrap115, %mergeinvertfor.body23_for.inc44.loopexit ], [ %47, %incinvertfor.body23 ]
  %_unwrap50 = getelementptr inbounds double*, double** %0, i64 %"iv'ac.0"
  %"'il_phi3_unwrap51" = load double*, double** %_unwrap50, align 8, !invariant.group !1083
  %_unwrap53 = mul nuw nsw i64 %"iv1'ac.1", %wide.trip.count100_unwrap120
  %_unwrap54 = add nuw nsw i64 %_unwrap53, %"iv'ac.0"
  %"arrayidx19'ipg_unwrap55" = getelementptr inbounds double, double* %"'il_phi3_unwrap51", i64 %_unwrap54
  %27 = load double, double* %"arrayidx19'ipg_unwrap55", align 8, !tbaa !75, !alias.scope !1084, !noalias !1087
  store double 0.000000e+00, double* %"arrayidx19'ipg_unwrap55", align 8, !tbaa !75, !alias.scope !1084, !noalias !1087
  %28 = fadd fast double %"add43'de.2", %27
  %_unwrap75 = load i32, i32* %ncols, align 4, !tbaa !139, !alias.scope !1077, !noalias !1080, !invariant.group !1082
  %wide.trip.count96_unwrap76 = zext i32 %_unwrap75 to i64
  %_unwrap57_unwrap = load i32, i32* %ncols21_unwrap116, align 4, !tbaa !139, !alias.scope !1071, !noalias !1074, !invariant.group !1104
  %wide.trip.count_unwrap_unwrap = zext i32 %_unwrap57_unwrap to i64
  %29 = add nsw i64 %wide.trip.count_unwrap_unwrap, -1
  %30 = mul nuw nsw i64 %29, %wide.trip.count96_unwrap76
  %31 = mul nuw nsw i64 %"iv1'ac.1", %29
  %32 = add nuw nsw i64 %"iv3'ac.2", %31
  %33 = mul nuw nsw i64 %"iv'ac.0", %30
  %34 = add nuw nsw i64 %32, %33
  %35 = getelementptr inbounds double, double* %4, i64 %34
  %36 = load double, double* %35, align 8, !tbaa !75, !invariant.group !1105
  %m0diffe81 = fmul fast double %28, %36
  %37 = getelementptr inbounds double, double* %1, i64 %34
  %38 = load double, double* %37, align 8, !tbaa !75, !invariant.group !1106
  %m1diffe96 = fmul fast double %28, %38
  %"data7'ipg_unwrap99" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"rhs'", i64 0, i32 2
  %"'ipl_unwrap100" = load double*, double** %"data7'ipg_unwrap99", align 8, !tbaa !137, !alias.scope !1080, !noalias !1077, !invariant.group !1091
  %iv.next4_unwrap = add nuw nsw i64 %"iv3'ac.2", 1
  %nrows8_unwrap101 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 0
  %_unwrap102 = load i32, i32* %nrows8_unwrap101, align 8, !tbaa !138, !alias.scope !1077, !noalias !1080, !invariant.group !1092
  %_unwrap103 = sext i32 %_unwrap102 to i64
  %_unwrap104 = mul nsw i64 %"iv1'ac.1", %_unwrap103
  %_unwrap105 = add nsw i64 %iv.next4_unwrap, %_unwrap104
  %"arrayidx35'ipg_unwrap" = getelementptr inbounds double, double* %"'ipl_unwrap100", i64 %_unwrap105
  %39 = load double, double* %"arrayidx35'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1093, !noalias !1096
  %40 = fadd fast double %39, %m0diffe81
  store double %40, double* %"arrayidx35'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1093, !noalias !1096
  %"data'ipg_unwrap106" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"lhs'", i64 0, i32 2
  %"'ipl12_unwrap107" = load double*, double** %"data'ipg_unwrap106", align 8, !tbaa !137, !alias.scope !1074, !noalias !1071, !invariant.group !1098
  %_unwrap108 = mul nuw nsw i64 %iv.next4_unwrap, %wide.trip.count100_unwrap120
  %_unwrap109 = add nuw nsw i64 %_unwrap108, %"iv'ac.0"
  %"arrayidx29'ipg_unwrap" = getelementptr inbounds double, double* %"'ipl12_unwrap107", i64 %_unwrap109
  %41 = load double, double* %"arrayidx29'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1099, !noalias !1102
  %42 = fadd fast double %41, %m1diffe96
  store double %42, double* %"arrayidx29'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1099, !noalias !1102
  %43 = icmp eq i64 %"iv3'ac.2", 0
  %44 = select fast i1 %43, double 0.000000e+00, double %28
  %45 = fadd fast double %"mul13'de.2", %28
  %46 = select fast i1 %43, double %45, double %"mul13'de.2"
  br i1 %43, label %invertfor.body5, label %incinvertfor.body23

incinvertfor.body23:                              ; preds = %invertfor.body23
  %47 = add nsw i64 %"iv3'ac.2", -1
  br label %invertfor.body23

mergeinvertfor.body23_for.inc44.loopexit:         ; preds = %invertfor.inc44
  %wide.trip.count_unwrap114 = zext i32 %_unwrap117 to i64
  %_unwrap115 = add nsw i64 %wide.trip.count_unwrap114, -2
  br label %invertfor.body23

invertfor.inc44:                                  ; preds = %mergeinvertfor.body5_for.inc47.loopexit, %invertfor.body5
  %"add43'de.3" = phi double [ %"add43'de.4", %mergeinvertfor.body5_for.inc47.loopexit ], [ %"add43'de.1", %invertfor.body5 ]
  %"iv1'ac.1.in" = phi i64 [ %wide.trip.count96_unwrap118, %mergeinvertfor.body5_for.inc47.loopexit ], [ %"iv1'ac.1", %invertfor.body5 ]
  %"iv1'ac.1" = add nsw i64 %"iv1'ac.1.in", -1
  %ncols21_unwrap116 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 1
  %_unwrap117 = load i32, i32* %ncols21_unwrap116, align 4, !tbaa !139, !alias.scope !1071, !noalias !1074, !invariant.group !1104
  %cmp2281_unwrap = icmp sgt i32 %_unwrap117, 1
  br i1 %cmp2281_unwrap, label %mergeinvertfor.body23_for.inc44.loopexit, label %invertfor.body5

mergeinvertfor.body5_for.inc47.loopexit:          ; preds = %invertfor.inc47
  %wide.trip.count96_unwrap118 = zext i32 %6 to i64
  br label %invertfor.inc44

invertfor.inc47:                                  ; preds = %invertfor.cond2.preheader, %for.cond2.preheader.lr.ph
  %"add43'de.4" = phi double [ 0.000000e+00, %for.cond2.preheader.lr.ph ], [ %"add43'de.0", %invertfor.cond2.preheader ]
  %"iv'ac.0.in" = phi i64 [ %wide.trip.count100_unwrap120, %for.cond2.preheader.lr.ph ], [ %"iv'ac.0", %invertfor.cond2.preheader ]
  %"iv'ac.0" = add nsw i64 %"iv'ac.0.in", -1
  %cmp483_unwrap = icmp sgt i32 %6, 0
  br i1 %cmp483_unwrap, label %mergeinvertfor.body5_for.inc47.loopexit, label %invertfor.cond2.preheader
}

; Function Attrs: nounwind uwtable willreturn mustprogress
define internal void @diffemat_mult.8(%struct.Matrix* noalias nocapture readonly %lhs, %struct.Matrix* nocapture %"lhs'", %struct.Matrix* noalias nocapture readonly %rhs, %struct.Matrix* nocapture %"rhs'", %struct.Matrix* noalias nocapture %out, %struct.Matrix* nocapture %"out'", { i8*, i8*, i1, i1, double*, double*, double*, double* } %tapeArg) local_unnamed_addr #16 {
entry:
  %0 = extractvalue { i8*, i8*, i1, i1, double*, double*, double*, double* } %tapeArg, 7
  %1 = extractvalue { i8*, i8*, i1, i1, double*, double*, double*, double* } %tapeArg, 4
  %2 = extractvalue { i8*, i8*, i1, i1, double*, double*, double*, double* } %tapeArg, 5
  %3 = extractvalue { i8*, i8*, i1, i1, double*, double*, double*, double* } %tapeArg, 6
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 0
  %4 = load i32, i32* %nrows, align 8, !tbaa !138, !alias.scope !1107, !noalias !1110, !invariant.group !1112
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 1
  %5 = load i32, i32* %ncols, align 4, !tbaa !139, !alias.scope !1113, !noalias !1116, !invariant.group !1118
  %mul3.i = mul nsw i32 %5, %4
  %cmp.not.i = extractvalue { i8*, i8*, i1, i1, double*, double*, double*, double* } %tapeArg, 2
  %cmp8.i = icmp sgt i32 %mul3.i, 0
  %spec.select = select i1 %cmp8.i, i8 1, i8 2
  %_cache.0 = select i1 %cmp.not.i, i8 0, i8 %spec.select
  %cmp85 = icmp sgt i32 %4, 0
  br i1 %cmp85, label %for.cond2.preheader.lr.ph, label %invertresize.exit

for.cond2.preheader.lr.ph:                        ; preds = %entry
  %cmp483 = icmp sgt i32 %5, 0
  %ncols21 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 1
  %6 = zext i32 %4 to i64
  %wide.trip.count96 = zext i32 %5 to i64
  %wide.trip.count100_unwrap115 = zext i32 %4 to i64
  br label %invertfor.inc47

invertentry:                                      ; preds = %invertresize.exit, %invertif.then9.i
  ret void

invertif.then9.i:                                 ; preds = %invertresize.exit
  %"call.i'mi_unwrap" = extractvalue { i8*, i8*, i1, i1, double*, double*, double*, double* } %tapeArg, 0
  call void @free(i8* nonnull %"call.i'mi_unwrap")
  %call.i_unwrap = extractvalue { i8*, i8*, i1, i1, double*, double*, double*, double* } %tapeArg, 1
  call void @free(i8* %call.i_unwrap)
  br label %invertentry

invertresize.exit:                                ; preds = %invertfor.cond2.preheader.lr.ph, %entry
  %cond = icmp eq i8 %_cache.0, 1
  br i1 %cond, label %invertif.then9.i, label %invertentry

invertfor.cond2.preheader.lr.ph:                  ; preds = %invertfor.cond2.preheader
  %7 = bitcast double* %0 to i8*
  tail call void @free(i8* nonnull %7)
  %8 = bitcast double* %1 to i8*
  tail call void @free(i8* nonnull %8)
  %9 = bitcast double* %2 to i8*
  tail call void @free(i8* nonnull %9)
  %10 = bitcast double* %3 to i8*
  tail call void @free(i8* nonnull %10)
  br label %invertresize.exit

invertfor.cond2.preheader:                        ; preds = %invertfor.inc47, %invertfor.body5
  %"add43'de.0" = phi double [ %"add43'de.4", %invertfor.inc47 ], [ %"add43'de.1", %invertfor.body5 ]
  %11 = icmp eq i64 %"iv'ac.0", 0
  br i1 %11, label %invertfor.cond2.preheader.lr.ph, label %invertfor.inc47

invertfor.body5:                                  ; preds = %invertfor.inc44, %invertfor.body23
  %"add43'de.1" = phi double [ %"add43'de.3", %invertfor.inc44 ], [ %42, %invertfor.body23 ]
  %"mul13'de.1" = phi double [ 0.000000e+00, %invertfor.inc44 ], [ %44, %invertfor.body23 ]
  %"data14'ipg_unwrap" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 2
  %"'ipl_unwrap" = load double*, double** %"data14'ipg_unwrap", align 8, !tbaa !137, !alias.scope !1119, !noalias !1122, !invariant.group !1124
  %_unwrap13 = mul nuw nsw i64 %"iv1'ac.1", %wide.trip.count100_unwrap115
  %_unwrap14 = add nuw nsw i64 %_unwrap13, %"iv'ac.0"
  %"arrayidx19'ipg_unwrap" = getelementptr inbounds double, double* %"'ipl_unwrap", i64 %_unwrap14
  %12 = load double, double* %"arrayidx19'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1125, !noalias !1128
  store double 0.000000e+00, double* %"arrayidx19'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1125, !noalias !1128
  %13 = fadd fast double %"mul13'de.1", %12
  %_unwrap22 = load i32, i32* %ncols, align 4, !tbaa !139, !alias.scope !1113, !noalias !1116, !invariant.group !1118
  %wide.trip.count96_unwrap = zext i32 %_unwrap22 to i64
  %14 = mul nuw nsw i64 %"iv'ac.0", %wide.trip.count96_unwrap
  %15 = add nuw nsw i64 %"iv1'ac.1", %14
  %16 = getelementptr inbounds double, double* %1, i64 %15
  %17 = load double, double* %16, align 8, !tbaa !75, !invariant.group !1130
  %m0diffe = fmul fast double %13, %17
  %18 = getelementptr inbounds double, double* %2, i64 %15
  %19 = load double, double* %18, align 8, !tbaa !75, !invariant.group !1131
  %m1diffe = fmul fast double %13, %19
  %"data7'ipg_unwrap" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"rhs'", i64 0, i32 2
  %"'ipl9_unwrap" = load double*, double** %"data7'ipg_unwrap", align 8, !tbaa !137, !alias.scope !1116, !noalias !1113, !invariant.group !1132
  %nrows8_unwrap = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 0
  %_unwrap42 = load i32, i32* %nrows8_unwrap, align 8, !tbaa !138, !alias.scope !1113, !noalias !1116, !invariant.group !1133
  %_unwrap43 = sext i32 %_unwrap42 to i64
  %_unwrap44 = mul nsw i64 %"iv1'ac.1", %_unwrap43
  %"arrayidx12'ipg_unwrap" = getelementptr inbounds double, double* %"'ipl9_unwrap", i64 %_unwrap44
  %20 = load double, double* %"arrayidx12'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1134, !noalias !1137
  %21 = fadd fast double %20, %m0diffe
  store double %21, double* %"arrayidx12'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1134, !noalias !1137
  %"data'ipg_unwrap" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"lhs'", i64 0, i32 2
  %"'ipl11_unwrap" = load double*, double** %"data'ipg_unwrap", align 8, !tbaa !137, !alias.scope !1110, !noalias !1107, !invariant.group !1139
  %"arrayidx'ipg_unwrap" = getelementptr inbounds double, double* %"'ipl11_unwrap", i64 %"iv'ac.0"
  %22 = load double, double* %"arrayidx'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1140, !noalias !1143
  %23 = fadd fast double %22, %m1diffe
  store double %23, double* %"arrayidx'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1140, !noalias !1143
  %24 = icmp eq i64 %"iv1'ac.1", 0
  br i1 %24, label %invertfor.cond2.preheader, label %invertfor.inc44

invertfor.body23:                                 ; preds = %mergeinvertfor.body23_for.inc44.loopexit, %incinvertfor.body23
  %"add43'de.2" = phi double [ %"add43'de.3", %mergeinvertfor.body23_for.inc44.loopexit ], [ %42, %incinvertfor.body23 ]
  %"mul13'de.2" = phi double [ 0.000000e+00, %mergeinvertfor.body23_for.inc44.loopexit ], [ %44, %incinvertfor.body23 ]
  %"iv3'ac.2" = phi i64 [ %_unwrap110, %mergeinvertfor.body23_for.inc44.loopexit ], [ %45, %incinvertfor.body23 ]
  %"data14'ipg_unwrap45" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 2
  %"'ipl_unwrap46" = load double*, double** %"data14'ipg_unwrap45", align 8, !tbaa !137, !alias.scope !1119, !noalias !1122, !invariant.group !1124
  %_unwrap48 = mul nuw nsw i64 %"iv1'ac.1", %wide.trip.count100_unwrap115
  %_unwrap49 = add nuw nsw i64 %_unwrap48, %"iv'ac.0"
  %"arrayidx19'ipg_unwrap50" = getelementptr inbounds double, double* %"'ipl_unwrap46", i64 %_unwrap49
  %25 = load double, double* %"arrayidx19'ipg_unwrap50", align 8, !tbaa !75, !alias.scope !1125, !noalias !1128
  store double 0.000000e+00, double* %"arrayidx19'ipg_unwrap50", align 8, !tbaa !75, !alias.scope !1125, !noalias !1128
  %26 = fadd fast double %"add43'de.2", %25
  %_unwrap70 = load i32, i32* %ncols, align 4, !tbaa !139, !alias.scope !1113, !noalias !1116, !invariant.group !1118
  %wide.trip.count96_unwrap71 = zext i32 %_unwrap70 to i64
  %_unwrap52_unwrap = load i32, i32* %ncols21_unwrap111, align 4, !tbaa !139, !alias.scope !1107, !noalias !1110, !invariant.group !1145
  %wide.trip.count_unwrap_unwrap = zext i32 %_unwrap52_unwrap to i64
  %27 = add nsw i64 %wide.trip.count_unwrap_unwrap, -1
  %28 = mul nuw nsw i64 %27, %wide.trip.count96_unwrap71
  %29 = mul nuw nsw i64 %"iv1'ac.1", %27
  %30 = add nuw nsw i64 %"iv3'ac.2", %29
  %31 = mul nuw nsw i64 %"iv'ac.0", %28
  %32 = add nuw nsw i64 %30, %31
  %33 = getelementptr inbounds double, double* %3, i64 %32
  %34 = load double, double* %33, align 8, !tbaa !75, !invariant.group !1146
  %m0diffe76 = fmul fast double %26, %34
  %35 = getelementptr inbounds double, double* %0, i64 %32
  %36 = load double, double* %35, align 8, !tbaa !75, !invariant.group !1147
  %m1diffe91 = fmul fast double %26, %36
  %"data7'ipg_unwrap94" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"rhs'", i64 0, i32 2
  %"'ipl9_unwrap95" = load double*, double** %"data7'ipg_unwrap94", align 8, !tbaa !137, !alias.scope !1116, !noalias !1113, !invariant.group !1132
  %iv.next4_unwrap = add nuw nsw i64 %"iv3'ac.2", 1
  %nrows8_unwrap96 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 0
  %_unwrap97 = load i32, i32* %nrows8_unwrap96, align 8, !tbaa !138, !alias.scope !1113, !noalias !1116, !invariant.group !1133
  %_unwrap98 = sext i32 %_unwrap97 to i64
  %_unwrap99 = mul nsw i64 %"iv1'ac.1", %_unwrap98
  %_unwrap100 = add nsw i64 %iv.next4_unwrap, %_unwrap99
  %"arrayidx35'ipg_unwrap" = getelementptr inbounds double, double* %"'ipl9_unwrap95", i64 %_unwrap100
  %37 = load double, double* %"arrayidx35'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1134, !noalias !1137
  %38 = fadd fast double %37, %m0diffe76
  store double %38, double* %"arrayidx35'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1134, !noalias !1137
  %"data'ipg_unwrap101" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"lhs'", i64 0, i32 2
  %"'ipl11_unwrap102" = load double*, double** %"data'ipg_unwrap101", align 8, !tbaa !137, !alias.scope !1110, !noalias !1107, !invariant.group !1139
  %_unwrap103 = mul nuw nsw i64 %iv.next4_unwrap, %wide.trip.count100_unwrap115
  %_unwrap104 = add nuw nsw i64 %_unwrap103, %"iv'ac.0"
  %"arrayidx29'ipg_unwrap" = getelementptr inbounds double, double* %"'ipl11_unwrap102", i64 %_unwrap104
  %39 = load double, double* %"arrayidx29'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1140, !noalias !1143
  %40 = fadd fast double %39, %m1diffe91
  store double %40, double* %"arrayidx29'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1140, !noalias !1143
  %41 = icmp eq i64 %"iv3'ac.2", 0
  %42 = select fast i1 %41, double 0.000000e+00, double %26
  %43 = fadd fast double %"mul13'de.2", %26
  %44 = select fast i1 %41, double %43, double %"mul13'de.2"
  br i1 %41, label %invertfor.body5, label %incinvertfor.body23

incinvertfor.body23:                              ; preds = %invertfor.body23
  %45 = add nsw i64 %"iv3'ac.2", -1
  br label %invertfor.body23

mergeinvertfor.body23_for.inc44.loopexit:         ; preds = %invertfor.inc44
  %wide.trip.count_unwrap109 = zext i32 %_unwrap112 to i64
  %_unwrap110 = add nsw i64 %wide.trip.count_unwrap109, -2
  br label %invertfor.body23

invertfor.inc44:                                  ; preds = %mergeinvertfor.body5_for.inc47.loopexit, %invertfor.body5
  %"add43'de.3" = phi double [ %"add43'de.4", %mergeinvertfor.body5_for.inc47.loopexit ], [ %"add43'de.1", %invertfor.body5 ]
  %"iv1'ac.1.in" = phi i64 [ %wide.trip.count96_unwrap113, %mergeinvertfor.body5_for.inc47.loopexit ], [ %"iv1'ac.1", %invertfor.body5 ]
  %"iv1'ac.1" = add nsw i64 %"iv1'ac.1.in", -1
  %ncols21_unwrap111 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 1
  %_unwrap112 = load i32, i32* %ncols21_unwrap111, align 4, !tbaa !139, !alias.scope !1107, !noalias !1110, !invariant.group !1145
  %cmp2281_unwrap = icmp sgt i32 %_unwrap112, 1
  br i1 %cmp2281_unwrap, label %mergeinvertfor.body23_for.inc44.loopexit, label %invertfor.body5

mergeinvertfor.body5_for.inc47.loopexit:          ; preds = %invertfor.inc47
  %wide.trip.count96_unwrap113 = zext i32 %5 to i64
  br label %invertfor.inc44

invertfor.inc47:                                  ; preds = %invertfor.cond2.preheader, %for.cond2.preheader.lr.ph
  %"add43'de.4" = phi double [ 0.000000e+00, %for.cond2.preheader.lr.ph ], [ %"add43'de.0", %invertfor.cond2.preheader ]
  %"iv'ac.0.in" = phi i64 [ %wide.trip.count100_unwrap115, %for.cond2.preheader.lr.ph ], [ %"iv'ac.0", %invertfor.cond2.preheader ]
  %"iv'ac.0" = add nsw i64 %"iv'ac.0.in", -1
  %cmp483_unwrap = icmp sgt i32 %5, 0
  br i1 %cmp483_unwrap, label %mergeinvertfor.body5_for.inc47.loopexit, label %invertfor.cond2.preheader
}

; Function Attrs: nounwind uwtable willreturn mustprogress
define internal void @diffemat_mult.9(%struct.Matrix* noalias nocapture readonly %lhs, %struct.Matrix* noalias nocapture readonly %rhs, %struct.Matrix* nocapture %"rhs'", %struct.Matrix* noalias nocapture %out, %struct.Matrix* nocapture %"out'", { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** } %tapeArg) local_unnamed_addr #16 {
entry:
  %0 = extractvalue { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** } %tapeArg, 2
  %1 = extractvalue { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** } %tapeArg, 6
  %2 = extractvalue { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** } %tapeArg, 7
  %3 = extractvalue { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** } %tapeArg, 8
  %4 = extractvalue { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** } %tapeArg, 3
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 1
  %5 = load i32, i32* %ncols, align 4, !tbaa !139, !alias.scope !1148, !noalias !1151, !invariant.group !1153
  %mul3.i = mul nsw i32 %5, %4
  %cmp.not.i = extractvalue { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** } %tapeArg, 4
  %cmp8.i = icmp sgt i32 %mul3.i, 0
  %spec.select = select i1 %cmp8.i, i8 2, i8 0
  %_cache.0 = select i1 %cmp.not.i, i8 1, i8 %spec.select
  %cmp85 = icmp sgt i32 %4, 0
  br i1 %cmp85, label %for.cond2.preheader.lr.ph, label %invertresize.exit

for.cond2.preheader.lr.ph:                        ; preds = %entry
  %cmp483 = icmp sgt i32 %5, 0
  %6 = zext i32 %4 to i64
  %wide.trip.count96 = zext i32 %5 to i64
  %wide.trip.count100_unwrap127 = zext i32 %4 to i64
  br label %invertfor.inc47

invertentry:                                      ; preds = %invertresize.exit, %invertif.then9.i
  ret void

invertif.then9.i:                                 ; preds = %invertresize.exit
  %"call.i'mi_unwrap" = extractvalue { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** } %tapeArg, 0
  call void @free(i8* nonnull %"call.i'mi_unwrap")
  %call.i_unwrap = extractvalue { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** } %tapeArg, 1
  call void @free(i8* %call.i_unwrap)
  br label %invertentry

invertresize.exit:                                ; preds = %invertfor.cond2.preheader.lr.ph, %entry
  %switch = icmp ult i8 %_cache.0, 2
  br i1 %switch, label %invertentry, label %invertif.then9.i

invertfor.cond2.preheader.lr.ph:                  ; preds = %invertfor.cond2.preheader
  %7 = bitcast double** %0 to i8*
  tail call void @free(i8* nonnull %7)
  %8 = bitcast i32* %1 to i8*
  tail call void @free(i8* nonnull %8)
  %9 = bitcast double* %2 to i8*
  tail call void @free(i8* nonnull %9)
  %10 = bitcast double** %3 to i8*
  tail call void @free(i8* nonnull %10)
  br label %invertresize.exit

invertfor.cond2.preheader:                        ; preds = %invertfor.inc47, %invertfor.body5
  %"add43'de.0" = phi double [ %"add43'de.4", %invertfor.inc47 ], [ %"add43'de.1", %invertfor.body5 ]
  %11 = icmp eq i64 %"iv'ac.0", 0
  br i1 %11, label %invertfor.cond2.preheader.lr.ph, label %invertfor.inc47

invertfor.body5:                                  ; preds = %invertfor.inc44, %invertfor.body23.preheader
  %"add43'de.1" = phi double [ %.lcssa168, %invertfor.body23.preheader ], [ %"add43'de.3", %invertfor.inc44 ]
  %"mul13'de.1" = phi double [ %.lcssa, %invertfor.body23.preheader ], [ 0.000000e+00, %invertfor.inc44 ]
  %_unwrap13 = getelementptr inbounds double*, double** %0, i64 %"iv'ac.0"
  %"'il_phi3_unwrap" = load double*, double** %_unwrap13, align 8, !invariant.group !1154
  %_unwrap15 = mul nuw nsw i64 %"iv1'ac.1", %wide.trip.count100_unwrap127
  %_unwrap16 = add nuw nsw i64 %_unwrap15, %"iv'ac.0"
  %"arrayidx19'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi3_unwrap", i64 %_unwrap16
  %12 = load double, double* %"arrayidx19'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1155, !noalias !1158
  store double 0.000000e+00, double* %"arrayidx19'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1155, !noalias !1158
  %13 = fadd fast double %"mul13'de.1", %12
  %_unwrap24 = load i32, i32* %ncols, align 4, !tbaa !139, !alias.scope !1148, !noalias !1151, !invariant.group !1153
  %wide.trip.count96_unwrap = zext i32 %_unwrap24 to i64
  %14 = mul nuw nsw i64 %"iv'ac.0", %wide.trip.count96_unwrap
  %15 = add nuw nsw i64 %"iv1'ac.1", %14
  %16 = getelementptr inbounds double, double* %2, i64 %15
  %17 = load double, double* %16, align 8, !tbaa !75, !invariant.group !1160
  %m0diffe = fmul fast double %13, %17
  %"data7'ipg_unwrap" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"rhs'", i64 0, i32 2
  %"'ipl_unwrap" = load double*, double** %"data7'ipg_unwrap", align 8, !tbaa !137, !alias.scope !1151, !noalias !1148, !invariant.group !1161
  %nrows8_unwrap = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 0
  %_unwrap29 = load i32, i32* %nrows8_unwrap, align 8, !tbaa !138, !alias.scope !1148, !noalias !1151, !invariant.group !1162
  %_unwrap30 = sext i32 %_unwrap29 to i64
  %_unwrap31 = mul nsw i64 %"iv1'ac.1", %_unwrap30
  %"arrayidx12'ipg_unwrap" = getelementptr inbounds double, double* %"'ipl_unwrap", i64 %_unwrap31
  %18 = load double, double* %"arrayidx12'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1163, !noalias !1166
  %19 = fadd fast double %18, %m0diffe
  store double %19, double* %"arrayidx12'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1163, !noalias !1166
  %20 = icmp eq i64 %"iv1'ac.1", 0
  br i1 %20, label %invertfor.cond2.preheader, label %invertfor.inc44

invertfor.body23.preheader:                       ; preds = %invertfor.body23
  %.lcssa168 = phi double [ %33, %invertfor.body23 ]
  %.lcssa = phi double [ %35, %invertfor.body23 ]
  %_unwrap57 = load i32, i32* %ncols, align 4, !tbaa !139, !alias.scope !1148, !noalias !1151, !invariant.group !1153
  %wide.trip.count96_unwrap58 = zext i32 %_unwrap57 to i64
  %_unwrap152 = mul nuw nsw i64 %"iv'ac.0", %wide.trip.count96_unwrap58
  %_unwrap153 = add nuw nsw i64 %"iv1'ac.1", %_unwrap152
  %_unwrap154 = getelementptr inbounds double*, double** %3, i64 %_unwrap153
  %21 = bitcast double** %_unwrap154 to i8**
  %forfree155167 = load i8*, i8** %21, align 8, !dereferenceable !457
  tail call void @free(i8* nonnull %forfree155167)
  br label %invertfor.body5

invertfor.body23:                                 ; preds = %mergeinvertfor.body23_for.inc44.loopexit, %incinvertfor.body23
  %"add43'de.2" = phi double [ %"add43'de.3", %mergeinvertfor.body23_for.inc44.loopexit ], [ %33, %incinvertfor.body23 ]
  %"mul13'de.2" = phi double [ 0.000000e+00, %mergeinvertfor.body23_for.inc44.loopexit ], [ %35, %incinvertfor.body23 ]
  %"iv3'ac.0" = phi i64 [ %_unwrap118, %mergeinvertfor.body23_for.inc44.loopexit ], [ %36, %incinvertfor.body23 ]
  %_unwrap34 = getelementptr inbounds double*, double** %0, i64 %"iv'ac.0"
  %"'il_phi3_unwrap35" = load double*, double** %_unwrap34, align 8, !invariant.group !1154
  %_unwrap37 = mul nuw nsw i64 %"iv1'ac.1", %wide.trip.count100_unwrap127
  %_unwrap38 = add nuw nsw i64 %_unwrap37, %"iv'ac.0"
  %"arrayidx19'ipg_unwrap39" = getelementptr inbounds double, double* %"'il_phi3_unwrap35", i64 %_unwrap38
  %22 = load double, double* %"arrayidx19'ipg_unwrap39", align 8, !tbaa !75, !alias.scope !1155, !noalias !1158
  store double 0.000000e+00, double* %"arrayidx19'ipg_unwrap39", align 8, !tbaa !75, !alias.scope !1155, !noalias !1158
  %23 = fadd fast double %"add43'de.2", %22
  %_unwrap75 = load i32, i32* %ncols, align 4, !tbaa !139, !alias.scope !1148, !noalias !1151, !invariant.group !1153
  %wide.trip.count96_unwrap76 = zext i32 %_unwrap75 to i64
  %24 = mul nuw nsw i64 %"iv'ac.0", %wide.trip.count96_unwrap76
  %25 = add nuw nsw i64 %"iv1'ac.1", %24
  %26 = getelementptr inbounds double*, double** %3, i64 %25
  %27 = load double*, double** %26, align 8, !dereferenceable !457, !invariant.group !1168
  %28 = getelementptr inbounds double, double* %27, i64 %"iv3'ac.0"
  %29 = load double, double* %28, align 8, !tbaa !75, !invariant.group !1169
  %m0diffe86 = fmul fast double %23, %29
  %"data7'ipg_unwrap88" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"rhs'", i64 0, i32 2
  %"'ipl_unwrap89" = load double*, double** %"data7'ipg_unwrap88", align 8, !tbaa !137, !alias.scope !1151, !noalias !1148, !invariant.group !1161
  %iv.next4_unwrap = add nuw nsw i64 %"iv3'ac.0", 1
  %nrows8_unwrap90 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 0
  %_unwrap91 = load i32, i32* %nrows8_unwrap90, align 8, !tbaa !138, !alias.scope !1148, !noalias !1151, !invariant.group !1162
  %_unwrap92 = sext i32 %_unwrap91 to i64
  %_unwrap93 = mul nsw i64 %"iv1'ac.1", %_unwrap92
  %_unwrap94 = add nsw i64 %iv.next4_unwrap, %_unwrap93
  %"arrayidx35'ipg_unwrap" = getelementptr inbounds double, double* %"'ipl_unwrap89", i64 %_unwrap94
  %30 = load double, double* %"arrayidx35'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1163, !noalias !1166
  %31 = fadd fast double %30, %m0diffe86
  store double %31, double* %"arrayidx35'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1163, !noalias !1166
  %32 = icmp eq i64 %"iv3'ac.0", 0
  %33 = select fast i1 %32, double 0.000000e+00, double %23
  %34 = fadd fast double %"mul13'de.2", %23
  %35 = select fast i1 %32, double %34, double %"mul13'de.2"
  br i1 %32, label %invertfor.body23.preheader, label %incinvertfor.body23

incinvertfor.body23:                              ; preds = %invertfor.body23
  %36 = add nsw i64 %"iv3'ac.0", -1
  br label %invertfor.body23

mergeinvertfor.body23_for.inc44.loopexit:         ; preds = %invertfor.inc44
  %wide.trip.count_unwrap117 = zext i32 %38 to i64
  %_unwrap118 = add nsw i64 %wide.trip.count_unwrap117, -2
  br label %invertfor.body23

invertfor.inc44:                                  ; preds = %mergeinvertfor.body5_for.inc47.loopexit, %invertfor.body5
  %"add43'de.3" = phi double [ %"add43'de.4", %mergeinvertfor.body5_for.inc47.loopexit ], [ %"add43'de.1", %invertfor.body5 ]
  %"iv1'ac.1.in" = phi i64 [ %wide.trip.count96_unwrap125, %mergeinvertfor.body5_for.inc47.loopexit ], [ %"iv1'ac.1", %invertfor.body5 ]
  %"iv1'ac.1" = add nsw i64 %"iv1'ac.1.in", -1
  %37 = getelementptr inbounds i32, i32* %1, i64 %"iv'ac.0"
  %38 = load i32, i32* %37, align 4, !tbaa !139, !alias.scope !1170, !noalias !1173, !invariant.group !1175
  %cmp2281_unwrap = icmp sgt i32 %38, 1
  br i1 %cmp2281_unwrap, label %mergeinvertfor.body23_for.inc44.loopexit, label %invertfor.body5

mergeinvertfor.body5_for.inc47.loopexit:          ; preds = %invertfor.inc47
  %wide.trip.count96_unwrap125 = zext i32 %5 to i64
  br label %invertfor.inc44

invertfor.inc47:                                  ; preds = %invertfor.cond2.preheader, %for.cond2.preheader.lr.ph
  %"add43'de.4" = phi double [ 0.000000e+00, %for.cond2.preheader.lr.ph ], [ %"add43'de.0", %invertfor.cond2.preheader ]
  %"iv'ac.0.in" = phi i64 [ %wide.trip.count100_unwrap127, %for.cond2.preheader.lr.ph ], [ %"iv'ac.0", %invertfor.cond2.preheader ]
  %"iv'ac.0" = add nsw i64 %"iv'ac.0.in", -1
  %cmp483_unwrap = icmp sgt i32 %5, 0
  br i1 %cmp483_unwrap, label %mergeinvertfor.body5_for.inc47.loopexit, label %invertfor.cond2.preheader
}

; Function Attrs: nounwind uwtable willreturn mustprogress
define internal void @diffemat_mult.10(%struct.Matrix* noalias nocapture readonly %lhs, %struct.Matrix* nocapture %"lhs'", %struct.Matrix* noalias nocapture readonly %rhs, %struct.Matrix* noalias nocapture %out, %struct.Matrix* nocapture %"out'", { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** } %tapeArg) local_unnamed_addr #16 {
entry:
  %0 = extractvalue { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** } %tapeArg, 2
  %1 = extractvalue { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** } %tapeArg, 3
  %2 = extractvalue { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** } %tapeArg, 10
  %3 = extractvalue { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** } %tapeArg, 8
  %4 = extractvalue { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** } %tapeArg, 9
  %5 = extractvalue { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** } %tapeArg, 4
  %6 = extractvalue { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** } %tapeArg, 5
  %mul3.i = mul nsw i32 %6, %5
  %cmp.not.i = extractvalue { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** } %tapeArg, 6
  %cmp8.i = icmp sgt i32 %mul3.i, 0
  %spec.select = select i1 %cmp8.i, i8 0, i8 1
  %_cache.0 = select i1 %cmp.not.i, i8 2, i8 %spec.select
  %cmp85 = icmp sgt i32 %5, 0
  br i1 %cmp85, label %for.cond2.preheader.lr.ph, label %invertresize.exit

for.cond2.preheader.lr.ph:                        ; preds = %entry
  %cmp483 = icmp sgt i32 %6, 0
  %7 = zext i32 %5 to i64
  %wide.trip.count96 = zext i32 %6 to i64
  %wide.trip.count100_unwrap127 = zext i32 %5 to i64
  br label %invertfor.inc47

invertentry:                                      ; preds = %invertresize.exit, %invertif.then9.i
  ret void

invertif.then9.i:                                 ; preds = %invertresize.exit
  %"call.i'mi_unwrap" = extractvalue { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** } %tapeArg, 0
  call void @free(i8* nonnull %"call.i'mi_unwrap")
  %call.i_unwrap = extractvalue { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** } %tapeArg, 1
  call void @free(i8* %call.i_unwrap)
  br label %invertentry

invertresize.exit:                                ; preds = %invertfor.cond2.preheader.lr.ph, %entry
  %cond = icmp eq i8 %_cache.0, 0
  br i1 %cond, label %invertif.then9.i, label %invertentry

invertfor.cond2.preheader.lr.ph:                  ; preds = %invertfor.cond2.preheader
  %8 = bitcast double** %0 to i8*
  tail call void @free(i8* nonnull %8)
  %9 = bitcast double** %1 to i8*
  tail call void @free(i8* nonnull %9)
  %10 = bitcast double** %2 to i8*
  tail call void @free(i8* nonnull %10)
  %11 = bitcast i32* %3 to i8*
  tail call void @free(i8* nonnull %11)
  %12 = bitcast double* %4 to i8*
  tail call void @free(i8* nonnull %12)
  br label %invertresize.exit

invertfor.cond2.preheader:                        ; preds = %invertfor.inc47, %invertfor.body5
  %"add43'de.0" = phi double [ %"add43'de.4", %invertfor.inc47 ], [ %"add43'de.1", %invertfor.body5 ]
  %13 = icmp eq i64 %"iv'ac.0", 0
  br i1 %13, label %invertfor.cond2.preheader.lr.ph, label %invertfor.inc47

invertfor.body5:                                  ; preds = %invertfor.inc44, %invertfor.body23.preheader
  %"add43'de.1" = phi double [ %.lcssa175, %invertfor.body23.preheader ], [ %"add43'de.3", %invertfor.inc44 ]
  %"mul13'de.1" = phi double [ %.lcssa, %invertfor.body23.preheader ], [ 0.000000e+00, %invertfor.inc44 ]
  %_unwrap19 = getelementptr inbounds double*, double** %0, i64 %"iv'ac.0"
  %"'il_phi3_unwrap" = load double*, double** %_unwrap19, align 8, !invariant.group !1176
  %_unwrap21 = mul nuw nsw i64 %"iv1'ac.1", %wide.trip.count100_unwrap127
  %_unwrap22 = add nuw nsw i64 %_unwrap21, %"iv'ac.0"
  %"arrayidx19'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi3_unwrap", i64 %_unwrap22
  %14 = load double, double* %"arrayidx19'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1177, !noalias !1180
  store double 0.000000e+00, double* %"arrayidx19'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1177, !noalias !1180
  %15 = fadd fast double %"mul13'de.1", %14
  %16 = mul nuw nsw i64 %"iv'ac.0", %wide.trip.count96_unwrap125
  %17 = add nuw nsw i64 %"iv1'ac.1", %16
  %18 = getelementptr inbounds double, double* %4, i64 %17
  %19 = load double, double* %18, align 8, !tbaa !75, !invariant.group !1182
  %m1diffe = fmul fast double %15, %19
  %_unwrap37 = getelementptr inbounds double*, double** %1, i64 %"iv'ac.0"
  %"'il_phi1_unwrap" = load double*, double** %_unwrap37, align 8, !invariant.group !1183
  %"arrayidx'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi1_unwrap", i64 %"iv'ac.0"
  %20 = load double, double* %"arrayidx'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1184, !noalias !1187
  %21 = fadd fast double %20, %m1diffe
  store double %21, double* %"arrayidx'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1184, !noalias !1187
  %22 = icmp eq i64 %"iv1'ac.1", 0
  br i1 %22, label %invertfor.cond2.preheader, label %invertfor.inc44

invertfor.body23.preheader:                       ; preds = %invertfor.body23
  %.lcssa176 = phi double** [ %38, %invertfor.body23 ]
  %.lcssa175 = phi double [ %32, %invertfor.body23 ]
  %.lcssa = phi double [ %34, %invertfor.body23 ]
  %23 = bitcast double** %.lcssa176 to i8**
  %forfree141174 = load i8*, i8** %23, align 8, !dereferenceable !457
  tail call void @free(i8* nonnull %forfree141174)
  br label %invertfor.body5

invertfor.body23:                                 ; preds = %mergeinvertfor.body23_for.inc44.loopexit, %incinvertfor.body23
  %"add43'de.2" = phi double [ %"add43'de.3", %mergeinvertfor.body23_for.inc44.loopexit ], [ %32, %incinvertfor.body23 ]
  %"mul13'de.2" = phi double [ 0.000000e+00, %mergeinvertfor.body23_for.inc44.loopexit ], [ %34, %incinvertfor.body23 ]
  %"iv3'ac.0" = phi i64 [ %_unwrap118, %mergeinvertfor.body23_for.inc44.loopexit ], [ %35, %incinvertfor.body23 ]
  %_unwrap40 = getelementptr inbounds double*, double** %0, i64 %"iv'ac.0"
  %"'il_phi3_unwrap41" = load double*, double** %_unwrap40, align 8, !invariant.group !1176
  %_unwrap43 = mul nuw nsw i64 %"iv1'ac.1", %wide.trip.count100_unwrap127
  %_unwrap44 = add nuw nsw i64 %_unwrap43, %"iv'ac.0"
  %"arrayidx19'ipg_unwrap45" = getelementptr inbounds double, double* %"'il_phi3_unwrap41", i64 %_unwrap44
  %24 = load double, double* %"arrayidx19'ipg_unwrap45", align 8, !tbaa !75, !alias.scope !1177, !noalias !1180
  store double 0.000000e+00, double* %"arrayidx19'ipg_unwrap45", align 8, !tbaa !75, !alias.scope !1177, !noalias !1180
  %25 = fadd fast double %"add43'de.2", %24
  %26 = load double*, double** %38, align 8, !dereferenceable !457, !invariant.group !1189
  %27 = getelementptr inbounds double, double* %26, i64 %"iv3'ac.0"
  %28 = load double, double* %27, align 8, !tbaa !75, !invariant.group !1190
  %m1diffe89 = fmul fast double %25, %28
  %_unwrap93 = getelementptr inbounds double*, double** %1, i64 %"iv'ac.0"
  %"'il_phi1_unwrap94" = load double*, double** %_unwrap93, align 8, !invariant.group !1183
  %iv.next4_unwrap = add nuw nsw i64 %"iv3'ac.0", 1
  %_unwrap95 = mul nuw nsw i64 %iv.next4_unwrap, %wide.trip.count100_unwrap127
  %_unwrap96 = add nuw nsw i64 %_unwrap95, %"iv'ac.0"
  %"arrayidx29'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi1_unwrap94", i64 %_unwrap96
  %29 = load double, double* %"arrayidx29'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1184, !noalias !1187
  %30 = fadd fast double %29, %m1diffe89
  store double %30, double* %"arrayidx29'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1184, !noalias !1187
  %31 = icmp eq i64 %"iv3'ac.0", 0
  %32 = select fast i1 %31, double 0.000000e+00, double %25
  %33 = fadd fast double %"mul13'de.2", %25
  %34 = select fast i1 %31, double %33, double %"mul13'de.2"
  br i1 %31, label %invertfor.body23.preheader, label %incinvertfor.body23

incinvertfor.body23:                              ; preds = %invertfor.body23
  %35 = add nsw i64 %"iv3'ac.0", -1
  br label %invertfor.body23

mergeinvertfor.body23_for.inc44.loopexit:         ; preds = %invertfor.inc44
  %wide.trip.count_unwrap117 = zext i32 %40 to i64
  %_unwrap118 = add nsw i64 %wide.trip.count_unwrap117, -2
  %36 = mul nuw nsw i64 %"iv'ac.0", %wide.trip.count96_unwrap125
  %37 = add nuw nsw i64 %"iv1'ac.1", %36
  %38 = getelementptr inbounds double*, double** %2, i64 %37
  br label %invertfor.body23

invertfor.inc44:                                  ; preds = %invertfor.inc47.loopexit, %invertfor.body5
  %"add43'de.3" = phi double [ %"add43'de.4", %invertfor.inc47.loopexit ], [ %"add43'de.1", %invertfor.body5 ]
  %"iv1'ac.1.in" = phi i64 [ %wide.trip.count96_unwrap125, %invertfor.inc47.loopexit ], [ %"iv1'ac.1", %invertfor.body5 ]
  %"iv1'ac.1" = add nsw i64 %"iv1'ac.1.in", -1
  %39 = getelementptr inbounds i32, i32* %3, i64 %"iv'ac.0"
  %40 = load i32, i32* %39, align 4, !tbaa !139, !alias.scope !1191, !noalias !1194, !invariant.group !1196
  %cmp2281_unwrap = icmp sgt i32 %40, 1
  br i1 %cmp2281_unwrap, label %mergeinvertfor.body23_for.inc44.loopexit, label %invertfor.body5

invertfor.inc47.loopexit:                         ; preds = %invertfor.inc47
  %wide.trip.count96_unwrap125 = zext i32 %6 to i64
  br label %invertfor.inc44

invertfor.inc47:                                  ; preds = %invertfor.cond2.preheader, %for.cond2.preheader.lr.ph
  %"add43'de.4" = phi double [ 0.000000e+00, %for.cond2.preheader.lr.ph ], [ %"add43'de.0", %invertfor.cond2.preheader ]
  %"iv'ac.0.in" = phi i64 [ %wide.trip.count100_unwrap127, %for.cond2.preheader.lr.ph ], [ %"iv'ac.0", %invertfor.cond2.preheader ]
  %"iv'ac.0" = add nsw i64 %"iv'ac.0.in", -1
  %cmp483_unwrap = icmp sgt i32 %6, 0
  br i1 %cmp483_unwrap, label %invertfor.inc47.loopexit, label %invertfor.cond2.preheader
}

; Function Attrs: nounwind uwtable willreturn mustprogress
define internal void @diffemat_mult.11(%struct.Matrix* noalias nocapture readonly %lhs, %struct.Matrix* nocapture %"lhs'", %struct.Matrix* noalias nocapture readonly %rhs, %struct.Matrix* noalias nocapture %out, %struct.Matrix* nocapture %"out'", { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** } %tapeArg) local_unnamed_addr #16 {
entry:
  %0 = extractvalue { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** } %tapeArg, 2
  %1 = extractvalue { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** } %tapeArg, 3
  %2 = extractvalue { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** } %tapeArg, 9
  %3 = extractvalue { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** } %tapeArg, 7
  %4 = extractvalue { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** } %tapeArg, 8
  %5 = extractvalue { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** } %tapeArg, 4
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 1
  %6 = load i32, i32* %ncols, align 4, !tbaa !139, !alias.scope !1197, !noalias !1200, !invariant.group !1202
  %mul3.i = mul nsw i32 %6, %5
  %cmp.not.i = extractvalue { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** } %tapeArg, 5
  %cmp8.i = icmp sgt i32 %mul3.i, 0
  %spec.select = select i1 %cmp8.i, i8 0, i8 1
  %_cache.0 = select i1 %cmp.not.i, i8 2, i8 %spec.select
  %cmp85 = icmp sgt i32 %5, 0
  br i1 %cmp85, label %for.cond2.preheader.lr.ph, label %invertresize.exit

for.cond2.preheader.lr.ph:                        ; preds = %entry
  %cmp483 = icmp sgt i32 %6, 0
  %7 = zext i32 %5 to i64
  %wide.trip.count96 = zext i32 %6 to i64
  %wide.trip.count100_unwrap130 = zext i32 %5 to i64
  br label %invertfor.inc47

invertentry:                                      ; preds = %invertresize.exit, %invertif.then9.i
  ret void

invertif.then9.i:                                 ; preds = %invertresize.exit
  %"call.i'mi_unwrap" = extractvalue { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** } %tapeArg, 0
  call void @free(i8* nonnull %"call.i'mi_unwrap")
  %call.i_unwrap = extractvalue { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** } %tapeArg, 1
  call void @free(i8* %call.i_unwrap)
  br label %invertentry

invertresize.exit:                                ; preds = %invertfor.cond2.preheader.lr.ph, %entry
  %cond = icmp eq i8 %_cache.0, 0
  br i1 %cond, label %invertif.then9.i, label %invertentry

invertfor.cond2.preheader.lr.ph:                  ; preds = %invertfor.cond2.preheader
  %8 = bitcast double** %0 to i8*
  tail call void @free(i8* nonnull %8)
  %9 = bitcast double** %1 to i8*
  tail call void @free(i8* nonnull %9)
  %10 = bitcast double** %2 to i8*
  tail call void @free(i8* nonnull %10)
  %11 = bitcast i32* %3 to i8*
  tail call void @free(i8* nonnull %11)
  %12 = bitcast double* %4 to i8*
  tail call void @free(i8* nonnull %12)
  br label %invertresize.exit

invertfor.cond2.preheader:                        ; preds = %invertfor.inc47, %invertfor.body5
  %"add43'de.0" = phi double [ %"add43'de.4", %invertfor.inc47 ], [ %"add43'de.1", %invertfor.body5 ]
  %13 = icmp eq i64 %"iv'ac.0", 0
  br i1 %13, label %invertfor.cond2.preheader.lr.ph, label %invertfor.inc47

invertfor.body5:                                  ; preds = %invertfor.inc44, %invertfor.body23.preheader
  %"add43'de.1" = phi double [ %.lcssa175, %invertfor.body23.preheader ], [ %"add43'de.3", %invertfor.inc44 ]
  %"mul13'de.1" = phi double [ %.lcssa, %invertfor.body23.preheader ], [ 0.000000e+00, %invertfor.inc44 ]
  %_unwrap19 = getelementptr inbounds double*, double** %0, i64 %"iv'ac.0"
  %"'il_phi3_unwrap" = load double*, double** %_unwrap19, align 8, !invariant.group !1203
  %_unwrap21 = mul nuw nsw i64 %"iv1'ac.1", %wide.trip.count100_unwrap130
  %_unwrap22 = add nuw nsw i64 %_unwrap21, %"iv'ac.0"
  %"arrayidx19'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi3_unwrap", i64 %_unwrap22
  %14 = load double, double* %"arrayidx19'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1204, !noalias !1207
  store double 0.000000e+00, double* %"arrayidx19'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1204, !noalias !1207
  %15 = fadd fast double %"mul13'de.1", %14
  %_unwrap30 = load i32, i32* %ncols, align 4, !tbaa !139, !alias.scope !1197, !noalias !1200, !invariant.group !1202
  %wide.trip.count96_unwrap = zext i32 %_unwrap30 to i64
  %16 = mul nuw nsw i64 %"iv'ac.0", %wide.trip.count96_unwrap
  %17 = add nuw nsw i64 %"iv1'ac.1", %16
  %18 = getelementptr inbounds double, double* %4, i64 %17
  %19 = load double, double* %18, align 8, !tbaa !75, !invariant.group !1209
  %m1diffe = fmul fast double %15, %19
  %_unwrap37 = getelementptr inbounds double*, double** %1, i64 %"iv'ac.0"
  %"'il_phi1_unwrap" = load double*, double** %_unwrap37, align 8, !invariant.group !1210
  %"arrayidx'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi1_unwrap", i64 %"iv'ac.0"
  %20 = load double, double* %"arrayidx'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1211, !noalias !1214
  %21 = fadd fast double %20, %m1diffe
  store double %21, double* %"arrayidx'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1211, !noalias !1214
  %22 = icmp eq i64 %"iv1'ac.1", 0
  br i1 %22, label %invertfor.cond2.preheader, label %invertfor.inc44

invertfor.body23.preheader:                       ; preds = %invertfor.body23
  %.lcssa175 = phi double [ %35, %invertfor.body23 ]
  %.lcssa = phi double [ %37, %invertfor.body23 ]
  %_unwrap63 = load i32, i32* %ncols, align 4, !tbaa !139, !alias.scope !1197, !noalias !1200, !invariant.group !1202
  %wide.trip.count96_unwrap64 = zext i32 %_unwrap63 to i64
  %_unwrap141 = mul nuw nsw i64 %"iv'ac.0", %wide.trip.count96_unwrap64
  %_unwrap142 = add nuw nsw i64 %"iv1'ac.1", %_unwrap141
  %_unwrap143 = getelementptr inbounds double*, double** %2, i64 %_unwrap142
  %23 = bitcast double** %_unwrap143 to i8**
  %forfree144174 = load i8*, i8** %23, align 8, !dereferenceable !457
  tail call void @free(i8* nonnull %forfree144174)
  br label %invertfor.body5

invertfor.body23:                                 ; preds = %mergeinvertfor.body23_for.inc44.loopexit, %incinvertfor.body23
  %"add43'de.2" = phi double [ %"add43'de.3", %mergeinvertfor.body23_for.inc44.loopexit ], [ %35, %incinvertfor.body23 ]
  %"mul13'de.2" = phi double [ 0.000000e+00, %mergeinvertfor.body23_for.inc44.loopexit ], [ %37, %incinvertfor.body23 ]
  %"iv3'ac.0" = phi i64 [ %_unwrap121, %mergeinvertfor.body23_for.inc44.loopexit ], [ %38, %incinvertfor.body23 ]
  %_unwrap40 = getelementptr inbounds double*, double** %0, i64 %"iv'ac.0"
  %"'il_phi3_unwrap41" = load double*, double** %_unwrap40, align 8, !invariant.group !1203
  %_unwrap43 = mul nuw nsw i64 %"iv1'ac.1", %wide.trip.count100_unwrap130
  %_unwrap44 = add nuw nsw i64 %_unwrap43, %"iv'ac.0"
  %"arrayidx19'ipg_unwrap45" = getelementptr inbounds double, double* %"'il_phi3_unwrap41", i64 %_unwrap44
  %24 = load double, double* %"arrayidx19'ipg_unwrap45", align 8, !tbaa !75, !alias.scope !1204, !noalias !1207
  store double 0.000000e+00, double* %"arrayidx19'ipg_unwrap45", align 8, !tbaa !75, !alias.scope !1204, !noalias !1207
  %25 = fadd fast double %"add43'de.2", %24
  %_unwrap81 = load i32, i32* %ncols, align 4, !tbaa !139, !alias.scope !1197, !noalias !1200, !invariant.group !1202
  %wide.trip.count96_unwrap82 = zext i32 %_unwrap81 to i64
  %26 = mul nuw nsw i64 %"iv'ac.0", %wide.trip.count96_unwrap82
  %27 = add nuw nsw i64 %"iv1'ac.1", %26
  %28 = getelementptr inbounds double*, double** %2, i64 %27
  %29 = load double*, double** %28, align 8, !dereferenceable !457, !invariant.group !1216
  %30 = getelementptr inbounds double, double* %29, i64 %"iv3'ac.0"
  %31 = load double, double* %30, align 8, !tbaa !75, !invariant.group !1217
  %m1diffe92 = fmul fast double %25, %31
  %_unwrap96 = getelementptr inbounds double*, double** %1, i64 %"iv'ac.0"
  %"'il_phi1_unwrap97" = load double*, double** %_unwrap96, align 8, !invariant.group !1210
  %iv.next4_unwrap = add nuw nsw i64 %"iv3'ac.0", 1
  %_unwrap98 = mul nuw nsw i64 %iv.next4_unwrap, %wide.trip.count100_unwrap130
  %_unwrap99 = add nuw nsw i64 %_unwrap98, %"iv'ac.0"
  %"arrayidx29'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi1_unwrap97", i64 %_unwrap99
  %32 = load double, double* %"arrayidx29'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1211, !noalias !1214
  %33 = fadd fast double %32, %m1diffe92
  store double %33, double* %"arrayidx29'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1211, !noalias !1214
  %34 = icmp eq i64 %"iv3'ac.0", 0
  %35 = select fast i1 %34, double 0.000000e+00, double %25
  %36 = fadd fast double %"mul13'de.2", %25
  %37 = select fast i1 %34, double %36, double %"mul13'de.2"
  br i1 %34, label %invertfor.body23.preheader, label %incinvertfor.body23

incinvertfor.body23:                              ; preds = %invertfor.body23
  %38 = add nsw i64 %"iv3'ac.0", -1
  br label %invertfor.body23

mergeinvertfor.body23_for.inc44.loopexit:         ; preds = %invertfor.inc44
  %wide.trip.count_unwrap120 = zext i32 %40 to i64
  %_unwrap121 = add nsw i64 %wide.trip.count_unwrap120, -2
  br label %invertfor.body23

invertfor.inc44:                                  ; preds = %mergeinvertfor.body5_for.inc47.loopexit, %invertfor.body5
  %"add43'de.3" = phi double [ %"add43'de.4", %mergeinvertfor.body5_for.inc47.loopexit ], [ %"add43'de.1", %invertfor.body5 ]
  %"iv1'ac.1.in" = phi i64 [ %wide.trip.count96_unwrap128, %mergeinvertfor.body5_for.inc47.loopexit ], [ %"iv1'ac.1", %invertfor.body5 ]
  %"iv1'ac.1" = add nsw i64 %"iv1'ac.1.in", -1
  %39 = getelementptr inbounds i32, i32* %3, i64 %"iv'ac.0"
  %40 = load i32, i32* %39, align 4, !tbaa !139, !alias.scope !1218, !noalias !1221, !invariant.group !1223
  %cmp2281_unwrap = icmp sgt i32 %40, 1
  br i1 %cmp2281_unwrap, label %mergeinvertfor.body23_for.inc44.loopexit, label %invertfor.body5

mergeinvertfor.body5_for.inc47.loopexit:          ; preds = %invertfor.inc47
  %wide.trip.count96_unwrap128 = zext i32 %6 to i64
  br label %invertfor.inc44

invertfor.inc47:                                  ; preds = %invertfor.cond2.preheader, %for.cond2.preheader.lr.ph
  %"add43'de.4" = phi double [ 0.000000e+00, %for.cond2.preheader.lr.ph ], [ %"add43'de.0", %invertfor.cond2.preheader ]
  %"iv'ac.0.in" = phi i64 [ %wide.trip.count100_unwrap130, %for.cond2.preheader.lr.ph ], [ %"iv'ac.0", %invertfor.cond2.preheader ]
  %"iv'ac.0" = add nsw i64 %"iv'ac.0.in", -1
  %cmp483_unwrap = icmp sgt i32 %6, 0
  br i1 %cmp483_unwrap, label %mergeinvertfor.body5_for.inc47.loopexit, label %invertfor.cond2.preheader
}

; Function Attrs: nounwind uwtable willreturn mustprogress
define internal void @diffeapply_global_transform(%struct.Matrix* nocapture readonly %pose_params, %struct.Matrix* nocapture %"pose_params'", %struct.Matrix* nocapture readonly %positions, %struct.Matrix* nocapture %"positions'", { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* } %tapeArg) local_unnamed_addr #16 {
entry:
  %0 = extractvalue { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* } %tapeArg, 11
  %1 = extractvalue { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* } %tapeArg, 10
  %call.i = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #45
  %"call.i'mi" = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #45
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16) dereferenceable_or_null(16) %"call.i'mi", i8 0, i64 16, i1 false)
  %"'ipc" = bitcast i8* %"call.i'mi" to %struct.Matrix*
  %2 = bitcast i8* %call.i to %struct.Matrix*
  %"nrows1.i'ipc" = bitcast i8* %"call.i'mi" to i32*
  %nrows1.i = bitcast i8* %call.i to i32*
  store i32 3, i32* %"nrows1.i'ipc", align 8, !tbaa !138, !alias.scope !1224, !noalias !1227
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138, !alias.scope !1227, !noalias !1224
  %"ncols2.i'ipg" = getelementptr inbounds i8, i8* %"call.i'mi", i64 4
  %ncols2.i = getelementptr inbounds i8, i8* %call.i, i64 4
  %"'ipc9" = bitcast i8* %"ncols2.i'ipg" to i32*
  %3 = bitcast i8* %ncols2.i to i32*
  store i32 3, i32* %"'ipc9", align 4, !tbaa !139, !alias.scope !1224, !noalias !1227
  store i32 3, i32* %3, align 4, !tbaa !139, !alias.scope !1227, !noalias !1224
  %call4.i = extractvalue { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* } %tapeArg, 4
  %"call4.i'mi" = extractvalue { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* } %tapeArg, 3
  %"data.i'ipg" = getelementptr inbounds i8, i8* %"call.i'mi", i64 8
  %data.i = getelementptr inbounds i8, i8* %call.i, i64 8
  %"'ipc8" = bitcast i8* %"data.i'ipg" to i8**
  %4 = bitcast i8* %data.i to i8**
  store i8* %"call4.i'mi", i8** %"'ipc8", align 8, !tbaa !137, !alias.scope !1224, !noalias !1227
  store i8* %call4.i, i8** %4, align 8, !tbaa !137, !alias.scope !1227, !noalias !1224
  %"data'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"pose_params'", i64 0, i32 2
  %"'il_phi1" = extractvalue { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* } %tapeArg, 0
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 0
  %5 = extractvalue { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* } %tapeArg, 9
  %"'ipc10" = bitcast i8* %"call4.i'mi" to double*
  %6 = sext i32 %5 to i64
  %call.i81 = extractvalue { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* } %tapeArg, 7
  %"call.i81'mi" = extractvalue { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* } %tapeArg, 6
  %"'ipc29" = bitcast i8* %"call.i81'mi" to %struct.Matrix*
  %7 = bitcast i8* %call.i81 to %struct.Matrix*
  %tapeArg30 = extractvalue { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* } %tapeArg, 5
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 1
  %8 = load i32, i32* %ncols, align 4, !tbaa !139, !alias.scope !1229, !noalias !1232
  %cmp1789 = icmp sgt i32 %8, 0
  br i1 %cmp1789, label %for.cond19.preheader.lr.ph, label %invertfor.end14

for.cond19.preheader.lr.ph:                       ; preds = %entry
  %nrows20 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 0
  %9 = load i32, i32* %nrows20, align 8, !tbaa !138, !alias.scope !1229, !noalias !1232, !invariant.group !1234
  %cmp2187 = icmp sgt i32 %9, 0
  %wide.trip.count = zext i32 %9 to i64
  %10 = zext i32 %8 to i64
  %_unwrap58 = zext i32 %8 to i64
  br label %invertfor.inc45

invertentry:                                      ; preds = %invertfor.cond1.preheader
  %tapeArg7 = extractvalue { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* } %tapeArg, 1
  %11 = extractvalue { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* } %tapeArg, 8
  %"'il_phi" = extractvalue { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* } %tapeArg, 2
  call void @diffeangle_axis_to_rotation_matrix(double* %11, double* %"'il_phi", %struct.Matrix* nonnull %2, %struct.Matrix* nonnull %"'ipc", { double, double*, double*, double, double } %tapeArg7)
  call void @free(i8* nonnull %"call4.i'mi")
  call void @free(i8* %call4.i)
  call void @free(i8* nonnull %"call.i'mi")
  call void @free(i8* nonnull %call.i)
  %12 = bitcast double* %0 to i8*
  tail call void @free(i8* nonnull %12)
  %13 = bitcast double* %1 to i8*
  tail call void @free(i8* nonnull %13)
  ret void

invertfor.cond1.preheader:                        ; preds = %invertfor.body3
  %14 = icmp eq i64 %"iv'ac.0", 0
  br i1 %14, label %invertentry, label %incinvertfor.cond1.preheader

incinvertfor.cond1.preheader:                     ; preds = %invertfor.cond1.preheader
  %15 = add nsw i64 %"iv'ac.0", -1
  br label %invertfor.inc12

invertfor.body3:                                  ; preds = %invertfor.inc12, %incinvertfor.body3
  %"iv1'ac.0" = phi i64 [ 2, %invertfor.inc12 ], [ %24, %incinvertfor.body3 ]
  %_unwrap = mul nuw nsw i64 %"iv'ac.0", 3
  %_unwrap11 = add nuw nsw i64 %_unwrap, %"iv1'ac.0"
  %"arrayidx10'ipg_unwrap" = getelementptr inbounds double, double* %"'ipc10", i64 %_unwrap11
  %16 = load double, double* %"arrayidx10'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1235, !noalias !1238
  store double 0.000000e+00, double* %"arrayidx10'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1235, !noalias !1238
  %17 = getelementptr inbounds double, double* %1, i64 %_unwrap11
  %18 = load double, double* %17, align 8, !tbaa !75, !invariant.group !1240
  %m0diffe = fmul fast double %16, %18
  %19 = getelementptr inbounds double, double* %0, i64 %_unwrap11
  %20 = load double, double* %19, align 8, !tbaa !75, !invariant.group !1241
  %m1diffe = fmul fast double %16, %20
  store double %m0diffe, double* %"arrayidx10'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1235, !noalias !1238
  %_unwrap28 = add nsw i64 %"iv'ac.0", %6
  %"arrayidx'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi1", i64 %_unwrap28
  %21 = load double, double* %"arrayidx'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1242, !noalias !1245
  %22 = fadd fast double %21, %m1diffe
  store double %22, double* %"arrayidx'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1242, !noalias !1245
  %23 = icmp eq i64 %"iv1'ac.0", 0
  br i1 %23, label %invertfor.cond1.preheader, label %incinvertfor.body3

incinvertfor.body3:                               ; preds = %invertfor.body3
  %24 = add nsw i64 %"iv1'ac.0", -1
  br label %invertfor.body3

invertfor.inc12:                                  ; preds = %invertfor.end14, %incinvertfor.cond1.preheader
  %"iv'ac.0" = phi i64 [ 2, %invertfor.end14 ], [ %15, %incinvertfor.cond1.preheader ]
  br label %invertfor.body3

invertfor.end14:                                  ; preds = %invertfor.cond19.preheader, %entry
  call void @diffemat_mult.12(%struct.Matrix* nonnull %2, %struct.Matrix* nonnull %"'ipc", %struct.Matrix* %positions, %struct.Matrix* %"positions'", %struct.Matrix* %7, %struct.Matrix* %"'ipc29", { i8*, i8*, i1, i1, double*, double*, double*, double* } %tapeArg30)
  call void @free(i8* nonnull %"call.i81'mi")
  call void @free(i8* %call.i81)
  br label %invertfor.inc12

invertfor.cond19.preheader:                       ; preds = %invertfor.inc45, %invertfor.body22
  %25 = icmp eq i64 %"iv3'ac.0", 0
  br i1 %25, label %invertfor.end14, label %invertfor.inc45

invertfor.body22:                                 ; preds = %mergeinvertfor.body22_for.inc45.loopexit, %invertfor.body22
  %"iv5'ac.0.in" = phi i64 [ %wide.trip.count_unwrap, %mergeinvertfor.body22_for.inc45.loopexit ], [ %"iv5'ac.0", %invertfor.body22 ]
  %"iv5'ac.0" = add nsw i64 %"iv5'ac.0.in", -1
  %"data36'ipg_unwrap" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"positions'", i64 0, i32 2
  %"'ipl_unwrap" = load double*, double** %"data36'ipg_unwrap", align 8, !tbaa !137, !alias.scope !1232, !noalias !1229, !invariant.group !1247
  %_unwrap38 = load i32, i32* %nrows20_unwrap56, align 8, !tbaa !138, !alias.scope !1229, !noalias !1232, !invariant.group !1234
  %_unwrap39 = sext i32 %_unwrap38 to i64
  %_unwrap40 = mul nsw i64 %"iv3'ac.0", %_unwrap39
  %_unwrap41 = add nsw i64 %"iv5'ac.0", %_unwrap40
  %"arrayidx41'ipg_unwrap" = getelementptr inbounds double, double* %"'ipl_unwrap", i64 %_unwrap41
  %26 = load double, double* %"arrayidx41'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1248, !noalias !1251
  store double 0.000000e+00, double* %"arrayidx41'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1248, !noalias !1251
  %"'ipl33_unwrap" = load double*, double** %"data'ipg", align 8, !tbaa !137, !alias.scope !1253, !noalias !1256, !invariant.group !1258
  %_unwrap44 = load i32, i32* %nrows, align 8, !tbaa !138, !alias.scope !1256, !noalias !1253, !invariant.group !1259
  %mul31_unwrap = shl nsw i32 %_unwrap44, 1
  %_unwrap45 = sext i32 %mul31_unwrap to i64
  %_unwrap46 = add nsw i64 %"iv5'ac.0", %_unwrap45
  %"arrayidx34'ipg_unwrap" = getelementptr inbounds double, double* %"'ipl33_unwrap", i64 %_unwrap46
  %27 = load double, double* %"arrayidx34'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1260, !noalias !1263
  %28 = fadd fast double %27, %26
  store double %28, double* %"arrayidx34'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1260, !noalias !1263
  %"data23'ipg_unwrap" = getelementptr inbounds i8, i8* %"call.i81'mi", i64 8
  %"'ipc35_unwrap" = bitcast i8* %"data23'ipg_unwrap" to double**
  %"'ipl36_unwrap" = load double*, double** %"'ipc35_unwrap", align 8, !tbaa !137, !alias.scope !1265, !noalias !1268, !invariant.group !1270
  %nrows24_unwrap = bitcast i8* %call.i81 to i32*
  %_unwrap48 = load i32, i32* %nrows24_unwrap, align 8, !tbaa !138, !alias.scope !1268, !noalias !1265, !invariant.group !1271
  %_unwrap49 = sext i32 %_unwrap48 to i64
  %_unwrap50 = mul nsw i64 %"iv3'ac.0", %_unwrap49
  %_unwrap51 = add nsw i64 %"iv5'ac.0", %_unwrap50
  %"arrayidx28'ipg_unwrap" = getelementptr inbounds double, double* %"'ipl36_unwrap", i64 %_unwrap51
  %29 = load double, double* %"arrayidx28'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1272, !noalias !1275
  %30 = fadd fast double %29, %26
  store double %30, double* %"arrayidx28'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1272, !noalias !1275
  %31 = icmp eq i64 %"iv5'ac.0", 0
  br i1 %31, label %invertfor.cond19.preheader, label %invertfor.body22

mergeinvertfor.body22_for.inc45.loopexit:         ; preds = %invertfor.inc45
  %wide.trip.count_unwrap = zext i32 %_unwrap57 to i64
  br label %invertfor.body22

invertfor.inc45:                                  ; preds = %invertfor.cond19.preheader, %for.cond19.preheader.lr.ph
  %"iv3'ac.0.in" = phi i64 [ %_unwrap58, %for.cond19.preheader.lr.ph ], [ %"iv3'ac.0", %invertfor.cond19.preheader ]
  %"iv3'ac.0" = add nsw i64 %"iv3'ac.0.in", -1
  %nrows20_unwrap56 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 0
  %_unwrap57 = load i32, i32* %nrows20_unwrap56, align 8, !tbaa !138, !alias.scope !1229, !noalias !1232, !invariant.group !1234
  %cmp2187_unwrap = icmp sgt i32 %_unwrap57, 0
  br i1 %cmp2187_unwrap, label %mergeinvertfor.body22_for.inc45.loopexit, label %invertfor.cond19.preheader
}

; Function Attrs: nofree nounwind uwtable willreturn mustprogress
define internal void @diffeangle_axis_to_rotation_matrix(double* nocapture readonly %angle_axis, double* nocapture %"angle_axis'", %struct.Matrix* nocapture readonly %R, %struct.Matrix* nocapture %"R'", { double, double*, double*, double, double } %tapeArg) local_unnamed_addr #14 {
entry:
  %0 = extractvalue { double, double*, double*, double, double } %tapeArg, 2
  %1 = extractvalue { double, double*, double*, double, double } %tapeArg, 1
  %2 = extractvalue { double, double*, double*, double, double } %tapeArg, 0
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i, %entry
  %iv = phi i64 [ %iv.next, %for.body.i ], [ 0, %entry ]
  %iv.next = add nuw nsw i64 %iv, 1
  %3 = getelementptr inbounds double, double* %0, i64 %iv
  %add.i = load double, double* %3, align 8, !invariant.group !1277
  %exitcond.not.i = icmp eq i64 %iv, 1
  br i1 %exitcond.not.i, label %square_sum.exit, label %for.body.i, !llvm.loop !222

square_sum.exit:                                  ; preds = %for.body.i
  %add.i.lcssa = phi double [ %add.i, %for.body.i ]
  %4 = tail call fast double @llvm.sqrt.f64(double %add.i.lcssa) #46
  %cmp = fcmp fast olt double %4, 1.000000e-04
  br i1 %cmp, label %if.then, label %invertcleanup

if.then:                                          ; preds = %square_sum.exit
  %ncols.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %R, i64 0, i32 1
  %5 = load i32, i32* %ncols.i, align 4, !tbaa !139, !alias.scope !1278, !noalias !1281, !invariant.group !1283
  %cmp33.i = icmp sgt i32 %5, 0
  br i1 %cmp33.i, label %for.cond1.preheader.lr.ph.i, label %invertcleanup

for.cond1.preheader.lr.ph.i:                      ; preds = %if.then
  %nrows.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %R, i64 0, i32 0
  %6 = load i32, i32* %nrows.i, align 8, !tbaa !138, !alias.scope !1278, !noalias !1281, !invariant.group !1284
  %cmp230.i = icmp sgt i32 %6, 0
  %7 = zext i32 %6 to i64
  %8 = zext i32 %5 to i64
  br label %invertcleanup

invertentry:                                      ; preds = %invertfor.body.i
  %.lcssa = phi double [ %22, %invertfor.body.i ]
  %m0diffe = fmul fast double %.lcssa, %2
  %9 = fadd fast double %"'de.0", %m0diffe
  %10 = fadd fast double %9, %m0diffe
  %11 = load double, double* %"angle_axis'", align 8, !tbaa !75, !alias.scope !1285, !noalias !1288
  %12 = fadd fast double %11, %10
  store double %12, double* %"angle_axis'", align 8, !tbaa !75, !alias.scope !1285, !noalias !1288
  %13 = bitcast double* %0 to i8*
  tail call void @free(i8* nonnull %13)
  %14 = bitcast double* %1 to i8*
  tail call void @free(i8* nonnull %14)
  ret void

invertfor.body.i:                                 ; preds = %mergeinvertfor.body.i_square_sum.exit, %incinvertfor.body.i
  %"mul.i'de.0" = phi double [ 0.000000e+00, %mergeinvertfor.body.i_square_sum.exit ], [ %22, %incinvertfor.body.i ]
  %"iv'ac.0" = phi i64 [ 1, %mergeinvertfor.body.i_square_sum.exit ], [ %23, %incinvertfor.body.i ]
  %15 = getelementptr inbounds double, double* %1, i64 %"iv'ac.0"
  %16 = load double, double* %15, align 8, !tbaa !75, !invariant.group !1290
  %m0diffe7 = fmul fast double %27, %16
  %17 = fadd fast double %m0diffe7, %m0diffe7
  %iv.next_unwrap = add nuw nsw i64 %"iv'ac.0", 1
  %"arrayidx2.i'ipg_unwrap" = getelementptr inbounds double, double* %"angle_axis'", i64 %iv.next_unwrap
  %18 = load double, double* %"arrayidx2.i'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1285, !noalias !1288
  %19 = fadd fast double %18, %17
  store double %19, double* %"arrayidx2.i'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1285, !noalias !1288
  %20 = icmp eq i64 %"iv'ac.0", 0
  %21 = fadd fast double %"mul.i'de.0", %27
  %22 = select fast i1 %20, double %21, double %"mul.i'de.0"
  br i1 %20, label %invertentry, label %incinvertfor.body.i

incinvertfor.body.i:                              ; preds = %invertfor.body.i
  %23 = add nsw i64 %"iv'ac.0", -1
  br label %invertfor.body.i

mergeinvertfor.body.i_square_sum.exit:            ; preds = %staging, %invertif.end, %invertfor.cond1.preheader.i
  %"'de11.0" = phi double [ %phi.bo, %invertif.end ], [ 0.000000e+00, %staging ], [ 0.000000e+00, %invertfor.cond1.preheader.i ]
  %"'de.0" = phi double [ %d0diffe49, %invertif.end ], [ 0.000000e+00, %staging ], [ 0.000000e+00, %invertfor.cond1.preheader.i ]
  %24 = fcmp fast ueq double %add.i.lcssa, 0.000000e+00
  %25 = call fast double @llvm.sqrt.f64(double %add.i.lcssa)
  %26 = fdiv fast double %"'de11.0", %25
  %27 = select fast i1 %24, double 0.000000e+00, double %26
  br label %invertfor.body.i

invertfor.cond1.preheader.i:                      ; preds = %invertfor.inc12.i, %invertfor.body3.i
  %28 = icmp eq i64 %"iv1'ac.0", 0
  br i1 %28, label %mergeinvertfor.body.i_square_sum.exit, label %invertfor.inc12.i

invertfor.body3.i:                                ; preds = %mergeinvertfor.body3.i_for.inc12.i.loopexit, %invertfor.body3.i
  %"iv3'ac.0.in" = phi i64 [ %_unwrap20, %mergeinvertfor.body3.i_for.inc12.i.loopexit ], [ %"iv3'ac.0", %invertfor.body3.i ]
  %"iv3'ac.0" = add nsw i64 %"iv3'ac.0.in", -1
  %"data6.i'ipg_unwrap" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"R'", i64 0, i32 2
  %"'il_phi_unwrap" = load double*, double** %"data6.i'ipg_unwrap", align 8, !tbaa !137, !alias.scope !1281, !noalias !1278
  %cmp4.i_unwrap = icmp eq i64 %"iv1'ac.0.in", %"iv3'ac.0.in"
  %_unwrap = load i32, i32* %nrows.i_unwrap22, align 8, !tbaa !138, !alias.scope !1278, !noalias !1281, !invariant.group !1284
  %_unwrap12 = sext i32 %_unwrap to i64
  %_unwrap13 = mul nsw i64 %"iv1'ac.0", %_unwrap12
  %.sink178_unwrap.v = select i1 %cmp4.i_unwrap, i64 %"iv1'ac.0", i64 %"iv3'ac.0"
  %.sink178_unwrap = add nsw i64 %.sink178_unwrap.v, %_unwrap13
  %"arrayidx11.i'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi_unwrap", i64 %.sink178_unwrap
  store double 0.000000e+00, double* %"arrayidx11.i'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1291, !noalias !1294
  %29 = icmp eq i64 %"iv3'ac.0", 0
  br i1 %29, label %invertfor.cond1.preheader.i, label %invertfor.body3.i

mergeinvertfor.body3.i_for.inc12.i.loopexit:      ; preds = %invertfor.inc12.i
  %_unwrap20 = zext i32 %_unwrap23 to i64
  br label %invertfor.body3.i

invertfor.inc12.i:                                ; preds = %mergeinvertfor.cond1.preheader.i_cleanup.loopexit, %invertfor.cond1.preheader.i
  %"iv1'ac.0.in" = phi i64 [ %_unwrap51, %mergeinvertfor.cond1.preheader.i_cleanup.loopexit ], [ %"iv1'ac.0", %invertfor.cond1.preheader.i ]
  %"iv1'ac.0" = add nsw i64 %"iv1'ac.0.in", -1
  %nrows.i_unwrap22 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %R, i64 0, i32 0
  %_unwrap23 = load i32, i32* %nrows.i_unwrap22, align 8, !tbaa !138, !alias.scope !1278, !noalias !1281, !invariant.group !1284
  %cmp230.i_unwrap = icmp sgt i32 %_unwrap23, 0
  br i1 %cmp230.i_unwrap, label %mergeinvertfor.body3.i_for.inc12.i.loopexit, label %invertfor.cond1.preheader.i

invertif.end:                                     ; preds = %invertcleanup
  %"data'ipg_unwrap" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"R'", i64 0, i32 2
  %"'il_phi1_unwrap" = load double*, double** %"data'ipg_unwrap", align 8, !tbaa !137, !alias.scope !1281, !noalias !1278
  %nrows_unwrap = getelementptr inbounds %struct.Matrix, %struct.Matrix* %R, i64 0, i32 0
  %_unwrap24 = load i32, i32* %nrows_unwrap, align 8, !tbaa !138, !alias.scope !1278, !noalias !1281, !invariant.group !1296
  %mul28_unwrap = shl nsw i32 %_unwrap24, 1
  %add95_unwrap = add nsw i32 %mul28_unwrap, 2
  %idxprom96_unwrap = sext i32 %add95_unwrap to i64
  %"arrayidx97'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi1_unwrap", i64 %idxprom96_unwrap
  %30 = load double, double* %"arrayidx97'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1297, !noalias !1300
  store double 0.000000e+00, double* %"arrayidx97'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1297, !noalias !1300
  %31 = tail call fast double @llvm.cos.f64(double %4) #46
  %_unwrap68 = extractvalue { double, double*, double*, double, double } %tapeArg, 4
  %div4_unwrap = fdiv fast double %_unwrap68, %4
  %mul87_unwrap = fmul fast double %div4_unwrap, %div4_unwrap
  %sub89_unwrap = fsub fast double 1.000000e+00, %mul87_unwrap
  %m1diffe26 = fmul fast double %30, %sub89_unwrap
  %32 = fmul fast double %30, %31
  %33 = fsub fast double %30, %32
  %m0diffediv4 = fmul fast double %33, %div4_unwrap
  %34 = fadd fast double %m0diffediv4, %m0diffediv4
  %add84_unwrap = add nsw i32 %_unwrap24, 2
  %idxprom85_unwrap = sext i32 %add84_unwrap to i64
  %"arrayidx86'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi1_unwrap", i64 %idxprom85_unwrap
  %35 = load double, double* %"arrayidx86'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1297, !noalias !1300
  store double 0.000000e+00, double* %"arrayidx86'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1297, !noalias !1300
  %"arrayidx75'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi1_unwrap", i64 2
  %36 = load double, double* %"arrayidx75'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1297, !noalias !1300
  store double 0.000000e+00, double* %"arrayidx75'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1297, !noalias !1300
  %add62_unwrap = or i32 %mul28_unwrap, 1
  %idxprom63_unwrap = sext i32 %add62_unwrap to i64
  %"arrayidx64'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi1_unwrap", i64 %idxprom63_unwrap
  %37 = load double, double* %"arrayidx64'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1297, !noalias !1300
  store double 0.000000e+00, double* %"arrayidx64'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1297, !noalias !1300
  %38 = fadd fast double %35, %37
  %39 = fsub fast double %35, %37
  %40 = tail call fast double @llvm.sin.f64(double %4) #46
  %m0diffediv = fmul fast double %39, %40
  %div_unwrap = fdiv fast double %2, %4
  %m1diffe28 = fmul fast double %39, %div_unwrap
  %m0diffemul54 = fmul fast double %38, %div4_unwrap
  %_unwrap67 = extractvalue { double, double*, double*, double, double } %tapeArg, 3
  %div2_unwrap = fdiv fast double %_unwrap67, %4
  %sub11_unwrap = fsub fast double 1.000000e+00, %31
  %mul54_unwrap = fmul fast double %div2_unwrap, %sub11_unwrap
  %m1diffediv431 = fmul fast double %38, %mul54_unwrap
  %41 = fadd fast double %34, %m1diffediv431
  %m0diffediv2 = fmul fast double %m0diffemul54, %sub11_unwrap
  %m1diffesub11 = fmul fast double %m0diffemul54, %div2_unwrap
  %add51_unwrap = add nsw i32 %_unwrap24, 1
  %idxprom52_unwrap = sext i32 %add51_unwrap to i64
  %"arrayidx53'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi1_unwrap", i64 %idxprom52_unwrap
  %42 = load double, double* %"arrayidx53'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1297, !noalias !1300
  store double 0.000000e+00, double* %"arrayidx53'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1297, !noalias !1300
  %mul43_unwrap = fmul fast double %div2_unwrap, %div2_unwrap
  %sub45_unwrap = fsub fast double 1.000000e+00, %mul43_unwrap
  %m1diffe32 = fmul fast double %42, %sub45_unwrap
  %43 = fadd fast double %m1diffe26, %m1diffe32
  %44 = fmul fast double %42, %31
  %45 = fsub fast double %42, %44
  %m0diffediv233 = fmul fast double %45, %div2_unwrap
  %46 = fadd fast double %m0diffediv2, %m0diffediv233
  %47 = fadd fast double %46, %m0diffediv233
  %"arrayidx42'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi1_unwrap", i64 1
  %48 = load double, double* %"arrayidx42'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1297, !noalias !1300
  store double 0.000000e+00, double* %"arrayidx42'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1297, !noalias !1300
  %idxprom30_unwrap = sext i32 %mul28_unwrap to i64
  %"arrayidx31'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi1_unwrap", i64 %idxprom30_unwrap
  %49 = load double, double* %"arrayidx31'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1297, !noalias !1300
  store double 0.000000e+00, double* %"arrayidx31'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1297, !noalias !1300
  %50 = fadd fast double %36, %49
  %51 = fsub fast double %49, %36
  %m0diffediv234 = fmul fast double %51, %40
  %m1diffe35 = fmul fast double %51, %div2_unwrap
  %52 = fadd fast double %47, %m0diffediv234
  %53 = fadd fast double %m1diffe28, %m1diffe35
  %m0diffemul10 = fmul fast double %50, %div4_unwrap
  %mul10_unwrap = fmul fast double %sub11_unwrap, %div_unwrap
  %m1diffediv436 = fmul fast double %50, %mul10_unwrap
  %54 = fadd fast double %41, %m1diffediv436
  %idxprom19_unwrap = sext i32 %_unwrap24 to i64
  %"arrayidx20'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi1_unwrap", i64 %idxprom19_unwrap
  %55 = load double, double* %"arrayidx20'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1297, !noalias !1300
  store double 0.000000e+00, double* %"arrayidx20'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1297, !noalias !1300
  %56 = fadd fast double %48, %55
  %57 = fsub fast double %48, %55
  %m0diffediv437 = fmul fast double %57, %40
  %m1diffe38 = fmul fast double %57, %div4_unwrap
  %58 = fadd fast double %54, %m0diffediv437
  %59 = fadd fast double %53, %m1diffe38
  %m0diffemul1039 = fmul fast double %56, %div2_unwrap
  %m1diffediv240 = fmul fast double %56, %mul10_unwrap
  %60 = fadd fast double %m0diffemul10, %m0diffemul1039
  %61 = fadd fast double %52, %m1diffediv240
  %m0diffesub11 = fmul fast double %60, %div_unwrap
  %m1diffediv = fmul fast double %60, %sub11_unwrap
  %62 = fadd fast double %m1diffesub11, %m0diffesub11
  %63 = fadd fast double %m0diffediv, %m1diffediv
  %64 = fsub fast double %43, %62
  %65 = load double, double* %"'il_phi1_unwrap", align 8, !tbaa !75, !alias.scope !1297, !noalias !1300
  store double 0.000000e+00, double* %"'il_phi1_unwrap", align 8, !tbaa !75, !alias.scope !1297, !noalias !1300
  %mul_unwrap = fmul fast double %div_unwrap, %div_unwrap
  %sub_unwrap = fsub fast double 1.000000e+00, %mul_unwrap
  %m1diffe43 = fmul fast double %65, %sub_unwrap
  %66 = fadd fast double %64, %m1diffe43
  %67 = fmul fast double %65, %31
  %68 = fsub fast double %65, %67
  %m0diffediv44 = fmul fast double %68, %div_unwrap
  %69 = fadd fast double %63, %m0diffediv44
  %70 = fadd fast double %69, %m0diffediv44
  %71 = call fast double @llvm.sin.f64(double %4)
  %72 = call fast double @llvm.cos.f64(double %4)
  %73 = fmul fast double %59, %72
  %74 = fmul fast double %71, %66
  %d0diffe = fdiv fast double %58, %4
  %75 = fmul fast double %div4_unwrap, %d0diffe
  %76 = fadd fast double %74, %75
  %"arrayidx3'ipg_unwrap" = getelementptr inbounds double, double* %"angle_axis'", i64 2
  %77 = load double, double* %"arrayidx3'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1285, !noalias !1288
  %78 = fadd fast double %77, %d0diffe
  store double %78, double* %"arrayidx3'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1285, !noalias !1288
  %d0diffe47 = fdiv fast double %61, %4
  %79 = fmul fast double %div2_unwrap, %d0diffe47
  %80 = fadd fast double %76, %79
  %"arrayidx1'ipg_unwrap" = getelementptr inbounds double, double* %"angle_axis'", i64 1
  %81 = load double, double* %"arrayidx1'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1285, !noalias !1288
  %82 = fadd fast double %81, %d0diffe47
  store double %82, double* %"arrayidx1'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1285, !noalias !1288
  %d0diffe49 = fdiv fast double %70, %4
  %83 = fmul fast double %div_unwrap, %d0diffe49
  %84 = fadd fast double %80, %83
  %85 = fsub fast double %73, %84
  %phi.bo = fmul fast double %85, 5.000000e-01
  br label %mergeinvertfor.body.i_square_sum.exit

mergeinvertfor.cond1.preheader.i_cleanup.loopexit: ; preds = %staging
  %_unwrap51 = zext i32 %_unwrap54 to i64
  br label %invertfor.inc12.i

invertcleanup:                                    ; preds = %for.cond1.preheader.lr.ph.i, %if.then, %square_sum.exit
  %ncols.i_unwrap53 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %R, i64 0, i32 1
  %_unwrap54 = load i32, i32* %ncols.i_unwrap53, align 4, !tbaa !139, !alias.scope !1278, !noalias !1281, !invariant.group !1283
  br i1 %cmp, label %staging, label %invertif.end

staging:                                          ; preds = %invertcleanup
  %cmp33.i_unwrap = icmp sgt i32 %_unwrap54, 0
  br i1 %cmp33.i_unwrap, label %mergeinvertfor.cond1.preheader.i_cleanup.loopexit, label %mergeinvertfor.body.i_square_sum.exit
}

; Function Attrs: nounwind uwtable willreturn mustprogress
define internal void @diffemat_mult.12(%struct.Matrix* noalias nocapture readonly %lhs, %struct.Matrix* nocapture %"lhs'", %struct.Matrix* noalias nocapture readonly %rhs, %struct.Matrix* nocapture %"rhs'", %struct.Matrix* noalias nocapture %out, %struct.Matrix* nocapture %"out'", { i8*, i8*, i1, i1, double*, double*, double*, double* } %tapeArg) local_unnamed_addr #16 {
entry:
  %0 = extractvalue { i8*, i8*, i1, i1, double*, double*, double*, double* } %tapeArg, 7
  %1 = extractvalue { i8*, i8*, i1, i1, double*, double*, double*, double* } %tapeArg, 4
  %2 = extractvalue { i8*, i8*, i1, i1, double*, double*, double*, double* } %tapeArg, 5
  %3 = extractvalue { i8*, i8*, i1, i1, double*, double*, double*, double* } %tapeArg, 6
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 0
  %4 = load i32, i32* %nrows, align 8, !tbaa !138, !alias.scope !1302, !noalias !1305, !invariant.group !1307
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 1
  %5 = load i32, i32* %ncols, align 4, !tbaa !139, !alias.scope !1308, !noalias !1311, !invariant.group !1313
  %mul3.i = mul nsw i32 %5, %4
  %cmp.not.i = extractvalue { i8*, i8*, i1, i1, double*, double*, double*, double* } %tapeArg, 2
  %cmp8.i = icmp sgt i32 %mul3.i, 0
  %spec.select = select i1 %cmp8.i, i8 0, i8 2
  %_cache.0 = select i1 %cmp.not.i, i8 1, i8 %spec.select
  %cmp85 = icmp sgt i32 %4, 0
  br i1 %cmp85, label %for.cond2.preheader.lr.ph, label %invertresize.exit

for.cond2.preheader.lr.ph:                        ; preds = %entry
  %cmp483 = icmp sgt i32 %5, 0
  %ncols21 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 1
  %6 = zext i32 %4 to i64
  %wide.trip.count96 = zext i32 %5 to i64
  %wide.trip.count100_unwrap115 = zext i32 %4 to i64
  br label %invertfor.inc47

invertentry:                                      ; preds = %invertresize.exit, %invertif.then9.i
  ret void

invertif.then9.i:                                 ; preds = %invertresize.exit
  %"call.i'mi_unwrap" = extractvalue { i8*, i8*, i1, i1, double*, double*, double*, double* } %tapeArg, 0
  call void @free(i8* nonnull %"call.i'mi_unwrap")
  %call.i_unwrap = extractvalue { i8*, i8*, i1, i1, double*, double*, double*, double* } %tapeArg, 1
  call void @free(i8* %call.i_unwrap)
  br label %invertentry

invertresize.exit:                                ; preds = %invertfor.cond2.preheader.lr.ph, %entry
  %cond = icmp eq i8 %_cache.0, 0
  br i1 %cond, label %invertif.then9.i, label %invertentry

invertfor.cond2.preheader.lr.ph:                  ; preds = %invertfor.cond2.preheader
  %7 = bitcast double* %0 to i8*
  tail call void @free(i8* nonnull %7)
  %8 = bitcast double* %1 to i8*
  tail call void @free(i8* nonnull %8)
  %9 = bitcast double* %2 to i8*
  tail call void @free(i8* nonnull %9)
  %10 = bitcast double* %3 to i8*
  tail call void @free(i8* nonnull %10)
  br label %invertresize.exit

invertfor.cond2.preheader:                        ; preds = %invertfor.inc47, %invertfor.body5
  %"add43'de.0" = phi double [ %"add43'de.4", %invertfor.inc47 ], [ %"add43'de.1", %invertfor.body5 ]
  %11 = icmp eq i64 %"iv'ac.0", 0
  br i1 %11, label %invertfor.cond2.preheader.lr.ph, label %invertfor.inc47

invertfor.body5:                                  ; preds = %invertfor.inc44, %invertfor.body23
  %"add43'de.1" = phi double [ %"add43'de.3", %invertfor.inc44 ], [ %42, %invertfor.body23 ]
  %"mul13'de.1" = phi double [ 0.000000e+00, %invertfor.inc44 ], [ %44, %invertfor.body23 ]
  %"data14'ipg_unwrap" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 2
  %"'ipl_unwrap" = load double*, double** %"data14'ipg_unwrap", align 8, !tbaa !137, !alias.scope !1314, !noalias !1317, !invariant.group !1319
  %_unwrap13 = mul nuw nsw i64 %"iv1'ac.1", %wide.trip.count100_unwrap115
  %_unwrap14 = add nuw nsw i64 %_unwrap13, %"iv'ac.0"
  %"arrayidx19'ipg_unwrap" = getelementptr inbounds double, double* %"'ipl_unwrap", i64 %_unwrap14
  %12 = load double, double* %"arrayidx19'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1320, !noalias !1323
  store double 0.000000e+00, double* %"arrayidx19'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1320, !noalias !1323
  %13 = fadd fast double %"mul13'de.1", %12
  %_unwrap22 = load i32, i32* %ncols, align 4, !tbaa !139, !alias.scope !1308, !noalias !1311, !invariant.group !1313
  %wide.trip.count96_unwrap = zext i32 %_unwrap22 to i64
  %14 = mul nuw nsw i64 %"iv'ac.0", %wide.trip.count96_unwrap
  %15 = add nuw nsw i64 %"iv1'ac.1", %14
  %16 = getelementptr inbounds double, double* %1, i64 %15
  %17 = load double, double* %16, align 8, !tbaa !75, !invariant.group !1325
  %m0diffe = fmul fast double %13, %17
  %18 = getelementptr inbounds double, double* %2, i64 %15
  %19 = load double, double* %18, align 8, !tbaa !75, !invariant.group !1326
  %m1diffe = fmul fast double %13, %19
  %"data7'ipg_unwrap" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"rhs'", i64 0, i32 2
  %"'ipl9_unwrap" = load double*, double** %"data7'ipg_unwrap", align 8, !tbaa !137, !alias.scope !1311, !noalias !1308, !invariant.group !1327
  %nrows8_unwrap = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 0
  %_unwrap42 = load i32, i32* %nrows8_unwrap, align 8, !tbaa !138, !alias.scope !1308, !noalias !1311, !invariant.group !1328
  %_unwrap43 = sext i32 %_unwrap42 to i64
  %_unwrap44 = mul nsw i64 %"iv1'ac.1", %_unwrap43
  %"arrayidx12'ipg_unwrap" = getelementptr inbounds double, double* %"'ipl9_unwrap", i64 %_unwrap44
  %20 = load double, double* %"arrayidx12'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1329, !noalias !1332
  %21 = fadd fast double %20, %m0diffe
  store double %21, double* %"arrayidx12'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1329, !noalias !1332
  %"data'ipg_unwrap" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"lhs'", i64 0, i32 2
  %"'ipl11_unwrap" = load double*, double** %"data'ipg_unwrap", align 8, !tbaa !137, !alias.scope !1305, !noalias !1302, !invariant.group !1334
  %"arrayidx'ipg_unwrap" = getelementptr inbounds double, double* %"'ipl11_unwrap", i64 %"iv'ac.0"
  %22 = load double, double* %"arrayidx'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1335, !noalias !1338
  %23 = fadd fast double %22, %m1diffe
  store double %23, double* %"arrayidx'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1335, !noalias !1338
  %24 = icmp eq i64 %"iv1'ac.1", 0
  br i1 %24, label %invertfor.cond2.preheader, label %invertfor.inc44

invertfor.body23:                                 ; preds = %mergeinvertfor.body23_for.inc44.loopexit, %incinvertfor.body23
  %"add43'de.2" = phi double [ %"add43'de.3", %mergeinvertfor.body23_for.inc44.loopexit ], [ %42, %incinvertfor.body23 ]
  %"mul13'de.2" = phi double [ 0.000000e+00, %mergeinvertfor.body23_for.inc44.loopexit ], [ %44, %incinvertfor.body23 ]
  %"iv3'ac.2" = phi i64 [ %_unwrap110, %mergeinvertfor.body23_for.inc44.loopexit ], [ %45, %incinvertfor.body23 ]
  %"data14'ipg_unwrap45" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 2
  %"'ipl_unwrap46" = load double*, double** %"data14'ipg_unwrap45", align 8, !tbaa !137, !alias.scope !1314, !noalias !1317, !invariant.group !1319
  %_unwrap48 = mul nuw nsw i64 %"iv1'ac.1", %wide.trip.count100_unwrap115
  %_unwrap49 = add nuw nsw i64 %_unwrap48, %"iv'ac.0"
  %"arrayidx19'ipg_unwrap50" = getelementptr inbounds double, double* %"'ipl_unwrap46", i64 %_unwrap49
  %25 = load double, double* %"arrayidx19'ipg_unwrap50", align 8, !tbaa !75, !alias.scope !1320, !noalias !1323
  store double 0.000000e+00, double* %"arrayidx19'ipg_unwrap50", align 8, !tbaa !75, !alias.scope !1320, !noalias !1323
  %26 = fadd fast double %"add43'de.2", %25
  %_unwrap70 = load i32, i32* %ncols, align 4, !tbaa !139, !alias.scope !1308, !noalias !1311, !invariant.group !1313
  %wide.trip.count96_unwrap71 = zext i32 %_unwrap70 to i64
  %_unwrap52_unwrap = load i32, i32* %ncols21_unwrap111, align 4, !tbaa !139, !alias.scope !1302, !noalias !1305, !invariant.group !1340
  %wide.trip.count_unwrap_unwrap = zext i32 %_unwrap52_unwrap to i64
  %27 = add nsw i64 %wide.trip.count_unwrap_unwrap, -1
  %28 = mul nuw nsw i64 %27, %wide.trip.count96_unwrap71
  %29 = mul nuw nsw i64 %"iv1'ac.1", %27
  %30 = add nuw nsw i64 %"iv3'ac.2", %29
  %31 = mul nuw nsw i64 %"iv'ac.0", %28
  %32 = add nuw nsw i64 %30, %31
  %33 = getelementptr inbounds double, double* %3, i64 %32
  %34 = load double, double* %33, align 8, !tbaa !75, !invariant.group !1341
  %m0diffe76 = fmul fast double %26, %34
  %35 = getelementptr inbounds double, double* %0, i64 %32
  %36 = load double, double* %35, align 8, !tbaa !75, !invariant.group !1342
  %m1diffe91 = fmul fast double %26, %36
  %"data7'ipg_unwrap94" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"rhs'", i64 0, i32 2
  %"'ipl9_unwrap95" = load double*, double** %"data7'ipg_unwrap94", align 8, !tbaa !137, !alias.scope !1311, !noalias !1308, !invariant.group !1327
  %iv.next4_unwrap = add nuw nsw i64 %"iv3'ac.2", 1
  %nrows8_unwrap96 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 0
  %_unwrap97 = load i32, i32* %nrows8_unwrap96, align 8, !tbaa !138, !alias.scope !1308, !noalias !1311, !invariant.group !1328
  %_unwrap98 = sext i32 %_unwrap97 to i64
  %_unwrap99 = mul nsw i64 %"iv1'ac.1", %_unwrap98
  %_unwrap100 = add nsw i64 %iv.next4_unwrap, %_unwrap99
  %"arrayidx35'ipg_unwrap" = getelementptr inbounds double, double* %"'ipl9_unwrap95", i64 %_unwrap100
  %37 = load double, double* %"arrayidx35'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1329, !noalias !1332
  %38 = fadd fast double %37, %m0diffe76
  store double %38, double* %"arrayidx35'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1329, !noalias !1332
  %"data'ipg_unwrap101" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"lhs'", i64 0, i32 2
  %"'ipl11_unwrap102" = load double*, double** %"data'ipg_unwrap101", align 8, !tbaa !137, !alias.scope !1305, !noalias !1302, !invariant.group !1334
  %_unwrap103 = mul nuw nsw i64 %iv.next4_unwrap, %wide.trip.count100_unwrap115
  %_unwrap104 = add nuw nsw i64 %_unwrap103, %"iv'ac.0"
  %"arrayidx29'ipg_unwrap" = getelementptr inbounds double, double* %"'ipl11_unwrap102", i64 %_unwrap104
  %39 = load double, double* %"arrayidx29'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1335, !noalias !1338
  %40 = fadd fast double %39, %m1diffe91
  store double %40, double* %"arrayidx29'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1335, !noalias !1338
  %41 = icmp eq i64 %"iv3'ac.2", 0
  %42 = select fast i1 %41, double 0.000000e+00, double %26
  %43 = fadd fast double %"mul13'de.2", %26
  %44 = select fast i1 %41, double %43, double %"mul13'de.2"
  br i1 %41, label %invertfor.body5, label %incinvertfor.body23

incinvertfor.body23:                              ; preds = %invertfor.body23
  %45 = add nsw i64 %"iv3'ac.2", -1
  br label %invertfor.body23

mergeinvertfor.body23_for.inc44.loopexit:         ; preds = %invertfor.inc44
  %wide.trip.count_unwrap109 = zext i32 %_unwrap112 to i64
  %_unwrap110 = add nsw i64 %wide.trip.count_unwrap109, -2
  br label %invertfor.body23

invertfor.inc44:                                  ; preds = %mergeinvertfor.body5_for.inc47.loopexit, %invertfor.body5
  %"add43'de.3" = phi double [ %"add43'de.4", %mergeinvertfor.body5_for.inc47.loopexit ], [ %"add43'de.1", %invertfor.body5 ]
  %"iv1'ac.1.in" = phi i64 [ %wide.trip.count96_unwrap113, %mergeinvertfor.body5_for.inc47.loopexit ], [ %"iv1'ac.1", %invertfor.body5 ]
  %"iv1'ac.1" = add nsw i64 %"iv1'ac.1.in", -1
  %ncols21_unwrap111 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 1
  %_unwrap112 = load i32, i32* %ncols21_unwrap111, align 4, !tbaa !139, !alias.scope !1302, !noalias !1305, !invariant.group !1340
  %cmp2281_unwrap = icmp sgt i32 %_unwrap112, 1
  br i1 %cmp2281_unwrap, label %mergeinvertfor.body23_for.inc44.loopexit, label %invertfor.body5

mergeinvertfor.body5_for.inc47.loopexit:          ; preds = %invertfor.inc47
  %wide.trip.count96_unwrap113 = zext i32 %5 to i64
  br label %invertfor.inc44

invertfor.inc47:                                  ; preds = %invertfor.cond2.preheader, %for.cond2.preheader.lr.ph
  %"add43'de.4" = phi double [ 0.000000e+00, %for.cond2.preheader.lr.ph ], [ %"add43'de.0", %invertfor.cond2.preheader ]
  %"iv'ac.0.in" = phi i64 [ %wide.trip.count100_unwrap115, %for.cond2.preheader.lr.ph ], [ %"iv'ac.0", %invertfor.cond2.preheader ]
  %"iv'ac.0" = add nsw i64 %"iv'ac.0.in", -1
  %cmp483_unwrap = icmp sgt i32 %5, 0
  br i1 %cmp483_unwrap, label %mergeinvertfor.body5_for.inc47.loopexit, label %invertfor.cond2.preheader
}

; Function Attrs: nounwind uwtable willreturn mustprogress
define internal { i8*, i8*, double*, i32, i1, double*, i32*, i32* } @augmented_to_pose_params(i32 %count, double* noalias nocapture readonly %theta, double* nocapture %"theta'", i8** noalias nocapture readnone %bone_names, %struct.Matrix* noalias nocapture %pose_params, %struct.Matrix* nocapture %"pose_params'") local_unnamed_addr #16 {
entry:
  %0 = alloca { i8*, i8*, double*, i32, i1, double*, i32*, i32* }, align 8
  %theta99 = bitcast double* %theta to i8*
  %add = add nsw i32 %count, 3
  %"nrows1.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"pose_params'", i64 0, i32 0
  %nrows1.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 0
  %1 = load i32, i32* %nrows1.i, align 8, !tbaa !138, !alias.scope !1343, !noalias !1346
  %"ncols2.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"pose_params'", i64 0, i32 1
  %ncols2.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 1
  %2 = load i32, i32* %ncols2.i, align 4, !tbaa !139, !alias.scope !1343, !noalias !1346
  %mul.i = mul nsw i32 %2, %1
  %3 = getelementptr inbounds { i8*, i8*, double*, i32, i1, double*, i32*, i32* }, { i8*, i8*, double*, i32, i1, double*, i32*, i32* }* %0, i64 0, i32 3
  store i32 %mul.i, i32* %3, align 8
  %mul3.i = mul i32 %add, 3
  %cmp.not.i = icmp eq i32 %mul.i, %mul3.i
  br i1 %cmp.not.i, label %resize.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %"data.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"pose_params'", i64 0, i32 2
  %data.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 2
  %4 = load double*, double** %data.i, align 8, !tbaa !137, !alias.scope !1343, !noalias !1346
  %cmp4.not.i = icmp eq double* %4, null
  %5 = getelementptr inbounds { i8*, i8*, double*, i32, i1, double*, i32*, i32* }, { i8*, i8*, double*, i32, i1, double*, i32*, i32* }* %0, i64 0, i32 4
  store i1 %cmp4.not.i, i1* %5, align 4
  %cmp8.i = icmp sgt i32 %mul3.i, 0
  br i1 %cmp8.i, label %resize.exit.thread, label %resize.exit.thread87

resize.exit.thread:                               ; preds = %if.then.i
  %conv31.i = zext i32 %mul3.i to i64
  %mul11.i = shl nuw nsw i64 %conv31.i, 3
  %call.i = tail call noalias i8* @malloc(i64 %mul11.i) #45
  %6 = getelementptr inbounds { i8*, i8*, double*, i32, i1, double*, i32*, i32* }, { i8*, i8*, double*, i32, i1, double*, i32*, i32* }* %0, i64 0, i32 1
  store i8* %call.i, i8** %6, align 8
  %"call.i'mi" = tail call noalias nonnull i8* @malloc(i64 %mul11.i) #45
  %7 = getelementptr inbounds { i8*, i8*, double*, i32, i1, double*, i32*, i32* }, { i8*, i8*, double*, i32, i1, double*, i32*, i32* }* %0, i64 0, i32 0
  store i8* %"call.i'mi", i8** %7, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %"call.i'mi", i8 0, i64 %mul11.i, i1 false)
  %"'ipc" = bitcast double** %"data.i'ipg" to i8**
  %8 = bitcast double** %data.i to i8**
  store i8* %"call.i'mi", i8** %"'ipc", align 8, !tbaa !137, !alias.scope !1346, !noalias !1343
  store i8* %call.i, i8** %8, align 8, !tbaa !137, !alias.scope !1343, !noalias !1346
  store i32 %add, i32* %"ncols2.i'ipg", align 4, !tbaa !139, !alias.scope !1346, !noalias !1343
  store i32 %add, i32* %ncols2.i, align 4, !tbaa !139, !alias.scope !1343, !noalias !1346
  store i32 3, i32* %"nrows1.i'ipg", align 8, !tbaa !138, !alias.scope !1346, !noalias !1343
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138, !alias.scope !1343, !noalias !1346
  %9 = bitcast i8* %call.i to double*
  br label %for.body.lr.ph.i

resize.exit.thread87:                             ; preds = %if.then.i
  store double* null, double** %"data.i'ipg", align 8, !tbaa !137, !alias.scope !1346, !noalias !1343
  store double* null, double** %data.i, align 8, !tbaa !137, !alias.scope !1343, !noalias !1346
  store i32 %add, i32* %"ncols2.i'ipg", align 4, !tbaa !139, !alias.scope !1346, !noalias !1343
  store i32 %add, i32* %ncols2.i, align 4, !tbaa !139, !alias.scope !1343, !noalias !1346
  store i32 3, i32* %"nrows1.i'ipg", align 8, !tbaa !138, !alias.scope !1346, !noalias !1343
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138, !alias.scope !1343, !noalias !1346
  br label %fill.exit

resize.exit:                                      ; preds = %entry
  store i32 %add, i32* %"ncols2.i'ipg", align 4, !tbaa !139, !alias.scope !1346, !noalias !1343
  store i32 %add, i32* %ncols2.i, align 4, !tbaa !139, !alias.scope !1343, !noalias !1346
  store i32 3, i32* %"nrows1.i'ipg", align 8, !tbaa !138, !alias.scope !1346, !noalias !1343
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138, !alias.scope !1343, !noalias !1346
  %cmp7.i = icmp sgt i32 %mul.i, 0
  %"data.i85.phi.trans.insert'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"pose_params'", i64 0, i32 2
  %data.i85.phi.trans.insert = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 2
  %".pre'ipl" = load double*, double** %"data.i85.phi.trans.insert'ipg", align 8, !tbaa !137, !alias.scope !1346, !noalias !1343
  %10 = getelementptr inbounds { i8*, i8*, double*, i32, i1, double*, i32*, i32* }, { i8*, i8*, double*, i32, i1, double*, i32*, i32* }* %0, i64 0, i32 2
  store double* %".pre'ipl", double** %10, align 8
  %.pre = load double*, double** %data.i85.phi.trans.insert, align 8, !tbaa !137, !alias.scope !1343, !noalias !1346
  %11 = getelementptr inbounds { i8*, i8*, double*, i32, i1, double*, i32*, i32* }, { i8*, i8*, double*, i32, i1, double*, i32*, i32* }* %0, i64 0, i32 5
  store double* %.pre, double** %11, align 8
  br i1 %cmp7.i, label %resize.exit.for.body.lr.ph.i_crit_edge, label %fill.exit

resize.exit.for.body.lr.ph.i_crit_edge:           ; preds = %resize.exit
  %.pre107 = zext i32 %mul3.i to i64
  %.pre108 = shl nuw nsw i64 %.pre107, 3
  br label %for.body.lr.ph.i

for.body.lr.ph.i:                                 ; preds = %resize.exit.for.body.lr.ph.i_crit_edge, %resize.exit.thread
  %.pre-phi = phi i64 [ %.pre108, %resize.exit.for.body.lr.ph.i_crit_edge ], [ %mul11.i, %resize.exit.thread ]
  %12 = phi double* [ %.pre, %resize.exit.for.body.lr.ph.i_crit_edge ], [ %9, %resize.exit.thread ]
  %13 = bitcast double* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 %.pre-phi, i1 false) #46
  br label %fill.exit

fill.exit:                                        ; preds = %for.body.lr.ph.i, %resize.exit, %resize.exit.thread87
  %14 = phi double* [ %12, %for.body.lr.ph.i ], [ null, %resize.exit.thread87 ], [ %.pre, %resize.exit ]
  %15 = bitcast double* %14 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %15, i8* nonnull align 8 dereferenceable(24) %theta99, i64 24, i1 false) #46
  br label %for.body

for.cond17.preheader:                             ; preds = %for.body
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 2
  %16 = load double*, double** %data, align 8, !tbaa !137, !alias.scope !1343, !noalias !1346
  %malloccall = tail call noalias nonnull dereferenceable(20) dereferenceable_or_null(20) i8* @malloc(i64 20)
  %i_pose_params.093_malloccache = bitcast i8* %malloccall to i32*
  %17 = getelementptr inbounds { i8*, i8*, double*, i32, i1, double*, i32*, i32* }, { i8*, i8*, double*, i32, i1, double*, i32*, i32* }* %0, i64 0, i32 6
  %18 = bitcast i32** %17 to i8**
  store i8* %malloccall, i8** %18, align 8
  %malloccall11 = tail call noalias nonnull dereferenceable(60) dereferenceable_or_null(60) i8* @malloc(i64 60)
  %i_theta.189_malloccache = bitcast i8* %malloccall11 to i32*
  %19 = getelementptr inbounds { i8*, i8*, double*, i32, i1, double*, i32*, i32* }, { i8*, i8*, double*, i32, i1, double*, i32*, i32* }* %0, i64 0, i32 7
  %20 = bitcast i32** %19 to i8**
  store i8* %malloccall11, i8** %20, align 8
  br label %for.cond20.preheader

for.body:                                         ; preds = %for.body, %fill.exit
  %iv = phi i64 [ %iv.next, %for.body ], [ 0, %fill.exit ]
  %iv.next = add nuw nsw i64 %iv, 1
  %21 = add nuw nsw i64 %iv, 3
  %arrayidx7 = getelementptr inbounds double, double* %14, i64 %21
  store double 1.000000e+00, double* %arrayidx7, align 8, !tbaa !75, !alias.scope !1348, !noalias !1351
  %arrayidx10 = getelementptr inbounds double, double* %theta, i64 %21
  %22 = load double, double* %arrayidx10, align 8, !tbaa !75, !alias.scope !1353, !noalias !1356
  %23 = add nuw nsw i64 %iv, 6
  %arrayidx16 = getelementptr inbounds double, double* %14, i64 %23
  store double %22, double* %arrayidx16, align 8, !tbaa !75, !alias.scope !1348, !noalias !1351
  %exitcond105.not = icmp eq i64 %iv.next, 3
  br i1 %exitcond105.not, label %for.cond17.preheader, label %for.body, !llvm.loop !229

for.cond20.preheader:                             ; preds = %for.end45, %for.cond17.preheader
  %iv1 = phi i64 [ %iv.next2, %for.end45 ], [ 0, %for.cond17.preheader ]
  %i_pose_params.093 = phi i32 [ %inc46, %for.end45 ], [ 5, %for.cond17.preheader ]
  %i_theta.092 = phi i32 [ %i_theta.2.lcssa, %for.end45 ], [ 6, %for.cond17.preheader ]
  %24 = getelementptr inbounds i32, i32* %i_pose_params.093_malloccache, i64 %iv1
  store i32 %i_pose_params.093, i32* %24, align 4, !invariant.group !1358
  %iv.next2 = add nuw nsw i64 %iv1, 1
  %25 = trunc i64 %iv1 to i32
  %26 = sext i32 %i_pose_params.093 to i64
  br label %for.body22

for.body22:                                       ; preds = %if.end, %for.cond20.preheader
  %iv3 = phi i64 [ %iv.next4, %if.end ], [ 0, %for.cond20.preheader ]
  %i_theta.189 = phi i32 [ %i_theta.2, %if.end ], [ %i_theta.092, %for.cond20.preheader ]
  %iv.next4 = add nuw nsw i64 %iv3, 1
  %27 = trunc i64 %iv3 to i32
  %28 = add i64 %iv3, %26
  %idxprom23 = sext i32 %i_theta.189 to i64
  %arrayidx24 = getelementptr inbounds double, double* %theta, i64 %idxprom23
  %29 = load double, double* %arrayidx24, align 8, !tbaa !75, !alias.scope !1353, !noalias !1356
  %30 = mul nsw i64 %28, 3
  %arrayidx30 = getelementptr inbounds double, double* %16, i64 %30
  store double %29, double* %arrayidx30, align 8, !tbaa !75, !alias.scope !1359, !noalias !1362
  %31 = mul nuw nsw i64 %iv1, 3
  %32 = add nuw nsw i64 %iv3, %31
  %33 = getelementptr inbounds i32, i32* %i_theta.189_malloccache, i64 %32
  store i32 %i_theta.189, i32* %33, align 4, !invariant.group !1364
  %inc31 = add nsw i32 %i_theta.189, 1
  %cmp32 = icmp eq i32 %27, 0
  br i1 %cmp32, label %if.then, label %if.end

if.then:                                          ; preds = %for.body22
  %idxprom33 = sext i32 %inc31 to i64
  %arrayidx34 = getelementptr inbounds double, double* %theta, i64 %idxprom33
  %34 = load double, double* %arrayidx34, align 8, !tbaa !75, !alias.scope !1353, !noalias !1356
  %35 = add nsw i64 %30, 1
  %arrayidx40 = getelementptr inbounds double, double* %16, i64 %35
  store double %34, double* %arrayidx40, align 8, !tbaa !75, !alias.scope !1359, !noalias !1362
  %inc41 = add nsw i32 %i_theta.189, 2
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body22
  %i_theta.2 = phi i32 [ %inc41, %if.then ], [ %inc31, %for.body22 ]
  %36 = trunc i64 %28 to i32
  %37 = add nsw i32 %i_pose_params.093, 2
  %exitcond = icmp eq i32 %37, %36
  br i1 %exitcond, label %for.end45, label %for.body22, !llvm.loop !230

for.end45:                                        ; preds = %if.end
  %i_theta.2.lcssa = phi i32 [ %i_theta.2, %if.end ]
  %.lcssa = phi i64 [ %28, %if.end ]
  %38 = trunc i64 %.lcssa to i32
  %inc46 = add nsw i32 %38, 2
  %exitcond98.not = icmp eq i32 %25, 4
  br i1 %exitcond98.not, label %for.end49, label %for.cond20.preheader, !llvm.loop !231

for.end49:                                        ; preds = %for.end45
  %39 = load { i8*, i8*, double*, i32, i1, double*, i32*, i32* }, { i8*, i8*, double*, i32, i1, double*, i32*, i32* }* %0, align 8
  ret { i8*, i8*, double*, i32, i1, double*, i32*, i32* } %39
}

; Function Attrs: nounwind uwtable willreturn mustprogress
define internal void @diffeto_pose_params(i32 %count, double* noalias nocapture readonly %theta, double* nocapture %"theta'", i8** noalias nocapture readnone %bone_names, %struct.Matrix* noalias nocapture %pose_params, %struct.Matrix* nocapture %"pose_params'", { i8*, i8*, double*, i32, i1, double*, i32*, i32* } %tapeArg) local_unnamed_addr #16 {
entry:
  %0 = extractvalue { i8*, i8*, double*, i32, i1, double*, i32*, i32* } %tapeArg, 6
  %1 = extractvalue { i8*, i8*, double*, i32, i1, double*, i32*, i32* } %tapeArg, 7
  %mul.i = extractvalue { i8*, i8*, double*, i32, i1, double*, i32*, i32* } %tapeArg, 3
  %2 = mul i32 %count, 3
  %mul3.i = add i32 %2, 9
  %cmp.not.i = icmp eq i32 %mul.i, %mul3.i
  br i1 %cmp.not.i, label %resize.exit, label %if.end.i

if.end.i:                                         ; preds = %entry
  %cmp8.i = icmp sgt i32 %mul3.i, 0
  br i1 %cmp8.i, label %resize.exit.thread, label %for.cond17.preheader

resize.exit.thread:                               ; preds = %if.end.i
  %"call.i'mi" = extractvalue { i8*, i8*, double*, i32, i1, double*, i32*, i32* } %tapeArg, 0
  %"'ipc" = bitcast i8* %"call.i'mi" to double*
  br label %for.body.lr.ph.i

resize.exit:                                      ; preds = %entry
  %cmp7.i = icmp sgt i32 %mul.i, 0
  %".pre'il_phi" = extractvalue { i8*, i8*, double*, i32, i1, double*, i32*, i32* } %tapeArg, 2
  br i1 %cmp7.i, label %for.body.lr.ph.i, label %for.cond17.preheader

for.body.lr.ph.i:                                 ; preds = %resize.exit, %resize.exit.thread
  %3 = phi double* [ %"'ipc", %resize.exit.thread ], [ %".pre'il_phi", %resize.exit ]
  br label %for.cond17.preheader

for.cond17.preheader:                             ; preds = %for.body.lr.ph.i, %resize.exit, %if.end.i
  %_cache.0 = phi i8 [ 1, %for.body.lr.ph.i ], [ 0, %resize.exit ], [ 2, %if.end.i ]
  %4 = phi double* [ %3, %for.body.lr.ph.i ], [ %".pre'il_phi", %resize.exit ], [ null, %if.end.i ]
  %"data'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"pose_params'", i64 0, i32 2
  %"'ipl" = load double*, double** %"data'ipg", align 8, !tbaa !137, !alias.scope !1365, !noalias !1368
  br label %invertfor.end45

invertentry:                                      ; preds = %__enzyme_memcpyadd_doubleda8sa8.exit, %invertfor.body.lr.ph.i_phimerge, %invertresize.exit.thread
  ret void

invertresize.exit.thread:                         ; preds = %invertfor.body.lr.ph.i_phimerge
  %"call.i'mi_unwrap" = extractvalue { i8*, i8*, double*, i32, i1, double*, i32*, i32* } %tapeArg, 0
  call void @free(i8* nonnull %"call.i'mi_unwrap")
  %call.i_unwrap = extractvalue { i8*, i8*, double*, i32, i1, double*, i32*, i32* } %tapeArg, 1
  call void @free(i8* %call.i_unwrap)
  br label %invertentry

invertfor.body.lr.ph.i_phimerge:                  ; preds = %__enzyme_memcpyadd_doubleda8sa8.exit
  %.in = zext i32 %mul3.i to i64
  %5 = shl nuw nsw i64 %.in, 3
  %".pre'il_phi_unwrap" = extractvalue { i8*, i8*, double*, i32, i1, double*, i32*, i32* } %tapeArg, 2
  %"call.i'mi_unwrap9" = extractvalue { i8*, i8*, double*, i32, i1, double*, i32*, i32* } %tapeArg, 0
  %"'ipc_unwrap" = bitcast i8* %"call.i'mi_unwrap9" to double*
  %6 = select i1 %cmp.not.i, double* %".pre'il_phi_unwrap", double* %"'ipc_unwrap"
  %"'ipc6_unwrap" = bitcast double* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %"'ipc6_unwrap", i8 0, i64 %5, i1 false) #46
  br i1 %cmp.not.i, label %invertentry, label %invertresize.exit.thread

for.body.i:                                       ; preds = %invertfor.body, %for.body.i
  %idx.i = phi i64 [ %idx.next.i, %for.body.i ], [ 0, %invertfor.body ]
  %dst.i.i = getelementptr inbounds double, double* %4, i64 %idx.i
  %dst.i.l.i = load double, double* %dst.i.i, align 8
  store double 0.000000e+00, double* %dst.i.i, align 8
  %src.i.i = getelementptr inbounds double, double* %"theta'", i64 %idx.i
  %src.i.l.i = load double, double* %src.i.i, align 8
  %7 = fadd fast double %src.i.l.i, %dst.i.l.i
  store double %7, double* %src.i.i, align 8
  %idx.next.i = add nuw i64 %idx.i, 1
  %8 = icmp eq i64 %idx.next.i, 3
  br i1 %8, label %__enzyme_memcpyadd_doubleda8sa8.exit, label %for.body.i

__enzyme_memcpyadd_doubleda8sa8.exit:             ; preds = %for.body.i
  %cond = icmp eq i8 %_cache.0, 1
  br i1 %cond, label %invertfor.body.lr.ph.i_phimerge, label %invertentry

invertfor.cond17.preheader:                       ; preds = %invertfor.cond20.preheader
  %9 = bitcast i32* %0 to i8*
  tail call void @free(i8* nonnull %9)
  %10 = bitcast i32* %1 to i8*
  tail call void @free(i8* nonnull %10)
  br label %invertfor.body

invertfor.body:                                   ; preds = %incinvertfor.body, %invertfor.cond17.preheader
  %"iv'ac.0" = phi i64 [ 2, %invertfor.cond17.preheader ], [ %15, %incinvertfor.body ]
  %_unwrap = add nuw nsw i64 %"iv'ac.0", 6
  %"arrayidx16'ipg_unwrap" = getelementptr inbounds double, double* %4, i64 %_unwrap
  %11 = load double, double* %"arrayidx16'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1370, !noalias !1373
  store double 0.000000e+00, double* %"arrayidx16'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1370, !noalias !1373
  %_unwrap15 = add nuw nsw i64 %"iv'ac.0", 3
  %"arrayidx10'ipg_unwrap" = getelementptr inbounds double, double* %"theta'", i64 %_unwrap15
  %12 = load double, double* %"arrayidx10'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1375, !noalias !1378
  %13 = fadd fast double %12, %11
  store double %13, double* %"arrayidx10'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1375, !noalias !1378
  %"arrayidx7'ipg_unwrap" = getelementptr inbounds double, double* %4, i64 %_unwrap15
  store double 0.000000e+00, double* %"arrayidx7'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1370, !noalias !1373
  %14 = icmp eq i64 %"iv'ac.0", 0
  br i1 %14, label %for.body.i, label %incinvertfor.body

incinvertfor.body:                                ; preds = %invertfor.body
  %15 = add nsw i64 %"iv'ac.0", -1
  br label %invertfor.body

invertfor.cond20.preheader:                       ; preds = %invertfor.body22
  %16 = icmp eq i64 %"iv1'ac.0", 0
  br i1 %16, label %invertfor.cond17.preheader, label %incinvertfor.cond20.preheader

incinvertfor.cond20.preheader:                    ; preds = %invertfor.cond20.preheader
  %17 = add nsw i64 %"iv1'ac.0", -1
  br label %invertfor.end45

invertfor.body22:                                 ; preds = %invertif.end, %invertif.then
  %18 = getelementptr inbounds i32, i32* %0, i64 %"iv1'ac.0"
  %19 = load i32, i32* %18, align 4, !invariant.group !1380
  %_unwrap23 = sext i32 %19 to i64
  %_unwrap24 = add i64 %"iv3'ac.0", %_unwrap23
  %_unwrap25 = mul nsw i64 %_unwrap24, 3
  %"arrayidx30'ipg_unwrap" = getelementptr inbounds double, double* %"'ipl", i64 %_unwrap25
  %20 = load double, double* %"arrayidx30'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1381, !noalias !1384
  store double 0.000000e+00, double* %"arrayidx30'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1381, !noalias !1384
  %21 = mul nuw nsw i64 %"iv1'ac.0", 3
  %22 = add nuw nsw i64 %"iv3'ac.0", %21
  %23 = getelementptr inbounds i32, i32* %1, i64 %22
  %24 = load i32, i32* %23, align 4, !invariant.group !1386
  %idxprom23_unwrap = sext i32 %24 to i64
  %"arrayidx24'ipg_unwrap" = getelementptr inbounds double, double* %"theta'", i64 %idxprom23_unwrap
  %25 = load double, double* %"arrayidx24'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1375, !noalias !1378
  %26 = fadd fast double %25, %20
  store double %26, double* %"arrayidx24'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1375, !noalias !1378
  %27 = icmp eq i64 %"iv3'ac.0", 0
  br i1 %27, label %invertfor.cond20.preheader, label %incinvertfor.body22

incinvertfor.body22:                              ; preds = %invertfor.body22
  %28 = add nsw i64 %"iv3'ac.0", -1
  br label %invertif.end

invertif.then:                                    ; preds = %invertif.end
  %29 = getelementptr inbounds i32, i32* %0, i64 %"iv1'ac.0"
  %30 = load i32, i32* %29, align 4, !invariant.group !1380
  %_unwrap38 = sext i32 %30 to i64
  %_unwrap39 = add i64 %"iv3'ac.0", %_unwrap38
  %_unwrap40 = mul nsw i64 %_unwrap39, 3
  %_unwrap41 = add nsw i64 %_unwrap40, 1
  %"arrayidx40'ipg_unwrap" = getelementptr inbounds double, double* %"'ipl", i64 %_unwrap41
  %31 = load double, double* %"arrayidx40'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1381, !noalias !1384
  store double 0.000000e+00, double* %"arrayidx40'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1381, !noalias !1384
  %32 = mul nuw nsw i64 %"iv1'ac.0", 3
  %33 = add nuw nsw i64 %"iv3'ac.0", %32
  %34 = getelementptr inbounds i32, i32* %1, i64 %33
  %35 = load i32, i32* %34, align 4, !invariant.group !1386
  %inc31_unwrap = add nsw i32 %35, 1
  %idxprom33_unwrap = sext i32 %inc31_unwrap to i64
  %"arrayidx34'ipg_unwrap" = getelementptr inbounds double, double* %"theta'", i64 %idxprom33_unwrap
  %36 = load double, double* %"arrayidx34'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1375, !noalias !1378
  %37 = fadd fast double %36, %31
  store double %37, double* %"arrayidx34'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1375, !noalias !1378
  br label %invertfor.body22

invertif.end:                                     ; preds = %invertfor.end45, %incinvertfor.body22
  %"iv3'ac.0" = phi i64 [ 2, %invertfor.end45 ], [ %28, %incinvertfor.body22 ]
  %38 = trunc i64 %"iv3'ac.0" to i32
  %cmp32_unwrap = icmp eq i32 %38, 0
  br i1 %cmp32_unwrap, label %invertif.then, label %invertfor.body22

invertfor.end45:                                  ; preds = %incinvertfor.cond20.preheader, %for.cond17.preheader
  %"iv1'ac.0" = phi i64 [ %17, %incinvertfor.cond20.preheader ], [ 4, %for.cond17.preheader ]
  br label %invertif.end
}

; Function Attrs: alwaysinline argmemonly nounwind
define internal void @__enzyme_memcpyadd_doubleda8sa8(double* nocapture %dst, double* nocapture %src, i64 %num) #37 {
entry:
  %0 = icmp eq i64 %num, 0
  br i1 %0, label %for.end, label %for.body

for.body:                                         ; preds = %for.body, %entry
  %idx = phi i64 [ %idx.next, %for.body ], [ 0, %entry ]
  %dst.i = getelementptr inbounds double, double* %dst, i64 %idx
  %dst.i.l = load double, double* %dst.i, align 8
  store double 0.000000e+00, double* %dst.i, align 8
  %src.i = getelementptr inbounds double, double* %src, i64 %idx
  %src.i.l = load double, double* %src.i, align 8
  %1 = fadd fast double %src.i.l, %dst.i.l
  store double %1, double* %src.i, align 8
  %idx.next = add nuw i64 %idx, 1
  %2 = icmp eq i64 %idx.next, %num
  br i1 %2, label %for.end, label %for.body

for.end:                                          ; preds = %for.body, %entry
  ret void
}

; Function Attrs: nounwind uwtable willreturn mustprogress
define internal void @diffehand_objective_complicated(double* nocapture readonly %theta, double* nocapture %"theta'", double* nocapture readonly %us, double* nocapture %"us'", i32 %bone_count, i8** nocapture readnone %bone_names, i32* nocapture readonly %parents, %struct.Matrix* nocapture readonly %base_relatives, %struct.Matrix* nocapture readonly %inverse_base_absolutes, %struct.Matrix* nocapture readonly %base_positions, %struct.Matrix* nocapture readonly %weights, %struct.Triangle* nocapture readonly %triangles, i32 %is_mirrored, i32 %corresp_count, i32* noalias nocapture readonly %correspondences, %struct.Matrix* nocapture readonly %points, double* nocapture %err, double* nocapture %"err'") #16 {
entry:
  %call.i = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #45
  %"call.i'mi" = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #45
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16) dereferenceable_or_null(16) %"call.i'mi", i8 0, i64 16, i1 false)
  %"'ipc" = bitcast i8* %"call.i'mi" to %struct.Matrix*
  %0 = bitcast i8* %call.i to %struct.Matrix*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %call.i, i8 0, i64 16, i1 false) #45
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %"call.i'mi", i8 0, i64 16, i1 false) #45
  %_augmented3 = call { i8*, i8*, double*, double*, i32, i1, double*, i32*, i32* } @augmented_to_pose_params.21(i32 %bone_count, double* %theta, double* %"theta'", i8** undef, %struct.Matrix* nonnull %0, %struct.Matrix* nonnull %"'ipc")
  %call.i84 = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #45
  %"call.i84'mi" = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #45
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16) dereferenceable_or_null(16) %"call.i84'mi", i8 0, i64 16, i1 false)
  %"'ipc2" = bitcast i8* %"call.i84'mi" to %struct.Matrix*
  %1 = bitcast i8* %call.i84 to %struct.Matrix*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %call.i84, i8 0, i64 16, i1 false) #45
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %"call.i84'mi", i8 0, i64 16, i1 false) #45
  %_augmented = call fastcc { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* } @augmented__ZL28get_skinned_vertex_positionsiPK6MatrixPKiS1_S1_S1_iS1_PS_i.16(i32 %bone_count, %struct.Matrix* %base_relatives, i32* %parents, %struct.Matrix* %inverse_base_absolutes, %struct.Matrix* %base_positions, %struct.Matrix* %weights, i32 %is_mirrored, %struct.Matrix* nonnull %0, %struct.Matrix* nonnull %"'ipc", %struct.Matrix* nonnull %1, %struct.Matrix* nonnull %"'ipc2")
  %cmp89 = icmp sgt i32 %corresp_count, 0
  br i1 %cmp89, label %for.body.lr.ph, label %invertfor.end51

for.body.lr.ph:                                   ; preds = %entry
  %data = getelementptr inbounds i8, i8* %call.i84, i64 8
  %2 = bitcast i8* %data to double**
  %3 = load double*, double** %2, align 8, !tbaa !137, !alias.scope !1387, !noalias !1390
  %nrows = bitcast i8* %call.i84 to i32*
  %4 = load i32, i32* %nrows, align 8, !tbaa !138, !alias.scope !1387, !noalias !1390, !invariant.group !1392
  %wide.trip.count = zext i32 %corresp_count to i64
  %mallocsize = mul nuw nsw i64 %wide.trip.count, 24
  %malloccall = tail call noalias nonnull i8* @malloc(i64 %mallocsize), !enzyme_cache_alloc !1393
  %_malloccache = bitcast i8* %malloccall to double*
  %malloccall22 = tail call noalias nonnull i8* @malloc(i64 %mallocsize), !enzyme_cache_alloc !1395
  %_malloccache23 = bitcast i8* %malloccall22 to double*
  %malloccall37 = tail call noalias nonnull i8* @malloc(i64 %mallocsize), !enzyme_cache_alloc !1397
  %_malloccache38 = bitcast i8* %malloccall37 to double*
  %malloccall53 = tail call noalias nonnull i8* @malloc(i64 %mallocsize), !enzyme_cache_alloc !1399
  %_malloccache54 = bitcast i8* %malloccall53 to double*
  %malloccall71 = tail call noalias nonnull i8* @malloc(i64 %mallocsize), !enzyme_cache_alloc !1401
  %_malloccache72 = bitcast i8* %malloccall71 to double*
  br label %for.body

for.body:                                         ; preds = %for.end, %for.body.lr.ph
  %iv = phi i64 [ %iv.next, %for.end ], [ 0, %for.body.lr.ph ]
  %iv.next = add nuw nsw i64 %iv, 1
  %arrayidx = getelementptr inbounds i32, i32* %correspondences, i64 %iv
  %5 = load i32, i32* %arrayidx, align 4, !tbaa !59, !alias.scope !1403, !noalias !1406, !invariant.group !1408
  %idxprom2 = sext i32 %5 to i64
  %arraydecay = getelementptr inbounds %struct.Triangle, %struct.Triangle* %triangles, i64 %idxprom2, i32 0, i64 0
  %6 = shl nuw nsw i64 %iv, 1
  %arrayidx6 = getelementptr inbounds double, double* %us, i64 %6
  %7 = load i32, i32* %arraydecay, align 4, !tbaa !59, !alias.scope !1409, !noalias !1412, !invariant.group !1414
  %mul12 = mul nsw i32 %4, %7
  %arrayidx16 = getelementptr inbounds double, double* %arrayidx6, i64 1
  %arrayidx18 = getelementptr inbounds %struct.Triangle, %struct.Triangle* %triangles, i64 %idxprom2, i32 0, i64 1
  %8 = load i32, i32* %arrayidx18, align 4, !tbaa !59, !alias.scope !1409, !noalias !1412, !invariant.group !1415
  %mul20 = mul nsw i32 %8, %4
  %arrayidx30 = getelementptr inbounds %struct.Triangle, %struct.Triangle* %triangles, i64 %idxprom2, i32 0, i64 2
  %9 = load i32, i32* %arrayidx30, align 4, !tbaa !59, !alias.scope !1409, !noalias !1412, !invariant.group !1416
  %mul32 = mul nsw i32 %9, %4
  %10 = mul nuw nsw i64 %iv, 3
  %11 = sext i32 %mul12 to i64
  %12 = sext i32 %mul20 to i64
  %13 = sext i32 %mul32 to i64
  br label %for.body9

for.body9:                                        ; preds = %for.body9, %for.body
  %iv1 = phi i64 [ %iv.next2, %for.body9 ], [ 0, %for.body ]
  %iv.next2 = add nuw nsw i64 %iv1, 1
  %14 = load double, double* %arrayidx6, align 8, !tbaa !75, !alias.scope !1417, !noalias !1420
  %15 = add nuw nsw i64 %iv1, %10
  %16 = getelementptr inbounds double, double* %_malloccache, i64 %15
  store double %14, double* %16, align 8, !tbaa !75, !invariant.group !1422
  %17 = add nsw i64 %iv1, %11
  %arrayidx14 = getelementptr inbounds double, double* %3, i64 %17
  %18 = load double, double* %arrayidx14, align 8, !tbaa !75, !alias.scope !1423, !noalias !1426
  %19 = load double, double* %arrayidx16, align 8, !tbaa !75, !alias.scope !1417, !noalias !1420
  %20 = getelementptr inbounds double, double* %_malloccache23, i64 %15
  store double %19, double* %20, align 8, !tbaa !75, !invariant.group !1428
  %21 = getelementptr inbounds double, double* %_malloccache72, i64 %15
  store double %18, double* %21, align 8, !tbaa !75, !invariant.group !1429
  %22 = add nsw i64 %iv1, %12
  %arrayidx23 = getelementptr inbounds double, double* %3, i64 %22
  %23 = load double, double* %arrayidx23, align 8, !tbaa !75, !alias.scope !1423, !noalias !1426
  %24 = add nsw i64 %iv1, %13
  %arrayidx35 = getelementptr inbounds double, double* %3, i64 %24
  %25 = load double, double* %arrayidx35, align 8, !tbaa !75, !alias.scope !1423, !noalias !1426
  %26 = getelementptr inbounds double, double* %_malloccache38, i64 %15
  store double %25, double* %26, align 8, !tbaa !75, !invariant.group !1430
  %27 = getelementptr inbounds double, double* %_malloccache54, i64 %15
  store double %23, double* %27, align 8, !tbaa !75, !invariant.group !1431
  %exitcond.not = icmp eq i64 %iv.next2, 3
  br i1 %exitcond.not, label %for.end, label %for.body9, !llvm.loop !239

for.end:                                          ; preds = %for.body9
  %exitcond101.not = icmp eq i64 %iv.next, %wide.trip.count
  br i1 %exitcond101.not, label %invertfor.end51, label %for.body, !llvm.loop !240

invertentry:                                      ; preds = %invertfor.end51, %invertfor.body.lr.ph
  call fastcc void @diffe_ZL28get_skinned_vertex_positionsiPK6MatrixPKiS1_S1_S1_iS1_PS_i.17(i32 %bone_count, %struct.Matrix* %base_relatives, i32* %parents, %struct.Matrix* %inverse_base_absolutes, %struct.Matrix* %base_positions, %struct.Matrix* %weights, i32 %is_mirrored, %struct.Matrix* nonnull %0, %struct.Matrix* nonnull %"'ipc", %struct.Matrix* nonnull %1, %struct.Matrix* nonnull %"'ipc2", { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* } %_augmented)
  call void @free(i8* nonnull %"call.i84'mi")
  call void @free(i8* nonnull %call.i84)
  call void @diffeto_pose_params.22(i32 %bone_count, double* %theta, double* %"theta'", i8** undef, %struct.Matrix* nonnull %0, %struct.Matrix* nonnull %"'ipc", { i8*, i8*, double*, double*, i32, i1, double*, i32*, i32* } %_augmented3)
  call void @free(i8* nonnull %"call.i'mi")
  call void @free(i8* nonnull %call.i)
  ret void

invertfor.body.lr.ph:                             ; preds = %invertfor.body
  %28 = bitcast double* %_cache.0 to i8*
  tail call void @free(i8* nonnull %28), !enzyme_cache_free !1393
  %29 = bitcast double* %_cache20.0 to i8*
  tail call void @free(i8* nonnull %29), !enzyme_cache_free !1395
  %30 = bitcast double* %_cache35.0 to i8*
  tail call void @free(i8* nonnull %30), !enzyme_cache_free !1397
  %31 = bitcast double* %_cache51.0 to i8*
  tail call void @free(i8* nonnull %31), !enzyme_cache_free !1399
  %32 = bitcast double* %_cache69.0 to i8*
  tail call void @free(i8* nonnull %32), !enzyme_cache_free !1401
  br label %invertentry

invertfor.body:                                   ; preds = %invertfor.body9
  %33 = icmp eq i64 %"iv'ac.0", 0
  br i1 %33, label %invertfor.body.lr.ph, label %invertfor.end

invertfor.body9:                                  ; preds = %invertfor.end, %incinvertfor.body9
  %"iv1'ac.0" = phi i64 [ 2, %invertfor.end ], [ %64, %incinvertfor.body9 ]
  %_unwrap = mul nuw nsw i64 %"iv'ac.0", 3
  %_unwrap8 = add nuw nsw i64 %"iv1'ac.0", %_unwrap
  %"arrayidx48'ipg_unwrap" = getelementptr inbounds double, double* %"err'", i64 %_unwrap8
  %34 = load double, double* %"arrayidx48'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1432, !noalias !1435
  store double 0.000000e+00, double* %"arrayidx48'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1432, !noalias !1435
  %35 = getelementptr inbounds double, double* %_cache.0, i64 %_unwrap8
  %36 = load double, double* %35, align 8, !tbaa !75, !invariant.group !1422
  %37 = getelementptr inbounds double, double* %_cache20.0, i64 %_unwrap8
  %38 = load double, double* %37, align 8, !tbaa !75, !invariant.group !1428
  %_unwrap31 = fadd fast double %36, %38
  %sub28_unwrap = fsub fast double 1.000000e+00, %_unwrap31
  %39 = getelementptr inbounds double, double* %_cache35.0, i64 %_unwrap8
  %40 = load double, double* %39, align 8, !tbaa !75, !invariant.group !1430
  %41 = getelementptr inbounds double, double* %_cache51.0, i64 %_unwrap8
  %42 = load double, double* %41, align 8, !tbaa !75, !invariant.group !1431
  %43 = getelementptr inbounds double, double* %_cache69.0, i64 %_unwrap8
  %44 = load double, double* %43, align 8, !tbaa !75, !invariant.group !1429
  %"data'ipg_unwrap" = getelementptr inbounds i8, i8* %"call.i84'mi", i64 8
  %"'ipc6_unwrap" = bitcast i8* %"data'ipg_unwrap" to double**
  %"'ipl_unwrap" = load double*, double** %"'ipc6_unwrap", align 8, !tbaa !137, !alias.scope !1390, !noalias !1387, !invariant.group !1437
  %arrayidx_unwrap = getelementptr inbounds i32, i32* %correspondences, i64 %"iv'ac.0"
  %_unwrap85 = load i32, i32* %arrayidx_unwrap, align 4, !tbaa !59, !alias.scope !1403, !noalias !1406, !invariant.group !1408
  %idxprom2_unwrap = sext i32 %_unwrap85 to i64
  %arrayidx30_unwrap = getelementptr inbounds %struct.Triangle, %struct.Triangle* %triangles, i64 %idxprom2_unwrap, i32 0, i64 2
  %_unwrap86 = load i32, i32* %arrayidx30_unwrap, align 4, !tbaa !59, !alias.scope !1409, !noalias !1412, !invariant.group !1416
  %nrows_unwrap = bitcast i8* %call.i84 to i32*
  %_unwrap87 = load i32, i32* %nrows_unwrap, align 8, !tbaa !138, !alias.scope !1387, !noalias !1390, !invariant.group !1392
  %mul32_unwrap = mul nsw i32 %_unwrap86, %_unwrap87
  %_unwrap88 = sext i32 %mul32_unwrap to i64
  %_unwrap89 = add nsw i64 %"iv1'ac.0", %_unwrap88
  %"arrayidx35'ipg_unwrap" = getelementptr inbounds double, double* %"'ipl_unwrap", i64 %_unwrap89
  %45 = load double, double* %"arrayidx35'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1426, !noalias !1423
  %46 = fmul fast double %34, %sub28_unwrap
  %47 = fsub fast double %45, %46
  store double %47, double* %"arrayidx35'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1426, !noalias !1423
  %48 = fmul fast double %40, %34
  %49 = fmul fast double %34, %44
  %50 = fsub fast double %48, %49
  %51 = fmul fast double %34, %42
  %52 = fsub fast double %48, %51
  %arrayidx18_unwrap = getelementptr inbounds %struct.Triangle, %struct.Triangle* %triangles, i64 %idxprom2_unwrap, i32 0, i64 1
  %_unwrap91 = load i32, i32* %arrayidx18_unwrap, align 4, !tbaa !59, !alias.scope !1409, !noalias !1412, !invariant.group !1415
  %mul20_unwrap = mul nsw i32 %_unwrap91, %_unwrap87
  %_unwrap92 = sext i32 %mul20_unwrap to i64
  %_unwrap93 = add nsw i64 %"iv1'ac.0", %_unwrap92
  %"arrayidx23'ipg_unwrap" = getelementptr inbounds double, double* %"'ipl_unwrap", i64 %_unwrap93
  %53 = load double, double* %"arrayidx23'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1426, !noalias !1423
  %54 = fmul fast double %34, %38
  %55 = fsub fast double %53, %54
  store double %55, double* %"arrayidx23'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1426, !noalias !1423
  %_unwrap94 = shl nuw nsw i64 %"iv'ac.0", 1
  %"arrayidx6'ipg_unwrap" = getelementptr inbounds double, double* %"us'", i64 %_unwrap94
  %"arrayidx16'ipg_unwrap" = getelementptr inbounds double, double* %"arrayidx6'ipg_unwrap", i64 1
  %56 = load double, double* %"arrayidx16'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1420, !noalias !1417
  %57 = fadd fast double %56, %52
  store double %57, double* %"arrayidx16'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1420, !noalias !1417
  %arraydecay_unwrap = getelementptr inbounds %struct.Triangle, %struct.Triangle* %triangles, i64 %idxprom2_unwrap, i32 0, i64 0
  %_unwrap95 = load i32, i32* %arraydecay_unwrap, align 4, !tbaa !59, !alias.scope !1409, !noalias !1412, !invariant.group !1414
  %mul12_unwrap = mul nsw i32 %_unwrap87, %_unwrap95
  %_unwrap96 = sext i32 %mul12_unwrap to i64
  %_unwrap97 = add nsw i64 %"iv1'ac.0", %_unwrap96
  %"arrayidx14'ipg_unwrap" = getelementptr inbounds double, double* %"'ipl_unwrap", i64 %_unwrap97
  %58 = load double, double* %"arrayidx14'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1426, !noalias !1423
  %59 = fmul fast double %34, %36
  %60 = fsub fast double %58, %59
  store double %60, double* %"arrayidx14'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1426, !noalias !1423
  %61 = load double, double* %"arrayidx6'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1420, !noalias !1417
  %62 = fadd fast double %61, %50
  store double %62, double* %"arrayidx6'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1420, !noalias !1417
  %63 = icmp eq i64 %"iv1'ac.0", 0
  br i1 %63, label %invertfor.body, label %incinvertfor.body9

incinvertfor.body9:                               ; preds = %invertfor.body9
  %64 = add nsw i64 %"iv1'ac.0", -1
  br label %invertfor.body9

invertfor.end:                                    ; preds = %mergeinvertfor.body_for.end51.loopexit, %invertfor.body
  %"iv'ac.0.in" = phi i64 [ %wide.trip.count_unwrap98, %mergeinvertfor.body_for.end51.loopexit ], [ %"iv'ac.0", %invertfor.body ]
  %"iv'ac.0" = add nsw i64 %"iv'ac.0.in", -1
  br label %invertfor.body9

mergeinvertfor.body_for.end51.loopexit:           ; preds = %invertfor.end51
  %wide.trip.count_unwrap98 = zext i32 %corresp_count to i64
  br label %invertfor.end

invertfor.end51:                                  ; preds = %for.end, %entry
  %_cache69.0 = phi double* [ undef, %entry ], [ %_malloccache72, %for.end ]
  %_cache51.0 = phi double* [ undef, %entry ], [ %_malloccache54, %for.end ]
  %_cache35.0 = phi double* [ undef, %entry ], [ %_malloccache38, %for.end ]
  %_cache20.0 = phi double* [ undef, %entry ], [ %_malloccache23, %for.end ]
  %_cache.0 = phi double* [ undef, %entry ], [ %_malloccache, %for.end ]
  br i1 %cmp89, label %mergeinvertfor.body_for.end51.loopexit, label %invertentry
}

; Function Attrs: nounwind uwtable willreturn mustprogress
define internal { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** } @augmented_mat_mult.13(%struct.Matrix* noalias nocapture readonly %lhs, %struct.Matrix* nocapture %"lhs'", %struct.Matrix* noalias nocapture readonly %rhs, %struct.Matrix* noalias nocapture %out, %struct.Matrix* nocapture %"out'") local_unnamed_addr #16 {
entry:
  %0 = alloca { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }, align 8
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 0
  %1 = load i32, i32* %nrows, align 8, !tbaa !138, !alias.scope !1438, !noalias !1441
  %2 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 4
  store i32 %1, i32* %2, align 8
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 1
  %3 = load i32, i32* %ncols, align 4, !tbaa !139, !alias.scope !1443, !noalias !1446
  %4 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 5
  store i32 %3, i32* %4, align 4
  %"nrows1.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 0
  %nrows1.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 0
  %5 = load i32, i32* %nrows1.i, align 8, !tbaa !138, !alias.scope !1448, !noalias !1451
  %"ncols2.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 1
  %ncols2.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 1
  %6 = load i32, i32* %ncols2.i, align 4, !tbaa !139, !alias.scope !1448, !noalias !1451
  %mul.i = mul nsw i32 %6, %5
  %mul3.i = mul nsw i32 %3, %1
  %cmp.not.i = icmp eq i32 %mul.i, %mul3.i
  %7 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 6
  store i1 %cmp.not.i, i1* %7, align 8
  br i1 %cmp.not.i, label %resize.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %"data.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 2
  %data.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 2
  %8 = load double*, double** %data.i, align 8, !tbaa !137, !alias.scope !1448, !noalias !1451
  %cmp4.not.i = icmp eq double* %8, null
  %9 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 7
  store i1 %cmp4.not.i, i1* %9, align 1
  %cmp8.i = icmp sgt i32 %mul3.i, 0
  br i1 %cmp8.i, label %if.then9.i, label %if.else.i

if.then9.i:                                       ; preds = %if.then.i
  %conv31.i = zext i32 %mul3.i to i64
  %mul11.i = shl nuw nsw i64 %conv31.i, 3
  %call.i = tail call noalias i8* @malloc(i64 %mul11.i) #45
  %10 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 1
  store i8* %call.i, i8** %10, align 8
  %"call.i'mi" = tail call noalias nonnull i8* @malloc(i64 %mul11.i) #45
  %11 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 0
  store i8* %"call.i'mi", i8** %11, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %"call.i'mi", i8 0, i64 %mul11.i, i1 false)
  %"'ipc" = bitcast double** %"data.i'ipg" to i8**
  %12 = bitcast double** %data.i to i8**
  store i8* %"call.i'mi", i8** %"'ipc", align 8, !tbaa !137, !alias.scope !1451, !noalias !1448
  store i8* %call.i, i8** %12, align 8, !tbaa !137, !alias.scope !1448, !noalias !1451
  br label %resize.exit

if.else.i:                                        ; preds = %if.then.i
  store double* null, double** %"data.i'ipg", align 8, !tbaa !137, !alias.scope !1451, !noalias !1448
  store double* null, double** %data.i, align 8, !tbaa !137, !alias.scope !1448, !noalias !1451
  br label %resize.exit

resize.exit:                                      ; preds = %if.else.i, %if.then9.i, %entry
  store i32 %3, i32* %"ncols2.i'ipg", align 4, !tbaa !139, !alias.scope !1451, !noalias !1448
  store i32 %3, i32* %ncols2.i, align 4, !tbaa !139, !alias.scope !1448, !noalias !1451
  store i32 %1, i32* %"nrows1.i'ipg", align 8, !tbaa !138, !alias.scope !1451, !noalias !1448
  store i32 %1, i32* %nrows1.i, align 8, !tbaa !138, !alias.scope !1448, !noalias !1451
  %cmp85 = icmp sgt i32 %1, 0
  br i1 %cmp85, label %for.cond2.preheader.lr.ph, label %for.end49

for.cond2.preheader.lr.ph:                        ; preds = %resize.exit
  %cmp483 = icmp sgt i32 %3, 0
  %"data'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"lhs'", i64 0, i32 2
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 2
  %data7 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 2
  %nrows8 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 0
  %"data14'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 2
  %data14 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 2
  %ncols21 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 1
  %13 = zext i32 %1 to i64
  %wide.trip.count96 = zext i32 %3 to i64
  %mallocsize = shl nuw nsw i64 %13, 3
  %malloccall = tail call noalias nonnull i8* @malloc(i64 %mallocsize)
  %"'ipl_malloccache" = bitcast i8* %malloccall to double**
  %14 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 2
  %15 = bitcast double*** %14 to i8**
  store i8* %malloccall, i8** %15, align 8
  %malloccall13 = tail call noalias nonnull i8* @malloc(i64 %mallocsize)
  %"'ipl8_malloccache" = bitcast i8* %malloccall13 to double**
  %16 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 3
  %17 = bitcast double*** %16 to i8**
  store i8* %malloccall13, i8** %17, align 8
  %mallocsize20 = shl nuw nsw i64 %13, 2
  %malloccall21 = tail call noalias nonnull i8* @malloc(i64 %mallocsize20)
  %_malloccache = bitcast i8* %malloccall21 to i32*
  %18 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 8
  %19 = bitcast i32** %18 to i8**
  store i8* %malloccall21, i8** %19, align 8
  %20 = mul nuw nsw i64 %wide.trip.count96, %13
  %mallocsize29 = shl nuw nsw i64 %20, 3
  %malloccall30 = tail call noalias nonnull i8* @malloc(i64 %mallocsize29)
  %_malloccache31 = bitcast i8* %malloccall30 to double*
  %21 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 9
  %22 = bitcast double** %21 to i8**
  store i8* %malloccall30, i8** %22, align 8
  %malloccall43 = tail call noalias nonnull i8* @malloc(i64 %mallocsize29)
  %_malloccache44 = bitcast i8* %malloccall43 to double**
  %23 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 10
  %24 = bitcast double*** %23 to i8**
  store i8* %malloccall43, i8** %24, align 8
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.inc47, %for.cond2.preheader.lr.ph
  %iv = phi i64 [ %iv.next, %for.inc47 ], [ 0, %for.cond2.preheader.lr.ph ]
  %iv.next = add nuw nsw i64 %iv, 1
  br i1 %cmp483, label %for.body5.lr.ph, label %for.inc47

for.body5.lr.ph:                                  ; preds = %for.cond2.preheader
  %"'ipl8" = load double*, double** %"data'ipg", align 8, !tbaa !137, !alias.scope !1441, !noalias !1438
  %25 = load double*, double** %data, align 8, !tbaa !137, !alias.scope !1438, !noalias !1441
  %arrayidx = getelementptr inbounds double, double* %25, i64 %iv
  %26 = load double*, double** %data7, align 8, !tbaa !137, !alias.scope !1443, !noalias !1446
  %27 = load i32, i32* %nrows8, align 8, !tbaa !138, !alias.scope !1443, !noalias !1446
  %"'ipl" = load double*, double** %"data14'ipg", align 8, !tbaa !137, !alias.scope !1451, !noalias !1448
  %28 = getelementptr inbounds double*, double** %"'ipl_malloccache", i64 %iv
  store double* %"'ipl", double** %28, align 8, !tbaa !137, !invariant.group !1453
  %29 = getelementptr inbounds double*, double** %"'ipl8_malloccache", i64 %iv
  store double* %"'ipl8", double** %29, align 8, !tbaa !137, !invariant.group !1454
  %30 = load double*, double** %data14, align 8, !tbaa !137, !alias.scope !1448, !noalias !1451
  %31 = load i32, i32* %ncols21, align 4, !tbaa !139, !alias.scope !1438, !noalias !1441
  %32 = getelementptr inbounds i32, i32* %_malloccache, i64 %iv
  store i32 %31, i32* %32, align 4, !tbaa !139, !invariant.group !1455
  %cmp2281 = icmp sgt i32 %31, 1
  %33 = sext i32 %27 to i64
  %wide.trip.count = zext i32 %31 to i64
  br label %for.body5

for.body5:                                        ; preds = %for.inc44, %for.body5.lr.ph
  %iv1 = phi i64 [ %iv.next2, %for.inc44 ], [ 0, %for.body5.lr.ph ]
  %iv.next2 = add nuw nsw i64 %iv1, 1
  %34 = load double, double* %arrayidx, align 8, !tbaa !75, !alias.scope !1456, !noalias !1459
  %35 = mul nsw i64 %iv1, %33
  %arrayidx12 = getelementptr inbounds double, double* %26, i64 %35
  %36 = load double, double* %arrayidx12, align 8, !tbaa !75, !alias.scope !1461, !noalias !1464
  %mul13 = fmul fast double %36, %34
  %37 = mul nuw nsw i64 %iv1, %13
  %38 = add nuw nsw i64 %37, %iv
  %arrayidx19 = getelementptr inbounds double, double* %30, i64 %38
  store double %mul13, double* %arrayidx19, align 8, !tbaa !75, !alias.scope !1466, !noalias !1469
  %39 = mul nuw nsw i64 %iv, %wide.trip.count96
  %40 = add nuw nsw i64 %iv1, %39
  %41 = getelementptr inbounds double, double* %_malloccache31, i64 %40
  store double %36, double* %41, align 8, !tbaa !75, !invariant.group !1471
  br i1 %cmp2281, label %for.body23.preheader, label %for.inc44

for.body23.preheader:                             ; preds = %for.body5
  %42 = getelementptr inbounds double*, double** %_malloccache44, i64 %40
  %43 = shl nuw nsw i64 %wide.trip.count, 3
  %mallocsize45 = add nsw i64 %43, -8
  %malloccall46 = tail call noalias nonnull i8* @malloc(i64 %mallocsize45)
  %44 = bitcast double** %42 to i8**
  store i8* %malloccall46, i8** %44, align 8
  br label %for.body23

for.body23:                                       ; preds = %for.body23, %for.body23.preheader
  %iv3 = phi i64 [ %iv.next4, %for.body23 ], [ 0, %for.body23.preheader ]
  %45 = phi double [ %add43, %for.body23 ], [ %mul13, %for.body23.preheader ]
  %iv.next4 = add nuw nsw i64 %iv3, 1
  %46 = mul nuw nsw i64 %iv.next4, %13
  %47 = add nuw nsw i64 %46, %iv
  %arrayidx29 = getelementptr inbounds double, double* %25, i64 %47
  %48 = load double, double* %arrayidx29, align 8, !tbaa !75, !alias.scope !1456, !noalias !1459
  %49 = add nsw i64 %iv.next4, %35
  %arrayidx35 = getelementptr inbounds double, double* %26, i64 %49
  %50 = load double, double* %arrayidx35, align 8, !tbaa !75, !alias.scope !1461, !noalias !1464
  %mul36 = fmul fast double %50, %48
  %add43 = fadd fast double %45, %mul36
  store double %add43, double* %arrayidx19, align 8, !tbaa !75, !alias.scope !1466, !noalias !1469
  %51 = load double*, double** %42, align 8, !dereferenceable !457, !invariant.group !1472
  %52 = getelementptr inbounds double, double* %51, i64 %iv3
  store double %50, double* %52, align 8, !tbaa !75, !invariant.group !1473
  %indvars.iv.next = add nuw nsw i64 %iv3, 2
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.inc44, label %for.body23, !llvm.loop !213

for.inc44:                                        ; preds = %for.body23, %for.body5
  %exitcond97.not = icmp eq i64 %iv.next2, %wide.trip.count96
  br i1 %exitcond97.not, label %for.inc47, label %for.body5, !llvm.loop !214

for.inc47:                                        ; preds = %for.inc44, %for.cond2.preheader
  %exitcond101.not = icmp eq i64 %iv.next, %13
  br i1 %exitcond101.not, label %for.end49, label %for.cond2.preheader, !llvm.loop !215

for.end49:                                        ; preds = %for.inc47, %resize.exit
  %53 = load { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %0, align 8
  ret { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** } %53
}

; Function Attrs: nounwind uwtable willreturn mustprogress
define internal { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* } @augmented_mat_mult.14(%struct.Matrix* noalias nocapture readonly %lhs, %struct.Matrix* nocapture %"lhs'", %struct.Matrix* noalias nocapture readonly %rhs, %struct.Matrix* nocapture %"rhs'", %struct.Matrix* noalias nocapture %out, %struct.Matrix* nocapture %"out'") local_unnamed_addr #16 {
entry:
  %0 = alloca { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, align 8
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 0
  %1 = load i32, i32* %nrows, align 8, !tbaa !138, !alias.scope !1474, !noalias !1477
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 1
  %2 = load i32, i32* %ncols, align 4, !tbaa !139, !alias.scope !1479, !noalias !1482
  %3 = getelementptr inbounds { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }* %0, i64 0, i32 3
  store i32 %2, i32* %3, align 8
  %"nrows1.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 0
  %nrows1.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 0
  %4 = load i32, i32* %nrows1.i, align 8, !tbaa !138, !alias.scope !1484, !noalias !1487
  %"ncols2.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 1
  %ncols2.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 1
  %5 = load i32, i32* %ncols2.i, align 4, !tbaa !139, !alias.scope !1484, !noalias !1487
  %mul.i = mul nsw i32 %5, %4
  %mul3.i = mul nsw i32 %2, %1
  %cmp.not.i = icmp eq i32 %mul.i, %mul3.i
  %6 = getelementptr inbounds { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }* %0, i64 0, i32 4
  store i1 %cmp.not.i, i1* %6, align 4
  br i1 %cmp.not.i, label %resize.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %"data.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 2
  %data.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 2
  %7 = load double*, double** %data.i, align 8, !tbaa !137, !alias.scope !1484, !noalias !1487
  %cmp4.not.i = icmp eq double* %7, null
  %8 = getelementptr inbounds { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }* %0, i64 0, i32 5
  store i1 %cmp4.not.i, i1* %8, align 1
  %cmp8.i = icmp sgt i32 %mul3.i, 0
  br i1 %cmp8.i, label %if.then9.i, label %if.else.i

if.then9.i:                                       ; preds = %if.then.i
  %conv31.i = zext i32 %mul3.i to i64
  %mul11.i = shl nuw nsw i64 %conv31.i, 3
  %call.i = tail call noalias i8* @malloc(i64 %mul11.i) #45
  %9 = getelementptr inbounds { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }* %0, i64 0, i32 1
  store i8* %call.i, i8** %9, align 8
  %"call.i'mi" = tail call noalias nonnull i8* @malloc(i64 %mul11.i) #45
  %10 = getelementptr inbounds { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }* %0, i64 0, i32 0
  store i8* %"call.i'mi", i8** %10, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %"call.i'mi", i8 0, i64 %mul11.i, i1 false)
  %"'ipc" = bitcast double** %"data.i'ipg" to i8**
  %11 = bitcast double** %data.i to i8**
  store i8* %"call.i'mi", i8** %"'ipc", align 8, !tbaa !137, !alias.scope !1487, !noalias !1484
  store i8* %call.i, i8** %11, align 8, !tbaa !137, !alias.scope !1484, !noalias !1487
  br label %resize.exit

if.else.i:                                        ; preds = %if.then.i
  store double* null, double** %"data.i'ipg", align 8, !tbaa !137, !alias.scope !1487, !noalias !1484
  store double* null, double** %data.i, align 8, !tbaa !137, !alias.scope !1484, !noalias !1487
  br label %resize.exit

resize.exit:                                      ; preds = %if.else.i, %if.then9.i, %entry
  store i32 %2, i32* %"ncols2.i'ipg", align 4, !tbaa !139, !alias.scope !1487, !noalias !1484
  store i32 %2, i32* %ncols2.i, align 4, !tbaa !139, !alias.scope !1484, !noalias !1487
  store i32 %1, i32* %"nrows1.i'ipg", align 8, !tbaa !138, !alias.scope !1487, !noalias !1484
  store i32 %1, i32* %nrows1.i, align 8, !tbaa !138, !alias.scope !1484, !noalias !1487
  %cmp85 = icmp sgt i32 %1, 0
  br i1 %cmp85, label %for.cond2.preheader.lr.ph, label %for.end49

for.cond2.preheader.lr.ph:                        ; preds = %resize.exit
  %cmp483 = icmp sgt i32 %2, 0
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 2
  %"data7'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"rhs'", i64 0, i32 2
  %data7 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 2
  %nrows8 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 0
  %data14 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 2
  %ncols21 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 1
  %12 = zext i32 %1 to i64
  %wide.trip.count96 = zext i32 %2 to i64
  %mallocsize = shl nuw nsw i64 %12, 3
  %malloccall = tail call noalias nonnull i8* @malloc(i64 %mallocsize)
  %"'ipl4_malloccache" = bitcast i8* %malloccall to double**
  %13 = getelementptr inbounds { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }* %0, i64 0, i32 2
  %14 = bitcast double*** %13 to i8**
  store i8* %malloccall, i8** %14, align 8
  %mallocsize13 = shl nuw nsw i64 %12, 2
  %malloccall14 = tail call noalias nonnull i8* @malloc(i64 %mallocsize13)
  %_malloccache = bitcast i8* %malloccall14 to i32*
  %15 = getelementptr inbounds { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }* %0, i64 0, i32 6
  %16 = bitcast i32** %15 to i8**
  store i8* %malloccall14, i8** %16, align 8
  %17 = mul nuw nsw i64 %wide.trip.count96, %12
  %mallocsize22 = shl nuw nsw i64 %17, 3
  %malloccall23 = tail call noalias nonnull i8* @malloc(i64 %mallocsize22)
  %_malloccache24 = bitcast i8* %malloccall23 to double*
  %18 = getelementptr inbounds { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }* %0, i64 0, i32 7
  %19 = bitcast double** %18 to i8**
  store i8* %malloccall23, i8** %19, align 8
  %malloccall33 = tail call noalias nonnull i8* @malloc(i64 %mallocsize22)
  %_malloccache34 = bitcast i8* %malloccall33 to double*
  %20 = getelementptr inbounds { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }* %0, i64 0, i32 8
  %21 = bitcast double** %20 to i8**
  store i8* %malloccall33, i8** %21, align 8
  %_unwrap = load i32, i32* %ncols21, align 4, !tbaa !139, !alias.scope !1474, !noalias !1477, !invariant.group !1489
  %wide.trip.count_unwrap = zext i32 %_unwrap to i64
  %22 = add nsw i64 %wide.trip.count_unwrap, -1
  %23 = mul nuw nsw i64 %22, %wide.trip.count96
  %24 = mul nuw nsw i64 %23, %12
  %mallocsize43 = shl nuw nsw i64 %24, 3
  %malloccall44 = tail call noalias nonnull i8* @malloc(i64 %mallocsize43)
  %_malloccache45 = bitcast i8* %malloccall44 to double*
  %25 = getelementptr inbounds { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }* %0, i64 0, i32 9
  %26 = bitcast double** %25 to i8**
  store i8* %malloccall44, i8** %26, align 8
  %malloccall54 = tail call noalias nonnull i8* @malloc(i64 %mallocsize43)
  %_malloccache55 = bitcast i8* %malloccall54 to double*
  %27 = getelementptr inbounds { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }* %0, i64 0, i32 10
  %28 = bitcast double** %27 to i8**
  store i8* %malloccall54, i8** %28, align 8
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.inc47, %for.cond2.preheader.lr.ph
  %iv = phi i64 [ %iv.next, %for.inc47 ], [ 0, %for.cond2.preheader.lr.ph ]
  %iv.next = add nuw nsw i64 %iv, 1
  br i1 %cmp483, label %for.body5.lr.ph, label %for.inc47

for.body5.lr.ph:                                  ; preds = %for.cond2.preheader
  %29 = load double*, double** %data, align 8, !tbaa !137, !alias.scope !1474, !noalias !1477
  %arrayidx = getelementptr inbounds double, double* %29, i64 %iv
  %"'ipl4" = load double*, double** %"data7'ipg", align 8, !tbaa !137, !alias.scope !1482, !noalias !1479
  %30 = getelementptr inbounds double*, double** %"'ipl4_malloccache", i64 %iv
  store double* %"'ipl4", double** %30, align 8, !tbaa !137, !invariant.group !1490
  %31 = load double*, double** %data7, align 8, !tbaa !137, !alias.scope !1479, !noalias !1482
  %32 = load i32, i32* %nrows8, align 8, !tbaa !138, !alias.scope !1479, !noalias !1482
  %33 = getelementptr inbounds i32, i32* %_malloccache, i64 %iv
  store i32 %32, i32* %33, align 4, !tbaa !138, !invariant.group !1491
  %34 = load double*, double** %data14, align 8, !tbaa !137, !alias.scope !1484, !noalias !1487
  %35 = load i32, i32* %ncols21, align 4, !tbaa !139, !alias.scope !1474, !noalias !1477, !invariant.group !1489
  %cmp2281 = icmp sgt i32 %35, 1
  %36 = sext i32 %32 to i64
  %wide.trip.count = zext i32 %35 to i64
  br label %for.body5

for.body5:                                        ; preds = %for.inc44, %for.body5.lr.ph
  %iv1 = phi i64 [ %iv.next2, %for.inc44 ], [ 0, %for.body5.lr.ph ]
  %iv.next2 = add nuw nsw i64 %iv1, 1
  %37 = load double, double* %arrayidx, align 8, !tbaa !75, !alias.scope !1492, !noalias !1495
  %38 = mul nsw i64 %iv1, %36
  %arrayidx12 = getelementptr inbounds double, double* %31, i64 %38
  %39 = load double, double* %arrayidx12, align 8, !tbaa !75, !alias.scope !1497, !noalias !1500
  %mul13 = fmul fast double %39, %37
  %40 = mul nuw nsw i64 %iv1, %12
  %41 = add nuw nsw i64 %40, %iv
  %arrayidx19 = getelementptr inbounds double, double* %34, i64 %41
  store double %mul13, double* %arrayidx19, align 8, !tbaa !75, !alias.scope !1502, !noalias !1505
  %42 = mul nuw nsw i64 %iv, %wide.trip.count96
  %43 = add nuw nsw i64 %iv1, %42
  %44 = getelementptr inbounds double, double* %_malloccache34, i64 %43
  store double %39, double* %44, align 8, !tbaa !75, !invariant.group !1507
  %45 = getelementptr inbounds double, double* %_malloccache24, i64 %43
  store double %37, double* %45, align 8, !tbaa !75, !invariant.group !1508
  br i1 %cmp2281, label %for.body23, label %for.inc44

for.body23:                                       ; preds = %for.body23, %for.body5
  %iv3 = phi i64 [ %iv.next4, %for.body23 ], [ 0, %for.body5 ]
  %46 = phi double [ %add43, %for.body23 ], [ %mul13, %for.body5 ]
  %iv.next4 = add nuw nsw i64 %iv3, 1
  %47 = mul nuw nsw i64 %iv.next4, %12
  %48 = add nuw nsw i64 %47, %iv
  %arrayidx29 = getelementptr inbounds double, double* %29, i64 %48
  %49 = load double, double* %arrayidx29, align 8, !tbaa !75, !alias.scope !1492, !noalias !1495
  %50 = add nsw i64 %iv.next4, %38
  %arrayidx35 = getelementptr inbounds double, double* %31, i64 %50
  %51 = load double, double* %arrayidx35, align 8, !tbaa !75, !alias.scope !1497, !noalias !1500
  %mul36 = fmul fast double %51, %49
  %add43 = fadd fast double %46, %mul36
  store double %add43, double* %arrayidx19, align 8, !tbaa !75, !alias.scope !1502, !noalias !1505
  %52 = mul nuw nsw i64 %iv1, %22
  %53 = add nuw nsw i64 %iv3, %52
  %54 = mul nuw nsw i64 %iv, %23
  %55 = add nuw nsw i64 %53, %54
  %56 = getelementptr inbounds double, double* %_malloccache55, i64 %55
  store double %51, double* %56, align 8, !tbaa !75, !invariant.group !1509
  %57 = getelementptr inbounds double, double* %_malloccache45, i64 %55
  store double %49, double* %57, align 8, !tbaa !75, !invariant.group !1510
  %indvars.iv.next = add nuw nsw i64 %iv3, 2
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.inc44, label %for.body23, !llvm.loop !213

for.inc44:                                        ; preds = %for.body23, %for.body5
  %exitcond97.not = icmp eq i64 %iv.next2, %wide.trip.count96
  br i1 %exitcond97.not, label %for.inc47, label %for.body5, !llvm.loop !214

for.inc47:                                        ; preds = %for.inc44, %for.cond2.preheader
  %exitcond101.not = icmp eq i64 %iv.next, %12
  br i1 %exitcond101.not, label %for.end49, label %for.cond2.preheader, !llvm.loop !215

for.end49:                                        ; preds = %for.inc47, %resize.exit
  %58 = load { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }* %0, align 8
  ret { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* } %58
}

; Function Attrs: nounwind uwtable willreturn mustprogress
define internal { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* } @augmented_apply_global_transform.15(%struct.Matrix* nocapture readonly %pose_params, %struct.Matrix* nocapture %"pose_params'", %struct.Matrix* nocapture readonly %positions, %struct.Matrix* nocapture %"positions'") local_unnamed_addr #16 {
entry:
  %0 = alloca { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, align 8
  %call.i = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #45
  %"call.i'mi" = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #45
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16) dereferenceable_or_null(16) %"call.i'mi", i8 0, i64 16, i1 false)
  %"'ipc" = bitcast i8* %"call.i'mi" to %struct.Matrix*
  %1 = bitcast i8* %call.i to %struct.Matrix*
  %"nrows1.i'ipc" = bitcast i8* %"call.i'mi" to i32*
  %nrows1.i = bitcast i8* %call.i to i32*
  store i32 3, i32* %"nrows1.i'ipc", align 8, !tbaa !138, !alias.scope !1511, !noalias !1514
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138, !alias.scope !1514, !noalias !1511
  %"ncols2.i'ipg" = getelementptr inbounds i8, i8* %"call.i'mi", i64 4
  %ncols2.i = getelementptr inbounds i8, i8* %call.i, i64 4
  %"'ipc8" = bitcast i8* %"ncols2.i'ipg" to i32*
  %2 = bitcast i8* %ncols2.i to i32*
  store i32 3, i32* %"'ipc8", align 4, !tbaa !139, !alias.scope !1511, !noalias !1514
  store i32 3, i32* %2, align 4, !tbaa !139, !alias.scope !1514, !noalias !1511
  %call4.i = tail call noalias nonnull dereferenceable(72) dereferenceable_or_null(72) i8* @malloc(i64 72) #45
  %3 = getelementptr inbounds { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }* %0, i64 0, i32 4
  store i8* %call4.i, i8** %3, align 8
  %"call4.i'mi" = tail call noalias nonnull dereferenceable(72) dereferenceable_or_null(72) i8* @malloc(i64 72) #45
  %4 = getelementptr inbounds { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }* %0, i64 0, i32 3
  store i8* %"call4.i'mi", i8** %4, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(72) dereferenceable_or_null(72) %"call4.i'mi", i8 0, i64 72, i1 false)
  %"data.i'ipg" = getelementptr inbounds i8, i8* %"call.i'mi", i64 8
  %data.i = getelementptr inbounds i8, i8* %call.i, i64 8
  %"'ipc7" = bitcast i8* %"data.i'ipg" to i8**
  %5 = bitcast i8* %data.i to i8**
  store i8* %"call4.i'mi", i8** %"'ipc7", align 8, !tbaa !137, !alias.scope !1511, !noalias !1514
  store i8* %call4.i, i8** %5, align 8, !tbaa !137, !alias.scope !1514, !noalias !1511
  %"data'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"pose_params'", i64 0, i32 2
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 2
  %"'ipl6" = load double*, double** %"data'ipg", align 8, !tbaa !137, !alias.scope !1516, !noalias !1519
  %6 = getelementptr inbounds { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }* %0, i64 0, i32 2
  store double* %"'ipl6", double** %6, align 8
  %7 = load double*, double** %data, align 8, !tbaa !137, !alias.scope !1519, !noalias !1516
  %8 = getelementptr inbounds { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }* %0, i64 0, i32 10
  store double* %7, double** %8, align 8
  %_augmented = call { double, double*, double*, double, double } @augmented_angle_axis_to_rotation_matrix(double* %7, double* %"'ipl6", %struct.Matrix* nonnull %1, %struct.Matrix* nonnull %"'ipc")
  %.repack = getelementptr inbounds { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }* %0, i64 0, i32 1, i32 0
  %_augmented.elt = extractvalue { double, double*, double*, double, double } %_augmented, 0
  store double %_augmented.elt, double* %.repack, align 8
  %.repack1 = getelementptr inbounds { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }* %0, i64 0, i32 1, i32 1
  %_augmented.elt2 = extractvalue { double, double*, double*, double, double } %_augmented, 1
  store double* %_augmented.elt2, double** %.repack1, align 8
  %.repack3 = getelementptr inbounds { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }* %0, i64 0, i32 1, i32 2
  %_augmented.elt4 = extractvalue { double, double*, double*, double, double } %_augmented, 2
  store double* %_augmented.elt4, double** %.repack3, align 8
  %.repack5 = getelementptr inbounds { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }* %0, i64 0, i32 1, i32 3
  %_augmented.elt6 = extractvalue { double, double*, double*, double, double } %_augmented, 3
  store double %_augmented.elt6, double* %.repack5, align 8
  %.repack7 = getelementptr inbounds { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }* %0, i64 0, i32 1, i32 4
  %_augmented.elt8 = extractvalue { double, double*, double*, double, double } %_augmented, 4
  store double %_augmented.elt8, double* %.repack7, align 8
  %"'ipl" = load double*, double** %"data'ipg", align 8, !tbaa !137, !alias.scope !1516, !noalias !1519
  %9 = getelementptr inbounds { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }* %0, i64 0, i32 0
  store double* %"'ipl", double** %9, align 8
  %10 = load double*, double** %data, align 8, !tbaa !137, !alias.scope !1519, !noalias !1516
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 0
  %11 = load i32, i32* %nrows, align 8, !tbaa !138, !alias.scope !1519, !noalias !1516
  %12 = getelementptr inbounds { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }* %0, i64 0, i32 11
  store i32 %11, i32* %12, align 8
  %13 = bitcast i8* %call4.i to double*
  %14 = sext i32 %11 to i64
  %malloccall30 = tail call noalias nonnull dereferenceable(72) dereferenceable_or_null(72) i8* @malloc(i64 72)
  %_malloccache = bitcast i8* %malloccall30 to double*
  %15 = getelementptr inbounds { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }* %0, i64 0, i32 12
  %16 = bitcast double** %15 to i8**
  store i8* %malloccall30, i8** %16, align 8
  %malloccall38 = tail call noalias nonnull dereferenceable(72) dereferenceable_or_null(72) i8* @malloc(i64 72)
  %_malloccache39 = bitcast i8* %malloccall38 to double*
  %17 = getelementptr inbounds { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }* %0, i64 0, i32 13
  %18 = bitcast double** %17 to i8**
  store i8* %malloccall38, i8** %18, align 8
  br label %for.cond1.preheader

for.cond1.preheader:                              ; preds = %for.inc12, %entry
  %iv = phi i64 [ %iv.next, %for.inc12 ], [ 0, %entry ]
  %iv.next = add nuw nsw i64 %iv, 1
  %19 = add nsw i64 %iv, %14
  %arrayidx = getelementptr inbounds double, double* %10, i64 %19
  %20 = mul nuw nsw i64 %iv, 3
  br label %for.body3

for.body3:                                        ; preds = %for.body3, %for.cond1.preheader
  %iv1 = phi i64 [ %iv.next2, %for.body3 ], [ 0, %for.cond1.preheader ]
  %iv.next2 = add nuw nsw i64 %iv1, 1
  %21 = load double, double* %arrayidx, align 8, !tbaa !75, !alias.scope !1521, !noalias !1524
  %22 = add nuw nsw i64 %20, %iv1
  %arrayidx10 = getelementptr inbounds double, double* %13, i64 %22
  %23 = load double, double* %arrayidx10, align 8, !tbaa !75, !alias.scope !1526, !noalias !1529
  %mul11 = fmul fast double %23, %21
  store double %mul11, double* %arrayidx10, align 8, !tbaa !75, !alias.scope !1526, !noalias !1529
  %24 = getelementptr inbounds double, double* %_malloccache39, i64 %22
  store double %23, double* %24, align 8, !tbaa !75, !invariant.group !1531
  %25 = getelementptr inbounds double, double* %_malloccache, i64 %22
  store double %21, double* %25, align 8, !tbaa !75, !invariant.group !1532
  %exitcond102.not = icmp eq i64 %iv.next2, 3
  br i1 %exitcond102.not, label %for.inc12, label %for.body3, !llvm.loop !223

for.inc12:                                        ; preds = %for.body3
  %exitcond107.not = icmp eq i64 %iv.next, 3
  br i1 %exitcond107.not, label %for.end14, label %for.cond1.preheader, !llvm.loop !224

for.end14:                                        ; preds = %for.inc12
  %call.i81 = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #45
  %26 = getelementptr inbounds { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }* %0, i64 0, i32 7
  store i8* %call.i81, i8** %26, align 8
  %"call.i81'mi" = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #45
  %27 = getelementptr inbounds { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }* %0, i64 0, i32 6
  store i8* %"call.i81'mi", i8** %27, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16) dereferenceable_or_null(16) %"call.i81'mi", i8 0, i64 16, i1 false)
  %"'ipc9" = bitcast i8* %"call.i81'mi" to %struct.Matrix*
  %28 = bitcast i8* %call.i81 to %struct.Matrix*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %call.i81, i8 0, i64 16, i1 false) #45
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %"call.i81'mi", i8 0, i64 16, i1 false) #45
  %_augmented10 = call { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* } @augmented_mat_mult.14(%struct.Matrix* nonnull %1, %struct.Matrix* nonnull %"'ipc", %struct.Matrix* %positions, %struct.Matrix* %"positions'", %struct.Matrix* nonnull %28, %struct.Matrix* nonnull %"'ipc9")
  %29 = getelementptr inbounds { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }* %0, i64 0, i32 5
  store { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* } %_augmented10, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }* %29, align 8
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 1
  %30 = load i32, i32* %ncols, align 4, !tbaa !139, !alias.scope !1533, !noalias !1536
  %31 = getelementptr inbounds { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }* %0, i64 0, i32 14
  store i32 %30, i32* %31, align 8
  %cmp1789 = icmp sgt i32 %30, 0
  br i1 %cmp1789, label %for.cond19.preheader.lr.ph, label %delete_matrix.exit

for.cond19.preheader.lr.ph:                       ; preds = %for.end14
  %nrows20 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 0
  %32 = load i32, i32* %nrows20, align 8, !tbaa !138, !alias.scope !1533, !noalias !1536
  %33 = getelementptr inbounds { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }* %0, i64 0, i32 15
  store i32 %32, i32* %33, align 4
  %cmp2187 = icmp sgt i32 %32, 0
  %data23 = getelementptr inbounds i8, i8* %call.i81, i64 8
  %34 = bitcast i8* %data23 to double**
  %nrows24 = bitcast i8* %call.i81 to i32*
  %"data36'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"positions'", i64 0, i32 2
  %data36 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 2
  %wide.trip.count = zext i32 %32 to i64
  %35 = sext i32 %32 to i64
  %36 = zext i32 %30 to i64
  %mallocsize = shl nuw nsw i64 %36, 3
  %malloccall = tail call noalias nonnull i8* @malloc(i64 %mallocsize)
  %"'ipl11_malloccache" = bitcast i8* %malloccall to double**
  %37 = getelementptr inbounds { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }* %0, i64 0, i32 8
  %38 = bitcast double*** %37 to i8**
  store i8* %malloccall, i8** %38, align 8
  %malloccall21 = tail call noalias nonnull i8* @malloc(i64 %mallocsize)
  %"'ipl16_malloccache" = bitcast i8* %malloccall21 to double**
  %39 = getelementptr inbounds { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }* %0, i64 0, i32 9
  %40 = bitcast double*** %39 to i8**
  store i8* %malloccall21, i8** %40, align 8
  %mallocsize46 = shl nuw nsw i64 %36, 2
  %malloccall47 = tail call noalias nonnull i8* @malloc(i64 %mallocsize46)
  %mul31_malloccache = bitcast i8* %malloccall47 to i32*
  %41 = getelementptr inbounds { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }* %0, i64 0, i32 16
  %42 = bitcast i32** %41 to i8**
  store i8* %malloccall47, i8** %42, align 8
  br label %for.cond19.preheader

for.cond19.preheader:                             ; preds = %for.inc45, %for.cond19.preheader.lr.ph
  %iv3 = phi i64 [ %iv.next4, %for.inc45 ], [ 0, %for.cond19.preheader.lr.ph ]
  %iv.next4 = add nuw nsw i64 %iv3, 1
  br i1 %cmp2187, label %for.body22.lr.ph, label %for.inc45

for.body22.lr.ph:                                 ; preds = %for.cond19.preheader
  %43 = load double*, double** %34, align 8, !tbaa !137, !alias.scope !1538, !noalias !1541
  %44 = load i32, i32* %nrows24, align 8, !tbaa !138, !alias.scope !1538, !noalias !1541
  %45 = sext i32 %44 to i64
  %46 = mul nsw i64 %iv3, %45
  %"'ipl16" = load double*, double** %"data'ipg", align 8, !tbaa !137, !alias.scope !1516, !noalias !1519
  %47 = load double*, double** %data, align 8, !tbaa !137, !alias.scope !1519, !noalias !1516
  %48 = load i32, i32* %nrows, align 8, !tbaa !138, !alias.scope !1519, !noalias !1516
  %mul31 = shl nsw i32 %48, 1
  %"'ipl11" = load double*, double** %"data36'ipg", align 8, !tbaa !137, !alias.scope !1536, !noalias !1533
  %49 = getelementptr inbounds double*, double** %"'ipl11_malloccache", i64 %iv3
  store double* %"'ipl11", double** %49, align 8, !tbaa !137, !invariant.group !1543
  %50 = getelementptr inbounds i32, i32* %mul31_malloccache, i64 %iv3
  store i32 %mul31, i32* %50, align 4, !invariant.group !1544
  %51 = getelementptr inbounds double*, double** %"'ipl16_malloccache", i64 %iv3
  store double* %"'ipl16", double** %51, align 8, !tbaa !137, !invariant.group !1545
  %52 = load double*, double** %data36, align 8, !tbaa !137, !alias.scope !1533, !noalias !1536
  %53 = sext i32 %mul31 to i64
  %54 = mul nsw i64 %iv3, %35
  br label %for.body22

for.body22:                                       ; preds = %for.body22, %for.body22.lr.ph
  %iv5 = phi i64 [ %iv.next6, %for.body22 ], [ 0, %for.body22.lr.ph ]
  %iv.next6 = add nuw nsw i64 %iv5, 1
  %55 = add nsw i64 %iv5, %46
  %arrayidx28 = getelementptr inbounds double, double* %43, i64 %55
  %56 = load double, double* %arrayidx28, align 8, !tbaa !75, !alias.scope !1546, !noalias !1549
  %57 = add nsw i64 %iv5, %53
  %arrayidx34 = getelementptr inbounds double, double* %47, i64 %57
  %58 = load double, double* %arrayidx34, align 8, !tbaa !75, !alias.scope !1551, !noalias !1554
  %add35 = fadd fast double %58, %56
  %59 = add nsw i64 %iv5, %54
  %arrayidx41 = getelementptr inbounds double, double* %52, i64 %59
  store double %add35, double* %arrayidx41, align 8, !tbaa !75, !alias.scope !1556, !noalias !1559
  %exitcond.not = icmp eq i64 %iv.next6, %wide.trip.count
  br i1 %exitcond.not, label %for.inc45, label %for.body22, !llvm.loop !225

for.inc45:                                        ; preds = %for.body22, %for.cond19.preheader
  %exitcond98.not = icmp eq i64 %iv.next4, %36
  br i1 %exitcond98.not, label %delete_matrix.exit, label %for.cond19.preheader, !llvm.loop !226

delete_matrix.exit:                               ; preds = %for.inc45, %for.end14
  tail call void @free(i8* nonnull %call.i) #45
  call void @free(i8* nonnull %"call.i'mi") #45
  %60 = load { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }* %0, align 8
  ret { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* } %60
}

; Function Attrs: inlinehint nounwind uwtable willreturn mustprogress
define internal fastcc { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* } @augmented__ZL28get_skinned_vertex_positionsiPK6MatrixPKiS1_S1_S1_iS1_PS_i.16(i32 %bone_count, %struct.Matrix* noalias nocapture readonly %base_relatives, i32* nocapture readonly %parents, %struct.Matrix* noalias nocapture readonly %inverse_base_absolutes, %struct.Matrix* noalias nocapture readonly %base_positions, %struct.Matrix* noalias nocapture readonly %weights, i32 %is_mirrored, %struct.Matrix* noalias nocapture readonly %pose_params, %struct.Matrix* nocapture %"pose_params'", %struct.Matrix* noalias nocapture %positions, %struct.Matrix* nocapture %"positions'") unnamed_addr #36 {
entry:
  %0 = alloca { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }, align 8
  %conv.i = sext i32 %bone_count to i64
  %mul.i = shl nsw i64 %conv.i, 4
  %call.i = tail call noalias i8* @malloc(i64 %mul.i) #45
  %1 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 1
  store i8* %call.i, i8** %1, align 8
  %"call.i'mi" = tail call noalias nonnull i8* @malloc(i64 %mul.i) #45
  %2 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 0
  store i8* %"call.i'mi", i8** %2, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %"call.i'mi", i8 0, i64 %mul.i, i1 false)
  %cmp15.i = icmp sgt i32 %bone_count, 0
  br i1 %cmp15.i, label %for.body.preheader.i11, label %get_matrix_array.exit6

get_matrix_array.exit6:                           ; preds = %entry
  %call.i3 = tail call noalias i8* @malloc(i64 %mul.i) #45
  %3 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 5
  store i8* %call.i3, i8** %3, align 8
  %"call.i3'mi" = tail call noalias nonnull i8* @malloc(i64 %mul.i) #45
  %4 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 4
  store i8* %"call.i3'mi", i8** %4, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %"call.i3'mi", i8 0, i64 %mul.i, i1 false)
  %call.i9 = tail call noalias i8* @malloc(i64 %mul.i) #45
  %5 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 3
  store i8* %call.i9, i8** %5, align 8
  %"call.i9'mi" = tail call noalias nonnull i8* @malloc(i64 %mul.i) #45
  %6 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 2
  store i8* %"call.i9'mi", i8** %6, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %"call.i9'mi", i8 0, i64 %mul.i, i1 false)
  br label %get_matrix_array.exit12

for.body.preheader.i11:                           ; preds = %entry
  %7 = zext i32 %bone_count to i64
  %8 = shl nuw nsw i64 %7, 4
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %call.i, i8 0, i64 %8, i1 false) #45
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %"call.i'mi", i8 0, i64 %8, i1 false) #45
  %call.i359 = tail call noalias i8* @malloc(i64 %mul.i) #45
  %9 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 9
  store i8* %call.i359, i8** %9, align 8
  %"call.i359'mi" = tail call noalias nonnull i8* @malloc(i64 %mul.i) #45
  %10 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 8
  store i8* %"call.i359'mi", i8** %10, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %"call.i359'mi", i8 0, i64 %mul.i, i1 false)
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %call.i359, i8 0, i64 %8, i1 false) #45
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %"call.i359'mi", i8 0, i64 %8, i1 false) #45
  %call.i963 = tail call noalias i8* @malloc(i64 %mul.i) #45
  %11 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 7
  store i8* %call.i963, i8** %11, align 8
  %"call.i963'mi" = tail call noalias nonnull i8* @malloc(i64 %mul.i) #45
  %12 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 6
  store i8* %"call.i963'mi", i8** %12, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %"call.i963'mi", i8 0, i64 %mul.i, i1 false)
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %call.i963, i8 0, i64 %8, i1 false) #45
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %"call.i963'mi", i8 0, i64 %8, i1 false) #45
  br label %get_matrix_array.exit12

get_matrix_array.exit12:                          ; preds = %for.body.preheader.i11, %get_matrix_array.exit6
  %13 = phi i8* [ %"call.i9'mi", %get_matrix_array.exit6 ], [ %"call.i963'mi", %for.body.preheader.i11 ]
  %call.i966 = phi i8* [ %call.i9, %get_matrix_array.exit6 ], [ %call.i963, %for.body.preheader.i11 ]
  %14 = phi i8* [ %"call.i3'mi", %get_matrix_array.exit6 ], [ %"call.i359'mi", %for.body.preheader.i11 ]
  %call.i36064 = phi i8* [ %call.i3, %get_matrix_array.exit6 ], [ %call.i359, %for.body.preheader.i11 ]
  %"'ipc" = bitcast i8* %"call.i'mi" to %struct.Matrix*
  %15 = bitcast i8* %call.i to %struct.Matrix*
  %"'ipc9" = bitcast i8* %14 to %struct.Matrix*
  %16 = bitcast i8* %call.i36064 to %struct.Matrix*
  %"'ipc11" = bitcast i8* %13 to %struct.Matrix*
  %17 = bitcast i8* %call.i966 to %struct.Matrix*
  %_augmented10 = call { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* } @augmented_get_posed_relatives(i32 %bone_count, %struct.Matrix* %base_relatives, %struct.Matrix* %pose_params, %struct.Matrix* %"pose_params'", %struct.Matrix* %15, %struct.Matrix* nonnull %"'ipc")
  %18 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 11
  store { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* } %_augmented10, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }* %18, align 8
  %_augmented = call { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } @augmented_relatives_to_absolutes(i32 %bone_count, %struct.Matrix* %15, %struct.Matrix* nonnull %"'ipc", i32* %parents, %struct.Matrix* %16, %struct.Matrix* nonnull %"'ipc9")
  %.repack = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 10, i32 0
  %_augmented.elt = extractvalue { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %_augmented, 0
  store i8** %_augmented.elt, i8*** %.repack, align 8
  %.repack1 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 10, i32 1
  %_augmented.elt2 = extractvalue { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %_augmented, 1
  store i8** %_augmented.elt2, i8*** %.repack1, align 8
  %.repack3 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 10, i32 2
  %_augmented.elt4 = extractvalue { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %_augmented, 2
  store double** %_augmented.elt4, double*** %.repack3, align 8
  %.repack5 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 10, i32 3
  %_augmented.elt6 = extractvalue { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %_augmented, 3
  store { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }* %_augmented.elt6, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }** %.repack5, align 8
  %.repack7 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 10, i32 4
  %_augmented.elt8 = extractvalue { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %_augmented, 4
  store i32* %_augmented.elt8, i32** %.repack7, align 8
  %.repack9 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 10, i32 5
  %_augmented.elt10 = extractvalue { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %_augmented, 5
  store i1* %_augmented.elt10, i1** %.repack9, align 8
  %.repack11 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 10, i32 6
  %_augmented.elt12 = extractvalue { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %_augmented, 6
  store i32* %_augmented.elt12, i32** %.repack11, align 8
  br i1 %cmp15.i, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %get_matrix_array.exit12
  %wide.trip.count101 = zext i32 %bone_count to i64
  %mallocsize = mul nuw nsw i64 %wide.trip.count101, 72
  %malloccall = tail call noalias nonnull i8* @malloc(i64 %mallocsize)
  %_augmented12_malloccache = bitcast i8* %malloccall to { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*
  %19 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 12
  %20 = bitcast { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }** %19 to i8**
  store i8* %malloccall, i8** %20, align 8
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %iv = phi i64 [ %iv.next, %for.body ], [ 0, %for.body.preheader ]
  %iv.next = add nuw nsw i64 %iv, 1
  %"arrayidx'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"'ipc9", i64 %iv
  %arrayidx = getelementptr inbounds %struct.Matrix, %struct.Matrix* %16, i64 %iv
  %arrayidx4 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %inverse_base_absolutes, i64 %iv
  %"arrayidx6'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"'ipc11", i64 %iv
  %arrayidx6 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %17, i64 %iv
  %_augmented12 = call { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** } @augmented_mat_mult.4(%struct.Matrix* %arrayidx, %struct.Matrix* nonnull %"arrayidx'ipg", %struct.Matrix* %arrayidx4, %struct.Matrix* %arrayidx6, %struct.Matrix* nonnull %"arrayidx6'ipg")
  %21 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %_augmented12_malloccache, i64 %iv
  store { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** } %_augmented12, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %21, align 8, !invariant.group !1561
  %exitcond102.not = icmp eq i64 %iv.next, %wide.trip.count101
  br i1 %exitcond102.not, label %for.end, label %for.body, !llvm.loop !234

for.end:                                          ; preds = %for.body, %get_matrix_array.exit12
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %base_positions, i64 0, i32 1
  %22 = load i32, i32* %ncols, align 4, !tbaa !139, !alias.scope !1562, !noalias !1565
  %23 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 25
  store i32 %22, i32* %23, align 8
  %"nrows1.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"positions'", i64 0, i32 0
  %nrows1.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 0
  %24 = load i32, i32* %nrows1.i, align 8, !tbaa !138, !alias.scope !1567, !noalias !1570
  %"ncols2.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"positions'", i64 0, i32 1
  %ncols2.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 1
  %25 = load i32, i32* %ncols2.i, align 4, !tbaa !139, !alias.scope !1567, !noalias !1570
  %mul.i13 = mul nsw i32 %25, %24
  %26 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 26
  store i32 %mul.i13, i32* %26, align 4
  %mul3.i = mul i32 %22, 3
  %cmp.not.i = icmp eq i32 %mul.i13, %mul3.i
  br i1 %cmp.not.i, label %resize.exit, label %if.then.i

if.then.i:                                        ; preds = %for.end
  %"data.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"positions'", i64 0, i32 2
  %data.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 2
  %27 = load double*, double** %data.i, align 8, !tbaa !137, !alias.scope !1567, !noalias !1570
  %cmp4.not.i = icmp eq double* %27, null
  %28 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 27
  store i1 %cmp4.not.i, i1* %28, align 8
  %cmp8.i = icmp sgt i32 %mul3.i, 0
  br i1 %cmp8.i, label %resize.exit.thread, label %resize.exit.thread69

resize.exit.thread:                               ; preds = %if.then.i
  %conv31.i = zext i32 %mul3.i to i64
  %mul11.i = shl nuw nsw i64 %conv31.i, 3
  %call.i14 = tail call noalias i8* @malloc(i64 %mul11.i) #45
  %29 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 14
  store i8* %call.i14, i8** %29, align 8
  %"call.i14'mi" = tail call noalias nonnull i8* @malloc(i64 %mul11.i) #45
  %30 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 13
  store i8* %"call.i14'mi", i8** %30, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %"call.i14'mi", i8 0, i64 %mul11.i, i1 false)
  %"'ipc17" = bitcast double** %"data.i'ipg" to i8**
  %31 = bitcast double** %data.i to i8**
  store i8* %"call.i14'mi", i8** %"'ipc17", align 8, !tbaa !137, !alias.scope !1570, !noalias !1567
  store i8* %call.i14, i8** %31, align 8, !tbaa !137, !alias.scope !1567, !noalias !1570
  store i32 %22, i32* %"ncols2.i'ipg", align 4, !tbaa !139, !alias.scope !1570, !noalias !1567
  store i32 %22, i32* %ncols2.i, align 4, !tbaa !139, !alias.scope !1567, !noalias !1570
  store i32 3, i32* %"nrows1.i'ipg", align 8, !tbaa !138, !alias.scope !1570, !noalias !1567
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138, !alias.scope !1567, !noalias !1570
  br label %for.body.lr.ph.i

resize.exit.thread69:                             ; preds = %if.then.i
  store double* null, double** %"data.i'ipg", align 8, !tbaa !137, !alias.scope !1570, !noalias !1567
  store double* null, double** %data.i, align 8, !tbaa !137, !alias.scope !1567, !noalias !1570
  store i32 %22, i32* %"ncols2.i'ipg", align 4, !tbaa !139, !alias.scope !1570, !noalias !1567
  store i32 %22, i32* %ncols2.i, align 4, !tbaa !139, !alias.scope !1567, !noalias !1570
  store i32 3, i32* %"nrows1.i'ipg", align 8, !tbaa !138, !alias.scope !1570, !noalias !1567
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138, !alias.scope !1567, !noalias !1570
  br label %fill.exit

resize.exit:                                      ; preds = %for.end
  store i32 %22, i32* %"ncols2.i'ipg", align 4, !tbaa !139, !alias.scope !1570, !noalias !1567
  store i32 %22, i32* %ncols2.i, align 4, !tbaa !139, !alias.scope !1567, !noalias !1570
  store i32 3, i32* %"nrows1.i'ipg", align 8, !tbaa !138, !alias.scope !1570, !noalias !1567
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138, !alias.scope !1567, !noalias !1570
  %cmp7.i = icmp sgt i32 %mul.i13, 0
  br i1 %cmp7.i, label %resize.exit.for.body.lr.ph.i_crit_edge, label %fill.exit

resize.exit.for.body.lr.ph.i_crit_edge:           ; preds = %resize.exit
  %"data.i15.phi.trans.insert'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"positions'", i64 0, i32 2
  %data.i15.phi.trans.insert = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 2
  %"'ipc18" = bitcast double** %"data.i15.phi.trans.insert'ipg" to i8**
  %32 = bitcast double** %data.i15.phi.trans.insert to i8**
  %".pre105'ipl" = load i8*, i8** %"'ipc18", align 8, !tbaa !137, !alias.scope !1570, !noalias !1567
  %33 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 15
  store i8* %".pre105'ipl", i8** %33, align 8
  %.pre105 = load i8*, i8** %32, align 8, !tbaa !137, !alias.scope !1567, !noalias !1570
  %34 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 28
  store i8* %.pre105, i8** %34, align 8
  %.pre103 = zext i32 %mul3.i to i64
  %.pre104 = shl nuw nsw i64 %.pre103, 3
  br label %for.body.lr.ph.i

for.body.lr.ph.i:                                 ; preds = %resize.exit.for.body.lr.ph.i_crit_edge, %resize.exit.thread
  %.pre-phi = phi i64 [ %.pre104, %resize.exit.for.body.lr.ph.i_crit_edge ], [ %mul11.i, %resize.exit.thread ]
  %35 = phi i8* [ %.pre105, %resize.exit.for.body.lr.ph.i_crit_edge ], [ %call.i14, %resize.exit.thread ]
  call void @llvm.memset.p0i8.i64(i8* align 8 %35, i8 0, i64 %.pre-phi, i1 false) #46
  br label %fill.exit

fill.exit:                                        ; preds = %for.body.lr.ph.i, %resize.exit, %resize.exit.thread69
  %call.i16 = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #45
  %36 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 19
  store i8* %call.i16, i8** %36, align 8
  %"call.i16'mi" = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #45
  %37 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 18
  store i8* %"call.i16'mi", i8** %37, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16) dereferenceable_or_null(16) %"call.i16'mi", i8 0, i64 16, i1 false)
  %"'ipc21" = bitcast i8* %"call.i16'mi" to %struct.Matrix*
  %38 = bitcast i8* %call.i16 to %struct.Matrix*
  %"nrows1.i17'ipc" = bitcast i8* %"call.i16'mi" to i32*
  %nrows1.i17 = bitcast i8* %call.i16 to i32*
  store i32 4, i32* %"nrows1.i17'ipc", align 8, !tbaa !138, !alias.scope !1572, !noalias !1575
  store i32 4, i32* %nrows1.i17, align 8, !tbaa !138, !alias.scope !1575, !noalias !1572
  %"ncols2.i18'ipg" = getelementptr inbounds i8, i8* %"call.i16'mi", i64 4
  %ncols2.i18 = getelementptr inbounds i8, i8* %call.i16, i64 4
  %"'ipc20" = bitcast i8* %"ncols2.i18'ipg" to i32*
  %39 = bitcast i8* %ncols2.i18 to i32*
  store i32 %22, i32* %"'ipc20", align 4, !tbaa !139, !alias.scope !1572, !noalias !1575
  store i32 %22, i32* %39, align 4, !tbaa !139, !alias.scope !1575, !noalias !1572
  %mul.i19 = shl nsw i32 %22, 2
  %conv.i20 = sext i32 %mul.i19 to i64
  %mul3.i21 = shl nsw i64 %conv.i20, 3
  %call4.i = tail call noalias i8* @malloc(i64 %mul3.i21) #45
  %40 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 17
  store i8* %call4.i, i8** %40, align 8
  %"call4.i'mi" = tail call noalias nonnull i8* @malloc(i64 %mul3.i21) #45
  %41 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 16
  store i8* %"call4.i'mi", i8** %41, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %"call4.i'mi", i8 0, i64 %mul3.i21, i1 false)
  %"data.i22'ipg" = getelementptr inbounds i8, i8* %"call.i16'mi", i64 8
  %data.i22 = getelementptr inbounds i8, i8* %call.i16, i64 8
  %"'ipc19" = bitcast i8* %"data.i22'ipg" to i8**
  %42 = bitcast i8* %data.i22 to i8**
  store i8* %"call4.i'mi", i8** %"'ipc19", align 8, !tbaa !137, !alias.scope !1572, !noalias !1575
  store i8* %call4.i, i8** %42, align 8, !tbaa !137, !alias.scope !1575, !noalias !1572
  br i1 %cmp15.i, label %for.body11.lr.ph, label %for.end45

for.body11.lr.ph:                                 ; preds = %fill.exit
  %cmp1674 = icmp sgt i32 %22, 0
  %"'ipc39" = bitcast i8* %"data.i22'ipg" to double**
  %43 = bitcast i8* %data.i22 to double**
  %data23 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %weights, i64 0, i32 2
  %nrows24 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %weights, i64 0, i32 0
  %"data30'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"positions'", i64 0, i32 2
  %data30 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 2
  %wide.trip.count97 = zext i32 %bone_count to i64
  %wide.trip.count93 = zext i32 %22 to i64
  %mallocsize26 = mul nuw nsw i64 %wide.trip.count97, 72
  %malloccall27 = tail call noalias nonnull i8* @malloc(i64 %mallocsize26)
  %_augmented22_malloccache = bitcast i8* %malloccall27 to { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*
  %44 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 20
  %45 = bitcast { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }** %44 to i8**
  store i8* %malloccall27, i8** %45, align 8
  %mallocsize34 = shl nuw nsw i64 %wide.trip.count97, 3
  %malloccall35 = tail call noalias nonnull i8* @malloc(i64 %mallocsize34)
  %"'ipl_malloccache" = bitcast i8* %malloccall35 to double**
  %46 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 21
  %47 = bitcast double*** %46 to i8**
  store i8* %malloccall35, i8** %47, align 8
  %malloccall45 = tail call noalias nonnull i8* @malloc(i64 %mallocsize34)
  %"'ipl40_malloccache" = bitcast i8* %malloccall45 to double**
  %48 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 22
  %49 = bitcast double*** %48 to i8**
  store i8* %malloccall45, i8** %49, align 8
  %mallocsize58 = shl nuw nsw i64 %wide.trip.count97, 2
  %malloccall59 = tail call noalias nonnull i8* @malloc(i64 %mallocsize58)
  %_malloccache = bitcast i8* %malloccall59 to i32*
  %50 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 29
  %51 = bitcast i32** %50 to i8**
  store i8* %malloccall59, i8** %51, align 8
  %52 = mul nuw nsw i64 %wide.trip.count93, 3
  %53 = mul nuw nsw i64 %52, %wide.trip.count97
  %mallocsize67 = shl nuw nsw i64 %53, 3
  %malloccall68 = tail call noalias nonnull i8* @malloc(i64 %mallocsize67)
  %_malloccache69 = bitcast i8* %malloccall68 to double*
  %54 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 30
  %55 = bitcast double** %54 to i8**
  store i8* %malloccall68, i8** %55, align 8
  br label %for.body11

for.body11:                                       ; preds = %for.inc43, %for.body11.lr.ph
  %iv1 = phi i64 [ %iv.next2, %for.inc43 ], [ 0, %for.body11.lr.ph ]
  %iv.next2 = add nuw nsw i64 %iv1, 1
  %"arrayidx13'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"'ipc11", i64 %iv1
  %arrayidx13 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %17, i64 %iv1
  %_augmented22 = call { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** } @augmented_mat_mult.13(%struct.Matrix* %arrayidx13, %struct.Matrix* nonnull %"arrayidx13'ipg", %struct.Matrix* %base_positions, %struct.Matrix* nonnull %38, %struct.Matrix* nonnull %"'ipc21")
  %56 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %_augmented22_malloccache, i64 %iv1
  store { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** } %_augmented22, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %56, align 8, !invariant.group !1577
  br i1 %cmp1674, label %for.cond18.preheader.lr.ph, label %for.inc43

for.cond18.preheader.lr.ph:                       ; preds = %for.body11
  %"'ipl40" = load double*, double** %"'ipc39", align 8, !tbaa !137, !alias.scope !1572, !noalias !1575
  %57 = load double*, double** %43, align 8, !tbaa !137, !alias.scope !1575, !noalias !1572
  %58 = load i32, i32* %nrows1.i17, align 8, !tbaa !138, !alias.scope !1575, !noalias !1572
  %59 = load double*, double** %data23, align 8, !tbaa !137, !alias.scope !1578, !noalias !1581
  %60 = load i32, i32* %nrows24, align 8, !tbaa !138, !alias.scope !1578, !noalias !1581
  %"'ipl" = load double*, double** %"data30'ipg", align 8, !tbaa !137, !alias.scope !1570, !noalias !1567
  %61 = getelementptr inbounds double*, double** %"'ipl_malloccache", i64 %iv1
  store double* %"'ipl", double** %61, align 8, !tbaa !137, !invariant.group !1583
  %62 = getelementptr inbounds i32, i32* %_malloccache, i64 %iv1
  store i32 %58, i32* %62, align 4, !tbaa !138, !invariant.group !1584
  %63 = getelementptr inbounds double*, double** %"'ipl40_malloccache", i64 %iv1
  store double* %"'ipl40", double** %63, align 8, !tbaa !137, !invariant.group !1585
  %64 = load double*, double** %data30, align 8, !tbaa !137, !alias.scope !1567, !noalias !1570
  %65 = sext i32 %58 to i64
  %66 = sext i32 %60 to i64
  br label %for.cond18.preheader

for.cond18.preheader:                             ; preds = %for.inc40, %for.cond18.preheader.lr.ph
  %iv3 = phi i64 [ %iv.next4, %for.inc40 ], [ 0, %for.cond18.preheader.lr.ph ]
  %iv.next4 = add nuw nsw i64 %iv3, 1
  %67 = mul nsw i64 %iv3, %65
  %68 = mul nsw i64 %iv3, %66
  %69 = add nsw i64 %68, %iv1
  %arrayidx28 = getelementptr inbounds double, double* %59, i64 %69
  %70 = mul nuw nsw i64 %iv3, 3
  br label %for.body20

for.body20:                                       ; preds = %for.body20, %for.cond18.preheader
  %iv5 = phi i64 [ %iv.next6, %for.body20 ], [ 0, %for.cond18.preheader ]
  %iv.next6 = add nuw nsw i64 %iv5, 1
  %71 = add nsw i64 %67, %iv5
  %arrayidx22 = getelementptr inbounds double, double* %57, i64 %71
  %72 = load double, double* %arrayidx22, align 8, !tbaa !75, !alias.scope !1586, !noalias !1589
  %73 = load double, double* %arrayidx28, align 8, !tbaa !75, !alias.scope !1591, !noalias !1594
  %mul29 = fmul fast double %73, %72
  %74 = add nuw nsw i64 %iv5, %70
  %arrayidx35 = getelementptr inbounds double, double* %64, i64 %74
  %75 = load double, double* %arrayidx35, align 8, !tbaa !75, !alias.scope !1596, !noalias !1599
  %add36 = fadd fast double %75, %mul29
  store double %add36, double* %arrayidx35, align 8, !tbaa !75, !alias.scope !1596, !noalias !1599
  %76 = mul nuw nsw i64 %iv1, %52
  %77 = add nuw nsw i64 %74, %76
  %78 = getelementptr inbounds double, double* %_malloccache69, i64 %77
  store double %73, double* %78, align 8, !tbaa !75, !invariant.group !1601
  %exitcond86.not = icmp eq i64 %iv.next6, 3
  br i1 %exitcond86.not, label %for.inc40, label %for.body20, !llvm.loop !235

for.inc40:                                        ; preds = %for.body20
  %exitcond94.not = icmp eq i64 %iv.next4, %wide.trip.count93
  br i1 %exitcond94.not, label %for.inc43, label %for.cond18.preheader, !llvm.loop !236

for.inc43:                                        ; preds = %for.inc40, %for.body11
  %exitcond98.not = icmp eq i64 %iv.next2, %wide.trip.count97
  br i1 %exitcond98.not, label %for.end45, label %for.body11, !llvm.loop !237

for.end45:                                        ; preds = %for.inc43, %fill.exit
  %tobool.not = icmp ne i32 %is_mirrored, 0
  %cmp4871 = icmp sgt i32 %22, 0
  %or.cond = and i1 %tobool.not, %cmp4871
  br i1 %or.cond, label %for.body49.lr.ph, label %if.then61

for.body49.lr.ph:                                 ; preds = %for.end45
  %"data50'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"positions'", i64 0, i32 2
  %data50 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 2
  %"'ipl49" = load double*, double** %"data50'ipg", align 8, !tbaa !137, !alias.scope !1570, !noalias !1567
  %79 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 23
  store double* %"'ipl49", double** %79, align 8
  %80 = load double*, double** %data50, align 8, !tbaa !137, !alias.scope !1567, !noalias !1570
  %wide.trip.count = zext i32 %22 to i64
  %mallocsize77 = shl nuw nsw i64 %wide.trip.count, 3
  %malloccall78 = tail call noalias nonnull i8* @malloc(i64 %mallocsize77)
  %_malloccache79 = bitcast i8* %malloccall78 to double*
  %81 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 31
  %82 = bitcast double** %81 to i8**
  store i8* %malloccall78, i8** %82, align 8
  br label %for.body49

for.body49:                                       ; preds = %for.body49, %for.body49.lr.ph
  %iv7 = phi i64 [ %iv.next8, %for.body49 ], [ 0, %for.body49.lr.ph ]
  %iv.next8 = add nuw nsw i64 %iv7, 1
  %83 = mul nuw nsw i64 %iv7, 3
  %arrayidx55 = getelementptr inbounds double, double* %80, i64 %83
  %84 = load double, double* %arrayidx55, align 8, !tbaa !75, !alias.scope !1602, !noalias !1605
  %mul56 = fneg fast double %84
  store double %mul56, double* %arrayidx55, align 8, !tbaa !75, !alias.scope !1602, !noalias !1605
  %85 = getelementptr inbounds double, double* %_malloccache79, i64 %iv7
  store double %84, double* %85, align 8, !tbaa !75, !invariant.group !1607
  %exitcond.not = icmp eq i64 %iv.next8, %wide.trip.count
  br i1 %exitcond.not, label %if.then61, label %for.body49, !llvm.loop !238

if.then61:                                        ; preds = %for.body49, %for.end45
  %_augmented50 = call { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* } @augmented_apply_global_transform.15(%struct.Matrix* %pose_params, %struct.Matrix* %"pose_params'", %struct.Matrix* %positions, %struct.Matrix* %"positions'")
  %86 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 24
  store { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* } %_augmented50, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }* %86, align 8
  br i1 %cmp15.i, label %for.body.preheader.i28, label %delete_light_matrix_array.exit58

for.body.preheader.i28:                           ; preds = %if.then61
  %wide.trip.count.i27 = zext i32 %bone_count to i64
  %malloccall85 = tail call noalias nonnull i8* @malloc(i64 %wide.trip.count.i27)
  %87 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 32
  %88 = bitcast i1** %87 to i8**
  store i8* %malloccall85, i8** %88, align 8
  br label %for.body.i31

for.body.i31:                                     ; preds = %for.body.i31, %for.body.preheader.i28
  %iv9 = phi i64 [ %iv.next10, %for.body.i31 ], [ 0, %for.body.preheader.i28 ]
  %iv.next10 = add nuw nsw i64 %iv9, 1
  %data.i30 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %15, i64 %iv9, i32 2
  %89 = load double*, double** %data.i30, align 8, !tbaa !137, !alias.scope !1608, !noalias !1611
  %cmp1.not.i = icmp eq double* %89, null
  %90 = getelementptr inbounds i8, i8* %malloccall85, i64 %iv9
  %91 = bitcast i8* %90 to i1*
  store i1 %cmp1.not.i, i1* %91, align 1, !invariant.group !1613
  %exitcond.not.i34 = icmp eq i64 %iv.next10, %wide.trip.count.i27
  br i1 %exitcond.not.i34, label %for.body.preheader.i37, label %for.body.i31, !llvm.loop !212

for.body.preheader.i37:                           ; preds = %for.body.i31
  %malloccall90 = tail call noalias nonnull i8* @malloc(i64 %wide.trip.count.i27)
  %92 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 33
  %93 = bitcast i1** %92 to i8**
  store i8* %malloccall90, i8** %93, align 8
  br label %for.body.i41

for.body.i41:                                     ; preds = %for.body.i41, %for.body.preheader.i37
  %iv11 = phi i64 [ %iv.next12, %for.body.i41 ], [ 0, %for.body.preheader.i37 ]
  %iv.next12 = add nuw nsw i64 %iv11, 1
  %data.i39 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %16, i64 %iv11, i32 2
  %94 = load double*, double** %data.i39, align 8, !tbaa !137, !alias.scope !1614, !noalias !1617
  %cmp1.not.i40 = icmp eq double* %94, null
  %95 = getelementptr inbounds i8, i8* %malloccall90, i64 %iv11
  %96 = bitcast i8* %95 to i1*
  store i1 %cmp1.not.i40, i1* %96, align 1, !invariant.group !1619
  %exitcond.not.i44 = icmp eq i64 %iv.next12, %wide.trip.count.i27
  br i1 %exitcond.not.i44, label %for.body.preheader.i49, label %for.body.i41, !llvm.loop !212

for.body.preheader.i49:                           ; preds = %for.body.i41
  %malloccall95 = tail call noalias nonnull i8* @malloc(i64 %wide.trip.count.i27)
  %97 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 34
  %98 = bitcast i1** %97 to i8**
  store i8* %malloccall95, i8** %98, align 8
  br label %for.body.i53

for.body.i53:                                     ; preds = %for.body.i53, %for.body.preheader.i49
  %iv13 = phi i64 [ %iv.next14, %for.body.i53 ], [ 0, %for.body.preheader.i49 ]
  %iv.next14 = add nuw nsw i64 %iv13, 1
  %data.i51 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %17, i64 %iv13, i32 2
  %99 = load double*, double** %data.i51, align 8, !tbaa !137, !alias.scope !1620, !noalias !1623
  %cmp1.not.i52 = icmp eq double* %99, null
  %100 = getelementptr inbounds i8, i8* %malloccall95, i64 %iv13
  %101 = bitcast i8* %100 to i1*
  store i1 %cmp1.not.i52, i1* %101, align 1, !invariant.group !1625
  %exitcond.not.i56 = icmp eq i64 %iv.next14, %wide.trip.count.i27
  br i1 %exitcond.not.i56, label %delete_light_matrix_array.exit58, label %for.body.i53, !llvm.loop !212

delete_light_matrix_array.exit58:                 ; preds = %for.body.i53, %if.then61
  %102 = load { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* }* %0, align 8
  ret { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* } %102
}

; Function Attrs: inlinehint nounwind uwtable willreturn mustprogress
define internal fastcc void @diffe_ZL28get_skinned_vertex_positionsiPK6MatrixPKiS1_S1_S1_iS1_PS_i.17(i32 %bone_count, %struct.Matrix* noalias nocapture readonly %base_relatives, i32* nocapture readonly %parents, %struct.Matrix* noalias nocapture readonly %inverse_base_absolutes, %struct.Matrix* noalias nocapture readonly %base_positions, %struct.Matrix* noalias nocapture readonly %weights, i32 %is_mirrored, %struct.Matrix* noalias nocapture readonly %pose_params, %struct.Matrix* nocapture %"pose_params'", %struct.Matrix* noalias nocapture %positions, %struct.Matrix* nocapture %"positions'", { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* } %tapeArg) unnamed_addr #36 {
entry:
  %0 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 12
  %1 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 20
  %2 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 21
  %3 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 22
  %4 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 31
  %5 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 32
  %6 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 33
  %7 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 34
  %8 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 29
  %9 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 30
  %call.i = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 1
  %"call.i'mi" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 0
  %cmp15.i = icmp sgt i32 %bone_count, 0
  br i1 %cmp15.i, label %for.body.preheader.i11, label %get_matrix_array.exit6

get_matrix_array.exit6:                           ; preds = %entry
  %call.i3 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 5
  %"call.i3'mi" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 4
  %call.i9 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 3
  %"call.i9'mi" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 2
  br label %get_matrix_array.exit12

for.body.preheader.i11:                           ; preds = %entry
  %call.i359 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 9
  %"call.i359'mi" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 8
  %call.i963 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 7
  %"call.i963'mi" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 6
  br label %get_matrix_array.exit12

get_matrix_array.exit12:                          ; preds = %for.body.preheader.i11, %get_matrix_array.exit6
  %10 = phi i8* [ %"call.i9'mi", %get_matrix_array.exit6 ], [ %"call.i963'mi", %for.body.preheader.i11 ]
  %call.i966 = phi i8* [ %call.i9, %get_matrix_array.exit6 ], [ %call.i963, %for.body.preheader.i11 ]
  %11 = phi i8* [ %"call.i3'mi", %get_matrix_array.exit6 ], [ %"call.i359'mi", %for.body.preheader.i11 ]
  %call.i36064 = phi i8* [ %call.i3, %get_matrix_array.exit6 ], [ %call.i359, %for.body.preheader.i11 ]
  %"'ipc" = bitcast i8* %"call.i'mi" to %struct.Matrix*
  %12 = bitcast i8* %call.i to %struct.Matrix*
  %"'ipc9" = bitcast i8* %11 to %struct.Matrix*
  %13 = bitcast i8* %call.i36064 to %struct.Matrix*
  %"'ipc12" = bitcast i8* %10 to %struct.Matrix*
  %14 = bitcast i8* %call.i966 to %struct.Matrix*
  %tapeArg11 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 11
  %tapeArg10 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 10
  br i1 %cmp15.i, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %get_matrix_array.exit12
  %wide.trip.count101 = zext i32 %bone_count to i64
  br label %for.end

for.end:                                          ; preds = %for.body.preheader, %get_matrix_array.exit12
  %15 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 25
  %mul.i13 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 26
  %mul3.i = mul i32 %15, 3
  %cmp.not.i = icmp eq i32 %mul.i13, %mul3.i
  br i1 %cmp.not.i, label %resize.exit, label %if.end.i

if.end.i:                                         ; preds = %for.end
  %cmp8.i = icmp sgt i32 %mul3.i, 0
  br i1 %cmp8.i, label %for.body.lr.ph.i, label %fill.exit

resize.exit:                                      ; preds = %for.end
  %cmp7.i = icmp sgt i32 %mul.i13, 0
  br i1 %cmp7.i, label %for.body.lr.ph.i, label %fill.exit

for.body.lr.ph.i:                                 ; preds = %resize.exit, %if.end.i
  br label %fill.exit

fill.exit:                                        ; preds = %for.body.lr.ph.i, %resize.exit, %if.end.i
  %_cache.0 = phi i8 [ 0, %for.body.lr.ph.i ], [ 2, %resize.exit ], [ 1, %if.end.i ]
  %call.i16 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 19
  %"call.i16'mi" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 18
  %"'ipc30" = bitcast i8* %"call.i16'mi" to %struct.Matrix*
  %16 = bitcast i8* %call.i16 to %struct.Matrix*
  %call4.i = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 17
  %"call4.i'mi" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 16
  br i1 %cmp15.i, label %for.body11.lr.ph, label %for.end45

for.body11.lr.ph:                                 ; preds = %fill.exit
  %cmp1674 = icmp sgt i32 %15, 0
  %wide.trip.count97 = zext i32 %bone_count to i64
  %wide.trip.count93 = zext i32 %15 to i64
  br label %for.end45

for.end45:                                        ; preds = %for.body11.lr.ph, %fill.exit
  %tobool.not = icmp ne i32 %is_mirrored, 0
  %cmp4871 = icmp sgt i32 %15, 0
  %or.cond = and i1 %tobool.not, %cmp4871
  br i1 %or.cond, label %for.body49.lr.ph, label %if.then61

for.body49.lr.ph:                                 ; preds = %for.end45
  %wide.trip.count = zext i32 %15 to i64
  br label %if.then61

if.then61:                                        ; preds = %for.body49.lr.ph, %for.end45
  %tapeArg98 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 24
  br i1 %cmp15.i, label %for.body.preheader.i28, label %invertdelete_matrix.exit

for.body.preheader.i28:                           ; preds = %if.then61
  %wide.trip.count.i27 = zext i32 %bone_count to i64
  %wide.trip.count.i27_unwrap139 = zext i32 %bone_count to i64
  %_unwrap140 = add nsw i64 %wide.trip.count.i27_unwrap139, -1
  %17 = bitcast i1* %7 to i8*
  tail call void @free(i8* nonnull %17)
  %18 = bitcast i1* %6 to i8*
  tail call void @free(i8* nonnull %18)
  %19 = bitcast i1* %5 to i8*
  tail call void @free(i8* nonnull %19)
  br label %invertdelete_matrix.exit

invertentry:                                      ; preds = %invertfor.body.preheader.i11, %invertget_matrix_array.exit6
  call void @free(i8* nonnull %"call.i'mi")
  call void @free(i8* %call.i)
  ret void

invertget_matrix_array.exit6.critedge:            ; preds = %invertfor.end
  call void @differelatives_to_absolutes(i32 %bone_count, %struct.Matrix* %12, %struct.Matrix* %"'ipc", i32* %parents, %struct.Matrix* %13, %struct.Matrix* %"'ipc9", { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %tapeArg10)
  call void @diffeget_posed_relatives(i32 %bone_count, %struct.Matrix* %base_relatives, %struct.Matrix* %pose_params, %struct.Matrix* %"pose_params'", %struct.Matrix* %12, %struct.Matrix* %"'ipc", { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* } %tapeArg11)
  br label %invertget_matrix_array.exit6

invertget_matrix_array.exit6:                     ; preds = %invertfor.body.preheader, %invertget_matrix_array.exit6.critedge
  %"call.i9'mi_unwrap" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 2
  call void @free(i8* nonnull %"call.i9'mi_unwrap")
  %call.i9_unwrap = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 3
  call void @free(i8* %call.i9_unwrap)
  %"call.i3'mi_unwrap" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 4
  call void @free(i8* nonnull %"call.i3'mi_unwrap")
  %call.i3_unwrap = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 5
  call void @free(i8* %call.i3_unwrap)
  br label %invertentry

invertfor.body.preheader.i11:                     ; preds = %invertfor.body.preheader
  %"call.i963'mi_unwrap" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 6
  call void @free(i8* nonnull %"call.i963'mi_unwrap")
  %call.i963_unwrap = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 7
  call void @free(i8* %call.i963_unwrap)
  %"call.i359'mi_unwrap" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 8
  call void @free(i8* nonnull %"call.i359'mi_unwrap")
  %call.i359_unwrap = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 9
  call void @free(i8* %call.i359_unwrap)
  br label %invertentry

invertfor.body.preheader:                         ; preds = %invertfor.body
  %20 = bitcast { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %0 to i8*
  tail call void @free(i8* nonnull %20)
  call void @differelatives_to_absolutes(i32 %bone_count, %struct.Matrix* %12, %struct.Matrix* %"'ipc", i32* %parents, %struct.Matrix* %13, %struct.Matrix* %"'ipc9", { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %tapeArg10)
  call void @diffeget_posed_relatives(i32 %bone_count, %struct.Matrix* %base_relatives, %struct.Matrix* %pose_params, %struct.Matrix* %"pose_params'", %struct.Matrix* %12, %struct.Matrix* %"'ipc", { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* } %tapeArg11)
  br i1 %cmp15.i, label %invertfor.body.preheader.i11, label %invertget_matrix_array.exit6

invertfor.body:                                   ; preds = %mergeinvertfor.body_for.end.loopexit, %invertfor.body
  %"iv'ac.0.in" = phi i64 [ %wide.trip.count101_unwrap, %mergeinvertfor.body_for.end.loopexit ], [ %"iv'ac.0", %invertfor.body ]
  %"iv'ac.0" = add nsw i64 %"iv'ac.0.in", -1
  %arrayidx_unwrap = getelementptr inbounds %struct.Matrix, %struct.Matrix* %13, i64 %"iv'ac.0"
  %"arrayidx'ipg_unwrap" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"'ipc9", i64 %"iv'ac.0"
  %arrayidx4_unwrap = getelementptr inbounds %struct.Matrix, %struct.Matrix* %inverse_base_absolutes, i64 %"iv'ac.0"
  %arrayidx6_unwrap = getelementptr inbounds %struct.Matrix, %struct.Matrix* %14, i64 %"iv'ac.0"
  %"arrayidx6'ipg_unwrap" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"'ipc12", i64 %"iv'ac.0"
  %_unwrap16 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %0, i64 %"iv'ac.0"
  %tapeArg13_unwrap = load { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %_unwrap16, align 8, !invariant.group !1626
  call void @diffemat_mult.10(%struct.Matrix* %arrayidx_unwrap, %struct.Matrix* %"arrayidx'ipg_unwrap", %struct.Matrix* %arrayidx4_unwrap, %struct.Matrix* %arrayidx6_unwrap, %struct.Matrix* %"arrayidx6'ipg_unwrap", { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** } %tapeArg13_unwrap)
  %21 = icmp eq i64 %"iv'ac.0", 0
  br i1 %21, label %invertfor.body.preheader, label %invertfor.body

mergeinvertfor.body_for.end.loopexit:             ; preds = %invertfor.end
  %wide.trip.count101_unwrap = zext i32 %bone_count to i64
  br label %invertfor.body

invertfor.end:                                    ; preds = %invertfill.exit, %invertfor.body.lr.ph.i_phimerge, %invertresize.exit.thread
  br i1 %cmp15.i, label %mergeinvertfor.body_for.end.loopexit, label %invertget_matrix_array.exit6.critedge

invertresize.exit.thread:                         ; preds = %invertfor.body.lr.ph.i_phimerge
  %"call.i14'mi_unwrap" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 13
  call void @free(i8* nonnull %"call.i14'mi_unwrap")
  %call.i14_unwrap = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 14
  call void @free(i8* %call.i14_unwrap)
  br label %invertfor.end

invertfor.body.lr.ph.i_phimerge:                  ; preds = %invertfill.exit
  %.in = zext i32 %mul3.i to i64
  %22 = shl nuw nsw i64 %.in, 3
  %".pre105'il_phi_unwrap" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 15
  %"call.i14'mi_unwrap25" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 13
  %23 = select i1 %cmp.not.i, i8* %".pre105'il_phi_unwrap", i8* %"call.i14'mi_unwrap25"
  call void @llvm.memset.p0i8.i64(i8* align 8 %23, i8 0, i64 %22, i1 false) #46
  br i1 %cmp.not.i, label %invertfor.end, label %invertresize.exit.thread

invertfill.exit:                                  ; preds = %invertfor.end45, %invertfor.body11.lr.ph
  call void @free(i8* nonnull %"call4.i'mi")
  call void @free(i8* %call4.i)
  call void @free(i8* nonnull %"call.i16'mi")
  call void @free(i8* %call.i16)
  %cond = icmp eq i8 %_cache.0, 0
  br i1 %cond, label %invertfor.body.lr.ph.i_phimerge, label %invertfor.end

invertfor.body11.lr.ph:                           ; preds = %invertfor.body11
  %24 = bitcast { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %1 to i8*
  tail call void @free(i8* nonnull %24)
  %25 = bitcast double** %2 to i8*
  tail call void @free(i8* nonnull %25)
  %26 = bitcast double** %3 to i8*
  tail call void @free(i8* nonnull %26)
  %27 = bitcast i32* %8 to i8*
  tail call void @free(i8* nonnull %27)
  %28 = bitcast double* %9 to i8*
  tail call void @free(i8* nonnull %28)
  br label %invertfill.exit

invertfor.body11:                                 ; preds = %invertfor.inc43, %invertfor.cond18.preheader
  %arrayidx13_unwrap = getelementptr inbounds %struct.Matrix, %struct.Matrix* %14, i64 %"iv1'ac.0"
  %"arrayidx13'ipg_unwrap" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"'ipc12", i64 %"iv1'ac.0"
  %_unwrap37 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %1, i64 %"iv1'ac.0"
  %tapeArg31_unwrap = load { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %_unwrap37, align 8, !invariant.group !1627
  call void @diffemat_mult.18(%struct.Matrix* %arrayidx13_unwrap, %struct.Matrix* %"arrayidx13'ipg_unwrap", %struct.Matrix* %base_positions, %struct.Matrix* %16, %struct.Matrix* %"'ipc30", { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** } %tapeArg31_unwrap)
  %29 = icmp eq i64 %"iv1'ac.0", 0
  br i1 %29, label %invertfor.body11.lr.ph, label %invertfor.inc43

invertfor.cond18.preheader:                       ; preds = %invertfor.body20
  %30 = icmp eq i64 %"iv3'ac.1", 0
  br i1 %30, label %invertfor.body11, label %invertfor.inc40

invertfor.body20:                                 ; preds = %invertfor.inc40, %incinvertfor.body20
  %"iv5'ac.1" = phi i64 [ 2, %invertfor.inc40 ], [ %42, %incinvertfor.body20 ]
  %_unwrap54 = getelementptr inbounds double*, double** %2, i64 %"iv1'ac.0"
  %"'il_phi3_unwrap" = load double*, double** %_unwrap54, align 8, !invariant.group !1628
  %_unwrap55 = mul nuw nsw i64 %"iv3'ac.1", 3
  %_unwrap56 = add nuw nsw i64 %"iv5'ac.1", %_unwrap55
  %"arrayidx35'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi3_unwrap", i64 %_unwrap56
  %31 = load double, double* %"arrayidx35'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1629, !noalias !1632
  %32 = mul nuw nsw i64 %wide.trip.count93_unwrap90, 3
  %33 = mul nuw nsw i64 %"iv1'ac.0", %32
  %34 = add nuw nsw i64 %_unwrap56, %33
  %35 = getelementptr inbounds double, double* %9, i64 %34
  %36 = load double, double* %35, align 8, !tbaa !75, !invariant.group !1634
  %m1diffe = fmul fast double %31, %36
  %_unwrap71 = getelementptr inbounds double*, double** %3, i64 %"iv1'ac.0"
  %"'il_phi1_unwrap" = load double*, double** %_unwrap71, align 8, !invariant.group !1635
  %37 = getelementptr inbounds i32, i32* %8, i64 %"iv1'ac.0"
  %38 = load i32, i32* %37, align 4, !tbaa !138, !alias.scope !1636, !noalias !1639, !invariant.group !1641
  %_unwrap86 = sext i32 %38 to i64
  %_unwrap87 = mul nsw i64 %"iv3'ac.1", %_unwrap86
  %_unwrap88 = add nsw i64 %_unwrap87, %"iv5'ac.1"
  %"arrayidx22'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi1_unwrap", i64 %_unwrap88
  %39 = load double, double* %"arrayidx22'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1642, !noalias !1645
  %40 = fadd fast double %39, %m1diffe
  store double %40, double* %"arrayidx22'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1642, !noalias !1645
  %41 = icmp eq i64 %"iv5'ac.1", 0
  br i1 %41, label %invertfor.cond18.preheader, label %incinvertfor.body20

incinvertfor.body20:                              ; preds = %invertfor.body20
  %42 = add nsw i64 %"iv5'ac.1", -1
  br label %invertfor.body20

invertfor.inc40:                                  ; preds = %invertfor.inc43.loopexit, %invertfor.cond18.preheader
  %"iv3'ac.1.in" = phi i64 [ %wide.trip.count93_unwrap90, %invertfor.inc43.loopexit ], [ %"iv3'ac.1", %invertfor.cond18.preheader ]
  %"iv3'ac.1" = add nsw i64 %"iv3'ac.1.in", -1
  br label %invertfor.body20

invertfor.inc43.loopexit:                         ; preds = %invertfor.inc43
  %wide.trip.count93_unwrap90 = zext i32 %15 to i64
  br label %invertfor.inc40

invertfor.inc43:                                  ; preds = %mergeinvertfor.body11_for.end45.loopexit, %invertfor.body11
  %"iv1'ac.0.in" = phi i64 [ %wide.trip.count97_unwrap92, %mergeinvertfor.body11_for.end45.loopexit ], [ %"iv1'ac.0", %invertfor.body11 ]
  %"iv1'ac.0" = add nsw i64 %"iv1'ac.0.in", -1
  br i1 %cmp4871, label %invertfor.inc43.loopexit, label %invertfor.body11

mergeinvertfor.body11_for.end45.loopexit:         ; preds = %invertfor.end45
  %wide.trip.count97_unwrap92 = zext i32 %bone_count to i64
  br label %invertfor.inc43

invertfor.end45:                                  ; preds = %invertdelete_matrix.exit, %invertfor.body49.lr.ph
  br i1 %cmp15.i, label %mergeinvertfor.body11_for.end45.loopexit, label %invertfill.exit

invertfor.body49.lr.ph:                           ; preds = %invertfor.body49
  %43 = bitcast double* %4 to i8*
  tail call void @free(i8* nonnull %43)
  br label %invertfor.end45

invertfor.body49:                                 ; preds = %mergeinvertfor.body49_if.then61.loopexit, %invertfor.body49
  %"iv7'ac.0.in" = phi i64 [ %wide.trip.count_unwrap, %mergeinvertfor.body49_if.then61.loopexit ], [ %"iv7'ac.0", %invertfor.body49 ]
  %"iv7'ac.0" = add nsw i64 %"iv7'ac.0.in", -1
  %"'il_phi4_unwrap" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i8*, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 23
  %_unwrap95 = mul nuw nsw i64 %"iv7'ac.0", 3
  %"arrayidx55'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi4_unwrap", i64 %_unwrap95
  %44 = load double, double* %"arrayidx55'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1647, !noalias !1650
  %45 = fneg fast double %44
  store double %45, double* %"arrayidx55'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1647, !noalias !1650
  %46 = icmp eq i64 %"iv7'ac.0", 0
  br i1 %46, label %invertfor.body49.lr.ph, label %invertfor.body49

mergeinvertfor.body49_if.then61.loopexit:         ; preds = %invertdelete_matrix.exit
  %wide.trip.count_unwrap = zext i32 %15 to i64
  br label %invertfor.body49

invertdelete_matrix.exit:                         ; preds = %for.body.preheader.i28, %if.then61
  call void @diffeapply_global_transform.19(%struct.Matrix* %pose_params, %struct.Matrix* %"pose_params'", %struct.Matrix* %positions, %struct.Matrix* %"positions'", { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* } %tapeArg98)
  br i1 %or.cond, label %mergeinvertfor.body49_if.then61.loopexit, label %invertfor.end45
}

; Function Attrs: nounwind uwtable willreturn mustprogress
define internal void @diffemat_mult.18(%struct.Matrix* noalias nocapture readonly %lhs, %struct.Matrix* nocapture %"lhs'", %struct.Matrix* noalias nocapture readonly %rhs, %struct.Matrix* noalias nocapture %out, %struct.Matrix* nocapture %"out'", { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** } %tapeArg) local_unnamed_addr #16 {
entry:
  %0 = extractvalue { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** } %tapeArg, 2
  %1 = extractvalue { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** } %tapeArg, 3
  %2 = extractvalue { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** } %tapeArg, 10
  %3 = extractvalue { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** } %tapeArg, 8
  %4 = extractvalue { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** } %tapeArg, 9
  %5 = extractvalue { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** } %tapeArg, 4
  %6 = extractvalue { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** } %tapeArg, 5
  %mul3.i = mul nsw i32 %6, %5
  %cmp.not.i = extractvalue { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** } %tapeArg, 6
  %cmp8.i = icmp sgt i32 %mul3.i, 0
  %spec.select = select i1 %cmp8.i, i8 2, i8 0
  %_cache.0 = select i1 %cmp.not.i, i8 1, i8 %spec.select
  %cmp85 = icmp sgt i32 %5, 0
  br i1 %cmp85, label %for.cond2.preheader.lr.ph, label %invertresize.exit

for.cond2.preheader.lr.ph:                        ; preds = %entry
  %cmp483 = icmp sgt i32 %6, 0
  %7 = zext i32 %5 to i64
  %wide.trip.count96 = zext i32 %6 to i64
  %wide.trip.count100_unwrap127 = zext i32 %5 to i64
  br label %invertfor.inc47

invertentry:                                      ; preds = %invertresize.exit, %invertif.then9.i
  ret void

invertif.then9.i:                                 ; preds = %invertresize.exit
  %"call.i'mi_unwrap" = extractvalue { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** } %tapeArg, 0
  call void @free(i8* nonnull %"call.i'mi_unwrap")
  %call.i_unwrap = extractvalue { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** } %tapeArg, 1
  call void @free(i8* %call.i_unwrap)
  br label %invertentry

invertresize.exit:                                ; preds = %invertfor.cond2.preheader.lr.ph, %entry
  %switch = icmp ult i8 %_cache.0, 2
  br i1 %switch, label %invertentry, label %invertif.then9.i

invertfor.cond2.preheader.lr.ph:                  ; preds = %invertfor.cond2.preheader
  %8 = bitcast double** %0 to i8*
  tail call void @free(i8* nonnull %8)
  %9 = bitcast double** %1 to i8*
  tail call void @free(i8* nonnull %9)
  %10 = bitcast double** %2 to i8*
  tail call void @free(i8* nonnull %10)
  %11 = bitcast i32* %3 to i8*
  tail call void @free(i8* nonnull %11)
  %12 = bitcast double* %4 to i8*
  tail call void @free(i8* nonnull %12)
  br label %invertresize.exit

invertfor.cond2.preheader:                        ; preds = %invertfor.inc47, %invertfor.body5
  %"add43'de.0" = phi double [ %"add43'de.4", %invertfor.inc47 ], [ %"add43'de.1", %invertfor.body5 ]
  %13 = icmp eq i64 %"iv'ac.0", 0
  br i1 %13, label %invertfor.cond2.preheader.lr.ph, label %invertfor.inc47

invertfor.body5:                                  ; preds = %invertfor.inc44, %invertfor.body23.preheader
  %"add43'de.1" = phi double [ %.lcssa175, %invertfor.body23.preheader ], [ %"add43'de.3", %invertfor.inc44 ]
  %"mul13'de.1" = phi double [ %.lcssa, %invertfor.body23.preheader ], [ 0.000000e+00, %invertfor.inc44 ]
  %_unwrap19 = getelementptr inbounds double*, double** %0, i64 %"iv'ac.0"
  %"'il_phi3_unwrap" = load double*, double** %_unwrap19, align 8, !invariant.group !1652
  %_unwrap21 = mul nuw nsw i64 %"iv1'ac.1", %wide.trip.count100_unwrap127
  %_unwrap22 = add nuw nsw i64 %_unwrap21, %"iv'ac.0"
  %"arrayidx19'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi3_unwrap", i64 %_unwrap22
  %14 = load double, double* %"arrayidx19'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1653, !noalias !1656
  store double 0.000000e+00, double* %"arrayidx19'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1653, !noalias !1656
  %15 = fadd fast double %"mul13'de.1", %14
  %16 = mul nuw nsw i64 %"iv'ac.0", %wide.trip.count96_unwrap125
  %17 = add nuw nsw i64 %"iv1'ac.1", %16
  %18 = getelementptr inbounds double, double* %4, i64 %17
  %19 = load double, double* %18, align 8, !tbaa !75, !invariant.group !1658
  %m1diffe = fmul fast double %15, %19
  %_unwrap37 = getelementptr inbounds double*, double** %1, i64 %"iv'ac.0"
  %"'il_phi1_unwrap" = load double*, double** %_unwrap37, align 8, !invariant.group !1659
  %"arrayidx'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi1_unwrap", i64 %"iv'ac.0"
  %20 = load double, double* %"arrayidx'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1660, !noalias !1663
  %21 = fadd fast double %20, %m1diffe
  store double %21, double* %"arrayidx'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1660, !noalias !1663
  %22 = icmp eq i64 %"iv1'ac.1", 0
  br i1 %22, label %invertfor.cond2.preheader, label %invertfor.inc44

invertfor.body23.preheader:                       ; preds = %invertfor.body23
  %.lcssa176 = phi double** [ %38, %invertfor.body23 ]
  %.lcssa175 = phi double [ %32, %invertfor.body23 ]
  %.lcssa = phi double [ %34, %invertfor.body23 ]
  %23 = bitcast double** %.lcssa176 to i8**
  %forfree141174 = load i8*, i8** %23, align 8, !dereferenceable !457
  tail call void @free(i8* nonnull %forfree141174)
  br label %invertfor.body5

invertfor.body23:                                 ; preds = %mergeinvertfor.body23_for.inc44.loopexit, %incinvertfor.body23
  %"add43'de.2" = phi double [ %"add43'de.3", %mergeinvertfor.body23_for.inc44.loopexit ], [ %32, %incinvertfor.body23 ]
  %"mul13'de.2" = phi double [ 0.000000e+00, %mergeinvertfor.body23_for.inc44.loopexit ], [ %34, %incinvertfor.body23 ]
  %"iv3'ac.0" = phi i64 [ %_unwrap118, %mergeinvertfor.body23_for.inc44.loopexit ], [ %35, %incinvertfor.body23 ]
  %_unwrap40 = getelementptr inbounds double*, double** %0, i64 %"iv'ac.0"
  %"'il_phi3_unwrap41" = load double*, double** %_unwrap40, align 8, !invariant.group !1652
  %_unwrap43 = mul nuw nsw i64 %"iv1'ac.1", %wide.trip.count100_unwrap127
  %_unwrap44 = add nuw nsw i64 %_unwrap43, %"iv'ac.0"
  %"arrayidx19'ipg_unwrap45" = getelementptr inbounds double, double* %"'il_phi3_unwrap41", i64 %_unwrap44
  %24 = load double, double* %"arrayidx19'ipg_unwrap45", align 8, !tbaa !75, !alias.scope !1653, !noalias !1656
  store double 0.000000e+00, double* %"arrayidx19'ipg_unwrap45", align 8, !tbaa !75, !alias.scope !1653, !noalias !1656
  %25 = fadd fast double %"add43'de.2", %24
  %26 = load double*, double** %38, align 8, !dereferenceable !457, !invariant.group !1665
  %27 = getelementptr inbounds double, double* %26, i64 %"iv3'ac.0"
  %28 = load double, double* %27, align 8, !tbaa !75, !invariant.group !1666
  %m1diffe89 = fmul fast double %25, %28
  %_unwrap93 = getelementptr inbounds double*, double** %1, i64 %"iv'ac.0"
  %"'il_phi1_unwrap94" = load double*, double** %_unwrap93, align 8, !invariant.group !1659
  %iv.next4_unwrap = add nuw nsw i64 %"iv3'ac.0", 1
  %_unwrap95 = mul nuw nsw i64 %iv.next4_unwrap, %wide.trip.count100_unwrap127
  %_unwrap96 = add nuw nsw i64 %_unwrap95, %"iv'ac.0"
  %"arrayidx29'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi1_unwrap94", i64 %_unwrap96
  %29 = load double, double* %"arrayidx29'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1660, !noalias !1663
  %30 = fadd fast double %29, %m1diffe89
  store double %30, double* %"arrayidx29'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1660, !noalias !1663
  %31 = icmp eq i64 %"iv3'ac.0", 0
  %32 = select fast i1 %31, double 0.000000e+00, double %25
  %33 = fadd fast double %"mul13'de.2", %25
  %34 = select fast i1 %31, double %33, double %"mul13'de.2"
  br i1 %31, label %invertfor.body23.preheader, label %incinvertfor.body23

incinvertfor.body23:                              ; preds = %invertfor.body23
  %35 = add nsw i64 %"iv3'ac.0", -1
  br label %invertfor.body23

mergeinvertfor.body23_for.inc44.loopexit:         ; preds = %invertfor.inc44
  %wide.trip.count_unwrap117 = zext i32 %40 to i64
  %_unwrap118 = add nsw i64 %wide.trip.count_unwrap117, -2
  %36 = mul nuw nsw i64 %"iv'ac.0", %wide.trip.count96_unwrap125
  %37 = add nuw nsw i64 %"iv1'ac.1", %36
  %38 = getelementptr inbounds double*, double** %2, i64 %37
  br label %invertfor.body23

invertfor.inc44:                                  ; preds = %invertfor.inc47.loopexit, %invertfor.body5
  %"add43'de.3" = phi double [ %"add43'de.4", %invertfor.inc47.loopexit ], [ %"add43'de.1", %invertfor.body5 ]
  %"iv1'ac.1.in" = phi i64 [ %wide.trip.count96_unwrap125, %invertfor.inc47.loopexit ], [ %"iv1'ac.1", %invertfor.body5 ]
  %"iv1'ac.1" = add nsw i64 %"iv1'ac.1.in", -1
  %39 = getelementptr inbounds i32, i32* %3, i64 %"iv'ac.0"
  %40 = load i32, i32* %39, align 4, !tbaa !139, !alias.scope !1667, !noalias !1670, !invariant.group !1672
  %cmp2281_unwrap = icmp sgt i32 %40, 1
  br i1 %cmp2281_unwrap, label %mergeinvertfor.body23_for.inc44.loopexit, label %invertfor.body5

invertfor.inc47.loopexit:                         ; preds = %invertfor.inc47
  %wide.trip.count96_unwrap125 = zext i32 %6 to i64
  br label %invertfor.inc44

invertfor.inc47:                                  ; preds = %invertfor.cond2.preheader, %for.cond2.preheader.lr.ph
  %"add43'de.4" = phi double [ 0.000000e+00, %for.cond2.preheader.lr.ph ], [ %"add43'de.0", %invertfor.cond2.preheader ]
  %"iv'ac.0.in" = phi i64 [ %wide.trip.count100_unwrap127, %for.cond2.preheader.lr.ph ], [ %"iv'ac.0", %invertfor.cond2.preheader ]
  %"iv'ac.0" = add nsw i64 %"iv'ac.0.in", -1
  %cmp483_unwrap = icmp sgt i32 %6, 0
  br i1 %cmp483_unwrap, label %invertfor.inc47.loopexit, label %invertfor.cond2.preheader
}

; Function Attrs: nounwind uwtable willreturn mustprogress
define internal void @diffeapply_global_transform.19(%struct.Matrix* nocapture readonly %pose_params, %struct.Matrix* nocapture %"pose_params'", %struct.Matrix* nocapture readonly %positions, %struct.Matrix* nocapture %"positions'", { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* } %tapeArg) local_unnamed_addr #16 {
entry:
  %0 = extractvalue { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* } %tapeArg, 8
  %1 = extractvalue { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* } %tapeArg, 9
  %2 = extractvalue { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* } %tapeArg, 16
  %3 = extractvalue { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* } %tapeArg, 13
  %4 = extractvalue { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* } %tapeArg, 12
  %call.i = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #45
  %"call.i'mi" = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #45
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16) dereferenceable_or_null(16) %"call.i'mi", i8 0, i64 16, i1 false)
  %"'ipc" = bitcast i8* %"call.i'mi" to %struct.Matrix*
  %5 = bitcast i8* %call.i to %struct.Matrix*
  %"nrows1.i'ipc" = bitcast i8* %"call.i'mi" to i32*
  %nrows1.i = bitcast i8* %call.i to i32*
  store i32 3, i32* %"nrows1.i'ipc", align 8, !tbaa !138, !alias.scope !1673, !noalias !1676
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138, !alias.scope !1676, !noalias !1673
  %"ncols2.i'ipg" = getelementptr inbounds i8, i8* %"call.i'mi", i64 4
  %ncols2.i = getelementptr inbounds i8, i8* %call.i, i64 4
  %"'ipc9" = bitcast i8* %"ncols2.i'ipg" to i32*
  %6 = bitcast i8* %ncols2.i to i32*
  store i32 3, i32* %"'ipc9", align 4, !tbaa !139, !alias.scope !1673, !noalias !1676
  store i32 3, i32* %6, align 4, !tbaa !139, !alias.scope !1676, !noalias !1673
  %call4.i = extractvalue { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* } %tapeArg, 4
  %"call4.i'mi" = extractvalue { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* } %tapeArg, 3
  %"data.i'ipg" = getelementptr inbounds i8, i8* %"call.i'mi", i64 8
  %data.i = getelementptr inbounds i8, i8* %call.i, i64 8
  %"'ipc8" = bitcast i8* %"data.i'ipg" to i8**
  %7 = bitcast i8* %data.i to i8**
  store i8* %"call4.i'mi", i8** %"'ipc8", align 8, !tbaa !137, !alias.scope !1673, !noalias !1676
  store i8* %call4.i, i8** %7, align 8, !tbaa !137, !alias.scope !1676, !noalias !1673
  %"'il_phi1" = extractvalue { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* } %tapeArg, 0
  %8 = extractvalue { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* } %tapeArg, 11
  %"'ipc10" = bitcast i8* %"call4.i'mi" to double*
  %9 = sext i32 %8 to i64
  %call.i81 = extractvalue { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* } %tapeArg, 7
  %"call.i81'mi" = extractvalue { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* } %tapeArg, 6
  %"'ipc29" = bitcast i8* %"call.i81'mi" to %struct.Matrix*
  %10 = bitcast i8* %call.i81 to %struct.Matrix*
  %tapeArg30 = extractvalue { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* } %tapeArg, 5
  %11 = extractvalue { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* } %tapeArg, 14
  %cmp1789 = icmp sgt i32 %11, 0
  br i1 %cmp1789, label %for.cond19.preheader.lr.ph, label %invertfor.end14

for.cond19.preheader.lr.ph:                       ; preds = %entry
  %12 = extractvalue { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* } %tapeArg, 15
  %cmp2187 = icmp sgt i32 %12, 0
  %wide.trip.count = zext i32 %12 to i64
  %13 = zext i32 %11 to i64
  %_unwrap79 = zext i32 %11 to i64
  br label %invertfor.inc45

invertentry:                                      ; preds = %invertfor.cond1.preheader
  %tapeArg7 = extractvalue { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* } %tapeArg, 1
  %14 = extractvalue { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* } %tapeArg, 10
  %"'il_phi" = extractvalue { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* } %tapeArg, 2
  call void @diffeangle_axis_to_rotation_matrix(double* %14, double* %"'il_phi", %struct.Matrix* nonnull %5, %struct.Matrix* nonnull %"'ipc", { double, double*, double*, double, double } %tapeArg7)
  call void @free(i8* nonnull %"call4.i'mi")
  call void @free(i8* %call4.i)
  call void @free(i8* nonnull %"call.i'mi")
  call void @free(i8* nonnull %call.i)
  %15 = bitcast double* %3 to i8*
  tail call void @free(i8* nonnull %15)
  %16 = bitcast double* %4 to i8*
  tail call void @free(i8* nonnull %16)
  ret void

invertfor.cond1.preheader:                        ; preds = %invertfor.body3
  %17 = icmp eq i64 %"iv'ac.0", 0
  br i1 %17, label %invertentry, label %incinvertfor.cond1.preheader

incinvertfor.cond1.preheader:                     ; preds = %invertfor.cond1.preheader
  %18 = add nsw i64 %"iv'ac.0", -1
  br label %invertfor.inc12

invertfor.body3:                                  ; preds = %invertfor.inc12, %incinvertfor.body3
  %"iv1'ac.0" = phi i64 [ 2, %invertfor.inc12 ], [ %27, %incinvertfor.body3 ]
  %_unwrap = mul nuw nsw i64 %"iv'ac.0", 3
  %_unwrap11 = add nuw nsw i64 %_unwrap, %"iv1'ac.0"
  %"arrayidx10'ipg_unwrap" = getelementptr inbounds double, double* %"'ipc10", i64 %_unwrap11
  %19 = load double, double* %"arrayidx10'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1678, !noalias !1681
  store double 0.000000e+00, double* %"arrayidx10'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1678, !noalias !1681
  %20 = getelementptr inbounds double, double* %4, i64 %_unwrap11
  %21 = load double, double* %20, align 8, !tbaa !75, !invariant.group !1683
  %m0diffe = fmul fast double %19, %21
  %22 = getelementptr inbounds double, double* %3, i64 %_unwrap11
  %23 = load double, double* %22, align 8, !tbaa !75, !invariant.group !1684
  %m1diffe = fmul fast double %19, %23
  store double %m0diffe, double* %"arrayidx10'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1678, !noalias !1681
  %_unwrap28 = add nsw i64 %"iv'ac.0", %9
  %"arrayidx'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi1", i64 %_unwrap28
  %24 = load double, double* %"arrayidx'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1685, !noalias !1688
  %25 = fadd fast double %24, %m1diffe
  store double %25, double* %"arrayidx'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1685, !noalias !1688
  %26 = icmp eq i64 %"iv1'ac.0", 0
  br i1 %26, label %invertfor.cond1.preheader, label %incinvertfor.body3

incinvertfor.body3:                               ; preds = %invertfor.body3
  %27 = add nsw i64 %"iv1'ac.0", -1
  br label %invertfor.body3

invertfor.inc12:                                  ; preds = %invertfor.end14, %incinvertfor.cond1.preheader
  %"iv'ac.0" = phi i64 [ 2, %invertfor.end14 ], [ %18, %incinvertfor.cond1.preheader ]
  br label %invertfor.body3

invertfor.end14:                                  ; preds = %invertfor.cond19.preheader.lr.ph, %entry
  call void @diffemat_mult.20(%struct.Matrix* nonnull %5, %struct.Matrix* nonnull %"'ipc", %struct.Matrix* %positions, %struct.Matrix* %"positions'", %struct.Matrix* %10, %struct.Matrix* %"'ipc29", { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* } %tapeArg30)
  call void @free(i8* nonnull %"call.i81'mi")
  call void @free(i8* %call.i81)
  br label %invertfor.inc12

invertfor.cond19.preheader.lr.ph:                 ; preds = %invertfor.cond19.preheader
  %28 = bitcast double** %0 to i8*
  tail call void @free(i8* nonnull %28)
  %29 = bitcast double** %1 to i8*
  tail call void @free(i8* nonnull %29)
  %30 = bitcast i32* %2 to i8*
  tail call void @free(i8* nonnull %30)
  br label %invertfor.end14

invertfor.cond19.preheader:                       ; preds = %invertfor.inc45, %invertfor.body22
  %31 = icmp eq i64 %"iv3'ac.0", 0
  br i1 %31, label %invertfor.cond19.preheader.lr.ph, label %invertfor.inc45

invertfor.body22:                                 ; preds = %mergeinvertfor.body22_for.inc45.loopexit, %invertfor.body22
  %"iv5'ac.0.in" = phi i64 [ %wide.trip.count_unwrap, %mergeinvertfor.body22_for.inc45.loopexit ], [ %"iv5'ac.0", %invertfor.body22 ]
  %"iv5'ac.0" = add nsw i64 %"iv5'ac.0.in", -1
  %_unwrap49 = getelementptr inbounds double*, double** %0, i64 %"iv3'ac.0"
  %"'il_phi4_unwrap" = load double*, double** %_unwrap49, align 8, !invariant.group !1690
  %_unwrap51 = sext i32 %_unwrap109 to i64
  %_unwrap52 = mul nsw i64 %"iv3'ac.0", %_unwrap51
  %_unwrap53 = add nsw i64 %"iv5'ac.0", %_unwrap52
  %"arrayidx41'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi4_unwrap", i64 %_unwrap53
  %32 = load double, double* %"arrayidx41'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1691, !noalias !1694
  store double 0.000000e+00, double* %"arrayidx41'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1691, !noalias !1694
  %_unwrap57 = getelementptr inbounds double*, double** %1, i64 %"iv3'ac.0"
  %"'il_phi3_unwrap" = load double*, double** %_unwrap57, align 8, !invariant.group !1696
  %33 = getelementptr inbounds i32, i32* %2, i64 %"iv3'ac.0"
  %34 = load i32, i32* %33, align 4, !invariant.group !1697
  %_unwrap70 = sext i32 %34 to i64
  %_unwrap71 = add nsw i64 %"iv5'ac.0", %_unwrap70
  %"arrayidx34'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi3_unwrap", i64 %_unwrap71
  %35 = load double, double* %"arrayidx34'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1698, !noalias !1701
  %36 = fadd fast double %35, %32
  store double %36, double* %"arrayidx34'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1698, !noalias !1701
  %"data23'ipg_unwrap" = getelementptr inbounds i8, i8* %"call.i81'mi", i64 8
  %"'ipc46_unwrap" = bitcast i8* %"data23'ipg_unwrap" to double**
  %"'ipl_unwrap" = load double*, double** %"'ipc46_unwrap", align 8, !tbaa !137, !alias.scope !1703, !noalias !1706, !invariant.group !1708
  %nrows24_unwrap = bitcast i8* %call.i81 to i32*
  %_unwrap73 = load i32, i32* %nrows24_unwrap, align 8, !tbaa !138, !alias.scope !1706, !noalias !1703, !invariant.group !1709
  %_unwrap74 = sext i32 %_unwrap73 to i64
  %_unwrap75 = mul nsw i64 %"iv3'ac.0", %_unwrap74
  %_unwrap76 = add nsw i64 %"iv5'ac.0", %_unwrap75
  %"arrayidx28'ipg_unwrap" = getelementptr inbounds double, double* %"'ipl_unwrap", i64 %_unwrap76
  %37 = load double, double* %"arrayidx28'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1710, !noalias !1713
  %38 = fadd fast double %37, %32
  store double %38, double* %"arrayidx28'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1710, !noalias !1713
  %39 = icmp eq i64 %"iv5'ac.0", 0
  br i1 %39, label %invertfor.cond19.preheader, label %invertfor.body22

mergeinvertfor.body22_for.inc45.loopexit:         ; preds = %invertfor.inc45
  %wide.trip.count_unwrap = zext i32 %_unwrap109 to i64
  br label %invertfor.body22

invertfor.inc45:                                  ; preds = %invertfor.cond19.preheader, %for.cond19.preheader.lr.ph
  %"iv3'ac.0.in" = phi i64 [ %_unwrap79, %for.cond19.preheader.lr.ph ], [ %"iv3'ac.0", %invertfor.cond19.preheader ]
  %"iv3'ac.0" = add nsw i64 %"iv3'ac.0.in", -1
  %_unwrap109 = extractvalue { double*, { double, double*, double*, double, double }, double*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* } %tapeArg, 15
  %cmp2187_unwrap = icmp sgt i32 %_unwrap109, 0
  br i1 %cmp2187_unwrap, label %mergeinvertfor.body22_for.inc45.loopexit, label %invertfor.cond19.preheader
}

; Function Attrs: nounwind uwtable willreturn mustprogress
define internal void @diffemat_mult.20(%struct.Matrix* noalias nocapture readonly %lhs, %struct.Matrix* nocapture %"lhs'", %struct.Matrix* noalias nocapture readonly %rhs, %struct.Matrix* nocapture %"rhs'", %struct.Matrix* noalias nocapture %out, %struct.Matrix* nocapture %"out'", { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* } %tapeArg) local_unnamed_addr #16 {
entry:
  %0 = extractvalue { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* } %tapeArg, 2
  %1 = extractvalue { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* } %tapeArg, 10
  %2 = extractvalue { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* } %tapeArg, 6
  %3 = extractvalue { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* } %tapeArg, 7
  %4 = extractvalue { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* } %tapeArg, 8
  %5 = extractvalue { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* } %tapeArg, 9
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 0
  %6 = load i32, i32* %nrows, align 8, !tbaa !138, !alias.scope !1715, !noalias !1718, !invariant.group !1720
  %7 = extractvalue { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* } %tapeArg, 3
  %mul3.i = mul nsw i32 %7, %6
  %cmp.not.i = extractvalue { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* } %tapeArg, 4
  %cmp8.i = icmp sgt i32 %mul3.i, 0
  %spec.select = select i1 %cmp8.i, i8 0, i8 2
  %_cache.0 = select i1 %cmp.not.i, i8 1, i8 %spec.select
  %cmp85 = icmp sgt i32 %6, 0
  br i1 %cmp85, label %for.cond2.preheader.lr.ph, label %invertresize.exit

for.cond2.preheader.lr.ph:                        ; preds = %entry
  %cmp483 = icmp sgt i32 %7, 0
  %ncols21 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 1
  %8 = zext i32 %6 to i64
  %wide.trip.count96 = zext i32 %7 to i64
  %wide.trip.count100_unwrap132 = zext i32 %6 to i64
  br label %invertfor.inc47

invertentry:                                      ; preds = %invertresize.exit, %invertif.then9.i
  ret void

invertif.then9.i:                                 ; preds = %invertresize.exit
  %"call.i'mi_unwrap" = extractvalue { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* } %tapeArg, 0
  call void @free(i8* nonnull %"call.i'mi_unwrap")
  %call.i_unwrap = extractvalue { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* } %tapeArg, 1
  call void @free(i8* %call.i_unwrap)
  br label %invertentry

invertresize.exit:                                ; preds = %invertfor.cond2.preheader.lr.ph, %entry
  %cond = icmp eq i8 %_cache.0, 0
  br i1 %cond, label %invertif.then9.i, label %invertentry

invertfor.cond2.preheader.lr.ph:                  ; preds = %invertfor.cond2.preheader
  %9 = bitcast double** %0 to i8*
  tail call void @free(i8* nonnull %9)
  %10 = bitcast double* %1 to i8*
  tail call void @free(i8* nonnull %10)
  %11 = bitcast i32* %2 to i8*
  tail call void @free(i8* nonnull %11)
  %12 = bitcast double* %3 to i8*
  tail call void @free(i8* nonnull %12)
  %13 = bitcast double* %4 to i8*
  tail call void @free(i8* nonnull %13)
  %14 = bitcast double* %5 to i8*
  tail call void @free(i8* nonnull %14)
  br label %invertresize.exit

invertfor.cond2.preheader:                        ; preds = %invertfor.inc47, %invertfor.body5
  %"add43'de.0" = phi double [ %"add43'de.4", %invertfor.inc47 ], [ %"add43'de.1", %invertfor.body5 ]
  %15 = icmp eq i64 %"iv'ac.0", 0
  br i1 %15, label %invertfor.cond2.preheader.lr.ph, label %invertfor.inc47

invertfor.body5:                                  ; preds = %invertfor.inc44, %invertfor.body23
  %"add43'de.1" = phi double [ %"add43'de.3", %invertfor.inc44 ], [ %50, %invertfor.body23 ]
  %"mul13'de.1" = phi double [ 0.000000e+00, %invertfor.inc44 ], [ %52, %invertfor.body23 ]
  %"data14'ipg_unwrap" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 2
  %"'ipl_unwrap" = load double*, double** %"data14'ipg_unwrap", align 8, !tbaa !137, !alias.scope !1721, !noalias !1724, !invariant.group !1726
  %_unwrap14 = mul nuw nsw i64 %"iv1'ac.1", %wide.trip.count100_unwrap132
  %_unwrap15 = add nuw nsw i64 %_unwrap14, %"iv'ac.0"
  %"arrayidx19'ipg_unwrap" = getelementptr inbounds double, double* %"'ipl_unwrap", i64 %_unwrap15
  %16 = load double, double* %"arrayidx19'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1727, !noalias !1730
  store double 0.000000e+00, double* %"arrayidx19'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1727, !noalias !1730
  %17 = fadd fast double %"mul13'de.1", %16
  %18 = mul nuw nsw i64 %"iv'ac.0", %wide.trip.count96_unwrap130
  %19 = add nuw nsw i64 %"iv1'ac.1", %18
  %20 = getelementptr inbounds double, double* %3, i64 %19
  %21 = load double, double* %20, align 8, !tbaa !75, !invariant.group !1732
  %m0diffe = fmul fast double %17, %21
  %22 = getelementptr inbounds double, double* %4, i64 %19
  %23 = load double, double* %22, align 8, !tbaa !75, !invariant.group !1733
  %m1diffe = fmul fast double %17, %23
  %_unwrap44 = getelementptr inbounds double*, double** %0, i64 %"iv'ac.0"
  %"'il_phi2_unwrap" = load double*, double** %_unwrap44, align 8, !invariant.group !1734
  %24 = getelementptr inbounds i32, i32* %2, i64 %"iv'ac.0"
  %25 = load i32, i32* %24, align 4, !tbaa !138, !alias.scope !1735, !noalias !1738, !invariant.group !1740
  %_unwrap59 = sext i32 %25 to i64
  %_unwrap60 = mul nsw i64 %"iv1'ac.1", %_unwrap59
  %"arrayidx12'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi2_unwrap", i64 %_unwrap60
  %26 = load double, double* %"arrayidx12'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1741, !noalias !1744
  %27 = fadd fast double %26, %m0diffe
  store double %27, double* %"arrayidx12'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1741, !noalias !1744
  %"data'ipg_unwrap" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"lhs'", i64 0, i32 2
  %"'ipl12_unwrap" = load double*, double** %"data'ipg_unwrap", align 8, !tbaa !137, !alias.scope !1718, !noalias !1715, !invariant.group !1746
  %"arrayidx'ipg_unwrap" = getelementptr inbounds double, double* %"'ipl12_unwrap", i64 %"iv'ac.0"
  %28 = load double, double* %"arrayidx'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1747, !noalias !1750
  %29 = fadd fast double %28, %m1diffe
  store double %29, double* %"arrayidx'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1747, !noalias !1750
  %30 = icmp eq i64 %"iv1'ac.1", 0
  br i1 %30, label %invertfor.cond2.preheader, label %invertfor.inc44

invertfor.body23:                                 ; preds = %mergeinvertfor.body23_for.inc44.loopexit, %incinvertfor.body23
  %"add43'de.2" = phi double [ %"add43'de.3", %mergeinvertfor.body23_for.inc44.loopexit ], [ %50, %incinvertfor.body23 ]
  %"mul13'de.2" = phi double [ 0.000000e+00, %mergeinvertfor.body23_for.inc44.loopexit ], [ %52, %incinvertfor.body23 ]
  %"iv3'ac.2" = phi i64 [ %_unwrap127, %mergeinvertfor.body23_for.inc44.loopexit ], [ %53, %incinvertfor.body23 ]
  %"data14'ipg_unwrap61" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 2
  %"'ipl_unwrap62" = load double*, double** %"data14'ipg_unwrap61", align 8, !tbaa !137, !alias.scope !1721, !noalias !1724, !invariant.group !1726
  %_unwrap64 = mul nuw nsw i64 %"iv1'ac.1", %wide.trip.count100_unwrap132
  %_unwrap65 = add nuw nsw i64 %_unwrap64, %"iv'ac.0"
  %"arrayidx19'ipg_unwrap66" = getelementptr inbounds double, double* %"'ipl_unwrap62", i64 %_unwrap65
  %31 = load double, double* %"arrayidx19'ipg_unwrap66", align 8, !tbaa !75, !alias.scope !1727, !noalias !1730
  store double 0.000000e+00, double* %"arrayidx19'ipg_unwrap66", align 8, !tbaa !75, !alias.scope !1727, !noalias !1730
  %32 = fadd fast double %"add43'de.2", %31
  %_unwrap68_unwrap = load i32, i32* %ncols21_unwrap128, align 4, !tbaa !139, !alias.scope !1715, !noalias !1718, !invariant.group !1752
  %wide.trip.count_unwrap_unwrap = zext i32 %_unwrap68_unwrap to i64
  %33 = add nsw i64 %wide.trip.count_unwrap_unwrap, -1
  %34 = mul nuw nsw i64 %33, %wide.trip.count96_unwrap130
  %35 = mul nuw nsw i64 %"iv1'ac.1", %33
  %36 = add nuw nsw i64 %"iv3'ac.2", %35
  %37 = mul nuw nsw i64 %"iv'ac.0", %34
  %38 = add nuw nsw i64 %36, %37
  %39 = getelementptr inbounds double, double* %5, i64 %38
  %40 = load double, double* %39, align 8, !tbaa !75, !invariant.group !1753
  %m0diffe91 = fmul fast double %32, %40
  %41 = getelementptr inbounds double, double* %1, i64 %38
  %42 = load double, double* %41, align 8, !tbaa !75, !invariant.group !1754
  %m1diffe106 = fmul fast double %32, %42
  %_unwrap110 = getelementptr inbounds double*, double** %0, i64 %"iv'ac.0"
  %"'il_phi2_unwrap111" = load double*, double** %_unwrap110, align 8, !invariant.group !1734
  %iv.next4_unwrap = add nuw nsw i64 %"iv3'ac.2", 1
  %43 = getelementptr inbounds i32, i32* %2, i64 %"iv'ac.0"
  %44 = load i32, i32* %43, align 4, !tbaa !138, !alias.scope !1735, !noalias !1738, !invariant.group !1740
  %_unwrap115 = sext i32 %44 to i64
  %_unwrap116 = mul nsw i64 %"iv1'ac.1", %_unwrap115
  %_unwrap117 = add nsw i64 %iv.next4_unwrap, %_unwrap116
  %"arrayidx35'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi2_unwrap111", i64 %_unwrap117
  %45 = load double, double* %"arrayidx35'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1741, !noalias !1744
  %46 = fadd fast double %45, %m0diffe91
  store double %46, double* %"arrayidx35'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1741, !noalias !1744
  %"data'ipg_unwrap118" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"lhs'", i64 0, i32 2
  %"'ipl12_unwrap119" = load double*, double** %"data'ipg_unwrap118", align 8, !tbaa !137, !alias.scope !1718, !noalias !1715, !invariant.group !1746
  %_unwrap120 = mul nuw nsw i64 %iv.next4_unwrap, %wide.trip.count100_unwrap132
  %_unwrap121 = add nuw nsw i64 %_unwrap120, %"iv'ac.0"
  %"arrayidx29'ipg_unwrap" = getelementptr inbounds double, double* %"'ipl12_unwrap119", i64 %_unwrap121
  %47 = load double, double* %"arrayidx29'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1747, !noalias !1750
  %48 = fadd fast double %47, %m1diffe106
  store double %48, double* %"arrayidx29'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1747, !noalias !1750
  %49 = icmp eq i64 %"iv3'ac.2", 0
  %50 = select fast i1 %49, double 0.000000e+00, double %32
  %51 = fadd fast double %"mul13'de.2", %32
  %52 = select fast i1 %49, double %51, double %"mul13'de.2"
  br i1 %49, label %invertfor.body5, label %incinvertfor.body23

incinvertfor.body23:                              ; preds = %invertfor.body23
  %53 = add nsw i64 %"iv3'ac.2", -1
  br label %invertfor.body23

mergeinvertfor.body23_for.inc44.loopexit:         ; preds = %invertfor.inc44
  %wide.trip.count_unwrap126 = zext i32 %_unwrap129 to i64
  %_unwrap127 = add nsw i64 %wide.trip.count_unwrap126, -2
  br label %invertfor.body23

invertfor.inc44:                                  ; preds = %invertfor.inc47.loopexit, %invertfor.body5
  %"add43'de.3" = phi double [ %"add43'de.4", %invertfor.inc47.loopexit ], [ %"add43'de.1", %invertfor.body5 ]
  %"iv1'ac.1.in" = phi i64 [ %wide.trip.count96_unwrap130, %invertfor.inc47.loopexit ], [ %"iv1'ac.1", %invertfor.body5 ]
  %"iv1'ac.1" = add nsw i64 %"iv1'ac.1.in", -1
  %ncols21_unwrap128 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 1
  %_unwrap129 = load i32, i32* %ncols21_unwrap128, align 4, !tbaa !139, !alias.scope !1715, !noalias !1718, !invariant.group !1752
  %cmp2281_unwrap = icmp sgt i32 %_unwrap129, 1
  br i1 %cmp2281_unwrap, label %mergeinvertfor.body23_for.inc44.loopexit, label %invertfor.body5

invertfor.inc47.loopexit:                         ; preds = %invertfor.inc47
  %wide.trip.count96_unwrap130 = zext i32 %7 to i64
  br label %invertfor.inc44

invertfor.inc47:                                  ; preds = %invertfor.cond2.preheader, %for.cond2.preheader.lr.ph
  %"add43'de.4" = phi double [ 0.000000e+00, %for.cond2.preheader.lr.ph ], [ %"add43'de.0", %invertfor.cond2.preheader ]
  %"iv'ac.0.in" = phi i64 [ %wide.trip.count100_unwrap132, %for.cond2.preheader.lr.ph ], [ %"iv'ac.0", %invertfor.cond2.preheader ]
  %"iv'ac.0" = add nsw i64 %"iv'ac.0.in", -1
  %cmp483_unwrap = icmp sgt i32 %7, 0
  br i1 %cmp483_unwrap, label %invertfor.inc47.loopexit, label %invertfor.cond2.preheader
}

; Function Attrs: nounwind uwtable willreturn mustprogress
define internal { i8*, i8*, double*, double*, i32, i1, double*, i32*, i32* } @augmented_to_pose_params.21(i32 %count, double* noalias nocapture readonly %theta, double* nocapture %"theta'", i8** noalias nocapture readnone %bone_names, %struct.Matrix* noalias nocapture %pose_params, %struct.Matrix* nocapture %"pose_params'") local_unnamed_addr #16 {
entry:
  %0 = alloca { i8*, i8*, double*, double*, i32, i1, double*, i32*, i32* }, align 8
  %theta99 = bitcast double* %theta to i8*
  %add = add nsw i32 %count, 3
  %"nrows1.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"pose_params'", i64 0, i32 0
  %nrows1.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 0
  %1 = load i32, i32* %nrows1.i, align 8, !tbaa !138, !alias.scope !1755, !noalias !1758
  %"ncols2.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"pose_params'", i64 0, i32 1
  %ncols2.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 1
  %2 = load i32, i32* %ncols2.i, align 4, !tbaa !139, !alias.scope !1755, !noalias !1758
  %mul.i = mul nsw i32 %2, %1
  %3 = getelementptr inbounds { i8*, i8*, double*, double*, i32, i1, double*, i32*, i32* }, { i8*, i8*, double*, double*, i32, i1, double*, i32*, i32* }* %0, i64 0, i32 4
  store i32 %mul.i, i32* %3, align 8
  %mul3.i = mul i32 %add, 3
  %cmp.not.i = icmp eq i32 %mul.i, %mul3.i
  br i1 %cmp.not.i, label %resize.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %"data.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"pose_params'", i64 0, i32 2
  %data.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 2
  %4 = load double*, double** %data.i, align 8, !tbaa !137, !alias.scope !1755, !noalias !1758
  %cmp4.not.i = icmp eq double* %4, null
  %5 = getelementptr inbounds { i8*, i8*, double*, double*, i32, i1, double*, i32*, i32* }, { i8*, i8*, double*, double*, i32, i1, double*, i32*, i32* }* %0, i64 0, i32 5
  store i1 %cmp4.not.i, i1* %5, align 4
  %cmp8.i = icmp sgt i32 %mul3.i, 0
  br i1 %cmp8.i, label %resize.exit.thread, label %resize.exit.thread87

resize.exit.thread:                               ; preds = %if.then.i
  %conv31.i = zext i32 %mul3.i to i64
  %mul11.i = shl nuw nsw i64 %conv31.i, 3
  %call.i = tail call noalias i8* @malloc(i64 %mul11.i) #45
  %6 = getelementptr inbounds { i8*, i8*, double*, double*, i32, i1, double*, i32*, i32* }, { i8*, i8*, double*, double*, i32, i1, double*, i32*, i32* }* %0, i64 0, i32 1
  store i8* %call.i, i8** %6, align 8
  %"call.i'mi" = tail call noalias nonnull i8* @malloc(i64 %mul11.i) #45
  %7 = getelementptr inbounds { i8*, i8*, double*, double*, i32, i1, double*, i32*, i32* }, { i8*, i8*, double*, double*, i32, i1, double*, i32*, i32* }* %0, i64 0, i32 0
  store i8* %"call.i'mi", i8** %7, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %"call.i'mi", i8 0, i64 %mul11.i, i1 false)
  %"'ipc" = bitcast double** %"data.i'ipg" to i8**
  %8 = bitcast double** %data.i to i8**
  store i8* %"call.i'mi", i8** %"'ipc", align 8, !tbaa !137, !alias.scope !1758, !noalias !1755
  store i8* %call.i, i8** %8, align 8, !tbaa !137, !alias.scope !1755, !noalias !1758
  store i32 %add, i32* %"ncols2.i'ipg", align 4, !tbaa !139, !alias.scope !1758, !noalias !1755
  store i32 %add, i32* %ncols2.i, align 4, !tbaa !139, !alias.scope !1755, !noalias !1758
  store i32 3, i32* %"nrows1.i'ipg", align 8, !tbaa !138, !alias.scope !1758, !noalias !1755
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138, !alias.scope !1755, !noalias !1758
  %9 = bitcast i8* %call.i to double*
  br label %for.body.lr.ph.i

resize.exit.thread87:                             ; preds = %if.then.i
  store double* null, double** %"data.i'ipg", align 8, !tbaa !137, !alias.scope !1758, !noalias !1755
  store double* null, double** %data.i, align 8, !tbaa !137, !alias.scope !1755, !noalias !1758
  store i32 %add, i32* %"ncols2.i'ipg", align 4, !tbaa !139, !alias.scope !1758, !noalias !1755
  store i32 %add, i32* %ncols2.i, align 4, !tbaa !139, !alias.scope !1755, !noalias !1758
  store i32 3, i32* %"nrows1.i'ipg", align 8, !tbaa !138, !alias.scope !1758, !noalias !1755
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138, !alias.scope !1755, !noalias !1758
  br label %fill.exit

resize.exit:                                      ; preds = %entry
  store i32 %add, i32* %"ncols2.i'ipg", align 4, !tbaa !139, !alias.scope !1758, !noalias !1755
  store i32 %add, i32* %ncols2.i, align 4, !tbaa !139, !alias.scope !1755, !noalias !1758
  store i32 3, i32* %"nrows1.i'ipg", align 8, !tbaa !138, !alias.scope !1758, !noalias !1755
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138, !alias.scope !1755, !noalias !1758
  %cmp7.i = icmp sgt i32 %mul.i, 0
  %"data.i85.phi.trans.insert'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"pose_params'", i64 0, i32 2
  %data.i85.phi.trans.insert = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 2
  %".pre'ipl" = load double*, double** %"data.i85.phi.trans.insert'ipg", align 8, !tbaa !137, !alias.scope !1758, !noalias !1755
  %10 = getelementptr inbounds { i8*, i8*, double*, double*, i32, i1, double*, i32*, i32* }, { i8*, i8*, double*, double*, i32, i1, double*, i32*, i32* }* %0, i64 0, i32 2
  store double* %".pre'ipl", double** %10, align 8
  %.pre = load double*, double** %data.i85.phi.trans.insert, align 8, !tbaa !137, !alias.scope !1755, !noalias !1758
  %11 = getelementptr inbounds { i8*, i8*, double*, double*, i32, i1, double*, i32*, i32* }, { i8*, i8*, double*, double*, i32, i1, double*, i32*, i32* }* %0, i64 0, i32 6
  store double* %.pre, double** %11, align 8
  br i1 %cmp7.i, label %resize.exit.for.body.lr.ph.i_crit_edge, label %fill.exit

resize.exit.for.body.lr.ph.i_crit_edge:           ; preds = %resize.exit
  %.pre107 = zext i32 %mul3.i to i64
  %.pre108 = shl nuw nsw i64 %.pre107, 3
  br label %for.body.lr.ph.i

for.body.lr.ph.i:                                 ; preds = %resize.exit.for.body.lr.ph.i_crit_edge, %resize.exit.thread
  %.pre-phi = phi i64 [ %.pre108, %resize.exit.for.body.lr.ph.i_crit_edge ], [ %mul11.i, %resize.exit.thread ]
  %12 = phi double* [ %.pre, %resize.exit.for.body.lr.ph.i_crit_edge ], [ %9, %resize.exit.thread ]
  %13 = bitcast double* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 %.pre-phi, i1 false) #46
  br label %fill.exit

fill.exit:                                        ; preds = %for.body.lr.ph.i, %resize.exit, %resize.exit.thread87
  %14 = phi double* [ %12, %for.body.lr.ph.i ], [ null, %resize.exit.thread87 ], [ %.pre, %resize.exit ]
  %15 = bitcast double* %14 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %15, i8* nonnull align 8 dereferenceable(24) %theta99, i64 24, i1 false) #46
  br label %for.body

for.cond17.preheader:                             ; preds = %for.body
  %"data'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"pose_params'", i64 0, i32 2
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 2
  %"'ipl" = load double*, double** %"data'ipg", align 8, !tbaa !137, !alias.scope !1758, !noalias !1755
  %16 = getelementptr inbounds { i8*, i8*, double*, double*, i32, i1, double*, i32*, i32* }, { i8*, i8*, double*, double*, i32, i1, double*, i32*, i32* }* %0, i64 0, i32 3
  store double* %"'ipl", double** %16, align 8
  %17 = load double*, double** %data, align 8, !tbaa !137, !alias.scope !1755, !noalias !1758
  %malloccall = tail call noalias nonnull dereferenceable(20) dereferenceable_or_null(20) i8* @malloc(i64 20)
  %i_pose_params.093_malloccache = bitcast i8* %malloccall to i32*
  %18 = getelementptr inbounds { i8*, i8*, double*, double*, i32, i1, double*, i32*, i32* }, { i8*, i8*, double*, double*, i32, i1, double*, i32*, i32* }* %0, i64 0, i32 7
  %19 = bitcast i32** %18 to i8**
  store i8* %malloccall, i8** %19, align 8
  %malloccall11 = tail call noalias nonnull dereferenceable(60) dereferenceable_or_null(60) i8* @malloc(i64 60)
  %i_theta.189_malloccache = bitcast i8* %malloccall11 to i32*
  %20 = getelementptr inbounds { i8*, i8*, double*, double*, i32, i1, double*, i32*, i32* }, { i8*, i8*, double*, double*, i32, i1, double*, i32*, i32* }* %0, i64 0, i32 8
  %21 = bitcast i32** %20 to i8**
  store i8* %malloccall11, i8** %21, align 8
  br label %for.cond20.preheader

for.body:                                         ; preds = %for.body, %fill.exit
  %iv = phi i64 [ %iv.next, %for.body ], [ 0, %fill.exit ]
  %iv.next = add nuw nsw i64 %iv, 1
  %22 = add nuw nsw i64 %iv, 3
  %arrayidx7 = getelementptr inbounds double, double* %14, i64 %22
  store double 1.000000e+00, double* %arrayidx7, align 8, !tbaa !75, !alias.scope !1760, !noalias !1763
  %arrayidx10 = getelementptr inbounds double, double* %theta, i64 %22
  %23 = load double, double* %arrayidx10, align 8, !tbaa !75, !alias.scope !1765, !noalias !1768
  %24 = add nuw nsw i64 %iv, 6
  %arrayidx16 = getelementptr inbounds double, double* %14, i64 %24
  store double %23, double* %arrayidx16, align 8, !tbaa !75, !alias.scope !1760, !noalias !1763
  %exitcond105.not = icmp eq i64 %iv.next, 3
  br i1 %exitcond105.not, label %for.cond17.preheader, label %for.body, !llvm.loop !229

for.cond20.preheader:                             ; preds = %for.end45, %for.cond17.preheader
  %iv1 = phi i64 [ %iv.next2, %for.end45 ], [ 0, %for.cond17.preheader ]
  %i_pose_params.093 = phi i32 [ %inc46, %for.end45 ], [ 5, %for.cond17.preheader ]
  %i_theta.092 = phi i32 [ %i_theta.2.lcssa, %for.end45 ], [ 6, %for.cond17.preheader ]
  %25 = getelementptr inbounds i32, i32* %i_pose_params.093_malloccache, i64 %iv1
  store i32 %i_pose_params.093, i32* %25, align 4, !invariant.group !1770
  %iv.next2 = add nuw nsw i64 %iv1, 1
  %26 = trunc i64 %iv1 to i32
  %27 = sext i32 %i_pose_params.093 to i64
  br label %for.body22

for.body22:                                       ; preds = %if.end, %for.cond20.preheader
  %iv3 = phi i64 [ %iv.next4, %if.end ], [ 0, %for.cond20.preheader ]
  %i_theta.189 = phi i32 [ %i_theta.2, %if.end ], [ %i_theta.092, %for.cond20.preheader ]
  %iv.next4 = add nuw nsw i64 %iv3, 1
  %28 = trunc i64 %iv3 to i32
  %29 = add i64 %iv3, %27
  %idxprom23 = sext i32 %i_theta.189 to i64
  %arrayidx24 = getelementptr inbounds double, double* %theta, i64 %idxprom23
  %30 = load double, double* %arrayidx24, align 8, !tbaa !75, !alias.scope !1765, !noalias !1768
  %31 = mul nsw i64 %29, 3
  %arrayidx30 = getelementptr inbounds double, double* %17, i64 %31
  store double %30, double* %arrayidx30, align 8, !tbaa !75, !alias.scope !1771, !noalias !1774
  %32 = mul nuw nsw i64 %iv1, 3
  %33 = add nuw nsw i64 %iv3, %32
  %34 = getelementptr inbounds i32, i32* %i_theta.189_malloccache, i64 %33
  store i32 %i_theta.189, i32* %34, align 4, !invariant.group !1776
  %inc31 = add nsw i32 %i_theta.189, 1
  %cmp32 = icmp eq i32 %28, 0
  br i1 %cmp32, label %if.then, label %if.end

if.then:                                          ; preds = %for.body22
  %idxprom33 = sext i32 %inc31 to i64
  %arrayidx34 = getelementptr inbounds double, double* %theta, i64 %idxprom33
  %35 = load double, double* %arrayidx34, align 8, !tbaa !75, !alias.scope !1765, !noalias !1768
  %36 = add nsw i64 %31, 1
  %arrayidx40 = getelementptr inbounds double, double* %17, i64 %36
  store double %35, double* %arrayidx40, align 8, !tbaa !75, !alias.scope !1771, !noalias !1774
  %inc41 = add nsw i32 %i_theta.189, 2
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body22
  %i_theta.2 = phi i32 [ %inc41, %if.then ], [ %inc31, %for.body22 ]
  %37 = trunc i64 %29 to i32
  %38 = add nsw i32 %i_pose_params.093, 2
  %exitcond = icmp eq i32 %38, %37
  br i1 %exitcond, label %for.end45, label %for.body22, !llvm.loop !230

for.end45:                                        ; preds = %if.end
  %i_theta.2.lcssa = phi i32 [ %i_theta.2, %if.end ]
  %.lcssa = phi i64 [ %29, %if.end ]
  %39 = trunc i64 %.lcssa to i32
  %inc46 = add nsw i32 %39, 2
  %exitcond98.not = icmp eq i32 %26, 4
  br i1 %exitcond98.not, label %for.end49, label %for.cond20.preheader, !llvm.loop !231

for.end49:                                        ; preds = %for.end45
  %40 = load { i8*, i8*, double*, double*, i32, i1, double*, i32*, i32* }, { i8*, i8*, double*, double*, i32, i1, double*, i32*, i32* }* %0, align 8
  ret { i8*, i8*, double*, double*, i32, i1, double*, i32*, i32* } %40
}

; Function Attrs: nounwind uwtable willreturn mustprogress
define internal void @diffeto_pose_params.22(i32 %count, double* noalias nocapture readonly %theta, double* nocapture %"theta'", i8** noalias nocapture readnone %bone_names, %struct.Matrix* noalias nocapture %pose_params, %struct.Matrix* nocapture %"pose_params'", { i8*, i8*, double*, double*, i32, i1, double*, i32*, i32* } %tapeArg) local_unnamed_addr #16 {
entry:
  %0 = extractvalue { i8*, i8*, double*, double*, i32, i1, double*, i32*, i32* } %tapeArg, 7
  %1 = extractvalue { i8*, i8*, double*, double*, i32, i1, double*, i32*, i32* } %tapeArg, 8
  %mul.i = extractvalue { i8*, i8*, double*, double*, i32, i1, double*, i32*, i32* } %tapeArg, 4
  %2 = mul i32 %count, 3
  %mul3.i = add i32 %2, 9
  %cmp.not.i = icmp eq i32 %mul.i, %mul3.i
  br i1 %cmp.not.i, label %resize.exit, label %if.end.i

if.end.i:                                         ; preds = %entry
  %cmp8.i = icmp sgt i32 %mul3.i, 0
  br i1 %cmp8.i, label %resize.exit.thread, label %for.cond17.preheader

resize.exit.thread:                               ; preds = %if.end.i
  %"call.i'mi" = extractvalue { i8*, i8*, double*, double*, i32, i1, double*, i32*, i32* } %tapeArg, 0
  %"'ipc" = bitcast i8* %"call.i'mi" to double*
  br label %for.body.lr.ph.i

resize.exit:                                      ; preds = %entry
  %cmp7.i = icmp sgt i32 %mul.i, 0
  %".pre'il_phi" = extractvalue { i8*, i8*, double*, double*, i32, i1, double*, i32*, i32* } %tapeArg, 2
  br i1 %cmp7.i, label %for.body.lr.ph.i, label %for.cond17.preheader

for.body.lr.ph.i:                                 ; preds = %resize.exit, %resize.exit.thread
  %3 = phi double* [ %"'ipc", %resize.exit.thread ], [ %".pre'il_phi", %resize.exit ]
  br label %for.cond17.preheader

for.cond17.preheader:                             ; preds = %for.body.lr.ph.i, %resize.exit, %if.end.i
  %_cache.0 = phi i8 [ 1, %for.body.lr.ph.i ], [ 2, %resize.exit ], [ 0, %if.end.i ]
  %4 = phi double* [ %3, %for.body.lr.ph.i ], [ %".pre'il_phi", %resize.exit ], [ null, %if.end.i ]
  %"'il_phi1" = extractvalue { i8*, i8*, double*, double*, i32, i1, double*, i32*, i32* } %tapeArg, 3
  br label %invertfor.end45

invertentry:                                      ; preds = %__enzyme_memcpyadd_doubleda8sa8.exit, %invertfor.body.lr.ph.i_phimerge, %invertresize.exit.thread
  ret void

invertresize.exit.thread:                         ; preds = %invertfor.body.lr.ph.i_phimerge
  %"call.i'mi_unwrap" = extractvalue { i8*, i8*, double*, double*, i32, i1, double*, i32*, i32* } %tapeArg, 0
  call void @free(i8* nonnull %"call.i'mi_unwrap")
  %call.i_unwrap = extractvalue { i8*, i8*, double*, double*, i32, i1, double*, i32*, i32* } %tapeArg, 1
  call void @free(i8* %call.i_unwrap)
  br label %invertentry

invertfor.body.lr.ph.i_phimerge:                  ; preds = %__enzyme_memcpyadd_doubleda8sa8.exit
  %.in = zext i32 %mul3.i to i64
  %5 = shl nuw nsw i64 %.in, 3
  %".pre'il_phi_unwrap" = extractvalue { i8*, i8*, double*, double*, i32, i1, double*, i32*, i32* } %tapeArg, 2
  %"call.i'mi_unwrap9" = extractvalue { i8*, i8*, double*, double*, i32, i1, double*, i32*, i32* } %tapeArg, 0
  %"'ipc_unwrap" = bitcast i8* %"call.i'mi_unwrap9" to double*
  %6 = select i1 %cmp.not.i, double* %".pre'il_phi_unwrap", double* %"'ipc_unwrap"
  %"'ipc6_unwrap" = bitcast double* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %"'ipc6_unwrap", i8 0, i64 %5, i1 false) #46
  br i1 %cmp.not.i, label %invertentry, label %invertresize.exit.thread

for.body.i:                                       ; preds = %invertfor.body, %for.body.i
  %idx.i = phi i64 [ %idx.next.i, %for.body.i ], [ 0, %invertfor.body ]
  %dst.i.i = getelementptr inbounds double, double* %4, i64 %idx.i
  %dst.i.l.i = load double, double* %dst.i.i, align 8
  store double 0.000000e+00, double* %dst.i.i, align 8
  %src.i.i = getelementptr inbounds double, double* %"theta'", i64 %idx.i
  %src.i.l.i = load double, double* %src.i.i, align 8
  %7 = fadd fast double %src.i.l.i, %dst.i.l.i
  store double %7, double* %src.i.i, align 8
  %idx.next.i = add nuw i64 %idx.i, 1
  %8 = icmp eq i64 %idx.next.i, 3
  br i1 %8, label %__enzyme_memcpyadd_doubleda8sa8.exit, label %for.body.i

__enzyme_memcpyadd_doubleda8sa8.exit:             ; preds = %for.body.i
  %cond = icmp eq i8 %_cache.0, 1
  br i1 %cond, label %invertfor.body.lr.ph.i_phimerge, label %invertentry

invertfor.cond17.preheader:                       ; preds = %invertfor.cond20.preheader
  %9 = bitcast i32* %0 to i8*
  tail call void @free(i8* nonnull %9)
  %10 = bitcast i32* %1 to i8*
  tail call void @free(i8* nonnull %10)
  br label %invertfor.body

invertfor.body:                                   ; preds = %incinvertfor.body, %invertfor.cond17.preheader
  %"iv'ac.0" = phi i64 [ 2, %invertfor.cond17.preheader ], [ %15, %incinvertfor.body ]
  %_unwrap = add nuw nsw i64 %"iv'ac.0", 6
  %"arrayidx16'ipg_unwrap" = getelementptr inbounds double, double* %4, i64 %_unwrap
  %11 = load double, double* %"arrayidx16'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1777, !noalias !1780
  store double 0.000000e+00, double* %"arrayidx16'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1777, !noalias !1780
  %_unwrap15 = add nuw nsw i64 %"iv'ac.0", 3
  %"arrayidx10'ipg_unwrap" = getelementptr inbounds double, double* %"theta'", i64 %_unwrap15
  %12 = load double, double* %"arrayidx10'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1782, !noalias !1785
  %13 = fadd fast double %12, %11
  store double %13, double* %"arrayidx10'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1782, !noalias !1785
  %"arrayidx7'ipg_unwrap" = getelementptr inbounds double, double* %4, i64 %_unwrap15
  store double 0.000000e+00, double* %"arrayidx7'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1777, !noalias !1780
  %14 = icmp eq i64 %"iv'ac.0", 0
  br i1 %14, label %for.body.i, label %incinvertfor.body

incinvertfor.body:                                ; preds = %invertfor.body
  %15 = add nsw i64 %"iv'ac.0", -1
  br label %invertfor.body

invertfor.cond20.preheader:                       ; preds = %invertfor.body22
  %16 = icmp eq i64 %"iv1'ac.0", 0
  br i1 %16, label %invertfor.cond17.preheader, label %incinvertfor.cond20.preheader

incinvertfor.cond20.preheader:                    ; preds = %invertfor.cond20.preheader
  %17 = add nsw i64 %"iv1'ac.0", -1
  br label %invertfor.end45

invertfor.body22:                                 ; preds = %invertif.end, %invertif.then
  %18 = getelementptr inbounds i32, i32* %0, i64 %"iv1'ac.0"
  %19 = load i32, i32* %18, align 4, !invariant.group !1787
  %_unwrap23 = sext i32 %19 to i64
  %_unwrap24 = add i64 %"iv3'ac.0", %_unwrap23
  %_unwrap25 = mul nsw i64 %_unwrap24, 3
  %"arrayidx30'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi1", i64 %_unwrap25
  %20 = load double, double* %"arrayidx30'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1788, !noalias !1791
  store double 0.000000e+00, double* %"arrayidx30'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1788, !noalias !1791
  %21 = mul nuw nsw i64 %"iv1'ac.0", 3
  %22 = add nuw nsw i64 %"iv3'ac.0", %21
  %23 = getelementptr inbounds i32, i32* %1, i64 %22
  %24 = load i32, i32* %23, align 4, !invariant.group !1793
  %idxprom23_unwrap = sext i32 %24 to i64
  %"arrayidx24'ipg_unwrap" = getelementptr inbounds double, double* %"theta'", i64 %idxprom23_unwrap
  %25 = load double, double* %"arrayidx24'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1782, !noalias !1785
  %26 = fadd fast double %25, %20
  store double %26, double* %"arrayidx24'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1782, !noalias !1785
  %27 = icmp eq i64 %"iv3'ac.0", 0
  br i1 %27, label %invertfor.cond20.preheader, label %incinvertfor.body22

incinvertfor.body22:                              ; preds = %invertfor.body22
  %28 = add nsw i64 %"iv3'ac.0", -1
  br label %invertif.end

invertif.then:                                    ; preds = %invertif.end
  %29 = getelementptr inbounds i32, i32* %0, i64 %"iv1'ac.0"
  %30 = load i32, i32* %29, align 4, !invariant.group !1787
  %_unwrap38 = sext i32 %30 to i64
  %_unwrap39 = add i64 %"iv3'ac.0", %_unwrap38
  %_unwrap40 = mul nsw i64 %_unwrap39, 3
  %_unwrap41 = add nsw i64 %_unwrap40, 1
  %"arrayidx40'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi1", i64 %_unwrap41
  %31 = load double, double* %"arrayidx40'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1788, !noalias !1791
  store double 0.000000e+00, double* %"arrayidx40'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1788, !noalias !1791
  %32 = mul nuw nsw i64 %"iv1'ac.0", 3
  %33 = add nuw nsw i64 %"iv3'ac.0", %32
  %34 = getelementptr inbounds i32, i32* %1, i64 %33
  %35 = load i32, i32* %34, align 4, !invariant.group !1793
  %inc31_unwrap = add nsw i32 %35, 1
  %idxprom33_unwrap = sext i32 %inc31_unwrap to i64
  %"arrayidx34'ipg_unwrap" = getelementptr inbounds double, double* %"theta'", i64 %idxprom33_unwrap
  %36 = load double, double* %"arrayidx34'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1782, !noalias !1785
  %37 = fadd fast double %36, %31
  store double %37, double* %"arrayidx34'ipg_unwrap", align 8, !tbaa !75, !alias.scope !1782, !noalias !1785
  br label %invertfor.body22

invertif.end:                                     ; preds = %invertfor.end45, %incinvertfor.body22
  %"iv3'ac.0" = phi i64 [ 2, %invertfor.end45 ], [ %28, %incinvertfor.body22 ]
  %38 = trunc i64 %"iv3'ac.0" to i32
  %cmp32_unwrap = icmp eq i32 %38, 0
  br i1 %cmp32_unwrap, label %invertif.then, label %invertfor.body22

invertfor.end45:                                  ; preds = %incinvertfor.cond20.preheader, %for.cond17.preheader
  %"iv1'ac.0" = phi i64 [ %17, %incinvertfor.cond20.preheader ], [ 4, %for.cond17.preheader ]
  br label %invertif.end
}

attributes #0 = { nounwind uwtable "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-jump-tables"="false" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #1 = { argmemonly nofree nosync nounwind willreturn }
attributes #2 = { nofree nounwind "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #3 = { "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #4 = { argmemonly nofree nounwind readonly willreturn "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #5 = { nounwind uwtable mustprogress "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-jump-tables"="false" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #6 = { nounwind "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #7 = { nofree nounwind }
attributes #8 = { norecurse nounwind readonly uwtable willreturn mustprogress "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-jump-tables"="false" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #9 = { nofree nounwind uwtable mustprogress "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-jump-tables"="false" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #10 = { nobuiltin nofree allocsize(0) "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #11 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #12 = { norecurse nounwind uwtable "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-jump-tables"="false" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #13 = { argmemonly nofree nosync nounwind willreturn writeonly }
attributes #14 = { nofree nounwind uwtable willreturn mustprogress "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-jump-tables"="false" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #15 = { inaccessiblememonly nofree nounwind willreturn "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #16 = { nounwind uwtable willreturn mustprogress "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-jump-tables"="false" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #17 = { inaccessiblemem_or_argmemonly nounwind willreturn "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #18 = { nofree norecurse nounwind uwtable mustprogress "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-jump-tables"="false" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #19 = { inlinehint nounwind uwtable mustprogress "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-jump-tables"="false" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #20 = { norecurse nounwind readnone uwtable willreturn mustprogress "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-jump-tables"="false" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #21 = { noreturn nounwind uwtable mustprogress "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-jump-tables"="false" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #22 = { nofree nounwind willreturn "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #23 = { noreturn "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #24 = { nounwind readnone willreturn "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #25 = { inlinehint nounwind uwtable "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-jump-tables"="false" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #26 = { nobuiltin nounwind "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #27 = { nofree "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #28 = { noreturn nounwind "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #29 = { nounwind readonly willreturn "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #30 = { argmemonly nofree norecurse nosync nounwind readonly willreturn "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #31 = { nounwind uwtable willreturn "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-jump-tables"="false" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #32 = { cold noreturn nounwind }
attributes #33 = { noinline nounwind uwtable mustprogress "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-jump-tables"="false" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #34 = { nofree nosync nounwind willreturn }
attributes #35 = { inaccessiblememonly nofree nosync nounwind willreturn }
attributes #36 = { inlinehint nounwind uwtable willreturn mustprogress "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-jump-tables"="false" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #37 = { alwaysinline argmemonly nounwind }
attributes #38 = { nounwind }
attributes #39 = { nounwind readonly willreturn }
attributes #40 = { noreturn nounwind }
attributes #41 = { builtin nounwind }
attributes #42 = { nounwind readnone willreturn }
attributes #43 = { builtin nounwind allocsize(0) }
attributes #44 = { nounwind readonly }
attributes #45 = { nounwind willreturn mustprogress }
attributes #46 = { willreturn mustprogress }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 12.0.1"}
!2 = !{!3, !5, i64 18}
!3 = !{!"_ZTS6dirent", !4, i64 0, !4, i64 8, !7, i64 16, !5, i64 18, !5, i64 19}
!4 = !{!"long", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C++ TBAA"}
!7 = !{!"short", !5, i64 0}
!8 = distinct !{!8, !9, !10}
!9 = !{!"llvm.loop.mustprogress"}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = !{!12}
!12 = distinct !{!12, !13, !"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_: %agg.result"}
!13 = distinct !{!13, !"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_"}
!14 = !{!15, !16, i64 0}
!15 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE", !16, i64 0}
!16 = !{!"any pointer", !5, i64 0}
!17 = !{!18, !16, i64 0}
!18 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE", !15, i64 0, !4, i64 8, !5, i64 16}
!19 = !{!18, !4, i64 8}
!20 = !{!4, !4, i64 0}
!21 = !{!5, !5, i64 0}
!22 = !{!23}
!23 = distinct !{!23, !24, !"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_: %agg.result"}
!24 = distinct !{!24, !"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_"}
!25 = !{!26}
!26 = distinct !{!26, !27, !"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6rbeginEv: %agg.result"}
!27 = distinct !{!27, !"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6rbeginEv"}
!28 = distinct !{!28, !9, !10}
!29 = !{!30}
!30 = distinct !{!30, !31, !"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_: %agg.result"}
!31 = distinct !{!31, !"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_"}
!32 = !{!33, !16, i64 8}
!33 = !{!"_ZTSNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_Vector_impl_dataE", !16, i64 0, !16, i64 8, !16, i64 16}
!34 = !{!33, !16, i64 16}
!35 = !{!36}
!36 = distinct !{!36, !37, !"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm: %agg.result"}
!37 = distinct !{!37, !"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm"}
!38 = !{!39}
!39 = distinct !{!39, !40, !"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm: %agg.result"}
!40 = distinct !{!40, !"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm"}
!41 = !{!42}
!42 = distinct !{!42, !43, !"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm: %agg.result"}
!43 = distinct !{!43, !"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm"}
!44 = !{!45, !4, i64 0}
!45 = !{!"_ZTS7timeval", !4, i64 0, !4, i64 8}
!46 = !{!45, !4, i64 8}
!47 = !{!48}
!48 = distinct !{!48, !49, !"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_: %agg.result"}
!49 = distinct !{!49, !"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_"}
!50 = !{!51, !51, i64 0}
!51 = !{!"vtable pointer", !6, i64 0}
!52 = !{!53, !55, i64 32}
!53 = !{!"_ZTSSt8ios_base", !4, i64 8, !4, i64 16, !54, i64 24, !55, i64 28, !55, i64 32, !16, i64 40, !56, i64 48, !5, i64 64, !57, i64 192, !16, i64 200, !58, i64 208}
!54 = !{!"_ZTSSt13_Ios_Fmtflags", !5, i64 0}
!55 = !{!"_ZTSSt12_Ios_Iostate", !5, i64 0}
!56 = !{!"_ZTSNSt8ios_base6_WordsE", !16, i64 0, !4, i64 8}
!57 = !{!"int", !5, i64 0}
!58 = !{!"_ZTSSt6locale", !16, i64 0}
!59 = !{!57, !57, i64 0}
!60 = !{!16, !16, i64 0}
!61 = !{!62, !16, i64 8}
!62 = !{!"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE", !16, i64 0, !16, i64 8, !16, i64 16}
!63 = !{!62, !16, i64 16}
!64 = !{!62, !16, i64 0}
!65 = !{!66, !16, i64 8}
!66 = !{!"_ZTSNSt12_Vector_baseI11LightMatrixIdESaIS1_EE17_Vector_impl_dataE", !16, i64 0, !16, i64 8, !16, i64 16}
!67 = !{!66, !16, i64 16}
!68 = !{!69, !70, i64 0}
!69 = !{!"_ZTS11LightMatrixIdE", !70, i64 0, !57, i64 4, !57, i64 8, !16, i64 16}
!70 = !{!"bool", !5, i64 0}
!71 = !{!69, !57, i64 4}
!72 = !{!69, !57, i64 8}
!73 = !{!69, !16, i64 16}
!74 = distinct !{!74, !9, !10}
!75 = !{!76, !76, i64 0}
!76 = !{!"double", !5, i64 0}
!77 = distinct !{!77, !9, !10}
!78 = distinct !{!78, !9, !10}
!79 = distinct !{!79, !9, !10}
!80 = distinct !{!80, !9, !10}
!81 = !{!33, !16, i64 0}
!82 = !{!83}
!83 = distinct !{!83, !84, !"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_: %agg.result"}
!84 = distinct !{!84, !"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_"}
!85 = !{!86, !16, i64 240}
!86 = !{!"_ZTSSt9basic_iosIcSt11char_traitsIcEE", !16, i64 216, !5, i64 224, !70, i64 225, !16, i64 232, !16, i64 240, !16, i64 248, !16, i64 256}
!87 = !{!88, !5, i64 56}
!88 = !{!"_ZTSSt5ctypeIcE", !16, i64 16, !70, i64 24, !16, i64 32, !16, i64 40, !16, i64 48, !5, i64 56, !5, i64 57, !5, i64 313, !5, i64 569}
!89 = distinct !{!89, !9, !10}
!90 = !{i8 0, i8 2}
!91 = distinct !{!91, !9, !10}
!92 = !{!93}
!93 = distinct !{!93, !94, !"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_: %agg.result"}
!94 = distinct !{!94, !"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_"}
!95 = !{!70, !70, i64 0}
!96 = !{!97, !4, i64 8}
!97 = !{!"_ZTSSi", !4, i64 8}
!98 = !{!99}
!99 = distinct !{!99, !100, !"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_: %agg.result"}
!100 = distinct !{!100, !"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_"}
!101 = distinct !{!101, !9, !10}
!102 = distinct !{!102, !9, !10}
!103 = distinct !{!103, !9, !10}
!104 = distinct !{!104, !9, !10}
!105 = !{!106, !16, i64 8}
!106 = !{!"_ZTSNSt12_Vector_baseI8TriangleSaIS0_EE17_Vector_impl_dataE", !16, i64 0, !16, i64 8, !16, i64 16}
!107 = !{!106, !16, i64 16}
!108 = !{i64 0, i64 12, !21}
!109 = distinct !{!109, !9, !10}
!110 = distinct !{!110, !9, !10}
!111 = !{!112, !70, i64 168}
!112 = !{!"_ZTS20HandModelLightMatrix", !113, i64 0, !114, i64 24, !115, i64 48, !115, i64 72, !69, i64 96, !69, i64 120, !116, i64 144, !70, i64 168}
!113 = !{!"_ZTSSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE"}
!114 = !{!"_ZTSSt6vectorIiSaIiEE"}
!115 = !{!"_ZTSSt6vectorI11LightMatrixIdESaIS1_EE"}
!116 = !{!"_ZTSSt6vectorI8TriangleSaIS0_EE"}
!117 = distinct !{!117, !9, !10}
!118 = distinct !{!118, !9, !10}
!119 = !{!120, !16, i64 8}
!120 = !{!"_ZTSNSt12_Vector_baseIdSaIdEE17_Vector_impl_dataE", !16, i64 0, !16, i64 8, !16, i64 16}
!121 = !{!120, !16, i64 0}
!122 = distinct !{!122, !9, !10}
!123 = distinct !{!123, !9, !10}
!124 = !{!125, !57, i64 0}
!125 = !{!"_ZTS17HandObjectiveData", !57, i64 0, !16, i64 8, !16, i64 16, !16, i64 24, !16, i64 32, !126, i64 40, !126, i64 56, !16, i64 72, !57, i64 80, !57, i64 84, !16, i64 88, !126, i64 96}
!126 = !{!"_ZTS6Matrix", !57, i64 0, !57, i64 4, !16, i64 8}
!127 = !{!125, !16, i64 8}
!128 = !{!125, !16, i64 16}
!129 = !{!125, !16, i64 24}
!130 = !{!125, !16, i64 32}
!131 = !{!125, !16, i64 72}
!132 = !{!125, !57, i64 80}
!133 = !{!125, !57, i64 84}
!134 = !{!125, !16, i64 88}
!135 = distinct !{!135, !9, !10}
!136 = distinct !{!136, !9, !10}
!137 = !{!126, !16, i64 8}
!138 = !{!126, !57, i64 0}
!139 = !{!126, !57, i64 4}
!140 = !{i64 0, i64 4, !59, i64 4, i64 4, !59, i64 8, i64 8, !60}
!141 = !{i64 0, i64 8, !60}
!142 = !{!106, !16, i64 0}
!143 = !{!66, !16, i64 0}
!144 = distinct !{!144, !9, !10}
!145 = !{!146, !147, i64 0}
!146 = !{!"_ZTSN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES3_IhSaIhEEEE", !147, i64 0, !5, i64 8}
!147 = !{!"_ZTSN8nlohmann12json_v3_11_16detail7value_tE", !5, i64 0}
!148 = !{!147, !147, i64 0}
!149 = !{!150}
!150 = distinct !{!150, !151, !"_Z19filepath_to_dirnameRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE: %agg.result"}
!151 = distinct !{!151, !"_Z19filepath_to_dirnameRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"}
!152 = !{!153}
!153 = distinct !{!153, !154, !"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm: %agg.result"}
!154 = distinct !{!154, !"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm"}
!155 = !{!153, !150}
!156 = !{!157}
!157 = distinct !{!157, !158, !"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_: %agg.result"}
!158 = distinct !{!158, !"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_"}
!159 = !{!120, !16, i64 16}
!160 = !{!161, !57, i64 24}
!161 = !{!"_ZTS10HandOutput", !162, i64 0, !57, i64 24, !57, i64 28, !162, i64 32}
!162 = !{!"_ZTSSt6vectorIdSaIdEE"}
!163 = !{!161, !57, i64 28}
!164 = !{!53, !4, i64 16}
!165 = distinct !{!165, !9, !10}
!166 = !{!167, !16, i64 16}
!167 = !{!"_ZTSSt15_Rb_tree_header", !168, i64 0, !4, i64 32}
!168 = !{!"_ZTSSt18_Rb_tree_node_base", !169, i64 0, !16, i64 8, !16, i64 16, !16, i64 24}
!169 = !{!"_ZTSSt14_Rb_tree_color", !5, i64 0}
!170 = !{!167, !16, i64 24}
!171 = !{!167, !4, i64 32}
!172 = !{!"branch_weights", i32 2000, i32 1}
!173 = !{!174, !174, i64 0}
!174 = !{!"nullptr_t", !5, i64 0}
!175 = !{!"branch_weights", i32 1, i32 2001, i32 2000}
!176 = !{!177, !16, i64 16}
!177 = !{!"_ZTSNSt12_Vector_baseIN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESaISE_EE17_Vector_impl_dataE", !16, i64 0, !16, i64 8, !16, i64 16}
!178 = !{!177, !16, i64 8}
!179 = !{i64 0, i64 8, !60, i64 0, i64 8, !60, i64 0, i64 8, !60, i64 0, i64 8, !60, i64 0, i64 1, !95, i64 0, i64 8, !20, i64 0, i64 8, !20, i64 0, i64 8, !75}
!180 = !{!181, !183}
!181 = distinct !{!181, !182, !"_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceIN8nlohmann12json_v3_11_16detail21output_stream_adapterIcEESaIvELN9__gnu_cxx12_Lock_policyE2EEEESt15__allocated_ptrIT_ERSC_: %agg.result"}
!182 = distinct !{!182, !"_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceIN8nlohmann12json_v3_11_16detail21output_stream_adapterIcEESaIvELN9__gnu_cxx12_Lock_policyE2EEEESt15__allocated_ptrIT_ERSC_"}
!183 = distinct !{!183, !184, !"_ZSt11make_sharedIN8nlohmann12json_v3_11_16detail21output_stream_adapterIcEEJRSoEESt10shared_ptrINSt9enable_ifIXntsr8is_arrayIT_EE5valueES8_E4typeEEDpOT0_: %agg.result"}
!184 = distinct !{!184, !"_ZSt11make_sharedIN8nlohmann12json_v3_11_16detail21output_stream_adapterIcEEJRSoEESt10shared_ptrINSt9enable_ifIXntsr8is_arrayIT_EE5valueES8_E4typeEEDpOT0_"}
!185 = !{!186, !57, i64 8}
!186 = !{!"_ZTSSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE", !57, i64 8, !57, i64 12}
!187 = !{!183}
!188 = !{!186, !57, i64 12}
!189 = !{!190}
!190 = distinct !{!190, !191, !"_ZN8nlohmann12json_v3_11_16detail14output_adapterIcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEcvSt10shared_ptrINS1_23output_adapter_protocolIcEEEEv: %agg.result"}
!191 = distinct !{!191, !"_ZN8nlohmann12json_v3_11_16detail14output_adapterIcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEcvSt10shared_ptrINS1_23output_adapter_protocolIcEEEEv"}
!192 = !{!86, !70, i64 225}
!193 = !{!86, !5, i64 224}
!194 = !{!195, !16, i64 0}
!195 = !{!"_ZTSSt12__shared_ptrIN8nlohmann12json_v3_11_16detail23output_adapter_protocolIcEELN9__gnu_cxx12_Lock_policyE2EE", !16, i64 0, !196, i64 8}
!196 = !{!"_ZTSSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EE", !16, i64 0}
!197 = !{!196, !16, i64 0}
!198 = !{!199, !16, i64 80}
!199 = !{!"_ZTSN8nlohmann12json_v3_11_16detail10serializerINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS0_14adl_serializerES5_IhSaIhEEEEEE", !200, i64 0, !201, i64 16, !16, i64 80, !5, i64 88, !5, i64 89, !202, i64 90, !5, i64 602, !18, i64 608, !203, i64 640}
!200 = !{!"_ZTSSt10shared_ptrIN8nlohmann12json_v3_11_16detail23output_adapter_protocolIcEEE"}
!201 = !{!"_ZTSSt5arrayIcLm64EE", !5, i64 0}
!202 = !{!"_ZTSSt5arrayIcLm512EE", !5, i64 0}
!203 = !{!"_ZTSN8nlohmann12json_v3_11_16detail15error_handler_tE", !5, i64 0}
!204 = !{!205, !16, i64 8}
!205 = !{!"_ZTS5lconv", !16, i64 0, !16, i64 8, !16, i64 16, !16, i64 24, !16, i64 32, !16, i64 40, !16, i64 48, !16, i64 56, !16, i64 64, !16, i64 72, !5, i64 80, !5, i64 81, !5, i64 82, !5, i64 83, !5, i64 84, !5, i64 85, !5, i64 86, !5, i64 87, !5, i64 88, !5, i64 89, !5, i64 90, !5, i64 91, !5, i64 92, !5, i64 93}
!206 = !{!199, !5, i64 88}
!207 = !{!205, !16, i64 0}
!208 = !{!199, !5, i64 89}
!209 = !{!199, !5, i64 602}
!210 = !{!199, !203, i64 640}
!211 = !{!"branch_weights", i32 1, i32 2000}
!212 = distinct !{!212, !9, !10}
!213 = distinct !{!213, !9, !10}
!214 = distinct !{!214, !9, !10}
!215 = distinct !{!215, !9, !10}
!216 = distinct !{!216, !9, !10}
!217 = distinct !{!217, !9, !10}
!218 = distinct !{!218, !9, !10}
!219 = distinct !{!219, !9, !10}
!220 = distinct !{!220, !9, !10}
!221 = distinct !{!221, !9, !10}
!222 = distinct !{!222, !9, !10}
!223 = distinct !{!223, !9, !10}
!224 = distinct !{!224, !9, !10}
!225 = distinct !{!225, !9, !10}
!226 = distinct !{!226, !9, !10}
!227 = distinct !{!227, !9, !10}
!228 = distinct !{!228, !9, !10}
!229 = distinct !{!229, !9, !10}
!230 = distinct !{!230, !9, !10}
!231 = distinct !{!231, !9, !10}
!232 = distinct !{!232, !9, !10}
!233 = distinct !{!233, !9, !10}
!234 = distinct !{!234, !9, !10}
!235 = distinct !{!235, !9, !10}
!236 = distinct !{!236, !9, !10}
!237 = distinct !{!237, !9, !10}
!238 = distinct !{!238, !9, !10}
!239 = distinct !{!239, !9, !10}
!240 = distinct !{!240, !9, !10}
!241 = !{!242, !16, i64 0}
!242 = !{!"_ZTS11Matrix_diff", !16, i64 0}
!243 = distinct !{!243, !9, !10}
!244 = distinct !{!244, !9, !10}
!245 = distinct !{!245, !9, !10}
!246 = distinct !{!246, !9, !10}
!247 = distinct !{!247, !9, !10}
!248 = distinct !{!248, !9, !10}
!249 = distinct !{!249, !9, !10}
!250 = distinct !{!250, !9, !10}
!251 = distinct !{!251, !9, !10}
!252 = distinct !{!252, !9, !10}
!253 = distinct !{!253, !9, !10}
!254 = distinct !{!254, !9, !10}
!255 = distinct !{!255, !9, !10}
!256 = distinct !{!256, !9, !10}
!257 = distinct !{!257, !9, !10}
!258 = distinct !{!258, !9, !10}
!259 = distinct !{!259, !9, !10}
!260 = distinct !{!260, !9, !10}
!261 = distinct !{!261, !9, !10}
!262 = distinct !{!262, !9, !10}
!263 = distinct !{!263, !9, !10}
!264 = distinct !{!264, !9, !10}
!265 = distinct !{!265, !9, !10}
!266 = distinct !{!266, !9, !10}
!267 = distinct !{!267, !9, !10}
!268 = distinct !{!268, !9, !10}
!269 = distinct !{!269, !9, !10}
!270 = distinct !{!270, !9, !10}
!271 = distinct !{!271, !9, !10}
!272 = distinct !{!272, !9, !10}
!273 = distinct !{!273, !9, !10}
!274 = distinct !{!274, !9, !10}
!275 = distinct !{!275, !9, !10}
!276 = distinct !{!276, !9, !10}
!277 = distinct !{!277, !9, !10}
!278 = distinct !{!278, !9, !10}
!279 = distinct !{!279, !9, !10}
!280 = distinct !{!280, !9, !10}
!281 = distinct !{!281, !9, !10}
!282 = distinct !{!282, !9, !10}
!283 = distinct !{!283, !9, !10}
!284 = distinct !{!284, !9, !10}
!285 = distinct !{!285, !9, !10}
!286 = distinct !{!286, !9, !10}
!287 = distinct !{!287, !9, !10}
!288 = distinct !{!288, !9, !10}
!289 = distinct !{!289, !9, !10}
!290 = distinct !{!290, !9, !10}
!291 = distinct !{!291, !9, !10}
!292 = distinct !{!292, !9, !10}
!293 = distinct !{!293, !9, !10}
!294 = distinct !{!294, !9, !10}
!295 = distinct !{!295, !9, !10}
!296 = distinct !{!296, !9, !10}
!297 = distinct !{!297, !9, !10}
!298 = !{!177, !16, i64 0}
!299 = distinct !{!299, !9, !10}
!300 = distinct !{!300, !10}
!301 = distinct !{!301, !9, !10}
!302 = !{!167, !16, i64 8}
!303 = distinct !{!303, !10}
!304 = distinct !{!304, !9, !10}
!305 = !{!306, !16, i64 0}
!306 = !{!"_ZTSNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataE", !16, i64 0, !16, i64 8, !16, i64 16}
!307 = !{!308}
!308 = distinct !{!308, !309, !"_ZSt19__relocate_object_aIN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESE_SaISE_EEvPT_PT0_RT1_: %__dest"}
!309 = distinct !{!309, !"_ZSt19__relocate_object_aIN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESE_SaISE_EEvPT_PT0_RT1_"}
!310 = !{!311}
!311 = distinct !{!311, !309, !"_ZSt19__relocate_object_aIN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESE_SaISE_EEvPT_PT0_RT1_: %__orig"}
!312 = distinct !{!312, !9, !10}
!313 = !{!314}
!314 = distinct !{!314, !315, !"_ZSt19__relocate_object_aIN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESE_SaISE_EEvPT_PT0_RT1_: %__dest"}
!315 = distinct !{!315, !"_ZSt19__relocate_object_aIN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESE_SaISE_EEvPT_PT0_RT1_"}
!316 = !{!317}
!317 = distinct !{!317, !315, !"_ZSt19__relocate_object_aIN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESE_SaISE_EEvPT_PT0_RT1_: %__orig"}
!318 = !{!319}
!319 = distinct !{!319, !320, !"_ZSt19__relocate_object_aIN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESE_SaISE_EEvPT_PT0_RT1_: %__dest"}
!320 = distinct !{!320, !"_ZSt19__relocate_object_aIN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESE_SaISE_EEvPT_PT0_RT1_"}
!321 = !{!322}
!322 = distinct !{!322, !320, !"_ZSt19__relocate_object_aIN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESE_SaISE_EEvPT_PT0_RT1_: %__orig"}
!323 = !{!168, !16, i64 24}
!324 = !{!168, !16, i64 16}
!325 = distinct !{!325, !9, !10}
!326 = !{!327}
!327 = distinct !{!327, !328, !"_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_: %__dest"}
!328 = distinct !{!328, !"_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_"}
!329 = !{!330}
!330 = distinct !{!330, !328, !"_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_: %__orig"}
!331 = distinct !{!331, !9, !10}
!332 = !{!333}
!333 = distinct !{!333, !334, !"_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_: %__dest"}
!334 = distinct !{!334, !"_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_"}
!335 = !{!336}
!336 = distinct !{!336, !334, !"_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_: %__orig"}
!337 = !{!338}
!338 = distinct !{!338, !339, !"_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_: %__dest"}
!339 = distinct !{!339, !"_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_"}
!340 = !{!341}
!341 = distinct !{!341, !339, !"_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_: %__orig"}
!342 = !{!343}
!343 = distinct !{!343, !344, !"_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_: %__dest"}
!344 = distinct !{!344, !"_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_"}
!345 = !{!346}
!346 = distinct !{!346, !344, !"_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_: %__orig"}
!347 = distinct !{!347, !9, !10}
!348 = distinct !{!348, !9, !10}
!349 = distinct !{!349, !9, !10}
!350 = !{!351}
!351 = distinct !{!351, !352, !"_ZSt19__relocate_object_aIN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESE_SaISE_EEvPT_PT0_RT1_: %__dest"}
!352 = distinct !{!352, !"_ZSt19__relocate_object_aIN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESE_SaISE_EEvPT_PT0_RT1_"}
!353 = !{!354}
!354 = distinct !{!354, !352, !"_ZSt19__relocate_object_aIN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESE_SaISE_EEvPT_PT0_RT1_: %__orig"}
!355 = !{!356}
!356 = distinct !{!356, !357, !"_ZSt19__relocate_object_aIN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESE_SaISE_EEvPT_PT0_RT1_: %__dest"}
!357 = distinct !{!357, !"_ZSt19__relocate_object_aIN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESE_SaISE_EEvPT_PT0_RT1_"}
!358 = !{!359}
!359 = distinct !{!359, !357, !"_ZSt19__relocate_object_aIN8nlohmann12json_v3_11_110basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS1_14adl_serializerES4_IhSaIhEEEESE_SaISE_EEvPT_PT0_RT1_: %__orig"}
!360 = distinct !{!360, !9, !10}
!361 = !{!306, !16, i64 8}
!362 = !{!306, !16, i64 16}
!363 = !{!167, !169, i64 0}
!364 = distinct !{!364, !9, !10}
!365 = distinct !{!365, !9, !10}
!366 = !{!168, !169, i64 0}
!367 = !{!168, !16, i64 8}
!368 = distinct !{!368, !9, !10}
!369 = distinct !{!369, !9, !10}
!370 = distinct !{!370, !9, !10}
!371 = distinct !{!371, !9, !10}
!372 = distinct !{!372, !9, !10}
!373 = distinct !{!373, !9, !10}
!374 = !{!375, !70, i64 32}
!375 = !{!"_ZTSN8nlohmann12json_v3_11_127byte_container_with_subtypeISt6vectorIhSaIhEEEE", !4, i64 24, !70, i64 32}
!376 = !{!375, !4, i64 24}
!377 = distinct !{!377, !9, !10}
!378 = !{!379, !16, i64 8}
!379 = !{!"_ZTSSt9type_info", !16, i64 8}
!380 = !{!381, !16, i64 8}
!381 = !{!"_ZTSN8nlohmann12json_v3_11_16detail21output_stream_adapterIcEE", !16, i64 8}
!382 = distinct !{!382, !9, !10}
!383 = distinct !{!383, !10}
!384 = distinct !{!384, !9, !10}
!385 = distinct !{!385, !9, !10}
!386 = distinct !{!386, !9, !10}
!387 = !{i64 0, i64 8, !20, i64 8, i64 4, !59}
!388 = !{i64 0, i64 4, !59}
!389 = distinct !{!389, !9, !10}
!390 = !{!391, !57, i64 8}
!391 = !{!"_ZTSN8nlohmann12json_v3_11_16detail9dtoa_impl5diyfpE", !4, i64 0, !57, i64 8}
!392 = !{!391, !4, i64 0}
!393 = !{i64 0, i64 8, !20, i64 8, i64 4, !59, i64 12, i64 4, !59}
!394 = !{i64 0, i64 4, !59, i64 4, i64 4, !59}
!395 = distinct !{!395, !10}
!396 = distinct !{!396, !9, !10}
!397 = !{!398}
!398 = distinct !{!398, !399, !"shadow_0"}
!399 = distinct !{!399, !" diff: %err"}
!400 = !{!401}
!401 = distinct !{!401, !399, !"primal"}
!402 = !{!403}
!403 = distinct !{!403, !404, !"shadow_0"}
!404 = distinct !{!404, !" diff: %call.i39"}
!405 = !{!406}
!406 = distinct !{!406, !404, !"primal"}
!407 = distinct !{}
!408 = distinct !{}
!409 = !{!410}
!410 = distinct !{!410, !411, !"primal"}
!411 = distinct !{!411, !" diff: %correspondences"}
!412 = !{!413}
!413 = distinct !{!413, !411, !"shadow_0"}
!414 = distinct !{}
!415 = !{!416}
!416 = distinct !{!416, !417, !"shadow_0"}
!417 = distinct !{!417, !" diff: %"}
!418 = !{!419}
!419 = distinct !{!419, !417, !"primal"}
!420 = !{!421}
!421 = distinct !{!421, !422, !"primal"}
!422 = distinct !{!422, !" diff: %lhs"}
!423 = !{!424}
!424 = distinct !{!424, !422, !"shadow_0"}
!425 = !{!426}
!426 = distinct !{!426, !427, !"primal"}
!427 = distinct !{!427, !" diff: %rhs"}
!428 = !{!429}
!429 = distinct !{!429, !427, !"shadow_0"}
!430 = !{!431}
!431 = distinct !{!431, !432, !"primal"}
!432 = distinct !{!432, !" diff: %out"}
!433 = !{!434}
!434 = distinct !{!434, !432, !"shadow_0"}
!435 = distinct !{}
!436 = distinct !{}
!437 = distinct !{}
!438 = distinct !{}
!439 = distinct !{}
!440 = !{!441}
!441 = distinct !{!441, !442, !"primal"}
!442 = distinct !{!442, !" diff: %"}
!443 = !{!444}
!444 = distinct !{!444, !442, !"shadow_0"}
!445 = !{!446}
!446 = distinct !{!446, !447, !"primal"}
!447 = distinct !{!447, !" diff: %"}
!448 = !{!449}
!449 = distinct !{!449, !447, !"shadow_0"}
!450 = !{!451}
!451 = distinct !{!451, !452, !"primal"}
!452 = distinct !{!452, !" diff: %"}
!453 = !{!454}
!454 = distinct !{!454, !452, !"shadow_0"}
!455 = distinct !{}
!456 = distinct !{}
!457 = !{i64 8}
!458 = distinct !{}
!459 = distinct !{}
!460 = distinct !{}
!461 = distinct !{}
!462 = !{!463}
!463 = distinct !{!463, !464, !"primal"}
!464 = distinct !{!464, !" diff: %parents"}
!465 = !{!466}
!466 = distinct !{!466, !464, !"shadow_0"}
!467 = distinct !{}
!468 = !{!469}
!469 = distinct !{!469, !470, !"primal"}
!470 = distinct !{!470, !" diff: %absolutes"}
!471 = !{!472}
!472 = distinct !{!472, !470, !"shadow_0"}
!473 = distinct !{}
!474 = !{!475}
!475 = distinct !{!475, !476, !"primal"}
!476 = distinct !{!476, !" diff: %relatives"}
!477 = !{!478}
!478 = distinct !{!478, !476, !"shadow_0"}
!479 = distinct !{}
!480 = distinct !{}
!481 = distinct !{}
!482 = distinct !{}
!483 = !{!484}
!484 = distinct !{!484, !485, !"primal"}
!485 = distinct !{!485, !" diff: %"}
!486 = !{!487}
!487 = distinct !{!487, !485, !"shadow_0"}
!488 = !{!489}
!489 = distinct !{!489, !490, !"primal"}
!490 = distinct !{!490, !" diff: %call.i"}
!491 = !{!492}
!492 = distinct !{!492, !490, !"shadow_0"}
!493 = distinct !{}
!494 = !{!495}
!495 = distinct !{!495, !496, !"primal"}
!496 = distinct !{!496, !" diff: %lhs"}
!497 = !{!498}
!498 = distinct !{!498, !496, !"shadow_0"}
!499 = !{!500}
!500 = distinct !{!500, !501, !"primal"}
!501 = distinct !{!501, !" diff: %rhs"}
!502 = !{!503}
!503 = distinct !{!503, !501, !"shadow_0"}
!504 = !{!505}
!505 = distinct !{!505, !506, !"primal"}
!506 = distinct !{!506, !" diff: %out"}
!507 = !{!508}
!508 = distinct !{!508, !506, !"shadow_0"}
!509 = distinct !{}
!510 = distinct !{}
!511 = !{!512}
!512 = distinct !{!512, !513, !"primal"}
!513 = distinct !{!513, !" diff: %"}
!514 = !{!515}
!515 = distinct !{!515, !513, !"shadow_0"}
!516 = !{!517}
!517 = distinct !{!517, !518, !"primal"}
!518 = distinct !{!518, !" diff: %"}
!519 = !{!520}
!520 = distinct !{!520, !518, !"shadow_0"}
!521 = !{!522}
!522 = distinct !{!522, !523, !"primal"}
!523 = distinct !{!523, !" diff: %"}
!524 = !{!525}
!525 = distinct !{!525, !523, !"shadow_0"}
!526 = distinct !{}
!527 = distinct !{}
!528 = distinct !{}
!529 = distinct !{}
!530 = !{!531}
!531 = distinct !{!531, !532, !"primal"}
!532 = distinct !{!532, !" diff: %lhs"}
!533 = !{!534}
!534 = distinct !{!534, !532, !"shadow_0"}
!535 = !{!536}
!536 = distinct !{!536, !537, !"primal"}
!537 = distinct !{!537, !" diff: %rhs"}
!538 = !{!539}
!539 = distinct !{!539, !537, !"shadow_0"}
!540 = !{!541}
!541 = distinct !{!541, !542, !"primal"}
!542 = distinct !{!542, !" diff: %out"}
!543 = !{!544}
!544 = distinct !{!544, !542, !"shadow_0"}
!545 = distinct !{}
!546 = !{!547}
!547 = distinct !{!547, !548, !"primal"}
!548 = distinct !{!548, !" diff: %"}
!549 = !{!550}
!550 = distinct !{!550, !548, !"shadow_0"}
!551 = !{!552}
!552 = distinct !{!552, !553, !"primal"}
!553 = distinct !{!553, !" diff: %"}
!554 = !{!555}
!555 = distinct !{!555, !553, !"shadow_0"}
!556 = !{!557}
!557 = distinct !{!557, !558, !"primal"}
!558 = distinct !{!558, !" diff: %"}
!559 = !{!560}
!560 = distinct !{!560, !558, !"shadow_0"}
!561 = distinct !{}
!562 = distinct !{}
!563 = distinct !{}
!564 = distinct !{}
!565 = !{!566}
!566 = distinct !{!566, !567, !"primal"}
!567 = distinct !{!567, !" diff: %xzy"}
!568 = !{!569}
!569 = distinct !{!569, !567, !"shadow_0"}
!570 = !{!571}
!571 = distinct !{!571, !572, !"shadow_0"}
!572 = distinct !{!572, !" diff: %call.i"}
!573 = !{!574}
!574 = distinct !{!574, !572, !"primal"}
!575 = !{!576}
!576 = distinct !{!576, !577, !"shadow_0"}
!577 = distinct !{!577, !" diff: %call.i167"}
!578 = !{!579}
!579 = distinct !{!579, !577, !"primal"}
!580 = !{!581}
!581 = distinct !{!581, !582, !"shadow_0"}
!582 = distinct !{!582, !" diff: %call.i172"}
!583 = !{!584}
!584 = distinct !{!584, !582, !"primal"}
!585 = !{!586}
!586 = distinct !{!586, !587, !"primal"}
!587 = distinct !{!587, !" diff: %call4.i"}
!588 = !{!589}
!589 = distinct !{!589, !587, !"shadow_0"}
!590 = !{!591}
!591 = distinct !{!591, !592, !"primal"}
!592 = distinct !{!592, !" diff: %call4.i170"}
!593 = !{!594}
!594 = distinct !{!594, !592, !"shadow_0"}
!595 = !{!596}
!596 = distinct !{!596, !597, !"primal"}
!597 = distinct !{!597, !" diff: %call4.i175"}
!598 = !{!599}
!599 = distinct !{!599, !597, !"shadow_0"}
!600 = !{!601}
!601 = distinct !{!601, !602, !"primal"}
!602 = distinct !{!602, !" diff: %lhs"}
!603 = !{!604}
!604 = distinct !{!604, !602, !"shadow_0"}
!605 = !{!606}
!606 = distinct !{!606, !607, !"primal"}
!607 = distinct !{!607, !" diff: %rhs"}
!608 = !{!609}
!609 = distinct !{!609, !607, !"shadow_0"}
!610 = !{!611}
!611 = distinct !{!611, !612, !"primal"}
!612 = distinct !{!612, !" diff: %out"}
!613 = !{!614}
!614 = distinct !{!614, !612, !"shadow_0"}
!615 = distinct !{}
!616 = distinct !{}
!617 = !{!618}
!618 = distinct !{!618, !619, !"primal"}
!619 = distinct !{!619, !" diff: %"}
!620 = !{!621}
!621 = distinct !{!621, !619, !"shadow_0"}
!622 = !{!623}
!623 = distinct !{!623, !624, !"primal"}
!624 = distinct !{!624, !" diff: %"}
!625 = !{!626}
!626 = distinct !{!626, !624, !"shadow_0"}
!627 = !{!628}
!628 = distinct !{!628, !629, !"primal"}
!629 = distinct !{!629, !" diff: %"}
!630 = !{!631}
!631 = distinct !{!631, !629, !"shadow_0"}
!632 = distinct !{}
!633 = distinct !{}
!634 = distinct !{}
!635 = !{!636}
!636 = distinct !{!636, !637, !"shadow_0"}
!637 = distinct !{!637, !" diff: %call.i"}
!638 = !{!639}
!639 = distinct !{!639, !637, !"primal"}
!640 = !{!641}
!641 = distinct !{!641, !642, !"shadow_0"}
!642 = distinct !{!642, !" diff: %call.i18"}
!643 = !{!644}
!644 = distinct !{!644, !642, !"primal"}
!645 = !{!646}
!646 = distinct !{!646, !647, !"shadow_0"}
!647 = distinct !{!647, !" diff: %pose_params"}
!648 = !{!649}
!649 = distinct !{!649, !647, !"primal"}
!650 = !{!651}
!651 = distinct !{!651, !652, !"primal"}
!652 = distinct !{!652, !" diff: %call4.i"}
!653 = !{!654}
!654 = distinct !{!654, !652, !"shadow_0"}
!655 = distinct !{}
!656 = distinct !{}
!657 = distinct !{}
!658 = distinct !{}
!659 = !{!660}
!660 = distinct !{!660, !661, !"primal"}
!661 = distinct !{!661, !" diff: %"}
!662 = !{!663}
!663 = distinct !{!663, !661, !"shadow_0"}
!664 = distinct !{}
!665 = !{!666}
!666 = distinct !{!666, !667, !"primal"}
!667 = distinct !{!667, !" diff: %lhs"}
!668 = !{!669}
!669 = distinct !{!669, !667, !"shadow_0"}
!670 = !{!671}
!671 = distinct !{!671, !672, !"primal"}
!672 = distinct !{!672, !" diff: %rhs"}
!673 = !{!674}
!674 = distinct !{!674, !672, !"shadow_0"}
!675 = !{!676}
!676 = distinct !{!676, !677, !"primal"}
!677 = distinct !{!677, !" diff: %out"}
!678 = !{!679}
!679 = distinct !{!679, !677, !"shadow_0"}
!680 = distinct !{}
!681 = distinct !{}
!682 = distinct !{}
!683 = !{!684}
!684 = distinct !{!684, !685, !"primal"}
!685 = distinct !{!685, !" diff: %"}
!686 = !{!687}
!687 = distinct !{!687, !685, !"shadow_0"}
!688 = !{!689}
!689 = distinct !{!689, !690, !"primal"}
!690 = distinct !{!690, !" diff: %"}
!691 = !{!692}
!692 = distinct !{!692, !690, !"shadow_0"}
!693 = !{!694}
!694 = distinct !{!694, !695, !"primal"}
!695 = distinct !{!695, !" diff: %"}
!696 = !{!697}
!697 = distinct !{!697, !695, !"shadow_0"}
!698 = distinct !{}
!699 = distinct !{}
!700 = distinct !{}
!701 = !{!702}
!702 = distinct !{!702, !703, !"primal"}
!703 = distinct !{!703, !" diff: %lhs"}
!704 = !{!705}
!705 = distinct !{!705, !703, !"shadow_0"}
!706 = !{!707}
!707 = distinct !{!707, !708, !"primal"}
!708 = distinct !{!708, !" diff: %rhs"}
!709 = !{!710}
!710 = distinct !{!710, !708, !"shadow_0"}
!711 = !{!712}
!712 = distinct !{!712, !713, !"primal"}
!713 = distinct !{!713, !" diff: %out"}
!714 = !{!715}
!715 = distinct !{!715, !713, !"shadow_0"}
!716 = distinct !{}
!717 = distinct !{}
!718 = distinct !{}
!719 = !{!720}
!720 = distinct !{!720, !721, !"primal"}
!721 = distinct !{!721, !" diff: %"}
!722 = !{!723}
!723 = distinct !{!723, !721, !"shadow_0"}
!724 = !{!725}
!725 = distinct !{!725, !726, !"primal"}
!726 = distinct !{!726, !" diff: %"}
!727 = !{!728}
!728 = distinct !{!728, !726, !"shadow_0"}
!729 = !{!730}
!730 = distinct !{!730, !731, !"primal"}
!731 = distinct !{!731, !" diff: %"}
!732 = !{!733}
!733 = distinct !{!733, !731, !"shadow_0"}
!734 = distinct !{}
!735 = distinct !{}
!736 = distinct !{}
!737 = !{!738}
!738 = distinct !{!738, !739, !"primal"}
!739 = distinct !{!739, !" diff: %angle_axis"}
!740 = !{!741}
!741 = distinct !{!741, !739, !"shadow_0"}
!742 = distinct !{}
!743 = distinct !{}
!744 = !{!745}
!745 = distinct !{!745, !746, !"primal"}
!746 = distinct !{!746, !" diff: %R"}
!747 = !{!748}
!748 = distinct !{!748, !746, !"shadow_0"}
!749 = !{!750}
!750 = distinct !{!750, !751, !"primal"}
!751 = distinct !{!751, !" diff: %"}
!752 = !{!753}
!753 = distinct !{!753, !751, !"shadow_0"}
!754 = !{!755}
!755 = distinct !{!755, !756, !"primal"}
!756 = distinct !{!756, !" diff: %"}
!757 = !{!758}
!758 = distinct !{!758, !756, !"shadow_0"}
!759 = !{!760}
!760 = distinct !{!760, !761, !"primal"}
!761 = distinct !{!761, !" diff: %lhs"}
!762 = !{!763}
!763 = distinct !{!763, !761, !"shadow_0"}
!764 = !{!765}
!765 = distinct !{!765, !766, !"primal"}
!766 = distinct !{!766, !" diff: %rhs"}
!767 = !{!768}
!768 = distinct !{!768, !766, !"shadow_0"}
!769 = !{!770}
!770 = distinct !{!770, !771, !"primal"}
!771 = distinct !{!771, !" diff: %out"}
!772 = !{!773}
!773 = distinct !{!773, !771, !"shadow_0"}
!774 = distinct !{}
!775 = !{!776}
!776 = distinct !{!776, !777, !"primal"}
!777 = distinct !{!777, !" diff: %"}
!778 = !{!779}
!779 = distinct !{!779, !777, !"shadow_0"}
!780 = !{!781}
!781 = distinct !{!781, !782, !"primal"}
!782 = distinct !{!782, !" diff: %"}
!783 = !{!784}
!784 = distinct !{!784, !782, !"shadow_0"}
!785 = !{!786}
!786 = distinct !{!786, !787, !"primal"}
!787 = distinct !{!787, !" diff: %"}
!788 = !{!789}
!789 = distinct !{!789, !787, !"shadow_0"}
!790 = distinct !{}
!791 = distinct !{}
!792 = distinct !{}
!793 = distinct !{}
!794 = !{!795}
!795 = distinct !{!795, !796, !"shadow_0"}
!796 = distinct !{!796, !" diff: %call.i"}
!797 = !{!798}
!798 = distinct !{!798, !796, !"primal"}
!799 = !{!800}
!800 = distinct !{!800, !801, !"shadow_0"}
!801 = distinct !{!801, !" diff: %pose_params"}
!802 = !{!803}
!803 = distinct !{!803, !801, !"primal"}
!804 = !{!805}
!805 = distinct !{!805, !806, !"primal"}
!806 = distinct !{!806, !" diff: %"}
!807 = !{!808}
!808 = distinct !{!808, !806, !"shadow_0"}
!809 = !{!810}
!810 = distinct !{!810, !811, !"primal"}
!811 = distinct !{!811, !" diff: %call4.i"}
!812 = !{!813}
!813 = distinct !{!813, !811, !"shadow_0"}
!814 = distinct !{}
!815 = distinct !{}
!816 = !{!817}
!817 = distinct !{!817, !818, !"primal"}
!818 = distinct !{!818, !" diff: %positions"}
!819 = !{!820}
!820 = distinct !{!820, !818, !"shadow_0"}
!821 = !{!822}
!822 = distinct !{!822, !823, !"primal"}
!823 = distinct !{!823, !" diff: %call.i81"}
!824 = !{!825}
!825 = distinct !{!825, !823, !"shadow_0"}
!826 = !{!827}
!827 = distinct !{!827, !828, !"primal"}
!828 = distinct !{!828, !" diff: %"}
!829 = !{!830}
!830 = distinct !{!830, !828, !"shadow_0"}
!831 = !{!832}
!832 = distinct !{!832, !833, !"primal"}
!833 = distinct !{!833, !" diff: %"}
!834 = !{!835}
!835 = distinct !{!835, !833, !"shadow_0"}
!836 = !{!837}
!837 = distinct !{!837, !838, !"primal"}
!838 = distinct !{!838, !" diff: %"}
!839 = !{!840}
!840 = distinct !{!840, !838, !"shadow_0"}
!841 = distinct !{}
!842 = !{!843}
!843 = distinct !{!843, !844, !"primal"}
!844 = distinct !{!844, !" diff: %base_positions"}
!845 = !{!846}
!846 = distinct !{!846, !844, !"shadow_0"}
!847 = !{!848}
!848 = distinct !{!848, !849, !"primal"}
!849 = distinct !{!849, !" diff: %positions"}
!850 = !{!851}
!851 = distinct !{!851, !849, !"shadow_0"}
!852 = !{!853}
!853 = distinct !{!853, !854, !"shadow_0"}
!854 = distinct !{!854, !" diff: %call.i16"}
!855 = !{!856}
!856 = distinct !{!856, !854, !"primal"}
!857 = distinct !{}
!858 = distinct !{}
!859 = distinct !{}
!860 = !{!861}
!861 = distinct !{!861, !862, !"primal"}
!862 = distinct !{!862, !" diff: %weights"}
!863 = !{!864}
!864 = distinct !{!864, !862, !"shadow_0"}
!865 = !{!866}
!866 = distinct !{!866, !867, !"primal"}
!867 = distinct !{!867, !" diff: %"}
!868 = !{!869}
!869 = distinct !{!869, !867, !"shadow_0"}
!870 = !{!871}
!871 = distinct !{!871, !872, !"primal"}
!872 = distinct !{!872, !" diff: %"}
!873 = !{!874}
!874 = distinct !{!874, !872, !"shadow_0"}
!875 = !{!876}
!876 = distinct !{!876, !877, !"primal"}
!877 = distinct !{!877, !" diff: %"}
!878 = !{!879}
!879 = distinct !{!879, !877, !"shadow_0"}
!880 = distinct !{}
!881 = !{!882}
!882 = distinct !{!882, !883, !"primal"}
!883 = distinct !{!883, !" diff: %"}
!884 = !{!885}
!885 = distinct !{!885, !883, !"shadow_0"}
!886 = distinct !{}
!887 = !{!888}
!888 = distinct !{!888, !889, !"primal"}
!889 = distinct !{!889, !" diff: %call.i"}
!890 = !{!891}
!891 = distinct !{!891, !889, !"shadow_0"}
!892 = distinct !{}
!893 = !{!894}
!894 = distinct !{!894, !895, !"primal"}
!895 = distinct !{!895, !" diff: %call.i36064"}
!896 = !{!897}
!897 = distinct !{!897, !895, !"shadow_0"}
!898 = distinct !{}
!899 = !{!900}
!900 = distinct !{!900, !901, !"primal"}
!901 = distinct !{!901, !" diff: %call.i966"}
!902 = !{!903}
!903 = distinct !{!903, !901, !"shadow_0"}
!904 = distinct !{}
!905 = !{!906}
!906 = distinct !{!906, !907, !"primal"}
!907 = distinct !{!907, !" diff: %base_positions"}
!908 = !{!909}
!909 = distinct !{!909, !907, !"shadow_0"}
!910 = distinct !{}
!911 = distinct !{}
!912 = !{!913}
!913 = distinct !{!913, !914, !"shadow_0"}
!914 = distinct !{!914, !" diff: %positions"}
!915 = !{!916}
!916 = distinct !{!916, !914, !"primal"}
!917 = distinct !{}
!918 = distinct !{}
!919 = distinct !{}
!920 = !{!921}
!921 = distinct !{!921, !922, !"shadow_0"}
!922 = distinct !{!922, !" diff: %"}
!923 = !{!924}
!924 = distinct !{!924, !922, !"primal"}
!925 = distinct !{}
!926 = distinct !{}
!927 = !{!928}
!928 = distinct !{!928, !929, !"primal"}
!929 = distinct !{!929, !" diff: %call.i16"}
!930 = !{!931}
!931 = distinct !{!931, !929, !"shadow_0"}
!932 = distinct !{}
!933 = !{!934}
!934 = distinct !{!934, !935, !"shadow_0"}
!935 = distinct !{!935, !" diff: %"}
!936 = !{!937}
!937 = distinct !{!937, !935, !"primal"}
!938 = distinct !{}
!939 = !{!940}
!940 = distinct !{!940, !941, !"shadow_0"}
!941 = distinct !{!941, !" diff: %"}
!942 = !{!943}
!943 = distinct !{!943, !941, !"primal"}
!944 = !{!945}
!945 = distinct !{}
!946 = distinct !{}
!947 = distinct !{}
!948 = distinct !{}
!949 = distinct !{}
!950 = !{!951}
!951 = distinct !{!951, !952, !"primal"}
!952 = distinct !{!952, !" diff: %mul6.i"}
!953 = !{!954}
!954 = distinct !{!954, !952, !"shadow_0"}
!955 = distinct !{}
!956 = !{!957}
!957 = distinct !{!957, !958, !"shadow_0"}
!958 = distinct !{!958, !" diff: %call.i"}
!959 = !{!960}
!960 = distinct !{!960, !958, !"primal"}
!961 = distinct !{}
!962 = !{!963}
!963 = distinct !{!963, !964, !"shadow_0"}
!964 = distinct !{!964, !" diff: %"}
!965 = !{!966}
!966 = distinct !{!966, !964, !"primal"}
!967 = !{!968}
!968 = distinct !{!968, !969, !"primal"}
!969 = distinct !{!969, !" diff: %parents"}
!970 = !{!971}
!971 = distinct !{!971, !969, !"shadow_0"}
!972 = distinct !{}
!973 = distinct !{}
!974 = distinct !{}
!975 = distinct !{}
!976 = !{!977}
!977 = distinct !{!977, !978, !"shadow_0"}
!978 = distinct !{!978, !" diff: %"}
!979 = !{!980}
!980 = distinct !{!980, !978, !"primal"}
!981 = distinct !{}
!982 = distinct !{}
!983 = distinct !{}
!984 = !{!985}
!985 = distinct !{!985, !986, !"primal"}
!986 = distinct !{!986, !" diff: %rhs"}
!987 = !{!988}
!988 = distinct !{!988, !986, !"shadow_0"}
!989 = distinct !{}
!990 = !{!991}
!991 = distinct !{!991, !992, !"shadow_0"}
!992 = distinct !{!992, !" diff: %"}
!993 = !{!994}
!994 = distinct !{!994, !992, !"primal"}
!995 = distinct !{}
!996 = !{!997}
!997 = distinct !{!997, !998, !"shadow_0"}
!998 = distinct !{!998, !" diff: %"}
!999 = !{!1000}
!1000 = distinct !{!1000, !998, !"primal"}
!1001 = distinct !{}
!1002 = distinct !{}
!1003 = distinct !{}
!1004 = distinct !{}
!1005 = !{!1006}
!1006 = distinct !{!1006, !1007, !"primal"}
!1007 = distinct !{!1007, !" diff: %lhs"}
!1008 = !{!1009}
!1009 = distinct !{!1009, !1007, !"shadow_0"}
!1010 = distinct !{}
!1011 = !{!1012}
!1012 = distinct !{!1012, !1013, !"shadow_0"}
!1013 = distinct !{!1013, !" diff: %call.i"}
!1014 = !{!1015}
!1015 = distinct !{!1015, !1013, !"primal"}
!1016 = !{!1017}
!1017 = distinct !{!1017, !1018, !"shadow_0"}
!1018 = distinct !{!1018, !" diff: %call4.i"}
!1019 = !{!1020}
!1020 = distinct !{!1020, !1018, !"primal"}
!1021 = distinct !{}
!1022 = distinct !{}
!1023 = !{!1024}
!1024 = distinct !{!1024, !1025, !"primal"}
!1025 = distinct !{!1025, !" diff: %call.i18"}
!1026 = !{!1027}
!1027 = distinct !{!1027, !1025, !"shadow_0"}
!1028 = distinct !{}
!1029 = !{!1030}
!1030 = distinct !{!1030, !1031, !"shadow_0"}
!1031 = distinct !{!1031, !" diff: %"}
!1032 = !{!1033}
!1033 = distinct !{!1033, !1031, !"primal"}
!1034 = distinct !{}
!1035 = distinct !{}
!1036 = !{!1037}
!1037 = distinct !{!1037, !1038, !"shadow_0"}
!1038 = distinct !{!1038, !" diff: %call.i"}
!1039 = !{!1040}
!1040 = distinct !{!1040, !1038, !"primal"}
!1041 = !{!1042}
!1042 = distinct !{!1042, !1043, !"shadow_0"}
!1043 = distinct !{!1043, !" diff: %call.i167"}
!1044 = !{!1045}
!1045 = distinct !{!1045, !1043, !"primal"}
!1046 = !{!1047}
!1047 = distinct !{!1047, !1048, !"shadow_0"}
!1048 = distinct !{!1048, !" diff: %call.i172"}
!1049 = !{!1050}
!1050 = distinct !{!1050, !1048, !"primal"}
!1051 = !{!1052}
!1052 = distinct !{!1052, !1053, !"shadow_0"}
!1053 = distinct !{!1053, !" diff: %call4.i175"}
!1054 = !{!1055}
!1055 = distinct !{!1055, !1053, !"primal"}
!1056 = !{!1057}
!1057 = distinct !{!1057, !1058, !"shadow_0"}
!1058 = distinct !{!1058, !" diff: %xzy"}
!1059 = !{!1060}
!1060 = distinct !{!1060, !1058, !"primal"}
!1061 = !{!1062}
!1062 = distinct !{!1062, !1063, !"shadow_0"}
!1063 = distinct !{!1063, !" diff: %call4.i"}
!1064 = !{!1065}
!1065 = distinct !{!1065, !1063, !"primal"}
!1066 = !{!1067}
!1067 = distinct !{!1067, !1068, !"shadow_0"}
!1068 = distinct !{!1068, !" diff: %call4.i170"}
!1069 = !{!1070}
!1070 = distinct !{!1070, !1068, !"primal"}
!1071 = !{!1072}
!1072 = distinct !{!1072, !1073, !"primal"}
!1073 = distinct !{!1073, !" diff: %lhs"}
!1074 = !{!1075}
!1075 = distinct !{!1075, !1073, !"shadow_0"}
!1076 = distinct !{}
!1077 = !{!1078}
!1078 = distinct !{!1078, !1079, !"primal"}
!1079 = distinct !{!1079, !" diff: %rhs"}
!1080 = !{!1081}
!1081 = distinct !{!1081, !1079, !"shadow_0"}
!1082 = distinct !{}
!1083 = distinct !{}
!1084 = !{!1085}
!1085 = distinct !{!1085, !1086, !"shadow_0"}
!1086 = distinct !{!1086, !" diff: %"}
!1087 = !{!1088}
!1088 = distinct !{!1088, !1086, !"primal"}
!1089 = distinct !{}
!1090 = distinct !{}
!1091 = distinct !{}
!1092 = distinct !{}
!1093 = !{!1094}
!1094 = distinct !{!1094, !1095, !"shadow_0"}
!1095 = distinct !{!1095, !" diff: %"}
!1096 = !{!1097}
!1097 = distinct !{!1097, !1095, !"primal"}
!1098 = distinct !{}
!1099 = !{!1100}
!1100 = distinct !{!1100, !1101, !"shadow_0"}
!1101 = distinct !{!1101, !" diff: %"}
!1102 = !{!1103}
!1103 = distinct !{!1103, !1101, !"primal"}
!1104 = distinct !{}
!1105 = distinct !{}
!1106 = distinct !{}
!1107 = !{!1108}
!1108 = distinct !{!1108, !1109, !"primal"}
!1109 = distinct !{!1109, !" diff: %lhs"}
!1110 = !{!1111}
!1111 = distinct !{!1111, !1109, !"shadow_0"}
!1112 = distinct !{}
!1113 = !{!1114}
!1114 = distinct !{!1114, !1115, !"primal"}
!1115 = distinct !{!1115, !" diff: %rhs"}
!1116 = !{!1117}
!1117 = distinct !{!1117, !1115, !"shadow_0"}
!1118 = distinct !{}
!1119 = !{!1120}
!1120 = distinct !{!1120, !1121, !"shadow_0"}
!1121 = distinct !{!1121, !" diff: %out"}
!1122 = !{!1123}
!1123 = distinct !{!1123, !1121, !"primal"}
!1124 = distinct !{}
!1125 = !{!1126}
!1126 = distinct !{!1126, !1127, !"shadow_0"}
!1127 = distinct !{!1127, !" diff: %"}
!1128 = !{!1129}
!1129 = distinct !{!1129, !1127, !"primal"}
!1130 = distinct !{}
!1131 = distinct !{}
!1132 = distinct !{}
!1133 = distinct !{}
!1134 = !{!1135}
!1135 = distinct !{!1135, !1136, !"shadow_0"}
!1136 = distinct !{!1136, !" diff: %"}
!1137 = !{!1138}
!1138 = distinct !{!1138, !1136, !"primal"}
!1139 = distinct !{}
!1140 = !{!1141}
!1141 = distinct !{!1141, !1142, !"shadow_0"}
!1142 = distinct !{!1142, !" diff: %"}
!1143 = !{!1144}
!1144 = distinct !{!1144, !1142, !"primal"}
!1145 = distinct !{}
!1146 = distinct !{}
!1147 = distinct !{}
!1148 = !{!1149}
!1149 = distinct !{!1149, !1150, !"primal"}
!1150 = distinct !{!1150, !" diff: %rhs"}
!1151 = !{!1152}
!1152 = distinct !{!1152, !1150, !"shadow_0"}
!1153 = distinct !{}
!1154 = distinct !{}
!1155 = !{!1156}
!1156 = distinct !{!1156, !1157, !"shadow_0"}
!1157 = distinct !{!1157, !" diff: %"}
!1158 = !{!1159}
!1159 = distinct !{!1159, !1157, !"primal"}
!1160 = distinct !{}
!1161 = distinct !{}
!1162 = distinct !{}
!1163 = !{!1164}
!1164 = distinct !{!1164, !1165, !"shadow_0"}
!1165 = distinct !{!1165, !" diff: %"}
!1166 = !{!1167}
!1167 = distinct !{!1167, !1165, !"primal"}
!1168 = distinct !{}
!1169 = distinct !{}
!1170 = !{!1171}
!1171 = distinct !{!1171, !1172, !"primal"}
!1172 = distinct !{!1172, !" diff: %lhs"}
!1173 = !{!1174}
!1174 = distinct !{!1174, !1172, !"shadow_0"}
!1175 = distinct !{}
!1176 = distinct !{}
!1177 = !{!1178}
!1178 = distinct !{!1178, !1179, !"shadow_0"}
!1179 = distinct !{!1179, !" diff: %"}
!1180 = !{!1181}
!1181 = distinct !{!1181, !1179, !"primal"}
!1182 = distinct !{}
!1183 = distinct !{}
!1184 = !{!1185}
!1185 = distinct !{!1185, !1186, !"shadow_0"}
!1186 = distinct !{!1186, !" diff: %"}
!1187 = !{!1188}
!1188 = distinct !{!1188, !1186, !"primal"}
!1189 = distinct !{}
!1190 = distinct !{}
!1191 = !{!1192}
!1192 = distinct !{!1192, !1193, !"primal"}
!1193 = distinct !{!1193, !" diff: %lhs"}
!1194 = !{!1195}
!1195 = distinct !{!1195, !1193, !"shadow_0"}
!1196 = distinct !{}
!1197 = !{!1198}
!1198 = distinct !{!1198, !1199, !"primal"}
!1199 = distinct !{!1199, !" diff: %rhs"}
!1200 = !{!1201}
!1201 = distinct !{!1201, !1199, !"shadow_0"}
!1202 = distinct !{}
!1203 = distinct !{}
!1204 = !{!1205}
!1205 = distinct !{!1205, !1206, !"shadow_0"}
!1206 = distinct !{!1206, !" diff: %"}
!1207 = !{!1208}
!1208 = distinct !{!1208, !1206, !"primal"}
!1209 = distinct !{}
!1210 = distinct !{}
!1211 = !{!1212}
!1212 = distinct !{!1212, !1213, !"shadow_0"}
!1213 = distinct !{!1213, !" diff: %"}
!1214 = !{!1215}
!1215 = distinct !{!1215, !1213, !"primal"}
!1216 = distinct !{}
!1217 = distinct !{}
!1218 = !{!1219}
!1219 = distinct !{!1219, !1220, !"primal"}
!1220 = distinct !{!1220, !" diff: %lhs"}
!1221 = !{!1222}
!1222 = distinct !{!1222, !1220, !"shadow_0"}
!1223 = distinct !{}
!1224 = !{!1225}
!1225 = distinct !{!1225, !1226, !"shadow_0"}
!1226 = distinct !{!1226, !" diff: %call.i"}
!1227 = !{!1228}
!1228 = distinct !{!1228, !1226, !"primal"}
!1229 = !{!1230}
!1230 = distinct !{!1230, !1231, !"primal"}
!1231 = distinct !{!1231, !" diff: %positions"}
!1232 = !{!1233}
!1233 = distinct !{!1233, !1231, !"shadow_0"}
!1234 = distinct !{}
!1235 = !{!1236}
!1236 = distinct !{!1236, !1237, !"shadow_0"}
!1237 = distinct !{!1237, !" diff: %call4.i"}
!1238 = !{!1239}
!1239 = distinct !{!1239, !1237, !"primal"}
!1240 = distinct !{}
!1241 = distinct !{}
!1242 = !{!1243}
!1243 = distinct !{!1243, !1244, !"shadow_0"}
!1244 = distinct !{!1244, !" diff: %"}
!1245 = !{!1246}
!1246 = distinct !{!1246, !1244, !"primal"}
!1247 = distinct !{}
!1248 = !{!1249}
!1249 = distinct !{!1249, !1250, !"shadow_0"}
!1250 = distinct !{!1250, !" diff: %"}
!1251 = !{!1252}
!1252 = distinct !{!1252, !1250, !"primal"}
!1253 = !{!1254}
!1254 = distinct !{!1254, !1255, !"shadow_0"}
!1255 = distinct !{!1255, !" diff: %pose_params"}
!1256 = !{!1257}
!1257 = distinct !{!1257, !1255, !"primal"}
!1258 = distinct !{}
!1259 = distinct !{}
!1260 = !{!1261}
!1261 = distinct !{!1261, !1262, !"shadow_0"}
!1262 = distinct !{!1262, !" diff: %"}
!1263 = !{!1264}
!1264 = distinct !{!1264, !1262, !"primal"}
!1265 = !{!1266}
!1266 = distinct !{!1266, !1267, !"shadow_0"}
!1267 = distinct !{!1267, !" diff: %call.i81"}
!1268 = !{!1269}
!1269 = distinct !{!1269, !1267, !"primal"}
!1270 = distinct !{}
!1271 = distinct !{}
!1272 = !{!1273}
!1273 = distinct !{!1273, !1274, !"shadow_0"}
!1274 = distinct !{!1274, !" diff: %"}
!1275 = !{!1276}
!1276 = distinct !{!1276, !1274, !"primal"}
!1277 = distinct !{}
!1278 = !{!1279}
!1279 = distinct !{!1279, !1280, !"primal"}
!1280 = distinct !{!1280, !" diff: %R"}
!1281 = !{!1282}
!1282 = distinct !{!1282, !1280, !"shadow_0"}
!1283 = distinct !{}
!1284 = distinct !{}
!1285 = !{!1286}
!1286 = distinct !{!1286, !1287, !"shadow_0"}
!1287 = distinct !{!1287, !" diff: %angle_axis"}
!1288 = !{!1289}
!1289 = distinct !{!1289, !1287, !"primal"}
!1290 = distinct !{}
!1291 = !{!1292}
!1292 = distinct !{!1292, !1293, !"shadow_0"}
!1293 = distinct !{!1293, !" diff: %"}
!1294 = !{!1295}
!1295 = distinct !{!1295, !1293, !"primal"}
!1296 = distinct !{}
!1297 = !{!1298}
!1298 = distinct !{!1298, !1299, !"shadow_0"}
!1299 = distinct !{!1299, !" diff: %"}
!1300 = !{!1301}
!1301 = distinct !{!1301, !1299, !"primal"}
!1302 = !{!1303}
!1303 = distinct !{!1303, !1304, !"primal"}
!1304 = distinct !{!1304, !" diff: %lhs"}
!1305 = !{!1306}
!1306 = distinct !{!1306, !1304, !"shadow_0"}
!1307 = distinct !{}
!1308 = !{!1309}
!1309 = distinct !{!1309, !1310, !"primal"}
!1310 = distinct !{!1310, !" diff: %rhs"}
!1311 = !{!1312}
!1312 = distinct !{!1312, !1310, !"shadow_0"}
!1313 = distinct !{}
!1314 = !{!1315}
!1315 = distinct !{!1315, !1316, !"shadow_0"}
!1316 = distinct !{!1316, !" diff: %out"}
!1317 = !{!1318}
!1318 = distinct !{!1318, !1316, !"primal"}
!1319 = distinct !{}
!1320 = !{!1321}
!1321 = distinct !{!1321, !1322, !"shadow_0"}
!1322 = distinct !{!1322, !" diff: %"}
!1323 = !{!1324}
!1324 = distinct !{!1324, !1322, !"primal"}
!1325 = distinct !{}
!1326 = distinct !{}
!1327 = distinct !{}
!1328 = distinct !{}
!1329 = !{!1330}
!1330 = distinct !{!1330, !1331, !"shadow_0"}
!1331 = distinct !{!1331, !" diff: %"}
!1332 = !{!1333}
!1333 = distinct !{!1333, !1331, !"primal"}
!1334 = distinct !{}
!1335 = !{!1336}
!1336 = distinct !{!1336, !1337, !"shadow_0"}
!1337 = distinct !{!1337, !" diff: %"}
!1338 = !{!1339}
!1339 = distinct !{!1339, !1337, !"primal"}
!1340 = distinct !{}
!1341 = distinct !{}
!1342 = distinct !{}
!1343 = !{!1344}
!1344 = distinct !{!1344, !1345, !"primal"}
!1345 = distinct !{!1345, !" diff: %pose_params"}
!1346 = !{!1347}
!1347 = distinct !{!1347, !1345, !"shadow_0"}
!1348 = !{!1349}
!1349 = distinct !{!1349, !1350, !"primal"}
!1350 = distinct !{!1350, !" diff: %"}
!1351 = !{!1352}
!1352 = distinct !{!1352, !1350, !"shadow_0"}
!1353 = !{!1354}
!1354 = distinct !{!1354, !1355, !"primal"}
!1355 = distinct !{!1355, !" diff: %theta"}
!1356 = !{!1357}
!1357 = distinct !{!1357, !1355, !"shadow_0"}
!1358 = distinct !{}
!1359 = !{!1360}
!1360 = distinct !{!1360, !1361, !"primal"}
!1361 = distinct !{!1361, !" diff: %"}
!1362 = !{!1363}
!1363 = distinct !{!1363, !1361, !"shadow_0"}
!1364 = distinct !{}
!1365 = !{!1366}
!1366 = distinct !{!1366, !1367, !"shadow_0"}
!1367 = distinct !{!1367, !" diff: %pose_params"}
!1368 = !{!1369}
!1369 = distinct !{!1369, !1367, !"primal"}
!1370 = !{!1371}
!1371 = distinct !{!1371, !1372, !"shadow_0"}
!1372 = distinct !{!1372, !" diff: %"}
!1373 = !{!1374}
!1374 = distinct !{!1374, !1372, !"primal"}
!1375 = !{!1376}
!1376 = distinct !{!1376, !1377, !"shadow_0"}
!1377 = distinct !{!1377, !" diff: %theta"}
!1378 = !{!1379}
!1379 = distinct !{!1379, !1377, !"primal"}
!1380 = distinct !{}
!1381 = !{!1382}
!1382 = distinct !{!1382, !1383, !"shadow_0"}
!1383 = distinct !{!1383, !" diff: %"}
!1384 = !{!1385}
!1385 = distinct !{!1385, !1383, !"primal"}
!1386 = distinct !{}
!1387 = !{!1388}
!1388 = distinct !{!1388, !1389, !"primal"}
!1389 = distinct !{!1389, !" diff: %call.i84"}
!1390 = !{!1391}
!1391 = distinct !{!1391, !1389, !"shadow_0"}
!1392 = distinct !{}
!1393 = !{!1394}
!1394 = distinct !{}
!1395 = !{!1396}
!1396 = distinct !{}
!1397 = !{!1398}
!1398 = distinct !{}
!1399 = !{!1400}
!1400 = distinct !{}
!1401 = !{!1402}
!1402 = distinct !{}
!1403 = !{!1404}
!1404 = distinct !{!1404, !1405, !"primal"}
!1405 = distinct !{!1405, !" diff: %correspondences"}
!1406 = !{!1407}
!1407 = distinct !{!1407, !1405, !"shadow_0"}
!1408 = distinct !{}
!1409 = !{!1410}
!1410 = distinct !{!1410, !1411, !"primal"}
!1411 = distinct !{!1411, !" diff: %triangles"}
!1412 = !{!1413}
!1413 = distinct !{!1413, !1411, !"shadow_0"}
!1414 = distinct !{}
!1415 = distinct !{}
!1416 = distinct !{}
!1417 = !{!1418}
!1418 = distinct !{!1418, !1419, !"primal"}
!1419 = distinct !{!1419, !" diff: %us"}
!1420 = !{!1421}
!1421 = distinct !{!1421, !1419, !"shadow_0"}
!1422 = distinct !{}
!1423 = !{!1424}
!1424 = distinct !{!1424, !1425, !"primal"}
!1425 = distinct !{!1425, !" diff: %"}
!1426 = !{!1427}
!1427 = distinct !{!1427, !1425, !"shadow_0"}
!1428 = distinct !{}
!1429 = distinct !{}
!1430 = distinct !{}
!1431 = distinct !{}
!1432 = !{!1433}
!1433 = distinct !{!1433, !1434, !"shadow_0"}
!1434 = distinct !{!1434, !" diff: %err"}
!1435 = !{!1436}
!1436 = distinct !{!1436, !1434, !"primal"}
!1437 = distinct !{}
!1438 = !{!1439}
!1439 = distinct !{!1439, !1440, !"primal"}
!1440 = distinct !{!1440, !" diff: %lhs"}
!1441 = !{!1442}
!1442 = distinct !{!1442, !1440, !"shadow_0"}
!1443 = !{!1444}
!1444 = distinct !{!1444, !1445, !"primal"}
!1445 = distinct !{!1445, !" diff: %rhs"}
!1446 = !{!1447}
!1447 = distinct !{!1447, !1445, !"shadow_0"}
!1448 = !{!1449}
!1449 = distinct !{!1449, !1450, !"primal"}
!1450 = distinct !{!1450, !" diff: %out"}
!1451 = !{!1452}
!1452 = distinct !{!1452, !1450, !"shadow_0"}
!1453 = distinct !{}
!1454 = distinct !{}
!1455 = distinct !{}
!1456 = !{!1457}
!1457 = distinct !{!1457, !1458, !"primal"}
!1458 = distinct !{!1458, !" diff: %"}
!1459 = !{!1460}
!1460 = distinct !{!1460, !1458, !"shadow_0"}
!1461 = !{!1462}
!1462 = distinct !{!1462, !1463, !"primal"}
!1463 = distinct !{!1463, !" diff: %"}
!1464 = !{!1465}
!1465 = distinct !{!1465, !1463, !"shadow_0"}
!1466 = !{!1467}
!1467 = distinct !{!1467, !1468, !"primal"}
!1468 = distinct !{!1468, !" diff: %"}
!1469 = !{!1470}
!1470 = distinct !{!1470, !1468, !"shadow_0"}
!1471 = distinct !{}
!1472 = distinct !{}
!1473 = distinct !{}
!1474 = !{!1475}
!1475 = distinct !{!1475, !1476, !"primal"}
!1476 = distinct !{!1476, !" diff: %lhs"}
!1477 = !{!1478}
!1478 = distinct !{!1478, !1476, !"shadow_0"}
!1479 = !{!1480}
!1480 = distinct !{!1480, !1481, !"primal"}
!1481 = distinct !{!1481, !" diff: %rhs"}
!1482 = !{!1483}
!1483 = distinct !{!1483, !1481, !"shadow_0"}
!1484 = !{!1485}
!1485 = distinct !{!1485, !1486, !"primal"}
!1486 = distinct !{!1486, !" diff: %out"}
!1487 = !{!1488}
!1488 = distinct !{!1488, !1486, !"shadow_0"}
!1489 = distinct !{}
!1490 = distinct !{}
!1491 = distinct !{}
!1492 = !{!1493}
!1493 = distinct !{!1493, !1494, !"primal"}
!1494 = distinct !{!1494, !" diff: %"}
!1495 = !{!1496}
!1496 = distinct !{!1496, !1494, !"shadow_0"}
!1497 = !{!1498}
!1498 = distinct !{!1498, !1499, !"primal"}
!1499 = distinct !{!1499, !" diff: %"}
!1500 = !{!1501}
!1501 = distinct !{!1501, !1499, !"shadow_0"}
!1502 = !{!1503}
!1503 = distinct !{!1503, !1504, !"primal"}
!1504 = distinct !{!1504, !" diff: %"}
!1505 = !{!1506}
!1506 = distinct !{!1506, !1504, !"shadow_0"}
!1507 = distinct !{}
!1508 = distinct !{}
!1509 = distinct !{}
!1510 = distinct !{}
!1511 = !{!1512}
!1512 = distinct !{!1512, !1513, !"shadow_0"}
!1513 = distinct !{!1513, !" diff: %call.i"}
!1514 = !{!1515}
!1515 = distinct !{!1515, !1513, !"primal"}
!1516 = !{!1517}
!1517 = distinct !{!1517, !1518, !"shadow_0"}
!1518 = distinct !{!1518, !" diff: %pose_params"}
!1519 = !{!1520}
!1520 = distinct !{!1520, !1518, !"primal"}
!1521 = !{!1522}
!1522 = distinct !{!1522, !1523, !"primal"}
!1523 = distinct !{!1523, !" diff: %"}
!1524 = !{!1525}
!1525 = distinct !{!1525, !1523, !"shadow_0"}
!1526 = !{!1527}
!1527 = distinct !{!1527, !1528, !"primal"}
!1528 = distinct !{!1528, !" diff: %call4.i"}
!1529 = !{!1530}
!1530 = distinct !{!1530, !1528, !"shadow_0"}
!1531 = distinct !{}
!1532 = distinct !{}
!1533 = !{!1534}
!1534 = distinct !{!1534, !1535, !"primal"}
!1535 = distinct !{!1535, !" diff: %positions"}
!1536 = !{!1537}
!1537 = distinct !{!1537, !1535, !"shadow_0"}
!1538 = !{!1539}
!1539 = distinct !{!1539, !1540, !"primal"}
!1540 = distinct !{!1540, !" diff: %call.i81"}
!1541 = !{!1542}
!1542 = distinct !{!1542, !1540, !"shadow_0"}
!1543 = distinct !{}
!1544 = distinct !{}
!1545 = distinct !{}
!1546 = !{!1547}
!1547 = distinct !{!1547, !1548, !"primal"}
!1548 = distinct !{!1548, !" diff: %"}
!1549 = !{!1550}
!1550 = distinct !{!1550, !1548, !"shadow_0"}
!1551 = !{!1552}
!1552 = distinct !{!1552, !1553, !"primal"}
!1553 = distinct !{!1553, !" diff: %"}
!1554 = !{!1555}
!1555 = distinct !{!1555, !1553, !"shadow_0"}
!1556 = !{!1557}
!1557 = distinct !{!1557, !1558, !"primal"}
!1558 = distinct !{!1558, !" diff: %"}
!1559 = !{!1560}
!1560 = distinct !{!1560, !1558, !"shadow_0"}
!1561 = distinct !{}
!1562 = !{!1563}
!1563 = distinct !{!1563, !1564, !"primal"}
!1564 = distinct !{!1564, !" diff: %base_positions"}
!1565 = !{!1566}
!1566 = distinct !{!1566, !1564, !"shadow_0"}
!1567 = !{!1568}
!1568 = distinct !{!1568, !1569, !"primal"}
!1569 = distinct !{!1569, !" diff: %positions"}
!1570 = !{!1571}
!1571 = distinct !{!1571, !1569, !"shadow_0"}
!1572 = !{!1573}
!1573 = distinct !{!1573, !1574, !"shadow_0"}
!1574 = distinct !{!1574, !" diff: %call.i16"}
!1575 = !{!1576}
!1576 = distinct !{!1576, !1574, !"primal"}
!1577 = distinct !{}
!1578 = !{!1579}
!1579 = distinct !{!1579, !1580, !"primal"}
!1580 = distinct !{!1580, !" diff: %weights"}
!1581 = !{!1582}
!1582 = distinct !{!1582, !1580, !"shadow_0"}
!1583 = distinct !{}
!1584 = distinct !{}
!1585 = distinct !{}
!1586 = !{!1587}
!1587 = distinct !{!1587, !1588, !"primal"}
!1588 = distinct !{!1588, !" diff: %"}
!1589 = !{!1590}
!1590 = distinct !{!1590, !1588, !"shadow_0"}
!1591 = !{!1592}
!1592 = distinct !{!1592, !1593, !"primal"}
!1593 = distinct !{!1593, !" diff: %"}
!1594 = !{!1595}
!1595 = distinct !{!1595, !1593, !"shadow_0"}
!1596 = !{!1597}
!1597 = distinct !{!1597, !1598, !"primal"}
!1598 = distinct !{!1598, !" diff: %"}
!1599 = !{!1600}
!1600 = distinct !{!1600, !1598, !"shadow_0"}
!1601 = distinct !{}
!1602 = !{!1603}
!1603 = distinct !{!1603, !1604, !"primal"}
!1604 = distinct !{!1604, !" diff: %"}
!1605 = !{!1606}
!1606 = distinct !{!1606, !1604, !"shadow_0"}
!1607 = distinct !{}
!1608 = !{!1609}
!1609 = distinct !{!1609, !1610, !"primal"}
!1610 = distinct !{!1610, !" diff: %call.i"}
!1611 = !{!1612}
!1612 = distinct !{!1612, !1610, !"shadow_0"}
!1613 = distinct !{}
!1614 = !{!1615}
!1615 = distinct !{!1615, !1616, !"primal"}
!1616 = distinct !{!1616, !" diff: %call.i36064"}
!1617 = !{!1618}
!1618 = distinct !{!1618, !1616, !"shadow_0"}
!1619 = distinct !{}
!1620 = !{!1621}
!1621 = distinct !{!1621, !1622, !"primal"}
!1622 = distinct !{!1622, !" diff: %call.i966"}
!1623 = !{!1624}
!1624 = distinct !{!1624, !1622, !"shadow_0"}
!1625 = distinct !{}
!1626 = distinct !{}
!1627 = distinct !{}
!1628 = distinct !{}
!1629 = !{!1630}
!1630 = distinct !{!1630, !1631, !"shadow_0"}
!1631 = distinct !{!1631, !" diff: %"}
!1632 = !{!1633}
!1633 = distinct !{!1633, !1631, !"primal"}
!1634 = distinct !{}
!1635 = distinct !{}
!1636 = !{!1637}
!1637 = distinct !{!1637, !1638, !"primal"}
!1638 = distinct !{!1638, !" diff: %call.i16"}
!1639 = !{!1640}
!1640 = distinct !{!1640, !1638, !"shadow_0"}
!1641 = distinct !{}
!1642 = !{!1643}
!1643 = distinct !{!1643, !1644, !"shadow_0"}
!1644 = distinct !{!1644, !" diff: %"}
!1645 = !{!1646}
!1646 = distinct !{!1646, !1644, !"primal"}
!1647 = !{!1648}
!1648 = distinct !{!1648, !1649, !"shadow_0"}
!1649 = distinct !{!1649, !" diff: %"}
!1650 = !{!1651}
!1651 = distinct !{!1651, !1649, !"primal"}
!1652 = distinct !{}
!1653 = !{!1654}
!1654 = distinct !{!1654, !1655, !"shadow_0"}
!1655 = distinct !{!1655, !" diff: %"}
!1656 = !{!1657}
!1657 = distinct !{!1657, !1655, !"primal"}
!1658 = distinct !{}
!1659 = distinct !{}
!1660 = !{!1661}
!1661 = distinct !{!1661, !1662, !"shadow_0"}
!1662 = distinct !{!1662, !" diff: %"}
!1663 = !{!1664}
!1664 = distinct !{!1664, !1662, !"primal"}
!1665 = distinct !{}
!1666 = distinct !{}
!1667 = !{!1668}
!1668 = distinct !{!1668, !1669, !"primal"}
!1669 = distinct !{!1669, !" diff: %lhs"}
!1670 = !{!1671}
!1671 = distinct !{!1671, !1669, !"shadow_0"}
!1672 = distinct !{}
!1673 = !{!1674}
!1674 = distinct !{!1674, !1675, !"shadow_0"}
!1675 = distinct !{!1675, !" diff: %call.i"}
!1676 = !{!1677}
!1677 = distinct !{!1677, !1675, !"primal"}
!1678 = !{!1679}
!1679 = distinct !{!1679, !1680, !"shadow_0"}
!1680 = distinct !{!1680, !" diff: %call4.i"}
!1681 = !{!1682}
!1682 = distinct !{!1682, !1680, !"primal"}
!1683 = distinct !{}
!1684 = distinct !{}
!1685 = !{!1686}
!1686 = distinct !{!1686, !1687, !"shadow_0"}
!1687 = distinct !{!1687, !" diff: %"}
!1688 = !{!1689}
!1689 = distinct !{!1689, !1687, !"primal"}
!1690 = distinct !{}
!1691 = !{!1692}
!1692 = distinct !{!1692, !1693, !"shadow_0"}
!1693 = distinct !{!1693, !" diff: %"}
!1694 = !{!1695}
!1695 = distinct !{!1695, !1693, !"primal"}
!1696 = distinct !{}
!1697 = distinct !{}
!1698 = !{!1699}
!1699 = distinct !{!1699, !1700, !"shadow_0"}
!1700 = distinct !{!1700, !" diff: %"}
!1701 = !{!1702}
!1702 = distinct !{!1702, !1700, !"primal"}
!1703 = !{!1704}
!1704 = distinct !{!1704, !1705, !"shadow_0"}
!1705 = distinct !{!1705, !" diff: %call.i81"}
!1706 = !{!1707}
!1707 = distinct !{!1707, !1705, !"primal"}
!1708 = distinct !{}
!1709 = distinct !{}
!1710 = !{!1711}
!1711 = distinct !{!1711, !1712, !"shadow_0"}
!1712 = distinct !{!1712, !" diff: %"}
!1713 = !{!1714}
!1714 = distinct !{!1714, !1712, !"primal"}
!1715 = !{!1716}
!1716 = distinct !{!1716, !1717, !"primal"}
!1717 = distinct !{!1717, !" diff: %lhs"}
!1718 = !{!1719}
!1719 = distinct !{!1719, !1717, !"shadow_0"}
!1720 = distinct !{}
!1721 = !{!1722}
!1722 = distinct !{!1722, !1723, !"shadow_0"}
!1723 = distinct !{!1723, !" diff: %out"}
!1724 = !{!1725}
!1725 = distinct !{!1725, !1723, !"primal"}
!1726 = distinct !{}
!1727 = !{!1728}
!1728 = distinct !{!1728, !1729, !"shadow_0"}
!1729 = distinct !{!1729, !" diff: %"}
!1730 = !{!1731}
!1731 = distinct !{!1731, !1729, !"primal"}
!1732 = distinct !{}
!1733 = distinct !{}
!1734 = distinct !{}
!1735 = !{!1736}
!1736 = distinct !{!1736, !1737, !"primal"}
!1737 = distinct !{!1737, !" diff: %rhs"}
!1738 = !{!1739}
!1739 = distinct !{!1739, !1737, !"shadow_0"}
!1740 = distinct !{}
!1741 = !{!1742}
!1742 = distinct !{!1742, !1743, !"shadow_0"}
!1743 = distinct !{!1743, !" diff: %"}
!1744 = !{!1745}
!1745 = distinct !{!1745, !1743, !"primal"}
!1746 = distinct !{}
!1747 = !{!1748}
!1748 = distinct !{!1748, !1749, !"shadow_0"}
!1749 = distinct !{!1749, !" diff: %"}
!1750 = !{!1751}
!1751 = distinct !{!1751, !1749, !"primal"}
!1752 = distinct !{}
!1753 = distinct !{}
!1754 = distinct !{}
!1755 = !{!1756}
!1756 = distinct !{!1756, !1757, !"primal"}
!1757 = distinct !{!1757, !" diff: %pose_params"}
!1758 = !{!1759}
!1759 = distinct !{!1759, !1757, !"shadow_0"}
!1760 = !{!1761}
!1761 = distinct !{!1761, !1762, !"primal"}
!1762 = distinct !{!1762, !" diff: %"}
!1763 = !{!1764}
!1764 = distinct !{!1764, !1762, !"shadow_0"}
!1765 = !{!1766}
!1766 = distinct !{!1766, !1767, !"primal"}
!1767 = distinct !{!1767, !" diff: %theta"}
!1768 = !{!1769}
!1769 = distinct !{!1769, !1767, !"shadow_0"}
!1770 = distinct !{}
!1771 = !{!1772}
!1772 = distinct !{!1772, !1773, !"primal"}
!1773 = distinct !{!1773, !" diff: %"}
!1774 = !{!1775}
!1775 = distinct !{!1775, !1773, !"shadow_0"}
!1776 = distinct !{}
!1777 = !{!1778}
!1778 = distinct !{!1778, !1779, !"shadow_0"}
!1779 = distinct !{!1779, !" diff: %"}
!1780 = !{!1781}
!1781 = distinct !{!1781, !1779, !"primal"}
!1782 = !{!1783}
!1783 = distinct !{!1783, !1784, !"shadow_0"}
!1784 = distinct !{!1784, !" diff: %theta"}
!1785 = !{!1786}
!1786 = distinct !{!1786, !1784, !"primal"}
!1787 = distinct !{}
!1788 = !{!1789}
!1789 = distinct !{!1789, !1790, !"shadow_0"}
!1790 = distinct !{!1790, !" diff: %"}
!1791 = !{!1792}
!1792 = distinct !{!1792, !1790, !"primal"}
!1793 = distinct !{}
